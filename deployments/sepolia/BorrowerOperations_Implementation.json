{
  "address": "0xa3671cd32acb1eab33cea877b31fd6a0eb67edfa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EthUnsupportedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmountError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "name": "BorrowingFeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "arrayIndex",
          "type": "uint256"
        }
      ],
      "name": "TrenBoxCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IBorrowerOperations.BorrowerOperation",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "TrenBoxUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_assetSent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "addColl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_assetSent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collWithdrawal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debtTokenChange",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isDebtIncrease",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "adjustTrenBox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "authorizeUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "claimCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "closeTrenBox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collSurplusPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityIssuance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        }
      ],
      "name": "getCompositeDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getEntireSystemColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemColl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getEntireSystemDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAddressSetupInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debtTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "openTrenBox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "repayDebtTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_communityIssuance",
          "type": "address"
        }
      ],
      "name": "setCommunityIssuance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trenStaking",
          "type": "address"
        }
      ],
      "name": "setTRENStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTrenBoxes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManagerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collWithdrawal",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "withdrawColl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "withdrawDebtTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x98134a3ddc8aa67b2e3455088f163026eb52db1ce2c3dbbd52c696c052e409e3",
  "receipt": {
    "to": null,
    "from": "0x19E733F20aAdaB8996f7895ACBD04f746BF4Aac1",
    "contractAddress": "0x6ea65995d4D70A37Bf3aCC22E16A979cEF1C837c",
    "transactionIndex": 56,
    "gasUsed": "4106675",
    "logsBloom": "0x
    "blockHash": "0xdf55abb578611e9ec7ef62c725bf6954a57dc2ce89c03851a37b3c33471f1357",
    "transactionHash": "0x98134a3ddc8aa67b2e3455088f163026eb52db1ce2c3dbbd52c696c052e409e3",
    "logs": [],
    "blockNumber": 5625485,
    "cumulativeGasUsed": "10364729",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e6971fb87a17deef3641f1719687e39f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EthUnsupportedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmountError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"BorrowingFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arrayIndex\",\"type\":\"uint256\"}],\"name\":\"TrenBoxCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IBorrowerOperations.BorrowerOperation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"TrenBoxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetSent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"addColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetSent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtTokenChange\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isDebtIncrease\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"adjustTrenBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"authorizeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"claimCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"closeTrenBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collSurplusPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityIssuance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"}],\"name\":\"getCompositeDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAddressSetupInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"openTrenBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"repayDebtTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityIssuance\",\"type\":\"address\"}],\"name\":\"setCommunityIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trenStaking\",\"type\":\"address\"}],\"name\":\"setTRENStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTrenBoxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManagerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawDebtTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimCollateral(address)\":{\"notice\":\"Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery Mode\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BorrowerOperations.sol\":\"BorrowerOperations\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"contracts/Addresses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { AddressesConfigurable } from \\\"./Dependencies/AddressesConfigurable.sol\\\";\\n\\ncontract Addresses is AddressesConfigurable { }\\n\",\"keccak256\":\"0xee6f0debf09164467fe0766a99b35a0c3f7837429bcc0d519cd6987b00e81b8c\",\"license\":\"MIT\"},\"contracts/BorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { UUPSUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { ReentrancyGuardUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport { TrenMath } from \\\"./Dependencies/TrenMath.sol\\\";\\nimport { TrenBase } from \\\"./Dependencies/TrenBase.sol\\\";\\nimport { SafetyTransfer } from \\\"./Dependencies/SafetyTransfer.sol\\\";\\n\\nimport { IDefaultPool } from \\\"./Interfaces/IDefaultPool.sol\\\";\\nimport { IPriceFeed } from \\\"./Interfaces/IPriceFeed.sol\\\";\\nimport { ISortedTrenBoxes } from \\\"./Interfaces/ISortedTrenBoxes.sol\\\";\\nimport { IActivePool } from \\\"./Interfaces/IActivePool.sol\\\";\\nimport { IAdminContract } from \\\"./Interfaces/IAdminContract.sol\\\";\\nimport { ITrenBoxManager } from \\\"./Interfaces/ITrenBoxManager.sol\\\";\\nimport { IBorrowerOperations } from \\\"./Interfaces/IBorrowerOperations.sol\\\";\\nimport { IDebtToken } from \\\"./Interfaces/IDebtToken.sol\\\";\\nimport { IFeeCollector } from \\\"./Interfaces/IFeeCollector.sol\\\";\\nimport { ICollSurplusPool } from \\\"./Interfaces/ICollSurplusPool.sol\\\";\\n\\nimport { Addresses } from \\\"./Addresses.sol\\\";\\n\\ncontract BorrowerOperations is\\n    TrenBase,\\n    ReentrancyGuardUpgradeable,\\n    UUPSUpgradeable,\\n    IBorrowerOperations\\n{\\n    using SafeERC20 for IERC20;\\n\\n    string public constant NAME = \\\"BorrowerOperations\\\";\\n\\n    // --- Connected contract declarations ---\\n\\n    /* --- Variable container structs  ---\\n\\n    Used to hold, return and assign variables inside a function, in order to avoid the error:\\n    \\\"CompilerError: Stack too deep\\\". */\\n\\n    struct LocalVariables_adjustTrenBox {\\n        address asset;\\n        bool isCollIncrease;\\n        uint256 price;\\n        uint256 collChange;\\n        uint256 netDebtChange;\\n        uint256 debt;\\n        uint256 coll;\\n        uint256 oldICR;\\n        uint256 newICR;\\n        uint256 newTCR;\\n        uint256 debtTokenFee;\\n        uint256 newDebt;\\n        uint256 newColl;\\n        uint256 stake;\\n    }\\n\\n    struct LocalVariables_openTrenBox {\\n        address asset;\\n        uint256 price;\\n        uint256 debtTokenFee;\\n        uint256 netDebt;\\n        uint256 compositeDebt;\\n        uint256 ICR;\\n        uint256 NICR;\\n        uint256 stake;\\n        uint256 arrayIndex;\\n    }\\n\\n    // --- Initializer ---\\n\\n    function initialize() public initializer {\\n        address initialOwner = _msgSender();\\n\\n        __Ownable_init(initialOwner);\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    // --- Borrower TrenBox Operations ---\\n\\n    function openTrenBox(\\n        address _asset,\\n        uint256 _assetAmount,\\n        uint256 _debtTokenAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external\\n        override\\n    {\\n        require(\\n            IAdminContract(adminContract).getIsActive(_asset),\\n            \\\"BorrowerOperations: Asset is not active\\\"\\n        );\\n        LocalVariables_openTrenBox memory vars;\\n        vars.asset = _asset;\\n\\n        vars.price = IPriceFeed(priceFeed).fetchPrice(vars.asset);\\n        bool isRecoveryMode = _checkRecoveryMode(vars.asset, vars.price);\\n\\n        _requireTrenBoxIsNotActive(vars.asset, msg.sender);\\n\\n        vars.netDebt = _debtTokenAmount;\\n\\n        if (!isRecoveryMode) {\\n            vars.debtTokenFee = _triggerBorrowingFee(vars.asset, _debtTokenAmount);\\n            vars.netDebt = vars.netDebt + vars.debtTokenFee;\\n        }\\n        _requireAtLeastMinNetDebt(vars.asset, vars.netDebt);\\n\\n        // ICR is based on the composite debt, i.e. the requested debt token amount + borrowing fee\\n        // + gas comp.\\n        uint256 gasCompensation =\\n            IAdminContract(adminContract).getDebtTokenGasCompensation(vars.asset);\\n        vars.compositeDebt = vars.netDebt + gasCompensation;\\n        require(vars.compositeDebt != 0, \\\"compositeDebt cannot be 0\\\");\\n\\n        vars.ICR = TrenMath._computeCR(_assetAmount, vars.compositeDebt, vars.price);\\n        vars.NICR = TrenMath._computeNominalCR(_assetAmount, vars.compositeDebt);\\n\\n        if (isRecoveryMode) {\\n            _requireICRisAboveCCR(vars.asset, vars.ICR);\\n        } else {\\n            _requireICRisAboveMCR(vars.asset, vars.ICR);\\n            uint256 newTCR = _getNewTCRFromTrenBoxChange(\\n                vars.asset, _assetAmount, true, vars.compositeDebt, true, vars.price\\n            ); // bools: coll increase, debt increase\\n            _requireNewTCRisAboveCCR(vars.asset, newTCR);\\n        }\\n\\n        // Set the trenBox struct's properties\\n        ITrenBoxManager(trenBoxManager).setTrenBoxStatus(vars.asset, msg.sender, 1);\\n\\n        ITrenBoxManager(trenBoxManager).increaseTrenBoxColl(vars.asset, msg.sender, _assetAmount);\\n        ITrenBoxManager(trenBoxManager).increaseTrenBoxDebt(\\n            vars.asset, msg.sender, vars.compositeDebt\\n        );\\n\\n        ITrenBoxManager(trenBoxManager).updateTrenBoxRewardSnapshots(vars.asset, msg.sender);\\n        vars.stake =\\n            ITrenBoxManager(trenBoxManager).updateStakeAndTotalStakes(vars.asset, msg.sender);\\n\\n        ISortedTrenBoxes(sortedTrenBoxes).insert(\\n            vars.asset, msg.sender, vars.NICR, _upperHint, _lowerHint\\n        );\\n        vars.arrayIndex =\\n            ITrenBoxManager(trenBoxManager).addTrenBoxOwnerToArray(vars.asset, msg.sender);\\n        emit TrenBoxCreated(vars.asset, msg.sender, vars.arrayIndex);\\n\\n        // Move the asset to the Active Pool, and mint the debtToken amount to the borrower\\n        _activePoolAddColl(vars.asset, _assetAmount);\\n        _withdrawDebtTokens(vars.asset, msg.sender, _debtTokenAmount, vars.netDebt);\\n        // Move the debtToken gas compensation to the Gas Pool\\n        if (gasCompensation != 0) {\\n            _withdrawDebtTokens(vars.asset, gasPoolAddress, gasCompensation, gasCompensation);\\n        }\\n\\n        emit TrenBoxUpdated(\\n            vars.asset,\\n            msg.sender,\\n            vars.compositeDebt,\\n            _assetAmount,\\n            vars.stake,\\n            BorrowerOperation.openTrenBox\\n        );\\n        emit BorrowingFeePaid(vars.asset, msg.sender, vars.debtTokenFee);\\n    }\\n\\n    // Send collateral to a trenBox\\n    function addColl(\\n        address _asset,\\n        uint256 _assetSent,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external\\n        override\\n        nonReentrant\\n    {\\n        _adjustTrenBox(_asset, _assetSent, msg.sender, 0, 0, false, _upperHint, _lowerHint);\\n    }\\n\\n    // Withdraw collateral from a trenBox\\n    function withdrawColl(\\n        address _asset,\\n        uint256 _collWithdrawal,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external\\n        override\\n        nonReentrant\\n    {\\n        _adjustTrenBox(_asset, 0, msg.sender, _collWithdrawal, 0, false, _upperHint, _lowerHint);\\n    }\\n\\n    // Withdraw debt tokens from a trenBox: mint new debt tokens to the owner, and increase the\\n    // trenBox's debt accordingly\\n    function withdrawDebtTokens(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external\\n        override\\n        nonReentrant\\n    {\\n        _adjustTrenBox(_asset, 0, msg.sender, 0, _debtTokenAmount, true, _upperHint, _lowerHint);\\n    }\\n\\n    // Repay debt tokens to a TrenBox: Burn the repaid debt tokens, and reduce the trenBox's debt\\n    // accordingly\\n    function repayDebtTokens(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external\\n        override\\n        nonReentrant\\n    {\\n        _adjustTrenBox(_asset, 0, msg.sender, 0, _debtTokenAmount, false, _upperHint, _lowerHint);\\n    }\\n\\n    function adjustTrenBox(\\n        address _asset,\\n        uint256 _assetSent,\\n        uint256 _collWithdrawal,\\n        uint256 _debtTokenChange,\\n        bool _isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external\\n        override\\n        nonReentrant\\n    {\\n        _adjustTrenBox(\\n            _asset,\\n            _assetSent,\\n            msg.sender,\\n            _collWithdrawal,\\n            _debtTokenChange,\\n            _isDebtIncrease,\\n            _upperHint,\\n            _lowerHint\\n        );\\n    }\\n\\n    /*\\n    * _adjustTrenBox(): Alongside a debt change, this function can perform either a collateral\\n    top-up\\n    or a collateral withdrawal.\\n     */\\n    function _adjustTrenBox(\\n        address _asset,\\n        uint256 _assetSent,\\n        address _borrower,\\n        uint256 _collWithdrawal,\\n        uint256 _debtTokenChange,\\n        bool _isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        internal\\n    {\\n        LocalVariables_adjustTrenBox memory vars;\\n        vars.asset = _asset;\\n        vars.price = IPriceFeed(priceFeed).fetchPrice(vars.asset);\\n        bool isRecoveryMode = _checkRecoveryMode(vars.asset, vars.price);\\n\\n        if (_isDebtIncrease) {\\n            _requireNonZeroDebtChange(_debtTokenChange);\\n        }\\n        _requireSingularCollChange(_collWithdrawal, _assetSent);\\n        _requireNonZeroAdjustment(_collWithdrawal, _debtTokenChange, _assetSent);\\n        _requireTrenBoxIsActive(vars.asset, _borrower);\\n\\n        // Confirm the operation is either a borrower adjusting their own trenBox, or a pure asset\\n        // transfer from the Stability Pool to a trenBox\\n        assert(\\n            msg.sender == _borrower\\n                || (stabilityPool == msg.sender && _assetSent != 0 && _debtTokenChange == 0)\\n        );\\n\\n        ITrenBoxManager(trenBoxManager).applyPendingRewards(vars.asset, _borrower);\\n\\n        // Get the collChange based on whether or not asset was sent in the transaction\\n        (vars.collChange, vars.isCollIncrease) = _getCollChange(_assetSent, _collWithdrawal);\\n\\n        vars.netDebtChange = _debtTokenChange;\\n\\n        // If the adjustment incorporates a debt increase and system is in Normal Mode, then trigger\\n        // a borrowing fee\\n        if (_isDebtIncrease && !isRecoveryMode) {\\n            vars.debtTokenFee = _triggerBorrowingFee(vars.asset, _debtTokenChange);\\n            vars.netDebtChange = vars.netDebtChange + vars.debtTokenFee; // The raw debt change\\n                // includes the fee\\n        }\\n\\n        vars.debt = ITrenBoxManager(trenBoxManager).getTrenBoxDebt(vars.asset, _borrower);\\n        vars.coll = ITrenBoxManager(trenBoxManager).getTrenBoxColl(vars.asset, _borrower);\\n\\n        // Get the trenBox's old ICR before the adjustment, and what its new ICR will be after the\\n        // adjustment\\n        vars.oldICR = TrenMath._computeCR(vars.coll, vars.debt, vars.price);\\n        vars.newICR = _getNewICRFromTrenBoxChange(\\n            vars.coll,\\n            vars.debt,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease,\\n            vars.price\\n        );\\n        require(_collWithdrawal <= vars.coll, \\\"BorrowerOps: bad _collWithdrawal\\\");\\n\\n        // Check the adjustment satisfies all conditions for the current system mode\\n        _requireValidAdjustmentInCurrentMode(\\n            vars.asset, isRecoveryMode, _collWithdrawal, _isDebtIncrease, vars\\n        );\\n\\n        // When the adjustment is a debt repayment, check it's a valid amount and that the caller\\n        // has enough debt tokens\\n        if (!_isDebtIncrease && _debtTokenChange != 0) {\\n            _requireAtLeastMinNetDebt(\\n                vars.asset, _getNetDebt(vars.asset, vars.debt) - vars.netDebtChange\\n            );\\n            _requireValidDebtTokenRepayment(vars.asset, vars.debt, vars.netDebtChange);\\n            _requireSufficientDebtTokenBalance(_borrower, vars.netDebtChange);\\n        }\\n\\n        (vars.newColl, vars.newDebt) = _updateTrenBoxFromAdjustment(\\n            vars.asset,\\n            _borrower,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease\\n        );\\n        vars.stake =\\n            ITrenBoxManager(trenBoxManager).updateStakeAndTotalStakes(vars.asset, _borrower);\\n\\n        // Re-insert trenBox in to the sorted list\\n        uint256 newNICR = _getNewNominalICRFromTrenBoxChange(\\n            vars.coll,\\n            vars.debt,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease\\n        );\\n        ISortedTrenBoxes(sortedTrenBoxes).reInsert(\\n            vars.asset, _borrower, newNICR, _upperHint, _lowerHint\\n        );\\n\\n        emit TrenBoxUpdated(\\n            vars.asset,\\n            _borrower,\\n            vars.newDebt,\\n            vars.newColl,\\n            vars.stake,\\n            BorrowerOperation.adjustTrenBox\\n        );\\n        emit BorrowingFeePaid(vars.asset, msg.sender, vars.debtTokenFee);\\n\\n        // Use the unmodified _debtTokenChange here, as we don't send the fee to the user\\n        _moveTokensFromAdjustment(\\n            vars.asset,\\n            msg.sender,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            _debtTokenChange,\\n            _isDebtIncrease,\\n            vars.netDebtChange\\n        );\\n    }\\n\\n    function closeTrenBox(address _asset) external override {\\n        _requireTrenBoxIsActive(_asset, msg.sender);\\n        uint256 price = IPriceFeed(priceFeed).fetchPrice(_asset);\\n        _requireNotInRecoveryMode(_asset, price);\\n\\n        ITrenBoxManager(trenBoxManager).applyPendingRewards(_asset, msg.sender);\\n\\n        uint256 coll = ITrenBoxManager(trenBoxManager).getTrenBoxColl(_asset, msg.sender);\\n        uint256 debt = ITrenBoxManager(trenBoxManager).getTrenBoxDebt(_asset, msg.sender);\\n\\n        uint256 gasCompensation = IAdminContract(adminContract).getDebtTokenGasCompensation(_asset);\\n        uint256 refund = IFeeCollector(feeCollector).simulateRefund(msg.sender, _asset, 1 ether);\\n        uint256 netDebt = debt - gasCompensation - refund;\\n\\n        _requireSufficientDebtTokenBalance(msg.sender, netDebt);\\n\\n        uint256 newTCR = _getNewTCRFromTrenBoxChange(_asset, coll, false, debt, false, price);\\n        _requireNewTCRisAboveCCR(_asset, newTCR);\\n\\n        ITrenBoxManager(trenBoxManager).removeStake(_asset, msg.sender);\\n        ITrenBoxManager(trenBoxManager).closeTrenBox(_asset, msg.sender);\\n\\n        emit TrenBoxUpdated(_asset, msg.sender, 0, 0, 0, BorrowerOperation.closeTrenBox);\\n\\n        // Burn the repaid debt tokens from the user's balance and the gas compensation from the Gas\\n        // Pool\\n        _repayDebtTokens(_asset, msg.sender, netDebt, refund);\\n        if (gasCompensation != 0) {\\n            _repayDebtTokens(_asset, gasPoolAddress, gasCompensation, 0);\\n        }\\n\\n        // Signal to the fee collector that debt has been paid in full\\n        IFeeCollector(feeCollector).closeDebt(msg.sender, _asset);\\n\\n        // Send the collateral back to the user\\n        IActivePool(activePool).sendAsset(_asset, msg.sender, coll);\\n    }\\n\\n    /**\\n     * Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery\\n     * Mode\\n     */\\n    function claimCollateral(address _asset) external override {\\n        // send asset from CollSurplusPool to owner\\n        ICollSurplusPool(collSurplusPool).claimColl(_asset, msg.sender);\\n    }\\n\\n    function _triggerBorrowingFee(\\n        address _asset,\\n        uint256 _debtTokenAmount\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 debtTokenFee =\\n            ITrenBoxManager(trenBoxManager).getBorrowingFee(_asset, _debtTokenAmount);\\n        IDebtToken(debtToken).mint(_asset, feeCollector, debtTokenFee);\\n        IFeeCollector(feeCollector).increaseDebt(msg.sender, _asset, debtTokenFee);\\n        return debtTokenFee;\\n    }\\n\\n    function _getUSDValue(uint256 _coll, uint256 _price) internal pure returns (uint256) {\\n        return (_price * _coll) / DECIMAL_PRECISION;\\n    }\\n\\n    function _getCollChange(\\n        uint256 _collReceived,\\n        uint256 _requestedCollWithdrawal\\n    )\\n        internal\\n        pure\\n        returns (uint256 collChange, bool isCollIncrease)\\n    {\\n        if (_collReceived != 0) {\\n            collChange = _collReceived;\\n            isCollIncrease = true;\\n        } else {\\n            collChange = _requestedCollWithdrawal;\\n        }\\n    }\\n\\n    // Update trenBox's coll and debt based on whether they increase or decrease\\n    function _updateTrenBoxFromAdjustment(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease\\n    )\\n        internal\\n        returns (uint256, uint256)\\n    {\\n        uint256 newColl = (_isCollIncrease)\\n            ? ITrenBoxManager(trenBoxManager).increaseTrenBoxColl(_asset, _borrower, _collChange)\\n            : ITrenBoxManager(trenBoxManager).decreaseTrenBoxColl(_asset, _borrower, _collChange);\\n        uint256 newDebt = (_isDebtIncrease)\\n            ? ITrenBoxManager(trenBoxManager).increaseTrenBoxDebt(_asset, _borrower, _debtChange)\\n            : ITrenBoxManager(trenBoxManager).decreaseTrenBoxDebt(_asset, _borrower, _debtChange);\\n\\n        return (newColl, newDebt);\\n    }\\n\\n    function _moveTokensFromAdjustment(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtTokenChange,\\n        bool _isDebtIncrease,\\n        uint256 _netDebtChange\\n    )\\n        internal\\n    {\\n        if (_isDebtIncrease) {\\n            _withdrawDebtTokens(_asset, _borrower, _debtTokenChange, _netDebtChange);\\n        } else {\\n            _repayDebtTokens(_asset, _borrower, _debtTokenChange, 0);\\n        }\\n        if (_isCollIncrease) {\\n            _activePoolAddColl(_asset, _collChange);\\n        } else {\\n            IActivePool(activePool).sendAsset(_asset, _borrower, _collChange);\\n        }\\n    }\\n\\n    // Send asset to Active Pool and increase its recorded asset balance\\n    function _activePoolAddColl(address _asset, uint256 _amount) internal {\\n        IActivePool(activePool).receivedERC20(_asset, _amount);\\n        IERC20(_asset).safeTransferFrom(\\n            msg.sender, activePool, SafetyTransfer.decimalsCorrection(_asset, _amount)\\n        );\\n    }\\n\\n    // Issue the specified amount of debt tokens to _account and increases the total active debt\\n    // (_netDebtIncrease potentially includes a debtTokenFee)\\n    function _withdrawDebtTokens(\\n        address _asset,\\n        address _account,\\n        uint256 _debtTokenAmount,\\n        uint256 _netDebtIncrease\\n    )\\n        internal\\n    {\\n        uint256 newTotalAssetDebt = IActivePool(activePool).getDebtTokenBalance(_asset)\\n            + IDefaultPool(defaultPool).getDebtTokenBalance(_asset) + _netDebtIncrease;\\n        require(\\n            newTotalAssetDebt <= IAdminContract(adminContract).getMintCap(_asset),\\n            \\\"Exceeds mint cap\\\"\\n        );\\n        IActivePool(activePool).increaseDebt(_asset, _netDebtIncrease);\\n        IDebtToken(debtToken).mint(_asset, _account, _debtTokenAmount);\\n    }\\n\\n    // Burn the specified amount of debt tokens from _account and decreases the total active debt\\n    function _repayDebtTokens(\\n        address _asset,\\n        address _account,\\n        uint256 _debtTokenAmount,\\n        uint256 _refund\\n    )\\n        internal\\n    {\\n        /// @dev the borrowing fee partial refund is accounted for when decreasing the debt, as it\\n        /// was included when trenBox was opened\\n        IActivePool(activePool).decreaseDebt(_asset, _debtTokenAmount + _refund);\\n        /// @dev the borrowing fee partial refund is not burned here, as it has already been burned\\n        /// by the FeeCollector\\n        IDebtToken(debtToken).burn(_account, _debtTokenAmount);\\n    }\\n\\n    // --- 'Require' wrapper functions ---\\n\\n    function _requireSingularCollChange(\\n        uint256 _collWithdrawal,\\n        uint256 _amountSent\\n    )\\n        internal\\n        pure\\n    {\\n        require(\\n            _collWithdrawal == 0 || _amountSent == 0,\\n            \\\"BorrowerOperations: Cannot withdraw and add coll\\\"\\n        );\\n    }\\n\\n    function _requireNonZeroAdjustment(\\n        uint256 _collWithdrawal,\\n        uint256 _debtTokenChange,\\n        uint256 _assetSent\\n    )\\n        internal\\n        pure\\n    {\\n        require(\\n            _collWithdrawal != 0 || _debtTokenChange != 0 || _assetSent != 0,\\n            \\\"BorrowerOps: There must be either a collateral change or a debt change\\\"\\n        );\\n    }\\n\\n    function _requireTrenBoxIsActive(address _asset, address _borrower) internal view {\\n        uint256 status = ITrenBoxManager(trenBoxManager).getTrenBoxStatus(_asset, _borrower);\\n        require(status == 1, \\\"BorrowerOps: TrenBox does not exist or is closed\\\");\\n    }\\n\\n    function _requireTrenBoxIsNotActive(address _asset, address _borrower) internal view {\\n        uint256 status = ITrenBoxManager(trenBoxManager).getTrenBoxStatus(_asset, _borrower);\\n        require(status != 1, \\\"BorrowerOps: TrenBox is active\\\");\\n    }\\n\\n    function _requireNonZeroDebtChange(uint256 _debtTokenChange) internal pure {\\n        require(_debtTokenChange != 0, \\\"BorrowerOps: Debt increase requires non-zero debtChange\\\");\\n    }\\n\\n    function _requireNotInRecoveryMode(address _asset, uint256 _price) internal view {\\n        require(\\n            !_checkRecoveryMode(_asset, _price),\\n            \\\"BorrowerOps: Operation not permitted during Recovery Mode\\\"\\n        );\\n    }\\n\\n    function _requireNoCollWithdrawal(uint256 _collWithdrawal) internal pure {\\n        require(\\n            _collWithdrawal == 0, \\\"BorrowerOps: Collateral withdrawal not permitted Recovery Mode\\\"\\n        );\\n    }\\n\\n    function _requireValidAdjustmentInCurrentMode(\\n        address _asset,\\n        bool _isRecoveryMode,\\n        uint256 _collWithdrawal,\\n        bool _isDebtIncrease,\\n        LocalVariables_adjustTrenBox memory _vars\\n    )\\n        internal\\n        view\\n    {\\n        /*\\n         * In Recovery Mode, only allow:\\n         *\\n         * - Pure collateral top-up\\n         * - Pure debt repayment\\n         * - Collateral top-up with debt repayment\\n        * - A debt increase combined with a collateral top-up which makes the ICR >= 150% and\\n        improves the ICR (and by extension improves the TCR).\\n         *\\n         * In Normal Mode, ensure:\\n         *\\n         * - The new ICR is above MCR\\n         * - The adjustment won't pull the TCR below CCR\\n         */\\n        if (_isRecoveryMode) {\\n            _requireNoCollWithdrawal(_collWithdrawal);\\n            if (_isDebtIncrease) {\\n                _requireICRisAboveCCR(_asset, _vars.newICR);\\n                _requireNewICRisAboveOldICR(_vars.newICR, _vars.oldICR);\\n            }\\n        } else {\\n            // if Normal Mode\\n            _requireICRisAboveMCR(_asset, _vars.newICR);\\n            _vars.newTCR = _getNewTCRFromTrenBoxChange(\\n                _asset,\\n                _vars.collChange,\\n                _vars.isCollIncrease,\\n                _vars.netDebtChange,\\n                _isDebtIncrease,\\n                _vars.price\\n            );\\n            _requireNewTCRisAboveCCR(_asset, _vars.newTCR);\\n        }\\n    }\\n\\n    function _requireICRisAboveMCR(address _asset, uint256 _newICR) internal view {\\n        require(\\n            _newICR >= IAdminContract(adminContract).getMcr(_asset),\\n            \\\"BorrowerOps: An operation that would result in ICR < MCR is not permitted\\\"\\n        );\\n    }\\n\\n    function _requireICRisAboveCCR(address _asset, uint256 _newICR) internal view {\\n        require(\\n            _newICR >= IAdminContract(adminContract).getCcr(_asset),\\n            \\\"BorrowerOps: Operation must leave trenBox with ICR >= CCR\\\"\\n        );\\n    }\\n\\n    function _requireNewICRisAboveOldICR(uint256 _newICR, uint256 _oldICR) internal pure {\\n        require(\\n            _newICR >= _oldICR, \\\"BorrowerOps: Cannot decrease your TrenBox's ICR in Recovery Mode\\\"\\n        );\\n    }\\n\\n    function _requireNewTCRisAboveCCR(address _asset, uint256 _newTCR) internal view {\\n        require(\\n            _newTCR >= IAdminContract(adminContract).getCcr(_asset),\\n            \\\"BorrowerOps: An operation that would result in TCR < CCR is not permitted\\\"\\n        );\\n    }\\n\\n    function _requireAtLeastMinNetDebt(address _asset, uint256 _netDebt) internal view {\\n        require(\\n            _netDebt >= IAdminContract(adminContract).getMinNetDebt(_asset),\\n            \\\"BorrowerOps: TrenBox's net debt must be greater than minimum\\\"\\n        );\\n    }\\n\\n    function _requireValidDebtTokenRepayment(\\n        address _asset,\\n        uint256 _currentDebt,\\n        uint256 _debtRepayment\\n    )\\n        internal\\n        view\\n    {\\n        require(\\n            _debtRepayment\\n                <= _currentDebt - IAdminContract(adminContract).getDebtTokenGasCompensation(_asset),\\n            \\\"BorrowerOps: Amount repaid must not be larger than the TrenBox's debt\\\"\\n        );\\n    }\\n\\n    function _requireSufficientDebtTokenBalance(\\n        address _borrower,\\n        uint256 _debtRepayment\\n    )\\n        internal\\n        view\\n    {\\n        require(\\n            IDebtToken(debtToken).balanceOf(_borrower) >= _debtRepayment,\\n            \\\"BorrowerOps: Caller doesnt have enough debt tokens to make repayment\\\"\\n        );\\n    }\\n\\n    // --- ICR and TCR getters ---\\n\\n    // Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending\\n    // rewards.\\n    function _getNewNominalICRFromTrenBoxChange(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        (uint256 newColl, uint256 newDebt) = _getNewTrenBoxAmounts(\\n            _coll, _debt, _collChange, _isCollIncrease, _debtChange, _isDebtIncrease\\n        );\\n\\n        uint256 newNICR = TrenMath._computeNominalCR(newColl, newDebt);\\n        return newNICR;\\n    }\\n\\n    // Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending\\n    // rewards.\\n    function _getNewICRFromTrenBoxChange(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease,\\n        uint256 _price\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        (uint256 newColl, uint256 newDebt) = _getNewTrenBoxAmounts(\\n            _coll, _debt, _collChange, _isCollIncrease, _debtChange, _isDebtIncrease\\n        );\\n\\n        uint256 newICR = TrenMath._computeCR(newColl, newDebt, _price);\\n        return newICR;\\n    }\\n\\n    function _getNewTrenBoxAmounts(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease\\n    )\\n        internal\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        uint256 newColl = _coll;\\n        uint256 newDebt = _debt;\\n\\n        newColl = _isCollIncrease ? _coll + _collChange : _coll - _collChange;\\n        newDebt = _isDebtIncrease ? _debt + _debtChange : _debt - _debtChange;\\n\\n        return (newColl, newDebt);\\n    }\\n\\n    function _getNewTCRFromTrenBoxChange(\\n        address _asset,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease,\\n        uint256 _price\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalColl = getEntireSystemColl(_asset);\\n        uint256 totalDebt = getEntireSystemDebt(_asset);\\n\\n        totalColl = _isCollIncrease ? totalColl + _collChange : totalColl - _collChange;\\n        totalDebt = _isDebtIncrease ? totalDebt + _debtChange : totalDebt - _debtChange;\\n\\n        uint256 newTCR = TrenMath._computeCR(totalColl, totalDebt, _price);\\n        return newTCR;\\n    }\\n\\n    function getCompositeDebt(\\n        address _asset,\\n        uint256 _debt\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _getCompositeDebt(_asset, _debt);\\n    }\\n\\n    function authorizeUpgrade(address newImplementation) public {\\n        _authorizeUpgrade(newImplementation);\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner { }\\n}\\n\",\"keccak256\":\"0x838bdd830d8849decbb19e4d22668172a2d0edf7b66f9d2d64509234b8d8867e\",\"license\":\"MIT\"},\"contracts/Dependencies/AddressesConfigurable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract AddressesConfigurable is OwnableUpgradeable {\\n    address public activePool;\\n    address public adminContract;\\n    address public borrowerOperations;\\n    address public collSurplusPool;\\n    address public communityIssuance;\\n    address public debtToken;\\n    address public defaultPool;\\n    address public feeCollector;\\n    address public gasPoolAddress;\\n    address public trenStaking;\\n    address public priceFeed;\\n    address public sortedTrenBoxes;\\n    address public stabilityPool;\\n    address public timelockAddress;\\n    address public treasuryAddress;\\n    address public trenBoxManager;\\n    address public trenBoxManagerOperations;\\n\\n    bool public isAddressSetupInitialized;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[33] private __gap; // Goerli uses 47; Arbitrum uses 33\\n\\n    // Dependency setters\\n    // -----------------------------------------------------------------------------------------------\\n\\n    function setAddresses(address[] calldata _addresses) external onlyOwner {\\n        require(!isAddressSetupInitialized, \\\"Setup is already initialized\\\");\\n        require(_addresses.length == 15, \\\"Expected 15 addresses at setup\\\");\\n        for (uint256 i = 0; i < 15; i++) {\\n            require(_addresses[i] != address(0), \\\"Invalid address\\\");\\n        }\\n        activePool = _addresses[0];\\n        adminContract = _addresses[1];\\n        borrowerOperations = _addresses[2];\\n        collSurplusPool = _addresses[3];\\n        debtToken = _addresses[4];\\n        defaultPool = _addresses[5];\\n        feeCollector = _addresses[6];\\n        gasPoolAddress = _addresses[7];\\n        priceFeed = _addresses[8];\\n        sortedTrenBoxes = _addresses[9];\\n        stabilityPool = _addresses[10];\\n        timelockAddress = _addresses[11];\\n        treasuryAddress = _addresses[12];\\n        trenBoxManager = _addresses[13];\\n        trenBoxManagerOperations = _addresses[14];\\n\\n        isAddressSetupInitialized = true;\\n    }\\n\\n    function setCommunityIssuance(address _communityIssuance) public onlyOwner {\\n        communityIssuance = _communityIssuance;\\n    }\\n\\n    function setTRENStaking(address _trenStaking) public onlyOwner {\\n        trenStaking = _trenStaking;\\n    }\\n}\\n\",\"keccak256\":\"0xd11d486cb2a0c07199b14176e64ad449567e453db4bccdb1d35a06bf732ccc4a\",\"license\":\"MIT\"},\"contracts/Dependencies/BaseMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nabstract contract BaseMath {\\n    uint256 public constant DECIMAL_PRECISION = 1 ether;\\n}\\n\",\"keccak256\":\"0xf57930536bdd0489378ca7488d73a53e6d357bb001511fe3ef8e0bd9bbfc7769\",\"license\":\"MIT\"},\"contracts/Dependencies/SafetyTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IERC20Decimals } from \\\"../Interfaces/IERC20Decimals.sol\\\";\\n\\nlibrary SafetyTransfer {\\n    error EthUnsupportedError();\\n    error InvalidAmountError();\\n\\n    //_amount is in ether (1e18) and we want to convert it to the token decimal\\n    function decimalsCorrection(address _token, uint256 _amount) internal view returns (uint256) {\\n        if (_token == address(0)) {\\n            revert EthUnsupportedError();\\n        }\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n        uint8 decimals = IERC20Decimals(_token).decimals();\\n        if (decimals < 18) {\\n            uint256 divisor = 10 ** (18 - decimals);\\n            if (_amount % divisor != 0) {\\n                revert InvalidAmountError();\\n            }\\n            return _amount / divisor;\\n        } else if (decimals > 18) {\\n            uint256 multiplier = 10 ** (decimals - 18);\\n            return _amount * multiplier;\\n        }\\n        return _amount;\\n    }\\n}\\n\",\"keccak256\":\"0x8661386c9ff583aa23a5edfcba5bef533877663018bcc8c626fb70d2090872cf\",\"license\":\"MIT\"},\"contracts/Dependencies/TrenBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { UUPSUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport { BaseMath } from \\\"./BaseMath.sol\\\";\\nimport { TrenMath } from \\\"./TrenMath.sol\\\";\\nimport { IActivePool } from \\\"../Interfaces/IActivePool.sol\\\";\\nimport { IDefaultPool } from \\\"../Interfaces/IDefaultPool.sol\\\";\\nimport { ITrenBase } from \\\"../Interfaces/ITrenBase.sol\\\";\\nimport { IAdminContract } from \\\"../Interfaces/IAdminContract.sol\\\";\\nimport { IDefaultPool } from \\\"../Interfaces/IDefaultPool.sol\\\";\\nimport { Addresses } from \\\"../Addresses.sol\\\";\\n\\n/*\\n* Base contract for TrenBoxManager, BorrowerOperations and StabilityPool. Contains global system\\nconstants and\\n * common functions.\\n */\\nabstract contract TrenBase is ITrenBase, BaseMath, OwnableUpgradeable, Addresses {\\n    // --- Gas compensation functions ---\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trenBox, for the purpose of\\n    // ICR calculation\\n    function _getCompositeDebt(address _asset, uint256 _debt) internal view returns (uint256) {\\n        return _debt + IAdminContract(adminContract).getDebtTokenGasCompensation(_asset);\\n    }\\n\\n    function _getNetDebt(address _asset, uint256 _debt) internal view returns (uint256) {\\n        return _debt - IAdminContract(adminContract).getDebtTokenGasCompensation(_asset);\\n    }\\n\\n    // Return the amount of ETH to be drawn from a trenBox's collateral and sent as gas\\n    // compensation.\\n    function _getCollGasCompensation(\\n        address _asset,\\n        uint256 _entireColl\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _entireColl / IAdminContract(adminContract).getPercentDivisor(_asset);\\n    }\\n\\n    function getEntireSystemColl(address _asset) public view returns (uint256 entireSystemColl) {\\n        uint256 activeColl = IActivePool(activePool).getAssetBalance(_asset);\\n        uint256 liquidatedColl = IDefaultPool(defaultPool).getAssetBalance(_asset);\\n        return activeColl + liquidatedColl;\\n    }\\n\\n    function getEntireSystemDebt(address _asset) public view returns (uint256 entireSystemDebt) {\\n        uint256 activeDebt = IActivePool(activePool).getDebtTokenBalance(_asset);\\n        uint256 closedDebt = IDefaultPool(defaultPool).getDebtTokenBalance(_asset);\\n        return activeDebt + closedDebt;\\n    }\\n\\n    function _getTCR(address _asset, uint256 _price) internal view returns (uint256 TCR) {\\n        uint256 entireSystemColl = getEntireSystemColl(_asset);\\n        uint256 entireSystemDebt = getEntireSystemDebt(_asset);\\n        TCR = TrenMath._computeCR(entireSystemColl, entireSystemDebt, _price);\\n    }\\n\\n    function _checkRecoveryMode(address _asset, uint256 _price) internal view returns (bool) {\\n        uint256 TCR = _getTCR(_asset, _price);\\n        return TCR < IAdminContract(adminContract).getCcr(_asset);\\n    }\\n\\n    function _requireUserAcceptsFee(\\n        uint256 _fee,\\n        uint256 _amount,\\n        uint256 _maxFeePercentage\\n    )\\n        internal\\n        view\\n    {\\n        uint256 feePercentage = (_fee * IAdminContract(adminContract).DECIMAL_PRECISION()) / _amount;\\n        require(feePercentage <= _maxFeePercentage, \\\"Fee exceeded provided maximum\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x01642c6bd97e4fc6dd2992c28e8ff029ed7a19f4d3404895cd95a91f76c0ad31\",\"license\":\"MIT\"},\"contracts/Dependencies/TrenMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nlibrary TrenMath {\\n    uint256 internal constant DECIMAL_PRECISION = 1 ether;\\n\\n    uint256 internal constant EXPONENT_CAP = 525_600_000;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n    * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity\\n    floor division.\\n     *\\n    * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39\\n    ETH,\\n    * and will only truncate to 0 if the denominator is at least 1e20 times greater than the\\n    numerator.\\n     *\\n     */\\n    uint256 internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /*\\n     * Multiply two decimal numbers and use normal rounding rules:\\n     * -round product up if 19'th mantissa digit >= 5\\n     * -round product down if 19'th mantissa digit < 5\\n     *\\n     * Used only inside the exponentiation, _decPow().\\n     */\\n    function decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\n        uint256 prod_xy = x * y;\\n\\n        decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\n    }\\n\\n    /*\\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n     *\\n     * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n     *\\n     * Called by two functions that represent time in units of minutes:\\n     * 1) TrenBoxManager._calcDecayedBaseRate\\n     * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n     *\\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n     * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n     *\\n    * If a period of > 1000 years is ever used as an exponent in either of the above functions, the\\n    result will be\\n     * negligibly different from just passing the cap, since:\\n     *\\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n    * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will\\n    be negligible\\n     */\\n    function _decPow(uint256 _base, uint256 _minutes) internal pure returns (uint256) {\\n        if (_minutes > EXPONENT_CAP) {\\n            _minutes = EXPONENT_CAP;\\n        } // cap to avoid overflow\\n\\n        if (_minutes == 0) {\\n            return DECIMAL_PRECISION;\\n        }\\n\\n        uint256 y = DECIMAL_PRECISION;\\n        uint256 x = _base;\\n        uint256 n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n / 2;\\n            } else {\\n                // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n - 1) / 2;\\n            }\\n        }\\n\\n        return decMul(x, y);\\n    }\\n\\n    function _getAbsoluteDifference(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a >= _b) ? _a - _b : _b - _a;\\n    }\\n\\n    function _computeNominalCR(uint256 _coll, uint256 _debt) internal pure returns (uint256) {\\n        if (_debt != 0) {\\n            return (_coll * NICR_PRECISION) / _debt;\\n        }\\n        // Return the maximal value for uint256 if the TrenBox has a debt of 0. Represents\\n        // \\\"infinite\\\"\\n        // CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n\\n    function _computeCR(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _price\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_debt != 0) {\\n            uint256 newCollRatio = (_coll * _price) / _debt;\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the TrenBox has a debt of 0. Represents\\n        // \\\"infinite\\\"\\n        // CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55e26ab7b17d50d12ad55d8a2c4a931535a8316d346da8d72d56841846cde527\",\"license\":\"MIT\"},\"contracts/Interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IPool } from \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n\\n    event ActivePoolDebtUpdated(address _asset, uint256 _debtTokenAmount);\\n    event ActivePoolAssetBalanceUpdated(address _asset, uint256 _balance);\\n\\n    // --- Functions ---\\n\\n    function sendAsset(address _asset, address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x24cd7bd86a150c9c6fe86f48dc36d1ce8619e98d839794293721a0262b02b342\",\"license\":\"MIT\"},\"contracts/Interfaces/IAdminContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IActivePool } from \\\"./IActivePool.sol\\\";\\nimport { IDefaultPool } from \\\"./IDefaultPool.sol\\\";\\nimport { IPriceFeed } from \\\"./IPriceFeed.sol\\\";\\n\\ninterface IAdminContract {\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    struct CollateralParams {\\n        uint256 decimals;\\n        uint256 index; // Maps to token address in validCollateral[]\\n        bool active;\\n        uint256 borrowingFee;\\n        uint256 ccr;\\n        uint256 mcr;\\n        uint256 debtTokenGasCompensation; // Amount of debtToken to be locked in gas pool on opening\\n            // trenBoxes\\n        uint256 minNetDebt; // Minimum amount of net debtToken a trenBox must have\\n        uint256 mintCap;\\n        uint256 percentDivisor;\\n        uint256 redemptionFeeFloor;\\n        uint256 redemptionBlockTimestamp;\\n    }\\n\\n    // Custom Errors\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    error SafeCheckError(string parameter, uint256 valueEntered, uint256 minValue, uint256 maxValue);\\n    error AdminContract__OnlyOwner();\\n    error AdminContract__OnlyTimelock();\\n    error AdminContract__CollateralAlreadyInitialized();\\n\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    event CollateralAdded(address _collateral);\\n    event MCRChanged(uint256 oldMCR, uint256 newMCR);\\n    event CCRChanged(uint256 oldCCR, uint256 newCCR);\\n    event MinNetDebtChanged(uint256 oldMinNet, uint256 newMinNet);\\n    event PercentDivisorChanged(uint256 oldPercentDiv, uint256 newPercentDiv);\\n    event BorrowingFeeChanged(uint256 oldBorrowingFee, uint256 newBorrowingFee);\\n    event RedemptionFeeFloorChanged(uint256 oldRedemptionFeeFloor, uint256 newRedemptionFeeFloor);\\n    event MintCapChanged(uint256 oldMintCap, uint256 newMintCap);\\n    event RedemptionBlockTimestampChanged(address _collateral, uint256 _blockTimestamp);\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    function DECIMAL_PRECISION() external view returns (uint256);\\n\\n    function _100pct() external view returns (uint256);\\n\\n    function addNewCollateral(\\n        address _collateral,\\n        uint256 _debtTokenGasCompensation,\\n        uint256 _decimals\\n    )\\n        external;\\n\\n    function setCollateralParameters(\\n        address _collateral,\\n        uint256 borrowingFee,\\n        uint256 ccr,\\n        uint256 mcr,\\n        uint256 minNetDebt,\\n        uint256 mintCap,\\n        uint256 percentDivisor,\\n        uint256 redemptionFeeFloor\\n    )\\n        external;\\n\\n    function setMCR(address _collateral, uint256 newMCR) external;\\n\\n    function setCCR(address _collateral, uint256 newCCR) external;\\n\\n    function setMinNetDebt(address _collateral, uint256 minNetDebt) external;\\n\\n    function setPercentDivisor(address _collateral, uint256 precentDivisor) external;\\n\\n    function setBorrowingFee(address _collateral, uint256 borrowingFee) external;\\n\\n    function setRedemptionFeeFloor(address _collateral, uint256 redemptionFeeFloor) external;\\n\\n    function setMintCap(address _collateral, uint256 mintCap) external;\\n\\n    function setRedemptionBlockTimestamp(address _collateral, uint256 _blockTimestamp) external;\\n\\n    function getIndex(address _collateral) external view returns (uint256);\\n\\n    function getIsActive(address _collateral) external view returns (bool);\\n\\n    function getValidCollateral() external view returns (address[] memory);\\n\\n    function getMcr(address _collateral) external view returns (uint256);\\n\\n    function getCcr(address _collateral) external view returns (uint256);\\n\\n    function getDebtTokenGasCompensation(address _collateral) external view returns (uint256);\\n\\n    function getMinNetDebt(address _collateral) external view returns (uint256);\\n\\n    function getPercentDivisor(address _collateral) external view returns (uint256);\\n\\n    function getBorrowingFee(address _collateral) external view returns (uint256);\\n\\n    function getRedemptionFeeFloor(address _collateral) external view returns (uint256);\\n\\n    function getRedemptionBlockTimestamp(address _collateral) external view returns (uint256);\\n\\n    function getMintCap(address _collateral) external view returns (uint256);\\n\\n    function getTotalAssetDebt(address _asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8284e5438e9411a75b0f2ca44f43fb946ee42aad11d548c9fff10de4aec7602f\",\"license\":\"MIT\"},\"contracts/Interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface IBorrowerOperations {\\n    // --- Enums ---\\n    enum BorrowerOperation {\\n        openTrenBox,\\n        closeTrenBox,\\n        adjustTrenBox\\n    }\\n\\n    // --- Events ---\\n\\n    event BorrowingFeePaid(address indexed _asset, address indexed _borrower, uint256 _feeAmount);\\n    event TrenBoxCreated(address indexed _asset, address indexed _borrower, uint256 arrayIndex);\\n    event TrenBoxUpdated(\\n        address indexed _asset,\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 stake,\\n        BorrowerOperation operation\\n    );\\n\\n    // --- Functions ---\\n\\n    function openTrenBox(\\n        address _asset,\\n        uint256 _assetAmount,\\n        uint256 _debtTokenAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external;\\n\\n    function addColl(\\n        address _asset,\\n        uint256 _assetSent,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external;\\n\\n    function withdrawColl(\\n        address _asset,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external;\\n\\n    function withdrawDebtTokens(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external;\\n\\n    function repayDebtTokens(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external;\\n\\n    function closeTrenBox(address _asset) external;\\n\\n    function adjustTrenBox(\\n        address _asset,\\n        uint256 _assetSent,\\n        uint256 _collWithdrawal,\\n        uint256 _debtChange,\\n        bool isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external;\\n\\n    function claimCollateral(address _asset) external;\\n\\n    function getCompositeDebt(address _asset, uint256 _debt) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9790073652b09a0adf0f81fdd3227b0330260934b671c83c1d657a3d5c818900\",\"license\":\"MIT\"},\"contracts/Interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IDeposit } from \\\"./IDeposit.sol\\\";\\n\\ninterface ICollSurplusPool is IDeposit {\\n    // --- Events ---\\n\\n    event CollBalanceUpdated(address indexed _account, uint256 _newBalance);\\n    event AssetSent(address _to, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function getAssetBalance(address _asset) external view returns (uint256);\\n\\n    function getCollateral(address _asset, address _account) external view returns (uint256);\\n\\n    function accountSurplus(address _asset, address _account, uint256 _amount) external;\\n\\n    function claimColl(address _asset, address _account) external;\\n}\\n\",\"keccak256\":\"0x47bd8cb30891e8dd1315b2b7b3a6e011de69dd67cf5bc6ff9fa732e1eda0552b\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStabilityPool } from \\\"./IStabilityPool.sol\\\";\\n\\ninterface IDebtToken is IERC20 {\\n    // --- Events ---\\n\\n    event TokenBalanceUpdated(address _user, uint256 _amount);\\n    event EmergencyStopMintingCollateral(address _asset, bool state);\\n    event WhitelistChanged(address _whitelisted, bool whitelisted);\\n\\n    function emergencyStopMinting(address _asset, bool status) external;\\n\\n    function mint(address _asset, address _account, uint256 _amount) external;\\n\\n    function mintFromWhitelistedContract(uint256 _amount) external;\\n\\n    function burnFromWhitelistedContract(uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function sendToPool(address _sender, address poolAddress, uint256 _amount) external;\\n\\n    function returnFromPool(address poolAddress, address user, uint256 _amount) external;\\n\\n    function addWhitelist(address _address) external;\\n\\n    function removeWhitelist(address _address) external;\\n}\\n\",\"keccak256\":\"0xf2e2cf49ec210bd5e0078d96ae9dbd82eb6b89155ea11673b7b9b43b816e5e2b\",\"license\":\"MIT\"},\"contracts/Interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IPool } from \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event DefaultPoolDebtUpdated(address _asset, uint256 _debt);\\n    event DefaultPoolAssetBalanceUpdated(address _asset, uint256 _balance);\\n\\n    // --- Functions ---\\n    function sendAssetToActivePool(address _asset, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xe68312fe3192b59bea18d1c3f027842418c10ad647f3e282bace8417ba656327\",\"license\":\"MIT\"},\"contracts/Interfaces/IDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface IDeposit {\\n    function receivedERC20(address _asset, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x2791510cd93e4aab04349c67b20fc52ac0af5ac9aed9b1c12e10743d1f1f7e61\",\"license\":\"MIT\"},\"contracts/Interfaces/IERC20Decimals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface IERC20Decimals {\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xb784584e544d4f45a48dc5c68bea423dbb35bd4cfadc3007ee3ab64212ff71da\",\"license\":\"MIT\"},\"contracts/Interfaces/IFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface IFeeCollector {\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    event FeeRecordUpdated(\\n        address borrower, address asset, uint256 from, uint256 to, uint256 amount\\n    );\\n    event FeeCollected(address borrower, address asset, address collector, uint256 amount);\\n    event FeeRefunded(address borrower, address asset, uint256 amount);\\n    event RedemptionFeeCollected(address asset, uint256 amount);\\n\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    struct FeeRecord {\\n        uint256 from; // timestamp in seconds\\n        uint256 to; // timestamp in seconds\\n        uint256 amount; // refundable fee amount\\n    }\\n\\n    // Custom Errors\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    error FeeCollector__ArrayMismatch();\\n    error FeeCollector__BorrowerOperationsOnly(address sender, address expected);\\n    error FeeCollector__BorrowerOperationsOrTrenBoxManagerOnly(\\n        address sender, address expected1, address expected2\\n    );\\n    error FeeCollector__InvalidTRENStakingAddress();\\n    error FeeCollector__TrenBoxManagerOnly(address sender, address expected);\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    function increaseDebt(address _borrower, address _asset, uint256 _feeAmount) external;\\n\\n    function decreaseDebt(address _borrower, address _asset, uint256 _paybackFraction) external;\\n\\n    function closeDebt(address _borrower, address _asset) external;\\n\\n    function liquidateDebt(address _borrower, address _asset) external;\\n\\n    function simulateRefund(\\n        address _borrower,\\n        address _asset,\\n        uint256 _paybackFraction\\n    )\\n        external\\n        returns (uint256);\\n\\n    function collectFees(address[] calldata _borrowers, address[] calldata _assets) external;\\n\\n    function handleRedemptionFee(address _asset, uint256 _amount) external;\\n\\n    function getProtocolRevenueDestination() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4acb0589d73afd26dd9ea281eef5052818955b501f2371c21a1acac953bf5152\",\"license\":\"MIT\"},\"contracts/Interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IDeposit } from \\\"./IDeposit.sol\\\";\\n\\ninterface IPool is IDeposit {\\n    // --- Events ---\\n\\n    event AssetSent(address _to, address indexed _asset, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function getAssetBalance(address _asset) external view returns (uint256);\\n\\n    function getDebtTokenBalance(address _asset) external view returns (uint256);\\n\\n    function increaseDebt(address _asset, uint256 _amount) external;\\n\\n    function decreaseDebt(address _asset, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xa97342dc61c23cbb4be7afe6d224fa866fc28d7c007a6e940e8252dd9194b1aa\",\"license\":\"MIT\"},\"contracts/Interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\n/*\\n* @dev from\\nhttps://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\n */\\ninterface ChainlinkAggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\\ninterface IPriceFeed {\\n    // Enums\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    enum ProviderType {\\n        Chainlink,\\n        API3\\n    }\\n\\n    // Structs\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    struct OracleRecordV2 {\\n        address oracleAddress;\\n        ProviderType providerType;\\n        uint256 timeoutSeconds;\\n        uint256 decimals;\\n        bool isEthIndexed;\\n    }\\n\\n    /// @dev Deprecated, but retained for upgradeability\\n    struct OracleRecord {\\n        address chainLinkOracle;\\n        uint256 maxDeviationBetweenRounds;\\n        bool exists;\\n        bool isFeedWorking;\\n        bool isEthIndexed;\\n    }\\n\\n    /// @dev Deprecated, but retained for upgradeability\\n    struct PriceRecord {\\n        uint256 scaledPrice;\\n        uint256 timestamp;\\n    }\\n\\n    /// @dev Deprecated, but retained for upgradeability\\n    struct FeedResponse {\\n        uint80 roundId;\\n        int256 answer;\\n        uint256 timestamp;\\n        bool success;\\n        uint8 decimals;\\n    }\\n\\n    // Custom Errors\\n    // --------------------------------------------------------------------------------------------------\\n\\n    error PriceFeed__ExistingOracleRequired();\\n    error PriceFeed__InvalidDecimalsError();\\n    error PriceFeed__InvalidOracleResponseError(address token);\\n    error PriceFeed__TimelockOnlyError();\\n    error PriceFeed__UnknownAssetError();\\n\\n    // Events\\n    // ---------------------------------------------------------------------------------------------------------\\n\\n    event NewOracleRegistered(\\n        address token, address oracleAddress, bool isEthIndexed, bool isFallback\\n    );\\n\\n    // Functions\\n    // ------------------------------------------------------------------------------------------------------\\n\\n    function fetchPrice(address _token) external view returns (uint256);\\n\\n    function setOracle(\\n        address _token,\\n        address _oracle,\\n        ProviderType _type,\\n        uint256 _timeoutSeconds,\\n        bool _isEthIndexed,\\n        bool _isFallback\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0xf0c82fbfb780e4eff5d3fce5a6b38af415f42a2daec9c3bfb4cfa5d17764532c\",\"license\":\"MIT\"},\"contracts/Interfaces/ISortedTrenBoxes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface ISortedTrenBoxes {\\n    // --- Events ---\\n\\n    event NodeAdded(address indexed _asset, address _id, uint256 _NICR);\\n    event NodeRemoved(address indexed _asset, address _id);\\n\\n    // --- Functions ---\\n\\n    function insert(\\n        address _asset,\\n        address _id,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external;\\n\\n    function remove(address _asset, address _id) external;\\n\\n    function reInsert(\\n        address _asset,\\n        address _id,\\n        uint256 _newICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external;\\n\\n    function contains(address _asset, address _id) external view returns (bool);\\n\\n    function isEmpty(address _asset) external view returns (bool);\\n\\n    function getSize(address _asset) external view returns (uint256);\\n\\n    function getFirst(address _asset) external view returns (address);\\n\\n    function getLast(address _asset) external view returns (address);\\n\\n    function getNext(address _asset, address _id) external view returns (address);\\n\\n    function getPrev(address _asset, address _id) external view returns (address);\\n\\n    function validInsertPosition(\\n        address _asset,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    function findInsertPosition(\\n        address _asset,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external\\n        view\\n        returns (address, address);\\n}\\n\",\"keccak256\":\"0x031de1954b0e18ca6efbd25a54449a1561b537361341971d050e44c34e150434\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IDeposit } from \\\"./IDeposit.sol\\\";\\n\\ninterface IStabilityPool is IDeposit {\\n    // --- Structs ---\\n\\n    struct Snapshots {\\n        mapping(address => uint256) S;\\n        uint256 P;\\n        uint256 G;\\n        uint128 scale;\\n        uint128 epoch;\\n    }\\n\\n    // --- Events ---\\n\\n    event CommunityIssuanceAddressChanged(address newAddress);\\n    event DepositSnapshotUpdated(address indexed _depositor, uint256 _P, uint256 _G);\\n    event SystemSnapshotUpdated(uint256 _P, uint256 _G);\\n\\n    event AssetSent(address _asset, address _to, uint256 _amount);\\n    event GainsWithdrawn(\\n        address indexed _depositor,\\n        address[] _collaterals,\\n        uint256[] _amounts,\\n        uint256 _debtTokenLoss\\n    );\\n    event TRENPaidToDepositor(address indexed _depositor, uint256 _TREN);\\n    event StabilityPoolAssetBalanceUpdated(address _asset, uint256 _newBalance);\\n    event StabilityPoolDebtTokenBalanceUpdated(uint256 _newBalance);\\n    event StakeChanged(uint256 _newSystemStake, address _depositor);\\n    event UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\n\\n    event P_Updated(uint256 _P);\\n    event S_Updated(address _asset, uint256 _S, uint128 _epoch, uint128 _scale);\\n    event G_Updated(uint256 _G, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    // --- Errors ---\\n\\n    error StabilityPool__ActivePoolOnly(address sender, address expected);\\n    error StabilityPool__AdminContractOnly(address sender, address expected);\\n    error StabilityPool__TrenBoxManagerOnly(address sender, address expected);\\n    error StabilityPool__ArrayNotInAscendingOrder();\\n\\n    // --- Functions ---\\n\\n    function addCollateralType(address _collateral) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is not zero\\n     * ---\\n    * - Triggers a TREN issuance, based on time passed since the last issuance. The TREN issuance is\\n    shared between *all* depositors.\\n     * - Sends depositor's accumulated gains (TREN, assets) to depositor\\n     */\\n    function provideToSP(uint256 _amount, address[] calldata _assets) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized trenBoxes left in the system\\n     * - User has a non zero deposit\\n     * ---\\n    * - Triggers a TREN issuance, based on time passed since the last issuance. The TREN issuance is\\n    shared between *all* depositors.\\n     * - Sends all depositor's accumulated gains (TREN, assets) to depositor\\n     * - Decreases deposit's stake, and takes new snapshots.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint256 _amount, address[] calldata _assets) external;\\n\\n    /*\\n    Initial checks:\\n    * - Caller is TrenBoxManager\\n    * ---\\n    * Cancels out the specified debt against the debt token contained in the Stability Pool (as far\\n    as possible)\\n    * and transfers the TrenBox's collateral from ActivePool to StabilityPool.\\n    * Only called by liquidation functions in the TrenBoxManager.\\n    */\\n    function offset(uint256 _debt, address _asset, uint256 _coll) external;\\n\\n    /*\\n    * Returns debt tokens held in the pool. Changes when users deposit/withdraw, and when TrenBox\\n    debt is offset.\\n     */\\n    function getTotalDebtTokenDeposits() external view returns (uint256);\\n\\n    /*\\n     * Calculates the asset gains earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorGains(\\n        address _depositor,\\n        address[] calldata _assets\\n    )\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory);\\n\\n    /*\\n     * Calculate the TREN gain earned by a deposit since its last snapshots were taken.\\n     */\\n    function getDepositorTRENGain(address _depositor) external view returns (uint256);\\n\\n    /*\\n     * Return the user's compounded deposits.\\n     */\\n    function getCompoundedDebtTokenDeposits(address _depositor) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6de08cb9a9ddb600e67363917078a6778b683187a559a53b0c7c24759ca7a28\",\"license\":\"MIT\"},\"contracts/Interfaces/ITrenBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface ITrenBase {\\n    struct Colls {\\n        // tokens and amounts should be the same length\\n        address[] tokens;\\n        uint256[] amounts;\\n    }\\n}\\n\",\"keccak256\":\"0x1cfd5cec5536fa56e0440efa542baa6df6a842dddd4c0f763e02a31d3ec060d4\",\"license\":\"MIT\"},\"contracts/Interfaces/ITrenBoxManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IActivePool } from \\\"./IActivePool.sol\\\";\\nimport { ICollSurplusPool } from \\\"./ICollSurplusPool.sol\\\";\\nimport { IDebtToken } from \\\"./IDebtToken.sol\\\";\\nimport { IDefaultPool } from \\\"./IDefaultPool.sol\\\";\\nimport { ITrenBase } from \\\"./ITrenBase.sol\\\";\\nimport { ISortedTrenBoxes } from \\\"./ISortedTrenBoxes.sol\\\";\\nimport { IStabilityPool } from \\\"./IStabilityPool.sol\\\";\\n\\ninterface ITrenBoxManager is ITrenBase {\\n    // Enums\\n    // ------------------------------------------------------------------------------------------------------------\\n\\n    enum Status {\\n        nonExistent,\\n        active,\\n        closedByOwner,\\n        closedByLiquidation,\\n        closedByRedemption\\n    }\\n\\n    enum TrenBoxManagerOperation {\\n        applyPendingRewards,\\n        liquidateInNormalMode,\\n        liquidateInRecoveryMode,\\n        redeemCollateral\\n    }\\n\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    event BaseRateUpdated(address indexed _asset, uint256 _baseRate);\\n    event LastFeeOpTimeUpdated(address indexed _asset, uint256 _lastFeeOpTime);\\n    event TotalStakesUpdated(address indexed _asset, uint256 _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        address indexed _asset, uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(address indexed _asset, uint256 _L_Coll, uint256 _L_Debt);\\n    event TrenBoxSnapshotsUpdated(address indexed _asset, uint256 _L_Coll, uint256 _L_Debt);\\n    event TrenBoxIndexUpdated(address indexed _asset, address _borrower, uint256 _newIndex);\\n\\n    event TrenBoxUpdated(\\n        address indexed _asset,\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 _stake,\\n        TrenBoxManagerOperation _operation\\n    );\\n\\n    // Custom Errors\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    error TrenBoxManager__FeeBiggerThanAssetDraw();\\n    error TrenBoxManager__OnlyOneTrenBox();\\n\\n    error TrenBoxManager__OnlyTrenBoxManagerOperations();\\n    error TrenBoxManager__OnlyBorrowerOperations();\\n    error TrenBoxManager__OnlyTrenBoxManagerOperationsOrBorrowerOperations();\\n\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    struct TrenBox {\\n        uint256 debt;\\n        uint256 coll;\\n        uint256 stake;\\n        Status status;\\n        uint128 arrayIndex;\\n    }\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    function executeFullRedemption(address _asset, address _borrower, uint256 _newColl) external;\\n\\n    function executePartialRedemption(\\n        address _asset,\\n        address _borrower,\\n        uint256 _newDebt,\\n        uint256 _newColl,\\n        uint256 _newNICR,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint\\n    )\\n        external;\\n\\n    function getTrenBoxOwnersCount(address _asset) external view returns (uint256);\\n\\n    function getTrenBoxFromTrenBoxOwnersArray(\\n        address _asset,\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (address);\\n\\n    function getNominalICR(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getCurrentICR(\\n        address _asset,\\n        address _borrower,\\n        uint256 _price\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function updateStakeAndTotalStakes(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        returns (uint256);\\n\\n    function updateTrenBoxRewardSnapshots(address _asset, address _borrower) external;\\n\\n    function addTrenBoxOwnerToArray(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        returns (uint256 index);\\n\\n    function applyPendingRewards(address _asset, address _borrower) external;\\n\\n    function getPendingAssetReward(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPendingDebtTokenReward(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function hasPendingRewards(address _asset, address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 debt,\\n            uint256 coll,\\n            uint256 pendingDebtTokenReward,\\n            uint256 pendingAssetReward\\n        );\\n\\n    function closeTrenBox(address _asset, address _borrower) external;\\n\\n    function closeTrenBoxLiquidation(address _asset, address _borrower) external;\\n\\n    function removeStake(address _asset, address _borrower) external;\\n\\n    function getRedemptionRate(address _asset) external view returns (uint256);\\n\\n    function getRedemptionRateWithDecay(address _asset) external view returns (uint256);\\n\\n    function getRedemptionFeeWithDecay(\\n        address _asset,\\n        uint256 _assetDraw\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getBorrowingRate(address _asset) external view returns (uint256);\\n\\n    function getBorrowingFee(\\n        address _asset,\\n        uint256 _debtTokenAmount\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTrenBoxStatus(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getTrenBoxStake(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getTrenBoxDebt(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getTrenBoxColl(address _asset, address _borrower) external view returns (uint256);\\n\\n    function setTrenBoxStatus(address _asset, address _borrower, uint256 num) external;\\n\\n    function increaseTrenBoxColl(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collIncrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function decreaseTrenBoxColl(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collDecrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function increaseTrenBoxDebt(\\n        address _asset,\\n        address _borrower,\\n        uint256 _debtIncrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function decreaseTrenBoxDebt(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collDecrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function getTCR(address _asset, uint256 _price) external view returns (uint256);\\n\\n    function checkRecoveryMode(address _asset, uint256 _price) external returns (bool);\\n\\n    function isValidFirstRedemptionHint(\\n        address _asset,\\n        address _firstRedemptionHint,\\n        uint256 _price\\n    )\\n        external\\n        returns (bool);\\n\\n    function updateBaseRateFromRedemption(\\n        address _asset,\\n        uint256 _assetDrawn,\\n        uint256 _price,\\n        uint256 _totalDebtTokenSupply\\n    )\\n        external\\n        returns (uint256);\\n\\n    function getRedemptionFee(address _asset, uint256 _assetDraw) external view returns (uint256);\\n\\n    function finalizeRedemption(\\n        address _asset,\\n        address _receiver,\\n        uint256 _debtToRedeem,\\n        uint256 _fee,\\n        uint256 _totalRedemptionRewards\\n    )\\n        external;\\n\\n    function redistributeDebtAndColl(\\n        address _asset,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 _debtToOffset,\\n        uint256 _collToSendToStabilityPool\\n    )\\n        external;\\n\\n    function updateSystemSnapshots_excludeCollRemainder(\\n        address _asset,\\n        uint256 _collRemainder\\n    )\\n        external;\\n\\n    function movePendingTrenBoxRewardsToActivePool(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        uint256 _assetAmount\\n    )\\n        external;\\n\\n    function isTrenBoxActive(address _asset, address _borrower) external view returns (bool);\\n\\n    function sendGasCompensation(\\n        address _asset,\\n        address _liquidator,\\n        uint256 _debtTokenAmount,\\n        uint256 _assetAmount\\n    )\\n        external;\\n\\n    function getNetDebt(address _asset, uint256 _debt) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4ff266872e48230a0d9f0a517023d9eabcaf12658e873f8685c5a54b340a55c8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5060805161495361003e600039600081816126f901528181612722015261286801526149536000f3fe6080604052600436106102515760003560e01c806395fb16bb11610139578063c5f956af116100b6578063e89f80541161007a578063e89f80541461073b578063f1c05a7e1461075b578063f2fde38b1461077b578063f8d898981461079b578063fe060733146107bb578063fe9d0323146107db57600080fd5b8063c5f956af1461068a578063c8564c62146106aa578063cc8b21e4146106db578063cda775f9146106fb578063d721f52a1461071b57600080fd5b8063b5c5c9fc116100fd578063b5c5c9fc146105ea578063b95717211461060a578063c05c5e941461062a578063c14e0a8a1461064a578063c415b95c1461066a57600080fd5b806395fb16bb146105125780639e86d0c414610532578063a20baee614610552578063a3f4df7e1461056e578063ad3cb1cc146105b957600080fd5b806352d1902d116101d25780637703d730116101965780637703d7301461044057806377553ad4146104605780637f7dde4a146104805780638129fc1c146104a05780638235b284146104b55780638da5cb5b146104d557600080fd5b806352d1902d146103b657806355dafa46146103cb5780636a85d67d146103eb578063715018a61461040b578063741bef1a1461042057600080fd5b80633cc74225116102195780633cc742251461032357806348a4a39d1461034357806349b010c5146103635780634bc66f32146103835780634f1ef286146103a357600080fd5b806301c931001461025657806302540e4814610278578063048c661d146102ab5780630a34d4d6146102e357806327d04b3514610303575b600080fd5b34801561026257600080fd5b50610276610271366004614358565b6107fb565b005b34801561028457600080fd5b50610298610293366004614373565b610825565b6040519081526020015b60405180910390f35b3480156102b757600080fd5b50600c546102cb906001600160a01b031681565b6040516001600160a01b0390911681526020016102a2565b3480156102ef57600080fd5b506010546102cb906001600160a01b031681565b34801561030f57600080fd5b5061029861031e366004614358565b61083a565b34801561032f57600080fd5b506006546102cb906001600160a01b031681565b34801561034f57600080fd5b5061027661035e36600461439d565b610932565b34801561036f57600080fd5b5061027661037e36600461439d565b61097b565b34801561038f57600080fd5b50600d546102cb906001600160a01b031681565b6102766103b1366004614400565b610995565b3480156103c257600080fd5b506102986109b4565b3480156103d757600080fd5b506009546102cb906001600160a01b031681565b3480156103f757600080fd5b50610276610406366004614358565b6109d1565b34801561041757600080fd5b506102766109fb565b34801561042c57600080fd5b50600a546102cb906001600160a01b031681565b34801561044c57600080fd5b5061027661045b36600461439d565b610a0f565b34801561046c57600080fd5b506002546102cb906001600160a01b031681565b34801561048c57600080fd5b506000546102cb906001600160a01b031681565b3480156104ac57600080fd5b50610276610a2a565b3480156104c157600080fd5b506102766104d0366004614358565b610b43565b3480156104e157600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166102cb565b34801561051e57600080fd5b506004546102cb906001600160a01b031681565b34801561053e57600080fd5b5061029861054d366004614358565b610ba3565b34801561055e57600080fd5b50610298670de0b6b3a764000081565b34801561057a57600080fd5b506105ac60405180604001604052806012815260200171426f72726f7765724f7065726174696f6e7360701b81525081565b6040516102a291906144e6565b3480156105c557600080fd5b506105ac604051806040016040528060058152602001640352e302e360dc1b81525081565b3480156105f657600080fd5b5061027661060536600461439d565b610c4a565b34801561061657600080fd5b50610276610625366004614519565b610c65565b34801561063657600080fd5b506001546102cb906001600160a01b031681565b34801561065657600080fd5b50610276610665366004614358565b6111e4565b34801561067657600080fd5b506007546102cb906001600160a01b031681565b34801561069657600080fd5b50600e546102cb906001600160a01b031681565b3480156106b657600080fd5b506010546106cb90600160a01b900460ff1681565b60405190151581526020016102a2565b3480156106e757600080fd5b50600b546102cb906001600160a01b031681565b34801561070757600080fd5b506003546102cb906001600160a01b031681565b34801561072757600080fd5b5061027661073636600461458e565b611714565b34801561074757600080fd5b506102766107563660046145f3565b611ee0565b34801561076757600080fd5b50600f546102cb906001600160a01b031681565b34801561078757600080fd5b50610276610796366004614358565b611f2a565b3480156107a757600080fd5b506005546102cb906001600160a01b031681565b3480156107c757600080fd5b506102766107d6366004614358565b611f68565b3480156107e757600080fd5b506008546102cb906001600160a01b031681565b610803611f71565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b60006108318383611fcc565b90505b92915050565b6000805460405163c5739d0b60e01b81526001600160a01b0384811660048301528392169063c5739d0b90602401602060405180830381865afa158015610885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a99190614666565b60065460405163c5739d0b60e01b81526001600160a01b0386811660048301529293506000929091169063c5739d0b906024015b602060405180830381865afa1580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e9190614666565b905061092a8183614695565b949350505050565b61093a612045565b61094c8484336000806000888861208f565b61097560017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b50505050565b610983612045565b61094c8460003386600080888861208f565b61099d6126ee565b6109a682612793565b6109b0828261279b565b5050565b60006109be61285d565b5060008051602061492783398151915290565b6109d9611f71565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610a03611f71565b610a0d60006128a6565b565b610a17612045565b61094c846000336000876000888861208f565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610a705750825b905060008267ffffffffffffffff166001148015610a8d5750303b155b905081158015610a9b575080155b15610ab95760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610ae357845460ff60401b1916600160401b1785555b33610aed81612917565b610af5612928565b508315610b3c57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b60035460405163ea16003f60e01b81526001600160a01b039091169063ea16003f90610b7590849033906004016146a8565b600060405180830381600087803b158015610b8f57600080fd5b505af1158015610b3c573d6000803e3d6000fd5b60008054604051635373433f60e01b81526001600160a01b03848116600483015283921690635373433f90602401602060405180830381865afa158015610bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c129190614666565b600654604051635373433f60e01b81526001600160a01b03868116600483015292935060009290911690635373433f906024016108dd565b610c52612045565b61094c846000336000876001888861208f565b610c6d611f71565b601054600160a01b900460ff1615610ccc5760405162461bcd60e51b815260206004820152601c60248201527f536574757020697320616c726561647920696e697469616c697a65640000000060448201526064015b60405180910390fd5b600f8114610d1c5760405162461bcd60e51b815260206004820152601e60248201527f45787065637465642031352061646472657373657320617420736574757000006044820152606401610cc3565b60005b600f811015610da1576000838383818110610d3c57610d3c6146c2565b9050602002016020810190610d519190614358565b6001600160a01b031603610d995760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610cc3565b600101610d1f565b5081816000818110610db557610db56146c2565b9050602002016020810190610dca9190614358565b600080546001600160a01b0319166001600160a01b039290921691909117905581816001818110610dfd57610dfd6146c2565b9050602002016020810190610e129190614358565b600180546001600160a01b0319166001600160a01b039290921691909117905581816002818110610e4557610e456146c2565b9050602002016020810190610e5a9190614358565b600280546001600160a01b0319166001600160a01b039290921691909117905581816003818110610e8d57610e8d6146c2565b9050602002016020810190610ea29190614358565b600380546001600160a01b0319166001600160a01b039290921691909117905581816004818110610ed557610ed56146c2565b9050602002016020810190610eea9190614358565b600580546001600160a01b0319166001600160a01b039290921691909117815582908290818110610f1d57610f1d6146c2565b9050602002016020810190610f329190614358565b600680546001600160a01b0319166001600160a01b039290921691909117815582908290818110610f6557610f656146c2565b9050602002016020810190610f7a9190614358565b600780546001600160a01b0319166001600160a01b039290921691909117815582908290818110610fad57610fad6146c2565b9050602002016020810190610fc29190614358565b600880546001600160a01b0319166001600160a01b039290921691909117815582908290818110610ff557610ff56146c2565b905060200201602081019061100a9190614358565b600a80546001600160a01b0319166001600160a01b03929092169190911790558181600981811061103d5761103d6146c2565b90506020020160208101906110529190614358565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a818110611085576110856146c2565b905060200201602081019061109a9190614358565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b8181106110cd576110cd6146c2565b90506020020160208101906110e29190614358565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c818110611115576111156146c2565b905060200201602081019061112a9190614358565b600e80546001600160a01b0319166001600160a01b03929092169190911790558181600d81811061115d5761115d6146c2565b90506020020160208101906111729190614358565b600f80546001600160a01b0319166001600160a01b03929092169190911790558181600e8181106111a5576111a56146c2565b90506020020160208101906111ba9190614358565b601080546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b6111ee8133612930565b600a54604051635670bcc760e11b81526001600160a01b038381166004830152600092169063ace1798e90602401602060405180830381865afa158015611239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125d9190614666565b90506112698282612a0f565b600f5460405163df4fb9ef60e01b81526001600160a01b039091169063df4fb9ef9061129b90859033906004016146a8565b600060405180830381600087803b1580156112b557600080fd5b505af11580156112c9573d6000803e3d6000fd5b5050600f54604051633517ff1b60e11b8152600093506001600160a01b039091169150636a2ffe369061130290869033906004016146a8565b602060405180830381865afa15801561131f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113439190614666565b600f5460405163f9a3d41f60e01b81529192506000916001600160a01b039091169063f9a3d41f9061137b90879033906004016146a8565b602060405180830381865afa158015611398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bc9190614666565b60015460405163c08261db60e01b81526001600160a01b0387811660048301529293506000929091169063c08261db90602401602060405180830381865afa15801561140c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114309190614666565b6007546040516320e3d2f760e11b81529192506000916001600160a01b03909116906341c7a5ee906114729033908a90670de0b6b3a7640000906004016146d8565b6020604051808303816000875af1158015611491573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b59190614666565b90506000816114c484866146fc565b6114ce91906146fc565b90506114da3382612a8c565b60006114ec888760008860008c612b7c565b90506114f88882612bf2565b600f54604051633ed3a18f60e21b81526001600160a01b039091169063fb4e863c9061152a908b9033906004016146a8565b600060405180830381600087803b15801561154457600080fd5b505af1158015611558573d6000803e3d6000fd5b5050600f54604051633d9ef93160e01b81526001600160a01b039091169250633d9ef931915061158e908b9033906004016146a8565b600060405180830381600087803b1580156115a857600080fd5b505af11580156115bc573d6000803e3d6000fd5b50505050336001600160a01b0316886001600160a01b03167f7feef73802d9a37116f36078fbc66117c8cdb7b4c9bdddf51ee03257c786b32a6000806000600160405161160c9493929190614731565b60405180910390a361162088338486612ce7565b8315611640576008546116409089906001600160a01b0316866000612ce7565b60075460405163871d814560e01b81526001600160a01b039091169063871d8145906116729033908c906004016146a8565b600060405180830381600087803b15801561168c57600080fd5b505af11580156116a0573d6000803e3d6000fd5b50506000546040516347878f1560e01b81526001600160a01b0390911692506347878f1591506116d8908b9033908b906004016146d8565b600060405180830381600087803b1580156116f257600080fd5b505af1158015611706573d6000803e3d6000fd5b505050505050505050505050565b6001546040516317ae1fc560e01b81526001600160a01b038781166004830152909116906317ae1fc590602401602060405180830381865afa15801561175e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117829190614753565b6117de5760405162461bcd60e51b815260206004820152602760248201527f426f72726f7765724f7065726174696f6e733a204173736574206973206e6f746044820152662061637469766560c81b6064820152608401610cc3565b61183660405180610120016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b03868116808352600a54604051635670bcc760e11b815260048101929092529091169063ace1798e90602401602060405180830381865afa158015611886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118aa9190614666565b6020820181905281516000916118c09190612dcd565b90506118d0826000015133612e52565b60608201859052806119045781516118e89086612f18565b6040830181905260608301516118fe9190614695565b60608301525b6119168260000151836060015161306c565b600154825160405163c08261db60e01b81526001600160a01b039182166004820152600092919091169063c08261db90602401602060405180830381865afa158015611966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198a9190614666565b905080836060015161199c9190614695565b608084018190526000036119f25760405162461bcd60e51b815260206004820152601960248201527f636f6d706f73697465446562742063616e6e6f742062652030000000000000006044820152606401610cc3565b611a05878460800151856020015161314f565b60a08401526080830151611a1a908890613183565b60c08401528115611a3c57611a3783600001518460a001516131b9565b611a7e565b611a4e83600001518460a0015161329c565b6000611a6c8460000151896001876080015160018960200151612b7c565b9050611a7c846000015182612bf2565b505b600f548351604051636f4ecd4560e01b81526001600160a01b0390921691636f4ecd4591611ab39133906001906004016146d8565b600060405180830381600087803b158015611acd57600080fd5b505af1158015611ae1573d6000803e3d6000fd5b5050600f54855160405163061e9dc360e01b81526001600160a01b03909216935063061e9dc39250611b199133908c906004016146d8565b6020604051808303816000875af1158015611b38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5c9190614666565b50600f548351608085015160405163c2bac5f160e01b81526001600160a01b039093169263c2bac5f192611b979290913391906004016146d8565b6020604051808303816000875af1158015611bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bda9190614666565b50600f548351604051634eebd97f60e01b81526001600160a01b0390921691634eebd97f91611c0d9133906004016146a8565b600060405180830381600087803b158015611c2757600080fd5b505af1158015611c3b573d6000803e3d6000fd5b5050600f54855160405163dbe9f91960e01b81526001600160a01b03909216935063dbe9f9199250611c719133906004016146a8565b6020604051808303816000875af1158015611c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb49190614666565b60e0840152600b54835160c0850151604051633e499e0560e11b81526001600160a01b039283166004820152336024820152604481019190915287821660648201528682166084820152911690637c933c0a9060a401600060405180830381600087803b158015611d2457600080fd5b505af1158015611d38573d6000803e3d6000fd5b5050600f54855160405163d1a71b5f60e01b81526001600160a01b03909216935063d1a71b5f9250611d6e9133906004016146a8565b6020604051808303816000875af1158015611d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db19190614666565b6101008401819052835160405191825233916001600160a01b03909116907f30d1b1917c27aa4ce4d813612d438af6adea3706bb2009e7309788f4bfc61f7d9060200160405180910390a38251611e089088613391565b611e1c836000015133888660600151613425565b8015611e3c578251600854611e3c91906001600160a01b03168380613425565b8251608084015160e085015160405133936001600160a01b0316927f7feef73802d9a37116f36078fbc66117c8cdb7b4c9bdddf51ee03257c786b32a92611e88928d9190600090614731565b60405180910390a38251604080850151905190815233916001600160a01b0316907fd89359f0d8e7f936d0682c5565cc5a16989a91560a80c7b06c46c28e52a5d43a9060200160405180910390a35050505050505050565b611ee8612045565b611ef8878733888888888861208f565b611f2160017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b50505050505050565b611f32611f71565b6001600160a01b038116611f5c57604051631e4fbdf760e01b815260006004820152602401610cc3565b611f65816128a6565b50565b611f6581612793565b33611fa37f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610a0d5760405163118cdaa760e01b8152336004820152602401610cc3565b60015460405163c08261db60e01b81526001600160a01b038481166004830152600092169063c08261db90602401602060405180830381865afa158015612017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203b9190614666565b6108319083614695565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0080546001190161208957604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b61210c604051806101c0016040528060006001600160a01b031681526020016000151581526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b03898116808352600a54604051635670bcc760e11b815260048101929092529091169063ace1798e90602401602060405180830381865afa15801561215c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121809190614666565b6040820181905281516000916121969190612dcd565b905084156121a7576121a78661369e565b6121b1878a613714565b6121bc87878b613784565b81516121c89089612930565b336001600160a01b03891614806121fd5750600c546001600160a01b0316331480156121f357508815155b80156121fd575085155b61220957612209614770565b600f54825160405163df4fb9ef60e01b81526001600160a01b039092169163df4fb9ef9161223b918c906004016146a8565b600060405180830381600087803b15801561225557600080fd5b505af1158015612269573d6000803e3d6000fd5b50505050612277898861381c565b15156020840152606083015260808201869052848015612295575080155b156122c35781516122a69087612f18565b610140830181905260808301516122bd9190614695565b60808301525b600f54825160405163f9a3d41f60e01b81526001600160a01b039092169163f9a3d41f916122f5918c906004016146a8565b602060405180830381865afa158015612312573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123369190614666565b60a0830152600f548251604051633517ff1b60e11b81526001600160a01b0390921691636a2ffe369161236d918c906004016146a8565b602060405180830381865afa15801561238a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ae9190614666565b60c0830181905260a083015160408401516123ca92919061314f565b8260e00181815250506123fa8260c001518360a001518460600151856020015186608001518a886040015161383b565b61010083015260c08201518711156124545760405162461bcd60e51b815260206004820181905260248201527f426f72726f7765724f70733a20626164205f636f6c6c5769746864726177616c6044820152606401610cc3565b8151612463908289888661386e565b8415801561247057508515155b156124c8576124a38260000151836080015161249485600001518660a001516138ea565b61249e91906146fc565b61306c565b6124ba82600001518360a001518460800151613963565b6124c8888360800151612a8c565b6124e68260000151898460600151856020015186608001518a613a5e565b610160840152610180830152600f54825160405163dbe9f91960e01b81526001600160a01b039092169163dbe9f91991612524918c906004016146a8565b6020604051808303816000875af1158015612543573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125679190614666565b826101a001818152505060006125958360c001518460a001518560600151866020015187608001518b613c68565b600b54845160405163bc9b5bd560e01b81526001600160a01b0391821660048201528c821660248201526044810184905288821660648201528782166084820152929350169063bc9b5bd59060a401600060405180830381600087803b1580156125fe57600080fd5b505af1158015612612573d6000803e3d6000fd5b50505050886001600160a01b031683600001516001600160a01b03167f7feef73802d9a37116f36078fbc66117c8cdb7b4c9bdddf51ee03257c786b32a856101600151866101800151876101a0015160026040516126739493929190614731565b60405180910390a3825161014084015160405190815233916001600160a01b0316907fd89359f0d8e7f936d0682c5565cc5a16989a91560a80c7b06c46c28e52a5d43a9060200160405180910390a36126e1836000015133856060015186602001518b8b8960800151613c8b565b5050505050505050505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061277557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612769600080516020614927833981519152546001600160a01b031690565b6001600160a01b031614155b15610a0d5760405163703e46dd60e11b815260040160405180910390fd5b611f65611f71565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156127f5575060408051601f3d908101601f191682019092526127f291810190614666565b60015b61281d57604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610cc3565b600080516020614927833981519152811461284e57604051632a87526960e21b815260048101829052602401610cc3565b6128588383613d26565b505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a0d5760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b61291f613d7c565b611f6581613dc5565b610a0d613d7c565b600f54604051632862f79760e11b81526000916001600160a01b0316906350c5ef2e9061296390869086906004016146a8565b602060405180830381865afa158015612980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a49190614666565b9050806001146128585760405162461bcd60e51b815260206004820152603060248201527f426f72726f7765724f70733a205472656e426f7820646f6573206e6f7420657860448201526f1a5cdd081bdc881a5cc818db1bdcd95960821b6064820152608401610cc3565b612a198282612dcd565b156109b05760405162461bcd60e51b815260206004820152603960248201527f426f72726f7765724f70733a204f7065726174696f6e206e6f74207065726d6960448201527f7474656420647572696e67205265636f76657279204d6f6465000000000000006064820152608401610cc3565b6005546040516370a0823160e01b81526001600160a01b038481166004830152839216906370a0823190602401602060405180830381865afa158015612ad6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612afa9190614666565b10156109b05760405162461bcd60e51b8152602060048201526044602482018190527f426f72726f7765724f70733a2043616c6c657220646f65736e74206861766520908201527f656e6f756768206465627420746f6b656e7320746f206d616b652072657061796064820152631b595b9d60e21b608482015260a401610cc3565b600080612b8888610ba3565b90506000612b958961083a565b905086612bab57612ba688836146fc565b612bb5565b612bb58883614695565b915084612bcb57612bc686826146fc565b612bd5565b612bd58682614695565b90506000612be483838761314f565b9a9950505050505050505050565b60015460405163316a306d60e11b81526001600160a01b038481166004830152909116906362d460da90602401602060405180830381865afa158015612c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c609190614666565b8110156109b05760405162461bcd60e51b815260206004820152604960248201527f426f72726f7765724f70733a20416e206f7065726174696f6e2074686174207760448201527f6f756c6420726573756c7420696e20544352203c20434352206973206e6f74206064820152681c195c9b5a5d1d195960ba1b608482015260a401610cc3565b6000546001600160a01b0316632fb9ba3185612d038486614695565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015612d4957600080fd5b505af1158015612d5d573d6000803e3d6000fd5b5050600554604051632770a7eb60e21b81526001600160a01b038781166004830152602482018790529091169250639dc29fac9150604401600060405180830381600087803b158015612daf57600080fd5b505af1158015612dc3573d6000803e3d6000fd5b5050505050505050565b600080612dda8484613dcd565b60015460405163316a306d60e11b81526001600160a01b0387811660048301529293509116906362d460da90602401602060405180830381865afa158015612e26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4a9190614666565b119392505050565b600f54604051632862f79760e11b81526000916001600160a01b0316906350c5ef2e90612e8590869086906004016146a8565b602060405180830381865afa158015612ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec69190614666565b9050806001036128585760405162461bcd60e51b815260206004820152601e60248201527f426f72726f7765724f70733a205472656e426f782069732061637469766500006044820152606401610cc3565b600f546040516314757c1360e31b81526001600160a01b03848116600483015260248201849052600092839291169063a3abe09890604401602060405180830381865afa158015612f6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f919190614666565b600554600754604051636361ddf360e11b81529293506001600160a01b039182169263c6c3bbe692612fcc92899291169086906004016146d8565b600060405180830381600087803b158015612fe657600080fd5b505af1158015612ffa573d6000803e3d6000fd5b50506007546040516336f1224960e11b81526001600160a01b039091169250636de244929150613032903390889086906004016146d8565b600060405180830381600087803b15801561304c57600080fd5b505af1158015613060573d6000803e3d6000fd5b50929695505050505050565b6001546040516321b443a360e21b81526001600160a01b038481166004830152909116906386d10e8c90602401602060405180830381865afa1580156130b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130da9190614666565b8110156109b05760405162461bcd60e51b815260206004820152603c60248201527f426f72726f7765724f70733a205472656e426f782773206e657420646562742060448201527f6d7573742062652067726561746572207468616e206d696e696d756d000000006064820152608401610cc3565b60008215613177576000836131648487614786565b61316e91906147b3565b915061317c9050565b506000195b9392505050565b600081156131b0578161319f68056bc75e2d6310000085614786565b6131a991906147b3565b9050610834565b50600019610834565b60015460405163316a306d60e11b81526001600160a01b038481166004830152909116906362d460da90602401602060405180830381865afa158015613203573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132279190614666565b8110156109b05760405162461bcd60e51b815260206004820152603960248201527f426f72726f7765724f70733a204f7065726174696f6e206d757374206c65617660448201527f65207472656e426f78207769746820494352203e3d20434352000000000000006064820152608401610cc3565b600154604051633c557a6f60e11b81526001600160a01b038481166004830152909116906378aaf4de90602401602060405180830381865afa1580156132e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061330a9190614666565b8110156109b05760405162461bcd60e51b815260206004820152604960248201527f426f72726f7765724f70733a20416e206f7065726174696f6e2074686174207760448201527f6f756c6420726573756c7420696e20494352203c204d4352206973206e6f74206064820152681c195c9b5a5d1d195960ba1b608482015260a401610cc3565b600054604051633ac5bc0160e21b81526001600160a01b038481166004830152602482018490529091169063eb16f00490604401600060405180830381600087803b1580156133df57600080fd5b505af11580156133f3573d6000803e3d6000fd5b50506000546109b092503391506001600160a01b03166134138585613dfc565b6001600160a01b038616929190613f34565b60065460405163c5739d0b60e01b81526001600160a01b038681166004830152600092849291169063c5739d0b90602401602060405180830381865afa158015613473573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134979190614666565b60005460405163c5739d0b60e01b81526001600160a01b0389811660048301529091169063c5739d0b90602401602060405180830381865afa1580156134e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135059190614666565b61350f9190614695565b6135199190614695565b6001546040516391bbfd0d60e01b81526001600160a01b0388811660048301529293509116906391bbfd0d90602401602060405180830381865afa158015613565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135899190614666565b8111156135cb5760405162461bcd60e51b815260206004820152601060248201526f045786365656473206d696e74206361760841b6044820152606401610cc3565b60005460405163f8585db360e01b81526001600160a01b038781166004830152602482018590529091169063f8585db390604401600060405180830381600087803b15801561361957600080fd5b505af115801561362d573d6000803e3d6000fd5b5050600554604051636361ddf360e11b81526001600160a01b03909116925063c6c3bbe69150613665908890889088906004016146d8565b600060405180830381600087803b15801561367f57600080fd5b505af1158015613693573d6000803e3d6000fd5b505050505050505050565b80600003611f655760405162461bcd60e51b815260206004820152603760248201527f426f72726f7765724f70733a204465627420696e63726561736520726571756960448201527f726573206e6f6e2d7a65726f20646562744368616e67650000000000000000006064820152608401610cc3565b81158061371f575080155b6109b05760405162461bcd60e51b815260206004820152603060248201527f426f72726f7765724f7065726174696f6e733a2043616e6e6f7420776974686460448201526f1c985dc8185b99081859190818dbdb1b60821b6064820152608401610cc3565b8215158061379157508115155b8061379b57508015155b6128585760405162461bcd60e51b815260206004820152604660248201527f426f72726f7765724f70733a205468657265206d75737420626520656974686560448201527f72206120636f6c6c61746572616c206368616e6765206f7220612064656274206064820152656368616e676560d01b608482015260a401610cc3565b600080831561383057508290506001613834565b8291505b9250929050565b600080600061384e8a8a8a8a8a8a613f8e565b91509150600061385f83838761314f565b9b9a5050505050505050505050565b83156138aa5761387d83613fcc565b81156138a557613892858261010001516131b9565b6138a58161010001518260e00151614040565b610b3c565b6138b98582610100015161329c565b6138d785826060015183602001518460800151868660400151612b7c565b6101208201819052610b3c908690612bf2565b60015460405163c08261db60e01b81526001600160a01b038481166004830152600092169063c08261db90602401602060405180830381865afa158015613935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139599190614666565b61083190836146fc565b60015460405163c08261db60e01b81526001600160a01b0385811660048301529091169063c08261db90602401602060405180830381865afa1580156139ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139d19190614666565b6139db90836146fc565b8111156128585760405162461bcd60e51b815260206004820152604560248201527f426f72726f7765724f70733a20416d6f756e7420726570616964206d7573742060448201527f6e6f74206265206c6172676572207468616e20746865205472656e426f782773606482015264081919589d60da1b608482015260a401610cc3565b600080600085613ae457600f546040516333eeaefd60e01b81526001600160a01b03909116906333eeaefd90613a9c908c908c908c906004016146d8565b6020604051808303816000875af1158015613abb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613adf9190614666565b613b5b565b600f5460405163061e9dc360e01b81526001600160a01b039091169063061e9dc390613b18908c908c908c906004016146d8565b6020604051808303816000875af1158015613b37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b5b9190614666565b9050600084613be057600f54604051631cc12cc760e11b81526001600160a01b0390911690633982598e90613b98908d908d908b906004016146d8565b6020604051808303816000875af1158015613bb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bdb9190614666565b613c57565b600f5460405163c2bac5f160e01b81526001600160a01b039091169063c2bac5f190613c14908d908d908b906004016146d8565b6020604051808303816000875af1158015613c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c579190614666565b919a91995090975050505050505050565b6000806000613c7b898989898989613f8e565b915091506000612be48383613183565b8115613ca257613c9d87878584613425565b613caf565b613caf8787856000612ce7565b8315613cc457613cbf8786613391565b611f21565b6000546040516347878f1560e01b81526001600160a01b03909116906347878f1590613cf8908a908a908a906004016146d8565b600060405180830381600087803b158015613d1257600080fd5b505af11580156126e1573d6000803e3d6000fd5b613d2f826140b8565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115613d7457612858828261411d565b6109b061418a565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610a0d57604051631afcd79f60e31b815260040160405180910390fd5b611f32613d7c565b600080613dd984610ba3565b90506000613de68561083a565b9050613df382828661314f565b95945050505050565b60006001600160a01b038316613e2557604051631dcb38eb60e11b815260040160405180910390fd5b81600003613e3557506000610834565b6000836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e9991906147c7565b905060128160ff161015613efc576000613eb48260126147ea565b613ebf90600a6148e7565b9050613ecb81856148f6565b15613ee957604051630f51ac8560e31b815260040160405180910390fd5b613ef381856147b3565b92505050610834565b60128160ff161115613f2c576000613f156012836147ea565b613f2090600a6148e7565b9050613ef38185614786565b509092915050565b61097584856001600160a01b03166323b872dd868686604051602401613f5c939291906146d8565b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506141a9565b600080878786613fa757613fa2888b6146fc565b613fb1565b613fb1888b614695565b915084613fc257613bdb868a6146fc565b613c57868a614695565b8015611f655760405162461bcd60e51b815260206004820152603e60248201527f426f72726f7765724f70733a20436f6c6c61746572616c20776974686472617760448201527f616c206e6f74207065726d6974746564205265636f76657279204d6f646500006064820152608401610cc3565b808210156109b0576040805162461bcd60e51b81526020600482015260248101919091527f426f72726f7765724f70733a2043616e6e6f7420646563726561736520796f7560448201527f72205472656e426f7827732049435220696e205265636f76657279204d6f64656064820152608401610cc3565b806001600160a01b03163b6000036140ee57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610cc3565b60008051602061492783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b03168460405161413a919061490a565b600060405180830381855af49150503d8060008114614175576040519150601f19603f3d011682016040523d82523d6000602084013e61417a565b606091505b5091509150613df385838361420c565b3415610a0d5760405163b398979f60e01b815260040160405180910390fd5b60006141be6001600160a01b03841683614268565b905080516000141580156141e35750808060200190518101906141e19190614753565b155b1561285857604051635274afe760e01b81526001600160a01b0384166004820152602401610cc3565b6060826142215761421c82614276565b61317c565b815115801561423857506001600160a01b0384163b155b1561426157604051639996b31560e01b81526001600160a01b0385166004820152602401610cc3565b508061317c565b60606108318383600061429f565b8051156142865780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6060814710156142c45760405163cd78605960e01b8152306004820152602401610cc3565b600080856001600160a01b031684866040516142e0919061490a565b60006040518083038185875af1925050503d806000811461431d576040519150601f19603f3d011682016040523d82523d6000602084013e614322565b606091505b509150915061433286838361420c565b9695505050505050565b80356001600160a01b038116811461435357600080fd5b919050565b60006020828403121561436a57600080fd5b6108318261433c565b6000806040838503121561438657600080fd5b61438f8361433c565b946020939093013593505050565b600080600080608085870312156143b357600080fd5b6143bc8561433c565b9350602085013592506143d16040860161433c565b91506143df6060860161433c565b905092959194509250565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561441357600080fd5b61441c8361433c565b9150602083013567ffffffffffffffff8082111561443957600080fd5b818501915085601f83011261444d57600080fd5b81358181111561445f5761445f6143ea565b604051601f8201601f19908116603f01168101908382118183101715614487576144876143ea565b816040528281528860208487010111156144a057600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b838110156144dd5781810151838201526020016144c5565b50506000910152565b60208152600082518060208401526145058160408501602087016144c2565b601f01601f19169190910160400192915050565b6000806020838503121561452c57600080fd5b823567ffffffffffffffff8082111561454457600080fd5b818501915085601f83011261455857600080fd5b81358181111561456757600080fd5b8660208260051b850101111561457c57600080fd5b60209290920196919550909350505050565b600080600080600060a086880312156145a657600080fd5b6145af8661433c565b945060208601359350604086013592506145cb6060870161433c565b91506145d96080870161433c565b90509295509295909350565b8015158114611f6557600080fd5b600080600080600080600060e0888a03121561460e57600080fd5b6146178861433c565b9650602088013595506040880135945060608801359350608088013561463c816145e5565b925061464a60a0890161433c565b915061465860c0890161433c565b905092959891949750929550565b60006020828403121561467857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156108345761083461467f565b6001600160a01b0392831681529116602082015260400190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b818103818111156108345761083461467f565b6003811061472d57634e487b7160e01b600052602160045260246000fd5b9052565b848152602081018490526040810183905260808101613df3606083018461470f565b60006020828403121561476557600080fd5b815161317c816145e5565b634e487b7160e01b600052600160045260246000fd5b80820281158282048414176108345761083461467f565b634e487b7160e01b600052601260045260246000fd5b6000826147c2576147c261479d565b500490565b6000602082840312156147d957600080fd5b815160ff8116811461317c57600080fd5b60ff82811682821603908111156108345761083461467f565b600181815b8085111561483e5781600019048211156148245761482461467f565b8085161561483157918102915b93841c9390800290614808565b509250929050565b60008261485557506001610834565b8161486257506000610834565b816001811461487857600281146148825761489e565b6001915050610834565b60ff8411156148935761489361467f565b50506001821b610834565b5060208310610133831016604e8410600b84101617156148c1575081810a610834565b6148cb8383614803565b80600019048211156148df576148df61467f565b029392505050565b600061083160ff841683614846565b6000826149055761490561479d565b500690565b6000825161491c8184602087016144c2565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca164736f6c6343000817000a",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimCollateral(address)": {
        "notice": "Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery Mode"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9891,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "activePool",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9893,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "adminContract",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9895,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "borrowerOperations",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9897,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "collSurplusPool",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9899,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "communityIssuance",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 9901,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "debtToken",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 9903,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "defaultPool",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 9905,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "feeCollector",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 9907,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "gasPoolAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 9909,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "trenStaking",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 9911,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "priceFeed",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 9913,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "sortedTrenBoxes",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 9915,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 9917,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "timelockAddress",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 9919,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 9921,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "trenBoxManager",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 9923,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "trenBoxManagerOperations",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 9925,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "isAddressSetupInitialized",
        "offset": 20,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 9930,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "__gap",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_uint256)33_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)33_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[33]",
        "numberOfBytes": "1056"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}