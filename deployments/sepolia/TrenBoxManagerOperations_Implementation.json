{
  "address": "0x758507DAAa0537e23ca55EBf33e1C64Cb4Ab3d36",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__CommunityIssuanceZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__LengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__SetupIsInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__TRENStakingZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "address_",
          "type": "address"
        }
      ],
      "name": "ConfigurableAddresses__ZeroAddresses",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "feePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "TrenBase__FeeExceededMax",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TrenBoxManagerOperations__EmptyAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lowerBoundary",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "upperBoundary",
          "type": "uint256"
        }
      ],
      "name": "TrenBoxManagerOperations__FeePercentOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "availableBalance",
          "type": "uint256"
        }
      ],
      "name": "TrenBoxManagerOperations__InsufficientDebtTokenBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TrenBoxManagerOperations__InvalidArraySize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TrenBoxManagerOperations__InvalidParam",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TrenBoxManagerOperations__NotTimelock",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TrenBoxManagerOperations__NothingToLiquidate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TrenBoxManagerOperations__OnlyTrenBoxManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TrenBoxManagerOperations__RedemptionIsBlocked",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tcr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mcr",
          "type": "uint256"
        }
      ],
      "name": "TrenBoxManagerOperations__TCRMustBeAboveMCR",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TrenBoxManagerOperations__TrenBoxNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TrenBoxManagerOperations__UnableToRedeemAnyAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_liquidatedDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_liquidatedColl",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collGasCompensation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debtTokenGasCompensation",
          "type": "uint256"
        }
      ],
      "name": "Liquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_attemptedDebtAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_actualDebtAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collSent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collFee",
          "type": "uint256"
        }
      ],
      "name": "Redemption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_redemptionSofteningParam",
          "type": "uint256"
        }
      ],
      "name": "RedemptionSoftenParamChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ITrenBoxManager.TrenBoxManagerOperation",
          "name": "_operation",
          "type": "uint8"
        }
      ],
      "name": "TrenBoxLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BATCH_SIZE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "authorizeUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_trenBoxArray",
          "type": "address[]"
        }
      ],
      "name": "batchLiquidateTrenBoxes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collSurplusPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityIssuance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        }
      ],
      "name": "computeNominalCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_CR",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numTrials",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_inputRandomSeed",
          "type": "uint256"
        }
      ],
      "name": "getApproxHint",
      "outputs": [
        {
          "internalType": "address",
          "name": "hintAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "diff",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "latestRandomSeed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getEntireSystemColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemColl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getEntireSystemDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxIterations",
          "type": "uint256"
        }
      ],
      "name": "getRedemptionHints",
      "outputs": [
        {
          "internalType": "address",
          "name": "firstRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "partialRedemptionHintNewICR",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "truncatedDebtTokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAddressSetupInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_n",
          "type": "uint256"
        }
      ],
      "name": "liquidateTrenBoxes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperPartialRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerPartialRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_firstRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_partialRedemptionHintNICR",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxIterations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "redeemCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionSofteningParam",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_communityIssuance",
          "type": "address"
        }
      ],
      "name": "setCommunityIssuance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_redemptionSofteningParam",
          "type": "uint256"
        }
      ],
      "name": "setRedemptionSofteningParam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trenStaking",
          "type": "address"
        }
      ],
      "name": "setTRENStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTrenBoxes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManagerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf70ad4a0f22bb82509665a741138f4dcb9a145b3c2c35d0b99ea85cf009a1b91",
  "receipt": {
    "to": null,
    "from": "0x19E733F20aAdaB8996f7895ACBD04f746BF4Aac1",
    "contractAddress": "0x758507DAAa0537e23ca55EBf33e1C64Cb4Ab3d36",
    "transactionIndex": 52,
    "gasUsed": "5079450",
    "logsBloom": "0x
    "blockHash": "0xda3f1f80ae6b35913e90370dc449a27a7fefc71038fb45bb25ea9fd17be1e326",
    "transactionHash": "0xf70ad4a0f22bb82509665a741138f4dcb9a145b3c2c35d0b99ea85cf009a1b91",
    "logs": [],
    "blockNumber": 5678782,
    "cumulativeGasUsed": "10402160",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "95c5aca5a7d37a227eda09db9261aa6b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__CommunityIssuanceZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__SetupIsInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__TRENStakingZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"ConfigurableAddresses__ZeroAddresses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePercentage\",\"type\":\"uint256\"}],\"name\":\"TrenBase__FeeExceededMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrenBoxManagerOperations__EmptyAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lowerBoundary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBoundary\",\"type\":\"uint256\"}],\"name\":\"TrenBoxManagerOperations__FeePercentOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"availableBalance\",\"type\":\"uint256\"}],\"name\":\"TrenBoxManagerOperations__InsufficientDebtTokenBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrenBoxManagerOperations__InvalidArraySize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrenBoxManagerOperations__InvalidParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrenBoxManagerOperations__NotTimelock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrenBoxManagerOperations__NothingToLiquidate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrenBoxManagerOperations__OnlyTrenBoxManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrenBoxManagerOperations__RedemptionIsBlocked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tcr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mcr\",\"type\":\"uint256\"}],\"name\":\"TrenBoxManagerOperations__TCRMustBeAboveMCR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrenBoxManagerOperations__TrenBoxNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrenBoxManagerOperations__UnableToRedeemAnyAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidatedDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidatedColl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collGasCompensation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debtTokenGasCompensation\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_attemptedDebtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actualDebtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collFee\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_redemptionSofteningParam\",\"type\":\"uint256\"}],\"name\":\"RedemptionSoftenParamChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ITrenBoxManager.TrenBoxManagerOperation\",\"name\":\"_operation\",\"type\":\"uint8\"}],\"name\":\"TrenBoxLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BATCH_SIZE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"authorizeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_trenBoxArray\",\"type\":\"address[]\"}],\"name\":\"batchLiquidateTrenBoxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collSurplusPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityIssuance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"}],\"name\":\"computeNominalCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_CR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numTrials\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inputRandomSeed\",\"type\":\"uint256\"}],\"name\":\"getApproxHint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"hintAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"diff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestRandomSeed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIterations\",\"type\":\"uint256\"}],\"name\":\"getRedemptionHints\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"firstRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partialRedemptionHintNewICR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"truncatedDebtTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAddressSetupInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"liquidateTrenBoxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperPartialRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerPartialRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_firstRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_partialRedemptionHintNICR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIterations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"}],\"name\":\"redeemCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionSofteningParam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityIssuance\",\"type\":\"address\"}],\"name\":\"setCommunityIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redemptionSofteningParam\",\"type\":\"uint256\"}],\"name\":\"setRedemptionSofteningParam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trenStaking\",\"type\":\"address\"}],\"name\":\"setTRENStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTrenBoxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManagerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TrenBoxManagerOperations.sol\":\"TrenBoxManagerOperations\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"contracts/Dependencies/ConfigurableAddresses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract ConfigurableAddresses is OwnableUpgradeable {\\n    address public activePool;\\n    address public adminContract;\\n    address public borrowerOperations;\\n    address public collSurplusPool;\\n    address public communityIssuance;\\n    address public debtToken;\\n    address public defaultPool;\\n    address public feeCollector;\\n    address public flashLoanAddress;\\n    address public gasPoolAddress;\\n    address public trenStaking;\\n    address public priceFeed;\\n    address public sortedTrenBoxes;\\n    address public stabilityPool;\\n    address public timelockAddress;\\n    address public treasuryAddress;\\n    address public trenBoxManager;\\n    address public trenBoxManagerOperations;\\n\\n    bool public isAddressSetupInitialized;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[33] private __gap; // Goerli uses 47; Arbitrum uses 33\\n\\n    error ConfigurableAddresses__SetupIsInitialized();\\n    error ConfigurableAddresses__ZeroAddresses(uint256 position, address address_);\\n    error ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n    error ConfigurableAddresses__TRENStakingZeroAddress();\\n    error ConfigurableAddresses__LengthMismatch();\\n\\n    // Dependency setters\\n    // -----------------------------------------------------------------------------------------------\\n\\n    function setAddresses(address[] calldata _addresses) external onlyOwner {\\n        if (isAddressSetupInitialized) {\\n            revert ConfigurableAddresses__SetupIsInitialized();\\n        }\\n        if (_addresses.length != 16) {\\n            revert ConfigurableAddresses__LengthMismatch();\\n        }\\n\\n        for (uint256 i = 0; i < 16; i++) {\\n            if (_addresses[i] == address(0)) {\\n                revert ConfigurableAddresses__ZeroAddresses(i, _addresses[i]);\\n            }\\n        }\\n        activePool = _addresses[0];\\n        adminContract = _addresses[1];\\n        borrowerOperations = _addresses[2];\\n        collSurplusPool = _addresses[3];\\n        debtToken = _addresses[4];\\n        defaultPool = _addresses[5];\\n        feeCollector = _addresses[6];\\n        flashLoanAddress = _addresses[7];\\n        gasPoolAddress = _addresses[8];\\n        priceFeed = _addresses[9];\\n        sortedTrenBoxes = _addresses[10];\\n        stabilityPool = _addresses[11];\\n        timelockAddress = _addresses[12];\\n        treasuryAddress = _addresses[13];\\n        trenBoxManager = _addresses[14];\\n        trenBoxManagerOperations = _addresses[15];\\n\\n        isAddressSetupInitialized = true;\\n    }\\n\\n    function setCommunityIssuance(address _communityIssuance) public onlyOwner {\\n        if (_communityIssuance == address(0)) {\\n            revert ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n        }\\n        communityIssuance = _communityIssuance;\\n    }\\n\\n    function setTRENStaking(address _trenStaking) public onlyOwner {\\n        if (_trenStaking == address(0)) {\\n            revert ConfigurableAddresses__TRENStakingZeroAddress();\\n        }\\n        trenStaking = _trenStaking;\\n    }\\n}\\n\",\"keccak256\":\"0xaf7c303784379bebf2e43e41c33c27c1309a639d360b5823240b1a8f5935b064\",\"license\":\"MIT\"},\"contracts/Dependencies/TrenBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { ConfigurableAddresses } from \\\"./ConfigurableAddresses.sol\\\";\\nimport { TrenMath } from \\\"./TrenMath.sol\\\";\\nimport { IActivePool } from \\\"../Interfaces/IActivePool.sol\\\";\\nimport { IDefaultPool } from \\\"../Interfaces/IDefaultPool.sol\\\";\\nimport { IAdminContract } from \\\"../Interfaces/IAdminContract.sol\\\";\\nimport { IDefaultPool } from \\\"../Interfaces/IDefaultPool.sol\\\";\\nimport { TrenMath } from \\\"./TrenMath.sol\\\";\\n\\n/*\\n* Base contract for TrenBoxManager, BorrowerOperations and StabilityPool. Contains global system\\nconstants and\\n * common functions.\\n */\\nabstract contract TrenBase is OwnableUpgradeable, ConfigurableAddresses {\\n    struct Colls {\\n        address[] tokens;\\n        uint256[] amounts;\\n    }\\n\\n    error TrenBase__FeeExceededMax(uint256 feePercentage, uint256 maxFeePercentage);\\n\\n    // --- Gas compensation functions ---\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trenBox, for the purpose of\\n    // ICR calculation\\n    function _getCompositeDebt(address _asset, uint256 _debt) internal view returns (uint256) {\\n        return _debt + IAdminContract(adminContract).getDebtTokenGasCompensation(_asset);\\n    }\\n\\n    function _getNetDebt(address _asset, uint256 _debt) internal view returns (uint256) {\\n        return _debt - IAdminContract(adminContract).getDebtTokenGasCompensation(_asset);\\n    }\\n\\n    // Return the amount of ETH to be drawn from a trenBox's collateral and sent as gas\\n    // compensation.\\n    function _getCollGasCompensation(\\n        address _asset,\\n        uint256 _entireColl\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _entireColl / IAdminContract(adminContract).getPercentDivisor(_asset);\\n    }\\n\\n    function getEntireSystemColl(address _asset) public view returns (uint256 entireSystemColl) {\\n        uint256 activeColl = IActivePool(activePool).getAssetBalance(_asset);\\n        uint256 liquidatedColl = IDefaultPool(defaultPool).getAssetBalance(_asset);\\n        return activeColl + liquidatedColl;\\n    }\\n\\n    function getEntireSystemDebt(address _asset) public view returns (uint256 entireSystemDebt) {\\n        uint256 activeDebt = IActivePool(activePool).getDebtTokenBalance(_asset);\\n        uint256 closedDebt = IDefaultPool(defaultPool).getDebtTokenBalance(_asset);\\n        return activeDebt + closedDebt;\\n    }\\n\\n    function _getTCR(address _asset, uint256 _price) internal view returns (uint256 TCR) {\\n        uint256 entireSystemColl = getEntireSystemColl(_asset);\\n        uint256 entireSystemDebt = getEntireSystemDebt(_asset);\\n        TCR = TrenMath._computeCR(entireSystemColl, entireSystemDebt, _price);\\n    }\\n\\n    function _checkRecoveryMode(address _asset, uint256 _price) internal view returns (bool) {\\n        uint256 TCR = _getTCR(_asset, _price);\\n        return TCR < IAdminContract(adminContract).getCcr(_asset);\\n    }\\n\\n    function _requireUserAcceptsFee(\\n        uint256 _fee,\\n        uint256 _amount,\\n        uint256 _maxFeePercentage\\n    )\\n        internal\\n        view\\n    {\\n        uint256 feePercentage = (_fee * IAdminContract(adminContract).DECIMAL_PRECISION()) / _amount;\\n        if (feePercentage > _maxFeePercentage) {\\n            revert TrenBase__FeeExceededMax(feePercentage, _maxFeePercentage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1a151376a146abaf01cfff167eba6a1e5994ec67237ab7b60048769f8d2c4e78\",\"license\":\"MIT\"},\"contracts/Dependencies/TrenMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nuint256 constant DECIMAL_PRECISION = 1 ether;\\n\\nlibrary TrenMath {\\n    uint256 internal constant EXPONENT_CAP = 525_600_000;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n    * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity\\n    floor division.\\n     *\\n    * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39\\n    ETH,\\n    * and will only truncate to 0 if the denominator is at least 1e20 times greater than the\\n    numerator.\\n     *\\n     */\\n    uint256 internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /*\\n     * Multiply two decimal numbers and use normal rounding rules:\\n     * -round product up if 19'th mantissa digit >= 5\\n     * -round product down if 19'th mantissa digit < 5\\n     *\\n     * Used only inside the exponentiation, _decPow().\\n     */\\n    function decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\n        uint256 prod_xy = x * y;\\n\\n        decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\n    }\\n\\n    /*\\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n     *\\n     * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n     *\\n     * Called by two functions that represent time in units of minutes:\\n     * 1) TrenBoxManager._calcDecayedBaseRate\\n     * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n     *\\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n     * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n     *\\n    * If a period of > 1000 years is ever used as an exponent in either of the above functions, the\\n    result will be\\n     * negligibly different from just passing the cap, since:\\n     *\\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n    * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will\\n    be negligible\\n     */\\n    function _decPow(uint256 _base, uint256 _minutes) internal pure returns (uint256) {\\n        if (_minutes > EXPONENT_CAP) {\\n            _minutes = EXPONENT_CAP;\\n        } // cap to avoid overflow\\n\\n        if (_minutes == 0) {\\n            return DECIMAL_PRECISION;\\n        }\\n\\n        uint256 y = DECIMAL_PRECISION;\\n        uint256 x = _base;\\n        uint256 n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n / 2;\\n            } else {\\n                // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n - 1) / 2;\\n            }\\n        }\\n\\n        return decMul(x, y);\\n    }\\n\\n    function _getAbsoluteDifference(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a >= _b) ? _a - _b : _b - _a;\\n    }\\n\\n    function _computeNominalCR(uint256 _coll, uint256 _debt) internal pure returns (uint256) {\\n        if (_debt != 0) {\\n            return (_coll * NICR_PRECISION) / _debt;\\n        }\\n        // Return the maximal value for uint256 if the TrenBox has a debt of 0. Represents\\n        // \\\"infinite\\\"\\n        // CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n\\n    function _computeCR(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _price\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_debt != 0) {\\n            uint256 newCollRatio = (_coll * _price) / _debt;\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the TrenBox has a debt of 0. Represents\\n        // \\\"infinite\\\"\\n        // CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe994e212c74767f28667a0656d52a8178622016c50f0406914e485483576c40c\",\"license\":\"MIT\"},\"contracts/Interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { IPool } from \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    event ActivePoolDebtUpdated(address _asset, uint256 _debtTokenAmount);\\n    event ActivePoolAssetBalanceUpdated(address _asset, uint256 _balance);\\n\\n    error ActivePool__NotAuthorizedContract();\\n\\n    function sendAsset(address _asset, address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x0bd10156dfe4866f7b3d64483150149cac29d72d9b3a73144045f53e2396f5ff\",\"license\":\"MIT\"},\"contracts/Interfaces/IAdminContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IAdminContract {\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    struct CollateralParams {\\n        uint256 decimals;\\n        uint256 index; // Maps to token address in validCollateral[]\\n        bool active;\\n        uint256 borrowingFee;\\n        uint256 ccr;\\n        uint256 mcr;\\n        uint256 debtTokenGasCompensation; // Amount of debtToken to be locked in gas pool on opening\\n            // trenBoxes\\n        uint256 minNetDebt; // Minimum amount of net debtToken a trenBox must have\\n        uint256 mintCap;\\n        uint256 percentDivisor;\\n        uint256 redemptionFeeFloor;\\n        uint256 redemptionBlockTimestamp;\\n    }\\n\\n    struct FlashLoanParams {\\n        uint256 flashLoanFee; // 10 = 0,1%, 100 = 10% => 10 out of $1000 = $10\\n        uint256 flashLoanMinDebt; // min amount of trenUSD to mint for Flash Loan\\n        uint256 flashLoanMaxDebt; // max amount of trenUSD to mint for Flash Loan\\n    }\\n\\n    // Custom Errors\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    error SafeCheckError(string parameter, uint256 valueEntered, uint256 minValue, uint256 maxValue);\\n    error AdminContract__OnlyOwner();\\n    error AdminContract__OnlyTimelock();\\n    error AdminContract__CollateralAlreadyInitialized();\\n    error AdminContract__CollateralExists();\\n    error AdminContract__CollateralDoesNotExist();\\n    error AdminContract__CollateralNotConfigured();\\n\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    event CollateralAdded(address _collateral);\\n    event MCRChanged(uint256 oldMCR, uint256 newMCR);\\n    event CCRChanged(uint256 oldCCR, uint256 newCCR);\\n    event MinNetDebtChanged(uint256 oldMinNet, uint256 newMinNet);\\n    event PercentDivisorChanged(uint256 oldPercentDiv, uint256 newPercentDiv);\\n    event BorrowingFeeChanged(uint256 oldBorrowingFee, uint256 newBorrowingFee);\\n    event RedemptionFeeFloorChanged(uint256 oldRedemptionFeeFloor, uint256 newRedemptionFeeFloor);\\n    event MintCapChanged(uint256 oldMintCap, uint256 newMintCap);\\n    event RedemptionBlockTimestampChanged(address _collateral, uint256 _blockTimestamp);\\n    event FlashLoanFeeChanged(uint256 oldFee, uint256 newFee);\\n    event FlashLoanMinDebtChanged(uint256 oldMinDebt, uint256 newMinDebt);\\n    event FlashLoanMaxDebtChanged(uint256 oldMaxDebt, uint256 newMaxDebt);\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    function DECIMAL_PRECISION() external view returns (uint256);\\n\\n    function _100pct() external view returns (uint256);\\n\\n    function addNewCollateral(\\n        address _collateral,\\n        uint256 _debtTokenGasCompensation,\\n        uint256 _decimals\\n    )\\n        external;\\n\\n    function setCollateralParameters(\\n        address _collateral,\\n        uint256 borrowingFee,\\n        uint256 ccr,\\n        uint256 mcr,\\n        uint256 minNetDebt,\\n        uint256 mintCap,\\n        uint256 percentDivisor,\\n        uint256 redemptionFeeFloor\\n    )\\n        external;\\n\\n    function setMCR(address _collateral, uint256 newMCR) external;\\n\\n    function setCCR(address _collateral, uint256 newCCR) external;\\n\\n    function setMinNetDebt(address _collateral, uint256 minNetDebt) external;\\n\\n    function setPercentDivisor(address _collateral, uint256 precentDivisor) external;\\n\\n    function setBorrowingFee(address _collateral, uint256 borrowingFee) external;\\n\\n    function setRedemptionFeeFloor(address _collateral, uint256 redemptionFeeFloor) external;\\n\\n    function setMintCap(address _collateral, uint256 mintCap) external;\\n\\n    function setRedemptionBlockTimestamp(address _collateral, uint256 _blockTimestamp) external;\\n\\n    function getIndex(address _collateral) external view returns (uint256);\\n\\n    function getIsActive(address _collateral) external view returns (bool);\\n\\n    function getValidCollateral() external view returns (address[] memory);\\n\\n    function getMcr(address _collateral) external view returns (uint256);\\n\\n    function getCcr(address _collateral) external view returns (uint256);\\n\\n    function getDebtTokenGasCompensation(address _collateral) external view returns (uint256);\\n\\n    function getMinNetDebt(address _collateral) external view returns (uint256);\\n\\n    function getPercentDivisor(address _collateral) external view returns (uint256);\\n\\n    function getBorrowingFee(address _collateral) external view returns (uint256);\\n\\n    function getRedemptionFeeFloor(address _collateral) external view returns (uint256);\\n\\n    function getRedemptionBlockTimestamp(address _collateral) external view returns (uint256);\\n\\n    function getMintCap(address _collateral) external view returns (uint256);\\n\\n    function getTotalAssetDebt(address _asset) external view returns (uint256);\\n\\n    function getFlashLoanFee() external view returns (uint256);\\n\\n    function getFlashLoanMinNetDebt() external view returns (uint256);\\n\\n    function getFlashLoanMaxNetDebt() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5f98c866a63d63b59693a26e2f8a7df6da6c3d4a20514435834298758198db05\",\"license\":\"MIT\"},\"contracts/Interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IDeposit } from \\\"./IDeposit.sol\\\";\\n\\ninterface ICollSurplusPool is IDeposit {\\n    // --- Events ---\\n\\n    event CollBalanceUpdated(address indexed _account, uint256 _newBalance);\\n    event AssetSent(address _to, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function getAssetBalance(address _asset) external view returns (uint256);\\n\\n    function getCollateral(address _asset, address _account) external view returns (uint256);\\n\\n    function accountSurplus(address _asset, address _account, uint256 _amount) external;\\n\\n    function claimColl(address _asset, address _account) external;\\n}\\n\",\"keccak256\":\"0x47bd8cb30891e8dd1315b2b7b3a6e011de69dd67cf5bc6ff9fa732e1eda0552b\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDebtToken is IERC20 {\\n    event TokenBalanceUpdated(address _user, uint256 _amount);\\n    event EmergencyStopMintingCollateral(address _asset, bool state);\\n    event WhitelistChanged(address _whitelisted, bool whitelisted);\\n    event ProtocolContractsAddressesSet(\\n        address borrowerOperations, address stabilityPool, address trenBoxManager\\n    );\\n\\n    error DebtToken__MintBlockedForCollateral(address collateral);\\n    error DebtToken__InvalidAddressToConnect();\\n    error DebtToken__CannotTransferTokensToZeroAddress();\\n    error DebtToken__CannotTransferTokensToTokenContract();\\n    error DebtToken__NotWhitelistedContract(address notWhitelistedContract);\\n    error DebtToken__CallerIsNotBorrowerOperations(address caller);\\n    error DebtToken__CallerIsNotStabilityPool(address caller);\\n    error DebtToken__CannotBurnTokens();\\n    error DebtToken__CannotReturnFromPool();\\n\\n    function emergencyStopMinting(address _asset, bool status) external;\\n\\n    function mint(address _asset, address _account, uint256 _amount) external;\\n\\n    function mintFromWhitelistedContract(uint256 _amount) external;\\n\\n    function burnFromWhitelistedContract(uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function sendToPool(address _sender, address poolAddress, uint256 _amount) external;\\n\\n    function returnFromPool(address poolAddress, address user, uint256 _amount) external;\\n\\n    function addWhitelist(address _address) external;\\n\\n    function removeWhitelist(address _address) external;\\n}\\n\",\"keccak256\":\"0x4c48896e514f0900029e5b4433bbb627cf2aea7102f792cac729ca9cd79782d1\",\"license\":\"MIT\"},\"contracts/Interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IPool } from \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event DefaultPoolDebtUpdated(address _asset, uint256 _debt);\\n    event DefaultPoolAssetBalanceUpdated(address _asset, uint256 _balance);\\n\\n    // --- Functions ---\\n    function sendAssetToActivePool(address _asset, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xe68312fe3192b59bea18d1c3f027842418c10ad647f3e282bace8417ba656327\",\"license\":\"MIT\"},\"contracts/Interfaces/IDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IDeposit {\\n    function receivedERC20(address _asset, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xedebb2b3e0c98d165db1f1b4a3b5e96f2b327cd7bc2ad1b1c07abdd1f47bce17\",\"license\":\"MIT\"},\"contracts/Interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IPool {\\n    // --- Events ---\\n\\n    event AssetSent(address _to, address indexed _asset, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function getAssetBalance(address _asset) external view returns (uint256);\\n\\n    function getDebtTokenBalance(address _asset) external view returns (uint256);\\n\\n    function increaseDebt(address _asset, uint256 _amount) external;\\n\\n    function decreaseDebt(address _asset, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x0ebfb25e4c8b578c35933bb6bcfaea9688e88047060b6f861fbc0bda25928bab\",\"license\":\"MIT\"},\"contracts/Interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\n/**\\n * @dev from\\n * https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\n */\\ninterface ChainlinkAggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\\ninterface IPriceFeed {\\n    // Enums\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    enum ProviderType {\\n        Chainlink,\\n        API3\\n    }\\n\\n    // Structs\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    struct OracleRecord {\\n        address oracleAddress;\\n        ProviderType providerType;\\n        uint256 timeoutSeconds;\\n        uint256 decimals;\\n        bool isEthIndexed;\\n    }\\n\\n    // Custom Errors\\n    // --------------------------------------------------------------------------------------------------\\n\\n    error PriceFeed__ExistingOracleRequired();\\n    error PriceFeed__InvalidDecimalsError();\\n    error PriceFeed__InvalidOracleResponseError(address token);\\n    error PriceFeed__TimelockOnlyError();\\n    error PriceFeed__UnknownAssetError();\\n\\n    // Events\\n    // ---------------------------------------------------------------------------------------------------------\\n\\n    event NewOracleRegistered(\\n        address token, address oracleAddress, bool isEthIndexed, bool isFallback\\n    );\\n\\n    // Functions\\n    // ------------------------------------------------------------------------------------------------------\\n\\n    function fetchPrice(address _token) external view returns (uint256);\\n\\n    function setOracle(\\n        address _token,\\n        address _oracle,\\n        ProviderType _type,\\n        uint256 _timeoutSeconds,\\n        bool _isEthIndexed,\\n        bool _isFallback\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0x9208bb29684a633dd16752d52a9d7f8e79dabe5bfc86070825a1f81ed982cfb0\",\"license\":\"MIT\"},\"contracts/Interfaces/ISortedTrenBoxes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface ISortedTrenBoxes {\\n    // --- Events ---\\n\\n    event NodeAdded(address indexed _asset, address _id, uint256 _NICR);\\n    event NodeRemoved(address indexed _asset, address _id);\\n\\n    error SortedTrenBoxer__ListDoesNotContainNode();\\n    error SortedTrenBoxes__ListAlreadyContainsNode();\\n    error SortedTrenBoxes__IdCannotBeZeroAddress();\\n    error SortedTrenBoxes__NICRMustBeGreaterThanZero();\\n    error SortedTrenBoxes__CallerMustBeTrenBoxManager();\\n    error SortedTrenBoxes__CallerMustBeBorrowerOperationsOrTrenBoxManager();\\n\\n    // --- Functions ---\\n\\n    function insert(\\n        address _asset,\\n        address _id,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external;\\n\\n    function remove(address _asset, address _id) external;\\n\\n    function reInsert(\\n        address _asset,\\n        address _id,\\n        uint256 _newICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external;\\n\\n    function contains(address _asset, address _id) external view returns (bool);\\n\\n    function isEmpty(address _asset) external view returns (bool);\\n\\n    function getSize(address _asset) external view returns (uint256);\\n\\n    function getFirst(address _asset) external view returns (address);\\n\\n    function getLast(address _asset) external view returns (address);\\n\\n    function getNext(address _asset, address _id) external view returns (address);\\n\\n    function getPrev(address _asset, address _id) external view returns (address);\\n\\n    function validInsertPosition(\\n        address _asset,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    function findInsertPosition(\\n        address _asset,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external\\n        view\\n        returns (address, address);\\n}\\n\",\"keccak256\":\"0x89ac6c5c4e5e22e0a056c76168cff32ab96695bd1bca98b1cc10c7ddea7d4ffb\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IDeposit } from \\\"./IDeposit.sol\\\";\\n\\ninterface IStabilityPool is IDeposit {\\n    // --- Structs ---\\n\\n    struct Snapshots {\\n        mapping(address => uint256) S;\\n        uint256 P;\\n        uint256 G;\\n        uint128 scale;\\n        uint128 epoch;\\n    }\\n\\n    // --- Events ---\\n\\n    event CommunityIssuanceAddressChanged(address newAddress);\\n    event DepositSnapshotUpdated(address indexed _depositor, uint256 _P, uint256 _G);\\n    event SystemSnapshotUpdated(uint256 _P, uint256 _G);\\n\\n    event AssetSent(address _asset, address _to, uint256 _amount);\\n    event GainsWithdrawn(\\n        address indexed _depositor,\\n        address[] _collaterals,\\n        uint256[] _amounts,\\n        uint256 _debtTokenLoss\\n    );\\n    event TRENPaidToDepositor(address indexed _depositor, uint256 _TREN);\\n    event StabilityPoolAssetBalanceUpdated(address _asset, uint256 _newBalance);\\n    event StabilityPoolDebtTokenBalanceUpdated(uint256 _newBalance);\\n    event StakeChanged(uint256 _newSystemStake, address _depositor);\\n    event UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\n\\n    event ProductUpdated(uint256 _P);\\n    event SumUpdated(address _asset, uint256 _S, uint128 _epoch, uint128 _scale);\\n    event GainsUpdated(uint256 _G, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    // --- Errors ---\\n\\n    error StabilityPool__ActivePoolOnly(address sender, address expected);\\n    error StabilityPool__AdminContractOnly(address sender, address expected);\\n    error StabilityPool__TrenBoxManagerOnly(address sender, address expected);\\n    error StabilityPool__ArrayNotInAscendingOrder();\\n    error StabilityPool__DebtLossBelowOne(uint256 debtLoss);\\n    error StabilityPool__DebtLargerThanTotalDeposits();\\n    error StabilityPool__ProductZero();\\n    error StabilityPool__AssetsAndAmountsLengthMismatch();\\n    error StabilityPool__UserHasNoDeposit();\\n    error StabilityPool__AmountMustBeNonZero();\\n\\n    // --- Functions ---\\n\\n    function addCollateralType(address _collateral) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is not zero\\n     * ---\\n    * - Triggers a TREN issuance, based on time passed since the last issuance. The TREN issuance is\\n    shared between *all* depositors.\\n     * - Sends depositor's accumulated gains (TREN, assets) to depositor\\n     */\\n    function provideToSP(uint256 _amount, address[] calldata _assets) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized trenBoxes left in the system\\n     * - User has a non zero deposit\\n     * ---\\n    * - Triggers a TREN issuance, based on time passed since the last issuance. The TREN issuance is\\n    shared between *all* depositors.\\n     * - Sends all depositor's accumulated gains (TREN, assets) to depositor\\n     * - Decreases deposit's stake, and takes new snapshots.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint256 _amount, address[] calldata _assets) external;\\n\\n    /*\\n    Initial checks:\\n    * - Caller is TrenBoxManager\\n    * ---\\n    * Cancels out the specified debt against the debt token contained in the Stability Pool (as far\\n    as possible)\\n    * and transfers the TrenBox's collateral from ActivePool to StabilityPool.\\n    * Only called by liquidation functions in the TrenBoxManager.\\n    */\\n    function offset(uint256 _debt, address _asset, uint256 _coll) external;\\n\\n    /*\\n    * Returns debt tokens held in the pool. Changes when users deposit/withdraw, and when TrenBox\\n    debt is offset.\\n     */\\n    function getTotalDebtTokenDeposits() external view returns (uint256);\\n\\n    /*\\n     * Calculates the asset gains earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorGains(\\n        address _depositor,\\n        address[] calldata _assets\\n    )\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory);\\n\\n    /*\\n     * Calculate the TREN gain earned by a deposit since its last snapshots were taken.\\n     */\\n    function getDepositorTRENGain(address _depositor) external view returns (uint256);\\n\\n    /*\\n     * Return the user's compounded deposits.\\n     */\\n    function getCompoundedDebtTokenDeposits(address _depositor) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc121981fda59b3816b5df0829c1fc110a9bb6f6147ed67a634531b90ff925838\",\"license\":\"MIT\"},\"contracts/Interfaces/ITrenBoxManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface ITrenBoxManager {\\n    // Enums\\n    // ------------------------------------------------------------------------------------------------------------\\n\\n    enum Status {\\n        nonExistent,\\n        active,\\n        closedByOwner,\\n        closedByLiquidation,\\n        closedByRedemption\\n    }\\n\\n    enum TrenBoxManagerOperation {\\n        applyPendingRewards,\\n        liquidateInNormalMode,\\n        liquidateInRecoveryMode,\\n        redeemCollateral\\n    }\\n\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    event BaseRateUpdated(address indexed _asset, uint256 _baseRate);\\n    event LastFeeOpTimeUpdated(address indexed _asset, uint256 _lastFeeOpTime);\\n    event TotalStakesUpdated(address indexed _asset, uint256 _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        address indexed _asset, uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(address indexed _asset, uint256 _L_Coll, uint256 _L_Debt);\\n    event TrenBoxSnapshotsUpdated(address indexed _asset, uint256 _L_Coll, uint256 _L_Debt);\\n    event TrenBoxIndexUpdated(address indexed _asset, address _borrower, uint256 _newIndex);\\n\\n    event TrenBoxUpdated(\\n        address indexed _asset,\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 _stake,\\n        TrenBoxManagerOperation _operation\\n    );\\n\\n    // Custom Errors\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    error TrenBoxManager__FeeBiggerThanAssetDraw();\\n    error TrenBoxManager__OnlyOneTrenBox();\\n\\n    error TrenBoxManager__OnlyTrenBoxManagerOperations();\\n    error TrenBoxManager__OnlyBorrowerOperations();\\n    error TrenBoxManager__OnlyTrenBoxManagerOperationsOrBorrowerOperations();\\n\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    struct TrenBox {\\n        uint256 debt;\\n        uint256 coll;\\n        uint256 stake;\\n        Status status;\\n        uint128 arrayIndex;\\n    }\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    function executeFullRedemption(address _asset, address _borrower, uint256 _newColl) external;\\n\\n    function executePartialRedemption(\\n        address _asset,\\n        address _borrower,\\n        uint256 _newDebt,\\n        uint256 _newColl,\\n        uint256 _newNICR,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint\\n    )\\n        external;\\n\\n    function getTrenBoxOwnersCount(address _asset) external view returns (uint256);\\n\\n    function getTrenBoxFromTrenBoxOwnersArray(\\n        address _asset,\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (address);\\n\\n    function getNominalICR(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getCurrentICR(\\n        address _asset,\\n        address _borrower,\\n        uint256 _price\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function updateStakeAndTotalStakes(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        returns (uint256);\\n\\n    function updateTrenBoxRewardSnapshots(address _asset, address _borrower) external;\\n\\n    function addTrenBoxOwnerToArray(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        returns (uint256 index);\\n\\n    function applyPendingRewards(address _asset, address _borrower) external;\\n\\n    function getPendingAssetReward(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPendingDebtTokenReward(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function hasPendingRewards(address _asset, address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 debt,\\n            uint256 coll,\\n            uint256 pendingDebtTokenReward,\\n            uint256 pendingAssetReward\\n        );\\n\\n    function closeTrenBox(address _asset, address _borrower) external;\\n\\n    function closeTrenBoxLiquidation(address _asset, address _borrower) external;\\n\\n    function removeStake(address _asset, address _borrower) external;\\n\\n    function getRedemptionRate(address _asset) external view returns (uint256);\\n\\n    function getRedemptionRateWithDecay(address _asset) external view returns (uint256);\\n\\n    function getRedemptionFeeWithDecay(\\n        address _asset,\\n        uint256 _assetDraw\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getBorrowingRate(address _asset) external view returns (uint256);\\n\\n    function getBorrowingFee(\\n        address _asset,\\n        uint256 _debtTokenAmount\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTrenBoxStatus(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getTrenBoxStake(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getTrenBoxDebt(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getTrenBoxColl(address _asset, address _borrower) external view returns (uint256);\\n\\n    function setTrenBoxStatus(address _asset, address _borrower, uint256 num) external;\\n\\n    function increaseTrenBoxColl(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collIncrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function decreaseTrenBoxColl(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collDecrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function increaseTrenBoxDebt(\\n        address _asset,\\n        address _borrower,\\n        uint256 _debtIncrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function decreaseTrenBoxDebt(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collDecrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function getTCR(address _asset, uint256 _price) external view returns (uint256);\\n\\n    function checkRecoveryMode(address _asset, uint256 _price) external returns (bool);\\n\\n    function isValidFirstRedemptionHint(\\n        address _asset,\\n        address _firstRedemptionHint,\\n        uint256 _price\\n    )\\n        external\\n        returns (bool);\\n\\n    function updateBaseRateFromRedemption(\\n        address _asset,\\n        uint256 _assetDrawn,\\n        uint256 _price,\\n        uint256 _totalDebtTokenSupply\\n    )\\n        external;\\n\\n    function getRedemptionFee(address _asset, uint256 _assetDraw) external view returns (uint256);\\n\\n    function finalizeRedemption(\\n        address _asset,\\n        address _receiver,\\n        uint256 _debtToRedeem,\\n        uint256 _fee,\\n        uint256 _totalRedemptionRewards\\n    )\\n        external;\\n\\n    function redistributeDebtAndColl(\\n        address _asset,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 _debtToOffset,\\n        uint256 _collToSendToStabilityPool\\n    )\\n        external;\\n\\n    function updateSystemSnapshots_excludeCollRemainder(\\n        address _asset,\\n        uint256 _collRemainder\\n    )\\n        external;\\n\\n    function movePendingTrenBoxRewardsToActivePool(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        uint256 _assetAmount\\n    )\\n        external;\\n\\n    function isTrenBoxActive(address _asset, address _borrower) external view returns (bool);\\n\\n    function sendGasCompensation(\\n        address _asset,\\n        address _liquidator,\\n        uint256 _debtTokenAmount,\\n        uint256 _assetAmount\\n    )\\n        external;\\n\\n    function getNetDebt(address _asset, uint256 _debt) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x183a49a4fefc8f74c19327281dfaa9c88745695efad43225fb8d1411e4c47377\",\"license\":\"MIT\"},\"contracts/Interfaces/ITrenBoxManagerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { ITrenBoxManager } from \\\"./ITrenBoxManager.sol\\\";\\n\\ninterface ITrenBoxManagerOperations {\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    event Redemption(\\n        address indexed _asset,\\n        uint256 _attemptedDebtAmount,\\n        uint256 _actualDebtAmount,\\n        uint256 _collSent,\\n        uint256 _collFee\\n    );\\n\\n    event Liquidation(\\n        address indexed _asset,\\n        uint256 _liquidatedDebt,\\n        uint256 _liquidatedColl,\\n        uint256 _collGasCompensation,\\n        uint256 _debtTokenGasCompensation\\n    );\\n\\n    event TrenBoxLiquidated(\\n        address indexed _asset,\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        ITrenBoxManager.TrenBoxManagerOperation _operation\\n    );\\n\\n    event RedemptionSoftenParamChanged(uint256 _redemptionSofteningParam);\\n\\n    // Custom Errors\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    error TrenBoxManagerOperations__InvalidArraySize();\\n    error TrenBoxManagerOperations__EmptyAmount();\\n    error TrenBoxManagerOperations__FeePercentOutOfBounds(\\n        uint256 lowerBoundary, uint256 upperBoundary\\n    );\\n    error TrenBoxManagerOperations__InsufficientDebtTokenBalance(uint256 availableBalance);\\n    error TrenBoxManagerOperations__NothingToLiquidate();\\n    error TrenBoxManagerOperations__OnlyTrenBoxManager();\\n    error TrenBoxManagerOperations__RedemptionIsBlocked();\\n    error TrenBoxManagerOperations__TCRMustBeAboveMCR(uint256 tcr, uint256 mcr);\\n    error TrenBoxManagerOperations__UnableToRedeemAnyAmount();\\n    error TrenBoxManagerOperations__TrenBoxNotActive();\\n    error TrenBoxManagerOperations__InvalidParam();\\n    error TrenBoxManagerOperations__NotTimelock();\\n\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    struct RedemptionTotals {\\n        uint256 remainingDebt;\\n        uint256 totalDebtToRedeem;\\n        uint256 totalCollDrawn;\\n        uint256 collFee;\\n        uint256 collToSendToRedeemer;\\n        uint256 decayedBaseRate;\\n        uint256 price;\\n        uint256 totalDebtTokenSupplyAtStart;\\n    }\\n\\n    struct SingleRedemptionValues {\\n        uint256 debtLot;\\n        uint256 collLot;\\n        bool cancelledPartial;\\n    }\\n\\n    struct LiquidationTotals {\\n        uint256 totalCollInSequence;\\n        uint256 totalDebtInSequence;\\n        uint256 totalCollGasCompensation;\\n        uint256 totalDebtTokenGasCompensation;\\n        uint256 totalDebtToOffset;\\n        uint256 totalCollToSendToSP;\\n        uint256 totalDebtToRedistribute;\\n        uint256 totalCollToRedistribute;\\n        uint256 totalCollSurplus;\\n    }\\n\\n    struct LiquidationValues {\\n        uint256 entireTrenBoxDebt;\\n        uint256 entireTrenBoxColl;\\n        uint256 collGasCompensation;\\n        uint256 debtTokenGasCompensation;\\n        uint256 debtToOffset;\\n        uint256 collToSendToSP;\\n        uint256 debtToRedistribute;\\n        uint256 collToRedistribute;\\n        uint256 collSurplus;\\n    }\\n\\n    struct LocalVariables_InnerSingleLiquidateFunction {\\n        uint256 collToLiquidate;\\n        uint256 pendingDebtReward;\\n        uint256 pendingCollReward;\\n    }\\n\\n    struct LocalVariables_OuterLiquidationFunction {\\n        uint256 price;\\n        uint256 debtTokenInStabPool;\\n        bool recoveryModeAtStart;\\n        uint256 liquidatedDebt;\\n        uint256 liquidatedColl;\\n    }\\n\\n    struct LocalVariables_LiquidationSequence {\\n        uint256 remainingDebtTokenInStabPool;\\n        uint256 ICR;\\n        address user;\\n        bool backToNormalMode;\\n        uint256 entireSystemDebt;\\n        uint256 entireSystemColl;\\n    }\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    function liquidate(address _asset, address _borrower) external;\\n\\n    function liquidateTrenBoxes(address _asset, uint256 _n) external;\\n\\n    function batchLiquidateTrenBoxes(address _asset, address[] memory _trenBoxArray) external;\\n\\n    function redeemCollateral(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        address _firstRedemptionHint,\\n        uint256 _partialRedemptionHintNICR,\\n        uint256 _maxIterations,\\n        uint256 _maxFeePercentage\\n    )\\n        external;\\n\\n    function getRedemptionHints(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        uint256 _price,\\n        uint256 _maxIterations\\n    )\\n        external\\n        returns (\\n            address firstRedemptionHint,\\n            uint256 partialRedemptionHintNICR,\\n            uint256 truncatedDebtTokenAmount\\n        );\\n\\n    function getApproxHint(\\n        address _asset,\\n        uint256 _CR,\\n        uint256 _numTrials,\\n        uint256 _inputRandomSeed\\n    )\\n        external\\n        returns (address hintAddress, uint256 diff, uint256 latestRandomSeed);\\n\\n    function computeNominalCR(uint256 _coll, uint256 _debt) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xeb4cb7a77cdbf304bdcc6478ff48e67d141f666450b775522b1919af9466b3d9\",\"license\":\"MIT\"},\"contracts/TrenBoxManagerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { UUPSUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport { TrenBase } from \\\"./Dependencies/TrenBase.sol\\\";\\nimport { TrenMath, DECIMAL_PRECISION } from \\\"./Dependencies/TrenMath.sol\\\";\\n\\nimport { IAdminContract } from \\\"./Interfaces/IAdminContract.sol\\\";\\nimport { IActivePool } from \\\"./Interfaces/IActivePool.sol\\\";\\nimport { ICollSurplusPool } from \\\"./Interfaces/ICollSurplusPool.sol\\\";\\nimport { IDebtToken } from \\\"./Interfaces/IDebtToken.sol\\\";\\nimport { IPriceFeed } from \\\"./Interfaces/IPriceFeed.sol\\\";\\nimport { ISortedTrenBoxes } from \\\"./Interfaces/ISortedTrenBoxes.sol\\\";\\nimport { IStabilityPool } from \\\"./Interfaces/IStabilityPool.sol\\\";\\nimport { ITrenBoxManager } from \\\"./Interfaces/ITrenBoxManager.sol\\\";\\nimport { ITrenBoxManagerOperations } from \\\"./Interfaces/ITrenBoxManagerOperations.sol\\\";\\n\\ncontract TrenBoxManagerOperations is\\n    ITrenBoxManagerOperations,\\n    UUPSUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    TrenBase\\n{\\n    string public constant NAME = \\\"TrenBoxManagerOperations\\\";\\n    uint256 public constant PERCENTAGE_PRECISION = 10_000;\\n    uint256 public constant BATCH_SIZE_LIMIT = 25;\\n\\n    uint256 public redemptionSofteningParam;\\n\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    struct HintHelperLocalVars {\\n        address asset;\\n        uint256 debtTokenAmount;\\n        uint256 price;\\n        uint256 maxIterations;\\n    }\\n\\n    // Initializer\\n    // ------------------------------------------------------------------------------------------------------\\n\\n    function initialize() public initializer {\\n        address initialOwner = _msgSender();\\n\\n        __Ownable_init(initialOwner);\\n        __UUPSUpgradeable_init();\\n        __ReentrancyGuard_init();\\n    }\\n\\n    // Liquidation external functions\\n    // -----------------------------------------------------------------------------------\\n\\n    /*\\n    * Single liquidation function. Closes the trenBox if its ICR is lower than the minimum\\n    collateral\\n    ratio.\\n     */\\n    function liquidate(address _asset, address _borrower) external override {\\n        if (!ITrenBoxManager(trenBoxManager).isTrenBoxActive(_asset, _borrower)) {\\n            revert TrenBoxManagerOperations__TrenBoxNotActive();\\n        }\\n        address[] memory borrowers = new address[](1);\\n        borrowers[0] = _borrower;\\n        batchLiquidateTrenBoxes(_asset, borrowers);\\n    }\\n\\n    /*\\n    * Liquidate a sequence of trenBoxes. Closes a maximum number of n under-collateralized\\n    TrenBoxes,\\n     * starting from the one with the lowest collateral ratio in the system, and moving upwards.\\n     */\\n    function liquidateTrenBoxes(address _asset, uint256 _n) external override nonReentrant {\\n        LocalVariables_OuterLiquidationFunction memory vars;\\n        LiquidationTotals memory totals;\\n        vars.price = IPriceFeed(priceFeed).fetchPrice(_asset);\\n        vars.debtTokenInStabPool = IStabilityPool(stabilityPool).getTotalDebtTokenDeposits();\\n        vars.recoveryModeAtStart = _checkRecoveryMode(_asset, vars.price);\\n\\n        // Perform the appropriate liquidation sequence - tally the values, and obtain their totals\\n        if (vars.recoveryModeAtStart) {\\n            totals = _getTotalsFromLiquidateTrenBoxesSequence_RecoveryMode(\\n                _asset, vars.price, vars.debtTokenInStabPool, _n\\n            );\\n        } else {\\n            totals = _getTotalsFromLiquidateTrenBoxesSequence_NormalMode(\\n                _asset, vars.price, vars.debtTokenInStabPool, _n\\n            );\\n        }\\n\\n        if (totals.totalDebtInSequence == 0) {\\n            revert TrenBoxManagerOperations__NothingToLiquidate();\\n        }\\n\\n        ITrenBoxManager(trenBoxManager).redistributeDebtAndColl(\\n            _asset,\\n            totals.totalDebtToRedistribute,\\n            totals.totalCollToRedistribute,\\n            totals.totalDebtToOffset,\\n            totals.totalCollToSendToSP\\n        );\\n        if (totals.totalCollSurplus != 0) {\\n            IActivePool(activePool).sendAsset(_asset, collSurplusPool, totals.totalCollSurplus);\\n        }\\n\\n        ITrenBoxManager(trenBoxManager).updateSystemSnapshots_excludeCollRemainder(\\n            _asset, totals.totalCollGasCompensation\\n        );\\n\\n        vars.liquidatedDebt = totals.totalDebtInSequence;\\n        vars.liquidatedColl =\\n            totals.totalCollInSequence - totals.totalCollGasCompensation - totals.totalCollSurplus;\\n        emit Liquidation(\\n            _asset,\\n            vars.liquidatedDebt,\\n            vars.liquidatedColl,\\n            totals.totalCollGasCompensation,\\n            totals.totalDebtTokenGasCompensation\\n        );\\n        ITrenBoxManager(trenBoxManager).sendGasCompensation(\\n            _asset,\\n            msg.sender,\\n            totals.totalDebtTokenGasCompensation,\\n            totals.totalCollGasCompensation\\n        );\\n    }\\n\\n    /*\\n     * Attempt to liquidate a custom list of trenBoxes provided by the caller.\\n     */\\n    function batchLiquidateTrenBoxes(\\n        address _asset,\\n        address[] memory _trenBoxArray\\n    )\\n        public\\n        override\\n        nonReentrant\\n    {\\n        if (_trenBoxArray.length == 0 || _trenBoxArray.length > BATCH_SIZE_LIMIT) {\\n            revert TrenBoxManagerOperations__InvalidArraySize();\\n        }\\n\\n        LocalVariables_OuterLiquidationFunction memory vars;\\n        LiquidationTotals memory totals;\\n\\n        vars.debtTokenInStabPool = IStabilityPool(stabilityPool).getTotalDebtTokenDeposits();\\n        vars.price = IPriceFeed(priceFeed).fetchPrice(_asset);\\n        vars.recoveryModeAtStart = _checkRecoveryMode(_asset, vars.price);\\n\\n        // Perform the appropriate liquidation sequence - tally values and obtain their totals.\\n        if (vars.recoveryModeAtStart) {\\n            totals = _getTotalFromBatchLiquidate_RecoveryMode(\\n                _asset, vars.price, vars.debtTokenInStabPool, _trenBoxArray\\n            );\\n        } else {\\n            totals = _getTotalsFromBatchLiquidate_NormalMode(\\n                _asset, vars.price, vars.debtTokenInStabPool, _trenBoxArray\\n            );\\n        }\\n\\n        if (totals.totalDebtInSequence == 0) {\\n            revert TrenBoxManagerOperations__NothingToLiquidate();\\n        }\\n\\n        ITrenBoxManager(trenBoxManager).redistributeDebtAndColl(\\n            _asset,\\n            totals.totalDebtToRedistribute,\\n            totals.totalCollToRedistribute,\\n            totals.totalDebtToOffset,\\n            totals.totalCollToSendToSP\\n        );\\n        if (totals.totalCollSurplus != 0) {\\n            IActivePool(activePool).sendAsset(_asset, collSurplusPool, totals.totalCollSurplus);\\n        }\\n\\n        // Update system snapshots\\n        ITrenBoxManager(trenBoxManager).updateSystemSnapshots_excludeCollRemainder(\\n            _asset, totals.totalCollGasCompensation\\n        );\\n\\n        vars.liquidatedDebt = totals.totalDebtInSequence;\\n        vars.liquidatedColl =\\n            totals.totalCollInSequence - totals.totalCollGasCompensation - totals.totalCollSurplus;\\n        emit Liquidation(\\n            _asset,\\n            vars.liquidatedDebt,\\n            vars.liquidatedColl,\\n            totals.totalCollGasCompensation,\\n            totals.totalDebtTokenGasCompensation\\n        );\\n        ITrenBoxManager(trenBoxManager).sendGasCompensation(\\n            _asset,\\n            msg.sender,\\n            totals.totalDebtTokenGasCompensation,\\n            totals.totalCollGasCompensation\\n        );\\n    }\\n\\n    // Redemption external functions\\n    // ------------------------------------------------------------------------------------\\n\\n    function redeemCollateral(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        address _firstRedemptionHint,\\n        uint256 _partialRedemptionHintNICR,\\n        uint256 _maxIterations,\\n        uint256 _maxFeePercentage\\n    )\\n        external\\n        override\\n        nonReentrant\\n    {\\n        RedemptionTotals memory totals;\\n        totals.price = IPriceFeed(priceFeed).fetchPrice(_asset);\\n        _validateRedemptionRequirements(_asset, _maxFeePercentage, _debtTokenAmount, totals.price);\\n        totals.totalDebtTokenSupplyAtStart = getEntireSystemDebt(_asset);\\n        totals.remainingDebt = _debtTokenAmount;\\n        address currentBorrower;\\n        if (\\n            ITrenBoxManager(trenBoxManager).isValidFirstRedemptionHint(\\n                _asset, _firstRedemptionHint, totals.price\\n            )\\n        ) {\\n            currentBorrower = _firstRedemptionHint;\\n        } else {\\n            currentBorrower = ISortedTrenBoxes(sortedTrenBoxes).getLast(_asset);\\n            // Find the first trenBox with ICR >= MCR\\n            while (\\n                currentBorrower != address(0)\\n                    && ITrenBoxManager(trenBoxManager).getCurrentICR(\\n                        _asset, currentBorrower, totals.price\\n                    ) < IAdminContract(adminContract).getMcr(_asset)\\n            ) {\\n                currentBorrower = ISortedTrenBoxes(sortedTrenBoxes).getPrev(_asset, currentBorrower);\\n            }\\n        }\\n\\n        // Loop through the trenBoxes starting from the one with lowest collateral ratio until\\n        // _debtTokenAmount is exchanged for collateral\\n        if (_maxIterations == 0) {\\n            _maxIterations = type(uint256).max;\\n        }\\n        while (currentBorrower != address(0) && totals.remainingDebt != 0 && _maxIterations != 0) {\\n            _maxIterations--;\\n            // Save the address of the trenBox preceding the current one, before potentially\\n            // modifying the list\\n            address nextUserToCheck =\\n                ISortedTrenBoxes(sortedTrenBoxes).getPrev(_asset, currentBorrower);\\n\\n            ITrenBoxManager(trenBoxManager).applyPendingRewards(_asset, currentBorrower);\\n\\n            SingleRedemptionValues memory singleRedemption = _redeemCollateralFromTrenBox(\\n                _asset,\\n                currentBorrower,\\n                totals.remainingDebt,\\n                totals.price,\\n                _upperPartialRedemptionHint,\\n                _lowerPartialRedemptionHint,\\n                _partialRedemptionHintNICR\\n            );\\n\\n            if (singleRedemption.cancelledPartial) break; // Partial redemption was cancelled\\n                // (out-of-date hint, or new net debt < minimum), therefore we could not redeem from\\n                // the last trenBox\\n\\n            totals.totalDebtToRedeem = totals.totalDebtToRedeem + singleRedemption.debtLot;\\n            totals.totalCollDrawn = totals.totalCollDrawn + singleRedemption.collLot;\\n\\n            totals.remainingDebt = totals.remainingDebt - singleRedemption.debtLot;\\n            currentBorrower = nextUserToCheck;\\n        }\\n        if (totals.totalCollDrawn == 0) {\\n            revert TrenBoxManagerOperations__UnableToRedeemAnyAmount();\\n        }\\n\\n        // Decay the baseRate due to time passed, and then increase it according to the size of this\\n        // redemption.\\n        // Use the saved total GRAI supply value, from before it was reduced by the redemption.\\n        ITrenBoxManager(trenBoxManager).updateBaseRateFromRedemption(\\n            _asset, totals.totalCollDrawn, totals.price, totals.totalDebtTokenSupplyAtStart\\n        );\\n\\n        // Calculate the collateral fee\\n        totals.collFee =\\n            ITrenBoxManager(trenBoxManager).getRedemptionFee(_asset, totals.totalCollDrawn);\\n\\n        _requireUserAcceptsFee(totals.collFee, totals.totalCollDrawn, _maxFeePercentage);\\n\\n        ITrenBoxManager(trenBoxManager).finalizeRedemption(\\n            _asset, msg.sender, totals.totalDebtToRedeem, totals.collFee, totals.totalCollDrawn\\n        );\\n\\n        emit Redemption(\\n            _asset,\\n            _debtTokenAmount,\\n            totals.totalDebtToRedeem,\\n            totals.totalCollDrawn,\\n            totals.collFee\\n        );\\n    }\\n\\n    // Hint helper functions\\n    // --------------------------------------------------------------------------------------------\\n\\n    /* getRedemptionHints() - Helper function for finding the right hints to pass to\\n    redeemCollateral().\\n     *\\n    * It simulates a redemption of `_debtTokenAmount` to figure out where the redemption sequence\\n    will start and what state the final TrenBox\\n     * of the sequence will end up in.\\n     *\\n     * Returns three hints:\\n    *  - `firstRedemptionHint` is the address of the first TrenBox with ICR >= MCR (i.e. the first\\n    TrenBox that will be redeemed).\\n    *  - `partialRedemptionHintNICR` is the final nominal ICR of the last TrenBox of the sequence\\n    after being hit by partial redemption,\\n     *     or zero in case of no partial redemption.\\n    *  - `truncatedDebtTokenAmount` is the maximum amount that can be redeemed out of the the\\n    provided `_debtTokenAmount`. This can be lower than\\n    *    `_debtTokenAmount` when redeeming the full amount would leave the last TrenBox of the\\n    redemption sequence with less net debt than the\\n     *    minimum allowed value (i.e. IAdminContract(adminContract).MIN_NET_DEBT()).\\n     *\\n    * The number of TrenBoxes to consider for redemption can be capped by passing a non-zero value\\n    as\\n    `_maxIterations`, while passing zero\\n     * will leave it uncapped.\\n     */\\n\\n    function getRedemptionHints(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        uint256 _price,\\n        uint256 _maxIterations\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            address firstRedemptionHint,\\n            uint256 partialRedemptionHintNewICR,\\n            uint256 truncatedDebtTokenAmount\\n        )\\n    {\\n        HintHelperLocalVars memory vars = HintHelperLocalVars({\\n            asset: _asset,\\n            debtTokenAmount: _debtTokenAmount,\\n            price: _price,\\n            maxIterations: _maxIterations\\n        });\\n\\n        uint256 remainingDebt = _debtTokenAmount;\\n        address currentTrenBoxBorrower = ISortedTrenBoxes(sortedTrenBoxes).getLast(vars.asset);\\n\\n        while (\\n            currentTrenBoxBorrower != address(0)\\n                && ITrenBoxManager(trenBoxManager).getCurrentICR(\\n                    vars.asset, currentTrenBoxBorrower, vars.price\\n                ) < IAdminContract(adminContract).getMcr(vars.asset)\\n        ) {\\n            currentTrenBoxBorrower =\\n                ISortedTrenBoxes(sortedTrenBoxes).getPrev(vars.asset, currentTrenBoxBorrower);\\n        }\\n\\n        firstRedemptionHint = currentTrenBoxBorrower;\\n\\n        if (vars.maxIterations == 0) {\\n            vars.maxIterations = type(uint256).max;\\n        }\\n\\n        while (\\n            currentTrenBoxBorrower != address(0) && remainingDebt != 0 && vars.maxIterations-- != 0\\n        ) {\\n            uint256 currentTrenBoxNetDebt = _getNetDebt(\\n                vars.asset,\\n                ITrenBoxManager(trenBoxManager).getTrenBoxDebt(vars.asset, currentTrenBoxBorrower)\\n                    + ITrenBoxManager(trenBoxManager).getPendingDebtTokenReward(\\n                        vars.asset, currentTrenBoxBorrower\\n                    )\\n            );\\n\\n            if (currentTrenBoxNetDebt <= remainingDebt) {\\n                remainingDebt = remainingDebt - currentTrenBoxNetDebt;\\n            } else {\\n                if (currentTrenBoxNetDebt > IAdminContract(adminContract).getMinNetDebt(vars.asset))\\n                {\\n                    uint256 maxRedeemableDebt = TrenMath._min(\\n                        remainingDebt,\\n                        currentTrenBoxNetDebt\\n                            - IAdminContract(adminContract).getMinNetDebt(vars.asset)\\n                    );\\n                    uint256 currentTrenBoxColl = ITrenBoxManager(trenBoxManager).getTrenBoxColl(\\n                        vars.asset, currentTrenBoxBorrower\\n                    )\\n                        + ITrenBoxManager(trenBoxManager).getPendingAssetReward(\\n                            vars.asset, currentTrenBoxBorrower\\n                        );\\n\\n                    uint256 collLot = (maxRedeemableDebt * DECIMAL_PRECISION) / vars.price;\\n                    // Apply redemption softening\\n                    collLot = (collLot * redemptionSofteningParam) / PERCENTAGE_PRECISION;\\n                    uint256 newColl = currentTrenBoxColl - collLot;\\n                    uint256 newDebt = currentTrenBoxNetDebt - maxRedeemableDebt;\\n                    uint256 compositeDebt = _getCompositeDebt(vars.asset, newDebt);\\n\\n                    partialRedemptionHintNewICR = TrenMath._computeNominalCR(newColl, compositeDebt);\\n                    remainingDebt = remainingDebt - maxRedeemableDebt;\\n                }\\n\\n                break;\\n            }\\n\\n            currentTrenBoxBorrower =\\n                ISortedTrenBoxes(sortedTrenBoxes).getPrev(vars.asset, currentTrenBoxBorrower);\\n        }\\n\\n        truncatedDebtTokenAmount = _debtTokenAmount - remainingDebt;\\n    }\\n\\n    /* getApproxHint() - return address of a TrenBox that is, on average, (length / numTrials)\\n    positions away in the\\n    sortedTrenBoxes list from the correct insert position of the TrenBox to be inserted.\\n\\n    Note: The output address is worst-case O(n) positions away from the correct insert position,\\n    however, the function\\n    is probabilistic. Input can be tuned to guarantee results to a high degree of confidence, e.g:\\n\\n    Submitting numTrials = k * sqrt(length), with k = 15 makes it very, very likely that the ouput\\n    address will\\n    be <= sqrt(length) positions away from the correct insert position.\\n    */\\n    function getApproxHint(\\n        address _asset,\\n        uint256 _CR,\\n        uint256 _numTrials,\\n        uint256 _inputRandomSeed\\n    )\\n        external\\n        view\\n        override\\n        returns (address hintAddress, uint256 diff, uint256 latestRandomSeed)\\n    {\\n        uint256 arrayLength = ITrenBoxManager(trenBoxManager).getTrenBoxOwnersCount(_asset);\\n\\n        if (arrayLength == 0) {\\n            return (address(0), 0, _inputRandomSeed);\\n        }\\n\\n        hintAddress = ISortedTrenBoxes(sortedTrenBoxes).getLast(_asset);\\n        diff = TrenMath._getAbsoluteDifference(\\n            _CR, ITrenBoxManager(trenBoxManager).getNominalICR(_asset, hintAddress)\\n        );\\n        latestRandomSeed = _inputRandomSeed;\\n\\n        uint256 i = 1;\\n\\n        while (i < _numTrials) {\\n            latestRandomSeed = uint256(keccak256(abi.encodePacked(latestRandomSeed)));\\n\\n            uint256 arrayIndex = latestRandomSeed % arrayLength;\\n            address currentAddress =\\n                ITrenBoxManager(trenBoxManager).getTrenBoxFromTrenBoxOwnersArray(_asset, arrayIndex);\\n            uint256 currentNICR =\\n                ITrenBoxManager(trenBoxManager).getNominalICR(_asset, currentAddress);\\n\\n            // check if abs(current - CR) > abs(closest - CR), and update closest if current is\\n            // closer\\n            uint256 currentDiff = TrenMath._getAbsoluteDifference(currentNICR, _CR);\\n\\n            if (currentDiff < diff) {\\n                diff = currentDiff;\\n                hintAddress = currentAddress;\\n            }\\n            i++;\\n        }\\n    }\\n\\n    function computeNominalCR(\\n        uint256 _coll,\\n        uint256 _debt\\n    )\\n        external\\n        pure\\n        override\\n        returns (uint256)\\n    {\\n        return TrenMath._computeNominalCR(_coll, _debt);\\n    }\\n\\n    // Liquidation internal/helper functions\\n    // ----------------------------------------------------------------------------\\n\\n    /*\\n    * This function is used when the batch liquidation sequence starts during Recovery Mode. However,\\n    it\\n    * handles the case where the system *leaves* Recovery Mode, part way through the liquidation\\n    sequence\\n     */\\n    function _getTotalFromBatchLiquidate_RecoveryMode(\\n        address _asset,\\n        uint256 _price,\\n        uint256 _debtTokenInStabPool,\\n        address[] memory _trenBoxArray\\n    )\\n        internal\\n        returns (LiquidationTotals memory totals)\\n    {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n        vars.remainingDebtTokenInStabPool = _debtTokenInStabPool;\\n        vars.backToNormalMode = false;\\n        vars.entireSystemDebt = getEntireSystemDebt(_asset);\\n        vars.entireSystemColl = getEntireSystemColl(_asset);\\n\\n        for (uint256 i = 0; i < _trenBoxArray.length;) {\\n            vars.user = _trenBoxArray[i];\\n            // Skip non-active trenBoxes\\n            if (\\n                ITrenBoxManager(trenBoxManager).getTrenBoxStatus(_asset, vars.user)\\n                    != uint256(ITrenBoxManager.Status.active)\\n            ) {\\n                unchecked {\\n                    ++i;\\n                }\\n                continue;\\n            }\\n            vars.ICR = ITrenBoxManager(trenBoxManager).getCurrentICR(_asset, vars.user, _price);\\n\\n            if (!vars.backToNormalMode) {\\n                // Skip this trenBox if ICR is greater than MCR and Stability Pool is empty\\n                if (\\n                    vars.ICR >= IAdminContract(adminContract).getMcr(_asset)\\n                        && vars.remainingDebtTokenInStabPool == 0\\n                ) {\\n                    unchecked {\\n                        ++i;\\n                    }\\n                    continue;\\n                }\\n                uint256 TCR =\\n                    TrenMath._computeCR(vars.entireSystemColl, vars.entireSystemDebt, _price);\\n\\n                singleLiquidation = _liquidateRecoveryMode(\\n                    _asset, vars.user, vars.ICR, vars.remainingDebtTokenInStabPool, TCR, _price\\n                );\\n\\n                // Update aggregate trackers\\n                vars.remainingDebtTokenInStabPool =\\n                    vars.remainingDebtTokenInStabPool - singleLiquidation.debtToOffset;\\n                vars.entireSystemDebt = vars.entireSystemDebt - singleLiquidation.debtToOffset;\\n                vars.entireSystemColl = vars.entireSystemColl - singleLiquidation.collToSendToSP\\n                    - singleLiquidation.collGasCompensation - singleLiquidation.collSurplus;\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n\\n                vars.backToNormalMode = !_checkPotentialRecoveryMode(\\n                    _asset, vars.entireSystemColl, vars.entireSystemDebt, _price\\n                );\\n            } else if (\\n                vars.backToNormalMode && vars.ICR < IAdminContract(adminContract).getMcr(_asset)\\n            ) {\\n                singleLiquidation =\\n                    _liquidateNormalMode(_asset, vars.user, vars.remainingDebtTokenInStabPool);\\n                vars.remainingDebtTokenInStabPool =\\n                    vars.remainingDebtTokenInStabPool - singleLiquidation.debtToOffset;\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _getTotalsFromBatchLiquidate_NormalMode(\\n        address _asset,\\n        uint256 _price,\\n        uint256 _debtTokenInStabPool,\\n        address[] memory _trenBoxArray\\n    )\\n        internal\\n        returns (LiquidationTotals memory totals)\\n    {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingDebtTokenInStabPool = _debtTokenInStabPool;\\n\\n        for (uint256 i = 0; i < _trenBoxArray.length;) {\\n            vars.user = _trenBoxArray[i];\\n            vars.ICR = ITrenBoxManager(trenBoxManager).getCurrentICR(_asset, vars.user, _price);\\n\\n            if (vars.ICR < IAdminContract(adminContract).getMcr(_asset)) {\\n                singleLiquidation =\\n                    _liquidateNormalMode(_asset, vars.user, vars.remainingDebtTokenInStabPool);\\n                vars.remainingDebtTokenInStabPool =\\n                    vars.remainingDebtTokenInStabPool - singleLiquidation.debtToOffset;\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _addLiquidationValuesToTotals(\\n        LiquidationTotals memory oldTotals,\\n        LiquidationValues memory singleLiquidation\\n    )\\n        internal\\n        pure\\n        returns (LiquidationTotals memory newTotals)\\n    {\\n        // Tally all the values with their respective running totals\\n        newTotals.totalCollGasCompensation =\\n            oldTotals.totalCollGasCompensation + singleLiquidation.collGasCompensation;\\n        newTotals.totalDebtTokenGasCompensation =\\n            oldTotals.totalDebtTokenGasCompensation + singleLiquidation.debtTokenGasCompensation;\\n        newTotals.totalDebtInSequence =\\n            oldTotals.totalDebtInSequence + singleLiquidation.entireTrenBoxDebt;\\n        newTotals.totalCollInSequence =\\n            oldTotals.totalCollInSequence + singleLiquidation.entireTrenBoxColl;\\n        newTotals.totalDebtToOffset = oldTotals.totalDebtToOffset + singleLiquidation.debtToOffset;\\n        newTotals.totalCollToSendToSP =\\n            oldTotals.totalCollToSendToSP + singleLiquidation.collToSendToSP;\\n        newTotals.totalDebtToRedistribute =\\n            oldTotals.totalDebtToRedistribute + singleLiquidation.debtToRedistribute;\\n        newTotals.totalCollToRedistribute =\\n            oldTotals.totalCollToRedistribute + singleLiquidation.collToRedistribute;\\n        newTotals.totalCollSurplus = oldTotals.totalCollSurplus + singleLiquidation.collSurplus;\\n        return newTotals;\\n    }\\n\\n    function _getTotalsFromLiquidateTrenBoxesSequence_NormalMode(\\n        address _asset,\\n        uint256 _price,\\n        uint256 _debtTokenInStabPool,\\n        uint256 _n\\n    )\\n        internal\\n        returns (LiquidationTotals memory totals)\\n    {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingDebtTokenInStabPool = _debtTokenInStabPool;\\n\\n        for (uint256 i = 0; i < _n;) {\\n            vars.user = ISortedTrenBoxes(sortedTrenBoxes).getLast(_asset);\\n            vars.ICR = ITrenBoxManager(trenBoxManager).getCurrentICR(_asset, vars.user, _price);\\n\\n            if (vars.ICR < IAdminContract(adminContract).getMcr(_asset)) {\\n                singleLiquidation =\\n                    _liquidateNormalMode(_asset, vars.user, vars.remainingDebtTokenInStabPool);\\n\\n                vars.remainingDebtTokenInStabPool =\\n                    vars.remainingDebtTokenInStabPool - singleLiquidation.debtToOffset;\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n            } else {\\n                break;\\n            } // break if the loop reaches a TrenBox with ICR >= MCR\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _liquidateNormalMode(\\n        address _asset,\\n        address _borrower,\\n        uint256 _debtTokenInStabPool\\n    )\\n        internal\\n        returns (LiquidationValues memory singleLiquidation)\\n    {\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\n        (\\n            singleLiquidation.entireTrenBoxDebt,\\n            singleLiquidation.entireTrenBoxColl,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        ) = ITrenBoxManager(trenBoxManager).getEntireDebtAndColl(_asset, _borrower);\\n\\n        ITrenBoxManager(trenBoxManager).movePendingTrenBoxRewardsToActivePool(\\n            _asset, vars.pendingDebtReward, vars.pendingCollReward\\n        );\\n        ITrenBoxManager(trenBoxManager).removeStake(_asset, _borrower);\\n\\n        singleLiquidation.collGasCompensation =\\n            _getCollGasCompensation(_asset, singleLiquidation.entireTrenBoxColl);\\n        singleLiquidation.debtTokenGasCompensation =\\n            IAdminContract(adminContract).getDebtTokenGasCompensation(_asset);\\n        uint256 collToLiquidate =\\n            singleLiquidation.entireTrenBoxColl - singleLiquidation.collGasCompensation;\\n\\n        (\\n            singleLiquidation.debtToOffset,\\n            singleLiquidation.collToSendToSP,\\n            singleLiquidation.debtToRedistribute,\\n            singleLiquidation.collToRedistribute\\n        ) = _getOffsetAndRedistributionVals(\\n            singleLiquidation.entireTrenBoxDebt, collToLiquidate, _debtTokenInStabPool\\n        );\\n\\n        ITrenBoxManager(trenBoxManager).closeTrenBoxLiquidation(_asset, _borrower);\\n        emit TrenBoxLiquidated(\\n            _asset,\\n            _borrower,\\n            singleLiquidation.entireTrenBoxDebt,\\n            singleLiquidation.entireTrenBoxColl,\\n            ITrenBoxManager.TrenBoxManagerOperation.liquidateInNormalMode\\n        );\\n        return singleLiquidation;\\n    }\\n\\n    function _liquidateRecoveryMode(\\n        address _asset,\\n        address _borrower,\\n        uint256 _ICR,\\n        uint256 _debtTokenInStabPool,\\n        uint256 _TCR,\\n        uint256 _price\\n    )\\n        internal\\n        returns (LiquidationValues memory singleLiquidation)\\n    {\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\n        if (ITrenBoxManager(trenBoxManager).getTrenBoxOwnersCount(_asset) <= 1) {\\n            return singleLiquidation;\\n        } // don't liquidate if last trenBox\\n        (\\n            singleLiquidation.entireTrenBoxDebt,\\n            singleLiquidation.entireTrenBoxColl,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        ) = ITrenBoxManager(trenBoxManager).getEntireDebtAndColl(_asset, _borrower);\\n\\n        singleLiquidation.collGasCompensation =\\n            _getCollGasCompensation(_asset, singleLiquidation.entireTrenBoxColl);\\n        singleLiquidation.debtTokenGasCompensation =\\n            IAdminContract(adminContract).getDebtTokenGasCompensation(_asset);\\n        vars.collToLiquidate =\\n            singleLiquidation.entireTrenBoxColl - singleLiquidation.collGasCompensation;\\n\\n        // If ICR <= 100%, purely redistribute the TrenBox across all active TrenBoxes\\n        if (_ICR <= IAdminContract(adminContract)._100pct()) {\\n            ITrenBoxManager(trenBoxManager).movePendingTrenBoxRewardsToActivePool(\\n                _asset, vars.pendingDebtReward, vars.pendingCollReward\\n            );\\n            ITrenBoxManager(trenBoxManager).removeStake(_asset, _borrower);\\n\\n            singleLiquidation.debtToOffset = 0;\\n            singleLiquidation.collToSendToSP = 0;\\n            singleLiquidation.debtToRedistribute = singleLiquidation.entireTrenBoxDebt;\\n            singleLiquidation.collToRedistribute = vars.collToLiquidate;\\n\\n            ITrenBoxManager(trenBoxManager).closeTrenBoxLiquidation(_asset, _borrower);\\n            emit TrenBoxLiquidated(\\n                _asset,\\n                _borrower,\\n                singleLiquidation.entireTrenBoxDebt,\\n                singleLiquidation.entireTrenBoxColl,\\n                ITrenBoxManager.TrenBoxManagerOperation.liquidateInRecoveryMode\\n            );\\n\\n            // If 100% < ICR < MCR, offset as much as possible, and redistribute the remainder\\n        } else if (\\n            (_ICR > IAdminContract(adminContract)._100pct())\\n                && (_ICR < IAdminContract(adminContract).getMcr(_asset))\\n        ) {\\n            ITrenBoxManager(trenBoxManager).movePendingTrenBoxRewardsToActivePool(\\n                _asset, vars.pendingDebtReward, vars.pendingCollReward\\n            );\\n            ITrenBoxManager(trenBoxManager).removeStake(_asset, _borrower);\\n\\n            (\\n                singleLiquidation.debtToOffset,\\n                singleLiquidation.collToSendToSP,\\n                singleLiquidation.debtToRedistribute,\\n                singleLiquidation.collToRedistribute\\n            ) = _getOffsetAndRedistributionVals(\\n                singleLiquidation.entireTrenBoxDebt, vars.collToLiquidate, _debtTokenInStabPool\\n            );\\n\\n            ITrenBoxManager(trenBoxManager).closeTrenBoxLiquidation(_asset, _borrower);\\n            emit TrenBoxLiquidated(\\n                _asset,\\n                _borrower,\\n                singleLiquidation.entireTrenBoxDebt,\\n                singleLiquidation.entireTrenBoxColl,\\n                ITrenBoxManager.TrenBoxManagerOperation.liquidateInRecoveryMode\\n            );\\n\\n            /*\\n            * If 110% <= ICR < current TCR (accounting for the preceding liquidations in the current\\n            sequence)\\n            * and there are debt tokens in the Stability Pool, only offset, with no redistribution,\\n             * but at a capped rate of 1.1 and only if the whole debt can be liquidated.\\n            * The remainder due to the capped rate will be claimable as collateral surplus.\\n             */\\n        } else if (\\n            (_ICR >= IAdminContract(adminContract).getMcr(_asset)) && (_ICR < _TCR)\\n                && (singleLiquidation.entireTrenBoxDebt <= _debtTokenInStabPool)\\n        ) {\\n            ITrenBoxManager(trenBoxManager).movePendingTrenBoxRewardsToActivePool(\\n                _asset, vars.pendingDebtReward, vars.pendingCollReward\\n            );\\n            assert(_debtTokenInStabPool != 0);\\n\\n            ITrenBoxManager(trenBoxManager).removeStake(_asset, _borrower);\\n            singleLiquidation = _getCappedOffsetVals(\\n                _asset,\\n                singleLiquidation.entireTrenBoxDebt,\\n                singleLiquidation.entireTrenBoxColl,\\n                _price\\n            );\\n\\n            ITrenBoxManager(trenBoxManager).closeTrenBoxLiquidation(_asset, _borrower);\\n            if (singleLiquidation.collSurplus != 0) {\\n                ICollSurplusPool(collSurplusPool).accountSurplus(\\n                    _asset, _borrower, singleLiquidation.collSurplus\\n                );\\n            }\\n            emit TrenBoxLiquidated(\\n                _asset,\\n                _borrower,\\n                singleLiquidation.entireTrenBoxDebt,\\n                singleLiquidation.collToSendToSP,\\n                ITrenBoxManager.TrenBoxManagerOperation.liquidateInRecoveryMode\\n            );\\n        } else {\\n            LiquidationValues memory zeroVals;\\n            return zeroVals;\\n        }\\n\\n        return singleLiquidation;\\n    }\\n\\n    /*\\n    * This function is used when the liquidateTrenBoxes sequence starts during Recovery Mode.\\n    However,\\n    it\\n    * handles the case where the system *leaves* Recovery Mode, part way through the liquidation\\n    sequence\\n     */\\n    function _getTotalsFromLiquidateTrenBoxesSequence_RecoveryMode(\\n        address _asset,\\n        uint256 _price,\\n        uint256 _debtTokenInStabPool,\\n        uint256 _n\\n    )\\n        internal\\n        returns (LiquidationTotals memory totals)\\n    {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingDebtTokenInStabPool = _debtTokenInStabPool;\\n        vars.backToNormalMode = false;\\n        vars.entireSystemDebt = getEntireSystemDebt(_asset);\\n        vars.entireSystemColl = getEntireSystemColl(_asset);\\n\\n        vars.user = ISortedTrenBoxes(sortedTrenBoxes).getLast(_asset);\\n        address firstUser = ISortedTrenBoxes(sortedTrenBoxes).getFirst(_asset);\\n        for (uint256 i = 0; i < _n && vars.user != firstUser;) {\\n            // we need to cache it, because current user is likely going to be deleted\\n            address nextUser = ISortedTrenBoxes(sortedTrenBoxes).getPrev(_asset, vars.user);\\n\\n            vars.ICR = ITrenBoxManager(trenBoxManager).getCurrentICR(_asset, vars.user, _price);\\n\\n            if (!vars.backToNormalMode) {\\n                // Break the loop if ICR is greater than MCR and Stability Pool is empty\\n                if (\\n                    vars.ICR >= IAdminContract(adminContract).getMcr(_asset)\\n                        && vars.remainingDebtTokenInStabPool == 0\\n                ) {\\n                    break;\\n                }\\n\\n                uint256 TCR =\\n                    TrenMath._computeCR(vars.entireSystemColl, vars.entireSystemDebt, _price);\\n\\n                singleLiquidation = _liquidateRecoveryMode(\\n                    _asset, vars.user, vars.ICR, vars.remainingDebtTokenInStabPool, TCR, _price\\n                );\\n\\n                // Update aggregate trackers\\n                vars.remainingDebtTokenInStabPool =\\n                    vars.remainingDebtTokenInStabPool - singleLiquidation.debtToOffset;\\n                vars.entireSystemDebt = vars.entireSystemDebt - singleLiquidation.debtToOffset;\\n                vars.entireSystemColl = vars.entireSystemColl - singleLiquidation.collToSendToSP\\n                    - singleLiquidation.collGasCompensation - singleLiquidation.collSurplus;\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n\\n                vars.backToNormalMode = !_checkPotentialRecoveryMode(\\n                    _asset, vars.entireSystemColl, vars.entireSystemDebt, _price\\n                );\\n            } else if (\\n                vars.backToNormalMode && vars.ICR < IAdminContract(adminContract).getMcr(_asset)\\n            ) {\\n                singleLiquidation =\\n                    _liquidateNormalMode(_asset, vars.user, vars.remainingDebtTokenInStabPool);\\n\\n                vars.remainingDebtTokenInStabPool =\\n                    vars.remainingDebtTokenInStabPool - singleLiquidation.debtToOffset;\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n            } else {\\n                break;\\n            } // break if the loop reaches a TrenBox with ICR >= MCR\\n\\n            vars.user = nextUser;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /* In a full liquidation, returns the values for a trenBox's coll and debt to be offset, and\\n    coll\\n    and debt to be\\n     * redistributed to active trenBoxes.\\n     */\\n    function _getOffsetAndRedistributionVals(\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 _debtTokenInStabPool\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 debtToOffset,\\n            uint256 collToSendToSP,\\n            uint256 debtToRedistribute,\\n            uint256 collToRedistribute\\n        )\\n    {\\n        if (_debtTokenInStabPool != 0) {\\n            /*\\n            * Offset as much debt & collateral as possible against the Stability Pool, and\\n            redistribute the remainder\\n             * between all active trenBoxes.\\n             *\\n            *  If the trenBox's debt is larger than the deposited debt token in the Stability Pool:\\n             *\\n            *  - Offset an amount of the trenBox's debt equal to the debt token in the Stability\\n            Pool\\n            *  - Send a fraction of the trenBox's collateral to the Stability Pool, equal to the\\n            fraction of its offset debt\\n             *\\n             */\\n            debtToOffset = TrenMath._min(_debt, _debtTokenInStabPool);\\n            collToSendToSP = (_coll * debtToOffset) / _debt;\\n            debtToRedistribute = _debt - debtToOffset;\\n            collToRedistribute = _coll - collToSendToSP;\\n        } else {\\n            debtToOffset = 0;\\n            collToSendToSP = 0;\\n            debtToRedistribute = _debt;\\n            collToRedistribute = _coll;\\n        }\\n    }\\n\\n    /*\\n     *  Get its offset coll/debt and coll gas comp, and close the trenBox.\\n     */\\n    function _getCappedOffsetVals(\\n        address _asset,\\n        uint256 _entireTrenBoxDebt,\\n        uint256 _entireTrenBoxColl,\\n        uint256 _price\\n    )\\n        internal\\n        view\\n        returns (LiquidationValues memory singleLiquidation)\\n    {\\n        singleLiquidation.entireTrenBoxDebt = _entireTrenBoxDebt;\\n        singleLiquidation.entireTrenBoxColl = _entireTrenBoxColl;\\n        uint256 cappedCollPortion =\\n            (_entireTrenBoxDebt * IAdminContract(adminContract).getMcr(_asset)) / _price;\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(_asset, cappedCollPortion);\\n        singleLiquidation.debtTokenGasCompensation =\\n            IAdminContract(adminContract).getDebtTokenGasCompensation(_asset);\\n\\n        singleLiquidation.debtToOffset = _entireTrenBoxDebt;\\n        singleLiquidation.collToSendToSP = cappedCollPortion - singleLiquidation.collGasCompensation;\\n        singleLiquidation.collSurplus = _entireTrenBoxColl - cappedCollPortion;\\n        singleLiquidation.debtToRedistribute = 0;\\n        singleLiquidation.collToRedistribute = 0;\\n    }\\n\\n    function _checkPotentialRecoveryMode(\\n        address _asset,\\n        uint256 _entireSystemColl,\\n        uint256 _entireSystemDebt,\\n        uint256 _price\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        uint256 TCR = TrenMath._computeCR(_entireSystemColl, _entireSystemDebt, _price);\\n        return TCR < IAdminContract(adminContract).getCcr(_asset);\\n    }\\n\\n    // Redemption internal/helper functions\\n    // -----------------------------------------------------------------------------\\n\\n    function _validateRedemptionRequirements(\\n        address _asset,\\n        uint256 _maxFeePercentage,\\n        uint256 _debtTokenAmount,\\n        uint256 _price\\n    )\\n        internal\\n        view\\n    {\\n        uint256 redemptionBlockTimestamp =\\n            IAdminContract(adminContract).getRedemptionBlockTimestamp(_asset);\\n        if (redemptionBlockTimestamp > block.timestamp) {\\n            revert TrenBoxManagerOperations__RedemptionIsBlocked();\\n        }\\n        uint256 redemptionFeeFloor = IAdminContract(adminContract).getRedemptionFeeFloor(_asset);\\n        if (_maxFeePercentage < redemptionFeeFloor || _maxFeePercentage > DECIMAL_PRECISION) {\\n            revert TrenBoxManagerOperations__FeePercentOutOfBounds(\\n                redemptionFeeFloor, DECIMAL_PRECISION\\n            );\\n        }\\n        if (_debtTokenAmount == 0) {\\n            revert TrenBoxManagerOperations__EmptyAmount();\\n        }\\n        uint256 redeemerBalance = IDebtToken(debtToken).balanceOf(msg.sender);\\n        if (redeemerBalance < _debtTokenAmount) {\\n            revert TrenBoxManagerOperations__InsufficientDebtTokenBalance(redeemerBalance);\\n        }\\n        uint256 tcr = _getTCR(_asset, _price);\\n        uint256 mcr = IAdminContract(adminContract).getMcr(_asset);\\n        if (tcr < mcr) {\\n            revert TrenBoxManagerOperations__TCRMustBeAboveMCR(tcr, mcr);\\n        }\\n    }\\n\\n    // Redeem as much collateral as possible from _borrower's trenBox in exchange for GRAI up to\\n    // _maxDebtTokenAmount\\n    function _redeemCollateralFromTrenBox(\\n        address _asset,\\n        address _borrower,\\n        uint256 _maxDebtTokenAmount,\\n        uint256 _price,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint256 _partialRedemptionHintNICR\\n    )\\n        internal\\n        returns (SingleRedemptionValues memory singleRedemption)\\n    {\\n        uint256 trenBoxDebt = ITrenBoxManager(trenBoxManager).getTrenBoxDebt(_asset, _borrower);\\n        uint256 trenBoxColl = ITrenBoxManager(trenBoxManager).getTrenBoxColl(_asset, _borrower);\\n\\n        // Determine the remaining amount (lot) to be redeemed, capped by the entire debt of the\\n        // trenBox minus the liquidation reserve\\n        singleRedemption.debtLot = TrenMath._min(\\n            _maxDebtTokenAmount,\\n            trenBoxDebt - IAdminContract(adminContract).getDebtTokenGasCompensation(_asset)\\n        );\\n\\n        // Get the debtToken lot of equivalent value in USD\\n        singleRedemption.collLot = (singleRedemption.debtLot * DECIMAL_PRECISION) / _price;\\n\\n        // Apply redemption softening\\n        singleRedemption.collLot =\\n            (singleRedemption.collLot * redemptionSofteningParam) / PERCENTAGE_PRECISION;\\n\\n        // Decrease the debt and collateral of the current trenBox according to the debt token lot\\n        // and corresponding coll to send\\n\\n        uint256 newDebt = trenBoxDebt - singleRedemption.debtLot;\\n        uint256 newColl = trenBoxColl - singleRedemption.collLot;\\n\\n        if (newDebt == IAdminContract(adminContract).getDebtTokenGasCompensation(_asset)) {\\n            ITrenBoxManager(trenBoxManager).executeFullRedemption(_asset, _borrower, newColl);\\n        } else {\\n            uint256 newNICR = TrenMath._computeNominalCR(newColl, newDebt);\\n\\n            /*\\n            * If the provided hint is out of date, we bail since trying to reinsert without a good\\n            hint will almost\\n             * certainly result in running out of gas.\\n             *\\n            * If the resultant net debt of the partial is less than the minimum, net debt we bail.\\n             */\\n            if (\\n                newNICR != _partialRedemptionHintNICR\\n                    || _getNetDebt(_asset, newDebt)\\n                        < IAdminContract(adminContract).getMinNetDebt(_asset)\\n            ) {\\n                singleRedemption.cancelledPartial = true;\\n                return singleRedemption;\\n            }\\n\\n            ITrenBoxManager(trenBoxManager).executePartialRedemption(\\n                _asset,\\n                _borrower,\\n                newDebt,\\n                newColl,\\n                newNICR,\\n                _upperPartialRedemptionHint,\\n                _lowerPartialRedemptionHint\\n            );\\n        }\\n\\n        return singleRedemption;\\n    }\\n\\n    function setRedemptionSofteningParam(uint256 _redemptionSofteningParam) public {\\n        if (msg.sender != timelockAddress) {\\n            revert TrenBoxManagerOperations__NotTimelock();\\n        }\\n        if (_redemptionSofteningParam < 9700 || _redemptionSofteningParam > PERCENTAGE_PRECISION) {\\n            revert TrenBoxManagerOperations__InvalidParam();\\n        }\\n        redemptionSofteningParam = _redemptionSofteningParam;\\n        emit RedemptionSoftenParamChanged(_redemptionSofteningParam);\\n    }\\n\\n    function authorizeUpgrade(address newImplementation) public {\\n        _authorizeUpgrade(newImplementation);\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner { }\\n}\\n\",\"keccak256\":\"0x04b0f1fb9086de8cf88f924f05b05a25c9408dafb2e4ac713d59d33565dcc2bc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b50608051615ae86200003f600039600081816133510152818161337a01526134bb0152615ae86000f3fe6080604052600436106102675760003560e01c806395fb16bb11610144578063c8564c62116100b6578063e256888f1161007a578063e256888f1461079a578063f1c05a7e146107b0578063f2fde38b146107d0578063f8d89898146107f0578063fe06073314610810578063fe9d03231461083057600080fd5b8063c8564c62146106e9578063cc8b21e41461071a578063cda775f91461073a578063d58d446c1461075a578063d9eb5ff61461077a57600080fd5b8063b957172111610108578063b957172114610629578063bf74ba0714610649578063c05c5e9414610669578063c394a7fa14610689578063c415b95c146106a9578063c5f956af146106c957600080fd5b806395fb16bb1461054d5780639e86d0c41461056d578063a3f4df7e1461058d578063ad3cb1cc146105e3578063ad59db651461061457600080fd5b806355dafa46116101dd57806377553ad4116101a157806377553ad4146104855780637f7dde4a146104a55780638129fc1c146104c557806382eaca21146104da57806386b9d81f146104f05780638da5cb5b1461051057600080fd5b806355dafa46146103f05780636a85d67d14610410578063701526b414610430578063715018a614610450578063741bef1a1461046557600080fd5b80633cc742251161022f5780633cc742251461034857806340a44bd1146103685780634169467d146103885780634bc66f32146103a85780634f1ef286146103c857806352d1902d146103db57600080fd5b806301c931001461026c578063048c661d1461028e5780630a34d4d6146102cb57806327d04b35146102eb578063301be45914610319575b600080fd5b34801561027857600080fd5b5061028c610287366004615470565b610850565b005b34801561029a57600080fd5b50600d546102ae906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102d757600080fd5b506011546102ae906001600160a01b031681565b3480156102f757600080fd5b5061030b610306366004615470565b6108a1565b6040519081526020016102c2565b34801561032557600080fd5b5061033961033436600461548d565b610999565b6040516102c2939291906154c8565b34801561035457600080fd5b506006546102ae906001600160a01b031681565b34801561037457600080fd5b5061028c6103833660046154e9565b61103e565b34801561039457600080fd5b506008546102ae906001600160a01b031681565b3480156103b457600080fd5b50600e546102ae906001600160a01b031681565b61028c6103d63660046155b1565b611776565b3480156103e757600080fd5b5061030b611795565b3480156103fc57600080fd5b50600a546102ae906001600160a01b031681565b34801561041c57600080fd5b5061028c61042b366004615470565b6117b2565b34801561043c57600080fd5b5061033961044b36600461548d565b611803565b34801561045c57600080fd5b5061028c611af7565b34801561047157600080fd5b50600b546102ae906001600160a01b031681565b34801561049157600080fd5b506002546102ae906001600160a01b031681565b3480156104b157600080fd5b506000546102ae906001600160a01b031681565b3480156104d157600080fd5b5061028c611b0b565b3480156104e657600080fd5b5061030b60335481565b3480156104fc57600080fd5b5061028c61050b366004615659565b611c2c565b34801561051c57600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166102ae565b34801561055957600080fd5b506004546102ae906001600160a01b031681565b34801561057957600080fd5b5061030b610588366004615470565b611d21565b34801561059957600080fd5b506105d66040518060400160405280601881526020017f5472656e426f784d616e616765724f7065726174696f6e73000000000000000081525081565b6040516102c291906156b6565b3480156105ef57600080fd5b506105d6604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561062057600080fd5b5061030b601981565b34801561063557600080fd5b5061028c6106443660046156e9565b611dc8565b34801561065557600080fd5b5061028c61066436600461575e565b612349565b34801561067557600080fd5b506001546102ae906001600160a01b031681565b34801561069557600080fd5b5061030b6106a4366004615777565b6123de565b3480156106b557600080fd5b506007546102ae906001600160a01b031681565b3480156106d557600080fd5b50600f546102ae906001600160a01b031681565b3480156106f557600080fd5b5060115461070a90600160a01b900460ff1681565b60405190151581526020016102c2565b34801561072657600080fd5b50600c546102ae906001600160a01b031681565b34801561074657600080fd5b506003546102ae906001600160a01b031681565b34801561076657600080fd5b5061028c610775366004615799565b6123f3565b34801561078657600080fd5b5061028c6107953660046157c5565b61282a565b3480156107a657600080fd5b5061030b61271081565b3480156107bc57600080fd5b506010546102ae906001600160a01b031681565b3480156107dc57600080fd5b5061028c6107eb366004615470565b6129c7565b3480156107fc57600080fd5b506005546102ae906001600160a01b031681565b34801561081c57600080fd5b5061028c61082b366004615470565b612a05565b34801561083c57600080fd5b506009546102ae906001600160a01b031681565b610858612a0e565b6001600160a01b03811661087f576040516385d3330760e01b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000805460405163c5739d0b60e01b81526001600160a01b0384811660048301528392169063c5739d0b90602401602060405180830381865afa1580156108ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610910919061588c565b60065460405163c5739d0b60e01b81526001600160a01b0386811660048301529293506000929091169063c5739d0b906024015b602060405180830381865afa158015610961573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610985919061588c565b905061099181836158bb565b949350505050565b604080516080810182526001600160a01b038681168083526020830187905282840186905260608301859052600c549351637608271560e01b81526004810191909152600093849384939092899285921690637608271590602401602060405180830381865afa158015610a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3591906158ce565b90505b6001600160a01b03811615801590610b3757506001548351604051633c557a6f60e11b81526001600160a01b0391821660048201529116906378aaf4de90602401602060405180830381865afa158015610a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aba919061588c565b6010548451604080870151905163b1eafaab60e01b81526001600160a01b039093169263b1eafaab92610af49290918791906004016158eb565b602060405180830381865afa158015610b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b35919061588c565b105b15610bb557600c5483516040516239c6e160ea1b81526001600160a01b039092169163e71b840091610b6d91859060040161590f565b602060405180830381865afa158015610b8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bae91906158ce565b9050610a38565b8095508260600151600003610bcd5760001960608401525b6001600160a01b03811615801590610be457508115155b8015610c00575060608301805190610bfb82615929565b905215155b1561102557825160105460405162a79b1d60e31b8152600092610d049290916001600160a01b039091169063053cd8e890610c41908490889060040161590f565b602060405180830381865afa158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c82919061588c565b601054875160405163f9a3d41f60e01b81526001600160a01b039092169163f9a3d41f91610cb491899060040161590f565b602060405180830381865afa158015610cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf5919061588c565b610cff91906158bb565b612a69565b9050828111610d1e57610d178184615940565b9250610fab565b60015484516040516321b443a360e21b81526001600160a01b0391821660048201529116906386d10e8c90602401602060405180830381865afa158015610d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8d919061588c565b811115610fa55760015484516040516321b443a360e21b81526001600160a01b039182166004820152600092610e1c9287929116906386d10e8c906024015b602060405180830381865afa158015610de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0d919061588c565b610e179085615940565b612ae2565b6010548651604051635f0b504b60e11b81529293506000926001600160a01b039092169163be16a09691610e5491889060040161590f565b602060405180830381865afa158015610e71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e95919061588c565b6010548751604051633517ff1b60e11b81526001600160a01b0390921691636a2ffe3691610ec791899060040161590f565b602060405180830381865afa158015610ee4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f08919061588c565b610f1291906158bb565b905060008660400151670de0b6b3a764000084610f2f9190615953565b610f399190615980565b905061271060335482610f4c9190615953565b610f569190615980565b90506000610f648284615940565b90506000610f728587615940565b90506000610f848a6000015183612af8565b9050610f908382612b71565b9b50610f9c868a615940565b98505050505050505b50611025565b600c5484516040516239c6e160ea1b81526001600160a01b039092169163e71b840091610fdc91869060040161590f565b602060405180830381865afa158015610ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101d91906158ce565b915050610bcd565b61102f828a615940565b93505050509450945094915050565b611046612ba7565b61108e60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600b54604051635670bcc760e11b81526001600160a01b038b811660048301529091169063ace1798e90602401602060405180830381865afa1580156110d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fc919061588c565b60c08201819052611112908a9084908b90612bdf565b61111b896108a1565b60e082015287815260105460c08201516040516352576cdf60e01b81526000926001600160a01b0316916352576cdf9161115c918e918b91906004016158eb565b6020604051808303816000875af115801561117b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119f9190615994565b156111ab575084611395565b600c54604051637608271560e01b81526001600160a01b038c8116600483015290911690637608271590602401602060405180830381865afa1580156111f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121991906158ce565b90505b6001600160a01b038116158015906113175750600154604051633c557a6f60e11b81526001600160a01b038c81166004830152909116906378aaf4de90602401602060405180830381865afa158015611279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129d919061588c565b60105460c084015160405163b1eafaab60e01b81526001600160a01b039092169163b1eafaab916112d4918f9187916004016158eb565b602060405180830381865afa1580156112f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611315919061588c565b105b1561139557600c546040516239c6e160ea1b81526001600160a01b039091169063e71b84009061134d908d90859060040161590f565b602060405180830381865afa15801561136a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138e91906158ce565b905061121c565b836000036113a35760001993505b6001600160a01b038116158015906113bb5750815115155b80156113c657508315155b1561152657836113d581615929565b600c546040516239c6e160ea1b8152919650600092506001600160a01b03169063e71b84009061140b908e90869060040161590f565b602060405180830381865afa158015611428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144c91906158ce565b60105460405163df4fb9ef60e01b81529192506001600160a01b03169063df4fb9ef9061147f908e90869060040161590f565b600060405180830381600087803b15801561149957600080fd5b505af11580156114ad573d6000803e3d6000fd5b5050505060006114ca8c8486600001518760c001518e8e8d612e91565b90508060400151156114dd575050611526565b805160208501516114ee91906158bb565b602080860191909152810151604085015161150991906158bb565b60408501528051845161151c9190615940565b84525090506113a3565b816040015160000361154b576040516346c7d89b60e11b815260040160405180910390fd5b60105460408084015160c085015160e0860151925163c5d75f7b60e01b81526001600160a01b038f811660048301526024820193909352604481019190915260648101929092529091169063c5d75f7b90608401600060405180830381600087803b1580156115b957600080fd5b505af11580156115cd573d6000803e3d6000fd5b50506010546040858101519051631ee9211f60e01b81526001600160a01b038f81166004830152602482019290925291169250631ee9211f9150604401602060405180830381865afa158015611627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164b919061588c565b606083018190526040830151611662919085613271565b60105460208301516060840151604080860151905163025eeff360e41b81526001600160a01b038f811660048301523360248301526044820194909452606481019290925260848201529116906325eeff309060a401600060405180830381600087803b1580156116d257600080fd5b505af11580156116e6573d6000803e3d6000fd5b50505050896001600160a01b03167f08b6f1ce3f9ab2722e8ea40c31a3e3a806a41702c5994f29af43dc0c1f2837df8a84602001518560400151866060015160405161174b949392919093845260208401929092526040830152606082015260800190565b60405180910390a2505061176c6001600080516020615abc83398151915255565b5050505050505050565b61177e613346565b611787826133eb565b61179182826133f3565b5050565b600061179f6134b0565b50600080516020615a9c83398151915290565b6117ba612a0e565b6001600160a01b0381166117e15760405163706ebc6560e11b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60105460405163bc8793a960e01b81526001600160a01b038681166004830152600092839283928392169063bc8793a990602401602060405180830381865afa158015611854573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611878919061588c565b905080600003611892576000808693509350935050611aed565b600c54604051637608271560e01b81526001600160a01b038a8116600483015290911690637608271590602401602060405180830381865afa1580156118dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190091906158ce565b6010546040516390ec230160e01b815291955061197f9189916001600160a01b0316906390ec230190611939908d908a9060040161590f565b602060405180830381865afa158015611956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197a919061588c565b6134f9565b925084915060015b86811015611aea5760408051602081018590520160408051601f198184030181529190528051602090910120925060006119c183856159b6565b60105460405163c226882360e01b81526001600160a01b038d81166004830152602482018490529293506000929091169063c226882390604401602060405180830381865afa158015611a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3c91906158ce565b6010546040516390ec230160e01b81529192506000916001600160a01b03909116906390ec230190611a74908f90869060040161590f565b602060405180830381865afa158015611a91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab5919061588c565b90506000611ac3828d6134f9565b905087811015611ad4578097508298505b84611ade816159ca565b95505050505050611987565b50505b9450945094915050565b611aff612a0e565b611b09600061351c565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015611b515750825b905060008267ffffffffffffffff166001148015611b6e5750303b155b905081158015611b7c575080155b15611b9a5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315611bc457845460ff60401b1916600160401b1785555b33611bce8161358d565b611bd661359e565b611bde6135a6565b508315611c2557845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b601054604051637316290f60e11b81526001600160a01b039091169063e62c521e90611c5e908590859060040161590f565b602060405180830381865afa158015611c7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9f9190615994565b611cbc5760405163327cb9bf60e11b815260040160405180910390fd5b604080516001808252818301909252600091602080830190803683370190505090508181600081518110611cf257611cf26159e3565b60200260200101906001600160a01b031690816001600160a01b031681525050611d1c838261282a565b505050565b60008054604051635373433f60e01b81526001600160a01b03848116600483015283921690635373433f90602401602060405180830381865afa158015611d6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d90919061588c565b600654604051635373433f60e01b81526001600160a01b03868116600483015292935060009290911690635373433f90602401610944565b611dd0612a0e565b601154600160a01b900460ff1615611dfa57604051625f22e960e41b815260040160405180910390fd5b60108114611e1b57604051633f5a111d60e21b815260040160405180910390fd5b60005b6010811015611ebe576000838383818110611e3b57611e3b6159e3565b9050602002016020810190611e509190615470565b6001600160a01b031603611eb65780838383818110611e7157611e716159e3565b9050602002016020810190611e869190615470565b604051630d9d339f60e01b815260048101929092526001600160a01b031660248201526044015b60405180910390fd5b600101611e1e565b5081816000818110611ed257611ed26159e3565b9050602002016020810190611ee79190615470565b600080546001600160a01b0319166001600160a01b039290921691909117905581816001818110611f1a57611f1a6159e3565b9050602002016020810190611f2f9190615470565b600180546001600160a01b0319166001600160a01b039290921691909117905581816002818110611f6257611f626159e3565b9050602002016020810190611f779190615470565b600280546001600160a01b0319166001600160a01b039290921691909117905581816003818110611faa57611faa6159e3565b9050602002016020810190611fbf9190615470565b600380546001600160a01b0319166001600160a01b039290921691909117905581816004818110611ff257611ff26159e3565b90506020020160208101906120079190615470565b600580546001600160a01b0319166001600160a01b03929092169190911781558290829081811061203a5761203a6159e3565b905060200201602081019061204f9190615470565b600680546001600160a01b0319166001600160a01b039290921691909117815582908290818110612082576120826159e3565b90506020020160208101906120979190615470565b600780546001600160a01b0319166001600160a01b0392909216919091178155829082908181106120ca576120ca6159e3565b90506020020160208101906120df9190615470565b600880546001600160a01b0319166001600160a01b039290921691909117815582908290818110612112576121126159e3565b90506020020160208101906121279190615470565b600980546001600160a01b0319166001600160a01b03929092169190911781558290829081811061215a5761215a6159e3565b905060200201602081019061216f9190615470565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a8181106121a2576121a26159e3565b90506020020160208101906121b79190615470565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b8181106121ea576121ea6159e3565b90506020020160208101906121ff9190615470565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c818110612232576122326159e3565b90506020020160208101906122479190615470565b600e80546001600160a01b0319166001600160a01b03929092169190911790558181600d81811061227a5761227a6159e3565b905060200201602081019061228f9190615470565b600f80546001600160a01b0319166001600160a01b03929092169190911790558181600e8181106122c2576122c26159e3565b90506020020160208101906122d79190615470565b601080546001600160a01b0319166001600160a01b03929092169190911790558181600f81811061230a5761230a6159e3565b905060200201602081019061231f9190615470565b601180546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b600e546001600160a01b0316331461237457604051630e50357d60e01b815260040160405180910390fd5b6125e4811080612385575061271081115b156123a3576040516334d8ee5360e21b815260040160405180910390fd5b60338190556040518181527f39e82d837dcc454e3b68bd2a39ec088a78af1570fa1a2de0b9b2e2d45c1158c69060200160405180910390a150565b60006123ea8383612b71565b90505b92915050565b6123fb612ba7565b61242f6040518060a00160405280600081526020016000815260200160001515815260200160008152602001600081525090565b6124376153ce565b600b54604051635670bcc760e11b81526001600160a01b0386811660048301529091169063ace1798e90602401602060405180830381865afa158015612481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a5919061588c565b8252600d5460408051630d9a6b3560e01b815290516001600160a01b0390921691630d9a6b35916004808201926020929091908290030181865afa1580156124f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612515919061588c565b602083015281516125279085906135b6565b158015604084015261254e5761254784836000015184602001518661363b565b9050612565565b612562848360000151846020015186613ac8565b90505b806020015160000361258a5760405163520522c760e01b815260040160405180910390fd5b60105460c082015160e0830151608084015160a0850151604051637012f7fb60e01b81526001600160a01b038a811660048301526024820195909552604481019390935260648301919091526084820152911690637012f7fb9060a401600060405180830381600087803b15801561260157600080fd5b505af1158015612615573d6000803e3d6000fd5b50505050806101000151600014612697576000546003546101008301516040516347878f1560e01b81526001600160a01b03938416936347878f1593612664938a9392909116916004016158eb565b600060405180830381600087803b15801561267e57600080fd5b505af1158015612692573d6000803e3d6000fd5b505050505b601054604082810151905163da3835ad60e01b81526001600160a01b038781166004830152602482019290925291169063da3835ad90604401600060405180830381600087803b1580156126ea57600080fd5b505af11580156126fe573d6000803e3d6000fd5b5050506020820151606084015250610100810151604082015182516127239190615940565b61272d9190615940565b6080808401829052606080850151604080860151868401518251938452602084019690965290820152908101929092526001600160a01b038616917fa3f221854f649364e9a3bb384dd1ff938482664f4a0eac0f6e39a542f5193bd3910160405180910390a26010546060820151604080840151905163b65c72bf60e01b81526001600160a01b0388811660048301523360248301526044820193909352606481019190915291169063b65c72bf90608401600060405180830381600087803b1580156127f957600080fd5b505af115801561280d573d6000803e3d6000fd5b5050505050506117916001600080516020615abc83398151915255565b612832612ba7565b80511580612841575060198151115b1561285f57604051637f9c2a2560e01b815260040160405180910390fd5b6128936040518060a00160405280600081526020016000815260200160001515815260200160008152602001600081525090565b61289b6153ce565b600d60009054906101000a90046001600160a01b03166001600160a01b0316630d9a6b356040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612912919061588c565b6020830152600b54604051635670bcc760e11b81526001600160a01b0386811660048301529091169063ace1798e90602401602060405180830381865afa158015612961573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612985919061588c565b8083526129939085906135b6565b15801560408401526129b357612547848360000151846020015186613ca8565b61256284836000015184602001518661403d565b6129cf612a0e565b6001600160a01b0381166129f957604051631e4fbdf760e01b815260006004820152602401611ead565b612a028161351c565b50565b612a02816133eb565b33612a407f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614611b095760405163118cdaa760e01b8152336004820152602401611ead565b60015460405163c08261db60e01b81526001600160a01b038481166004830152600092169063c08261db90602401602060405180830381865afa158015612ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad8919061588c565b6123ea9083615940565b6000818310612af157816123ea565b5090919050565b60015460405163c08261db60e01b81526001600160a01b038481166004830152600092169063c08261db90602401602060405180830381865afa158015612b43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b67919061588c565b6123ea90836158bb565b60008115612b9e5781612b8d68056bc75e2d6310000085615953565b612b979190615980565b90506123ed565b506000196123ed565b600080516020615abc833981519152805460011901612bd957604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b600154604051633d15092560e21b81526001600160a01b038681166004830152600092169063f454249490602401602060405180830381865afa158015612c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4e919061588c565b905042811115612c7157604051637fe8d35d60e01b815260040160405180910390fd5b60015460405163443c4fcb60e01b81526001600160a01b038781166004830152600092169063443c4fcb90602401602060405180830381865afa158015612cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ce0919061588c565b905080851080612cf75750670de0b6b3a764000085115b15612d2657604051636b44726760e11b815260048101829052670de0b6b3a76400006024820152604401611ead565b83600003612d4757604051630fcbc67160e21b815260040160405180910390fd5b6005546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db4919061588c565b905084811015612dda5760405163780a921960e11b815260048101829052602401611ead565b6000612de688866141b9565b600154604051633c557a6f60e11b81526001600160a01b038b81166004830152929350600092909116906378aaf4de90602401602060405180830381865afa158015612e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5a919061588c565b905080821015612e865760405162132add60e91b81526004810183905260248101829052604401611ead565b505050505050505050565b612eb7604051806060016040528060008152602001600081526020016000151581525090565b60105460405163f9a3d41f60e01b81526000916001600160a01b03169063f9a3d41f90612eea908c908c9060040161590f565b602060405180830381865afa158015612f07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2b919061588c565b601054604051633517ff1b60e11b81529192506000916001600160a01b0390911690636a2ffe3690612f63908d908d9060040161590f565b602060405180830381865afa158015612f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa4919061588c565b60015460405163c08261db60e01b81526001600160a01b038d81166004830152929350612fdd928b92169063c08261db90602401610dcc565b8084528790612ff590670de0b6b3a764000090615953565b612fff9190615980565b60208401819052603354612710916130179190615953565b6130219190615980565b602084015282516000906130359084615940565b905060008460200151836130499190615940565b60015460405163c08261db60e01b81526001600160a01b038f8116600483015292935091169063c08261db90602401602060405180830381865afa158015613095573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b9919061588c565b820361312a5760105460405163456dc0ff60e11b81526001600160a01b0390911690638adb81fe906130f3908f908f9086906004016158eb565b600060405180830381600087803b15801561310d57600080fd5b505af1158015613121573d6000803e3d6000fd5b50505050613261565b60006131368284612b71565b905086811415806131bc57506001546040516321b443a360e21b81526001600160a01b038f81166004830152909116906386d10e8c90602401602060405180830381865afa15801561318c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b0919061588c565b6131ba8e85612a69565b105b156131d35750506001604085015250613266915050565b60105460405163038027ff60e21b81526001600160a01b038f811660048301528e811660248301526044820186905260648201859052608482018490528b811660a48301528a811660c483015290911690630e009ffc9060e401600060405180830381600087803b15801561324757600080fd5b505af115801561325b573d6000803e3d6000fd5b50505050505b505050505b979650505050505050565b600082600160009054906101000a90046001600160a01b03166001600160a01b031663a20baee66040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132eb919061588c565b6132f59086615953565b6132ff9190615980565b90508181111561332c57604051632e364cc160e21b81526004810182905260248101839052604401611ead565b50505050565b6001600080516020615abc83398151915255565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806133cd57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166133c1600080516020615a9c833981519152546001600160a01b031690565b6001600160a01b031614155b15611b095760405163703e46dd60e11b815260040160405180910390fd5b612a02612a0e565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561344d575060408051601f3d908101601f1916820190925261344a9181019061588c565b60015b61347557604051634c9c8ce360e01b81526001600160a01b0383166004820152602401611ead565b600080516020615a9c83398151915281146134a657604051632a87526960e21b815260048101829052602401611ead565b611d1c83836141e8565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611b095760405163703e46dd60e11b815260040160405180910390fd5b6000818310156135125761350d8383615940565b6123ea565b6123ea8284615940565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b61359561423e565b612a0281614287565b611b0961423e565b6135ae61423e565b611b0961428f565b6000806135c384846141b9565b60015460405163316a306d60e11b81526001600160a01b0387811660048301529293509116906362d460da90602401602060405180830381865afa15801561360f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613633919061588c565b119392505050565b6136436153ce565b61364b61541a565b6136536153ce565b84825260006060830152613666876108a1565b608083015261367487611d21565b60a0830152600c54604051637608271560e01b81526001600160a01b03898116600483015290911690637608271590602401602060405180830381865afa1580156136c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136e791906158ce565b6001600160a01b03908116604084810191909152600c549051631bdb4c8d60e01b815289831660048201526000929190911690631bdb4c8d90602401602060405180830381865afa158015613740573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061376491906158ce565b905060005b858110801561378e5750816001600160a01b031684604001516001600160a01b031614155b15613abc57600c5460408086015190516239c6e160ea1b81526000926001600160a01b03169163e71b8400916137c8918e9160040161590f565b602060405180830381865afa1580156137e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061380991906158ce565b601054604080880151905163b1eafaab60e01b81529293506001600160a01b039091169163b1eafaab91613844918e91908e906004016158eb565b602060405180830381865afa158015613861573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613885919061588c565b602086015260608501516139e157600154604051633c557a6f60e11b81526001600160a01b038c81166004830152909116906378aaf4de90602401602060405180830381865afa1580156138dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613901919061588c565b85602001511015801561391357508451155b1561391e5750613abc565b60006139338660a0015187608001518c614297565b905061394f8b876040015188602001518960000151858f6142cb565b6080810151875191965061396291615940565b8652608080860151908701516139789190615940565b6080870152610100850151604086015160a0808801519089015161399c9190615940565b6139a69190615940565b6139b09190615940565b60a08701526139bf8786614b9f565b96506139d58b8760a0015188608001518d614c89565b15606087015250613aa6565b84606001518015613a625750600154604051633c557a6f60e11b81526001600160a01b038c81166004830152909116906378aaf4de90602401602060405180830381865afa158015613a37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a5b919061588c565b8560200151105b15613aa057613a7a8a86604001518760000151614d11565b60808101518651919550613a8d91615940565b8552613a998685614b9f565b9550613aa6565b50613abc565b6001600160a01b03166040850152600101613769565b50505050949350505050565b613ad06153ce565b613ad861541a565b613ae06153ce565b84825260005b84811015613c9d57600c54604051637608271560e01b81526001600160a01b038a8116600483015290911690637608271590602401602060405180830381865afa158015613b38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b5c91906158ce565b6001600160a01b039081166040808601829052601054905163b1eafaab60e01b815292169163b1eafaab91613b98918c91908c906004016158eb565b602060405180830381865afa158015613bb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bd9919061588c565b6020840152600154604051633c557a6f60e11b81526001600160a01b038a81166004830152909116906378aaf4de90602401602060405180830381865afa158015613c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c4c919061588c565b83602001511015613c9057613c6a8884604001518560000151614d11565b60808101518451919350613c7d91615940565b8352613c898483614b9f565b9350613c95565b613c9d565b600101613ae6565b505050949350505050565b613cb06153ce565b613cb861541a565b613cc06153ce565b84825260006060830152613cd3876108a1565b6080830152613ce187611d21565b60a083015260005b8451811015613c9d57848181518110613d0457613d046159e3565b60209081029190910101516001600160a01b0316604084015260016010546040808601519051632862f79760e11b81526001600160a01b03909216916350c5ef2e91613d55918d919060040161590f565b602060405180830381865afa158015613d72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d96919061588c565b14613da357600101613ce9565b601054604080850151905163b1eafaab60e01b81526001600160a01b039092169163b1eafaab91613ddb918c91908c906004016158eb565b602060405180830381865afa158015613df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e1c919061588c565b60208401526060830151613f7a57600154604051633c557a6f60e11b81526001600160a01b038a81166004830152909116906378aaf4de90602401602060405180830381865afa158015613e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e98919061588c565b836020015110158015613eaa57508251155b15613eb757600101613ce9565b6000613ecc8460a0015185608001518a614297565b9050613ee889856040015186602001518760000151858d6142cb565b60808101518551919450613efb91615940565b845260808084015190850151613f119190615940565b6080850152610100830151604084015160a08086015190870151613f359190615940565b613f3f9190615940565b613f499190615940565b60a0850152613f588584614b9f565b9450613f6e898560a0015186608001518b614c89565b15606085015250614035565b82606001518015613ffb5750600154604051633c557a6f60e11b81526001600160a01b038a81166004830152909116906378aaf4de90602401602060405180830381865afa158015613fd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ff4919061588c565b8360200151105b15614035576140138884604001518560000151614d11565b6080810151845191935061402691615940565b83526140328483614b9f565b93505b600101613ce9565b6140456153ce565b61404d61541a565b6140556153ce565b84825260005b8451811015613c9d57848181518110614076576140766159e3565b60209081029190910101516001600160a01b039081166040808601829052601054905163b1eafaab60e01b815292169163b1eafaab916140bd918c91908c906004016158eb565b602060405180830381865afa1580156140da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140fe919061588c565b6020840152600154604051633c557a6f60e11b81526001600160a01b038a81166004830152909116906378aaf4de90602401602060405180830381865afa15801561414d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614171919061588c565b836020015110156141b15761418f8884604001518560000151614d11565b608081015184519193506141a291615940565b83526141ae8483614b9f565b93505b60010161405b565b6000806141c584611d21565b905060006141d2856108a1565b90506141df828286614297565b95945050505050565b6141f18261501d565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561423657611d1c8282615082565b6117916150ef565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16611b0957604051631afcd79f60e31b815260040160405180910390fd5b6129cf61423e565b61333261423e565b600082156142bf576000836142ac8487615953565b6142b69190615980565b91506142c49050565b506000195b9392505050565b6142d36153ce565b6142f760405180606001604052806000815260200160008152602001600081525090565b60105460405163bc8793a960e01b81526001600160a01b038a81166004830152600192169063bc8793a990602401602060405180830381865afa158015614342573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614366919061588c565b116143715750614b95565b6010546040516309bde83560e21b81526001600160a01b03909116906326f7a0d4906143a3908b908b9060040161590f565b608060405180830381865afa1580156143c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143e491906159f9565b6040850152602084810191909152840181905290835261440590899061510e565b604083810191909152600154905163c08261db60e01b81526001600160a01b038a811660048301529091169063c08261db90602401602060405180830381865afa158015614457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061447b919061588c565b6060830152604082015160208301516144949190615940565b81526001546040805163397f12d560e11b815290516001600160a01b03909216916372fe25aa916004808201926020929091908290030181865afa1580156144e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614504919061588c565b86116146b75760105460208201516040808401519051632076ee1d60e01b81526001600160a01b0390931692632076ee1d92614544928d926004016154c8565b600060405180830381600087803b15801561455e57600080fd5b505af1158015614572573d6000803e3d6000fd5b5050601054604051633ed3a18f60e21b81526001600160a01b03909116925063fb4e863c91506145a8908b908b9060040161590f565b600060405180830381600087803b1580156145c257600080fd5b505af11580156145d6573d6000803e3d6000fd5b505060006080850181905260a08501525050815160c0830152805160e083015260105460405163550bc5ab60e11b81526001600160a01b039091169063aa178b5690614628908b908b9060040161590f565b600060405180830381600087803b15801561464257600080fd5b505af1158015614656573d6000803e3d6000fd5b50505050866001600160a01b0316886001600160a01b03167fd13515134171b35d13ca928c7912f43125417d82681b5f284b52f97563ccb8658460000151856020015160026040516146aa93929190615a2f565b60405180910390a3614b93565b600160009054906101000a90046001600160a01b03166001600160a01b03166372fe25aa6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561470a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061472e919061588c565b861180156147a85750600154604051633c557a6f60e11b81526001600160a01b038a81166004830152909116906378aaf4de90602401602060405180830381865afa158015614781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147a5919061588c565b86105b156148d35760105460208201516040808401519051632076ee1d60e01b81526001600160a01b0390931692632076ee1d926147e7928d926004016154c8565b600060405180830381600087803b15801561480157600080fd5b505af1158015614815573d6000803e3d6000fd5b5050601054604051633ed3a18f60e21b81526001600160a01b03909116925063fb4e863c915061484b908b908b9060040161590f565b600060405180830381600087803b15801561486557600080fd5b505af1158015614879573d6000803e3d6000fd5b50508351835161488d935090915087615187565b60e086015260c085015260a0840152608083015260105460405163550bc5ab60e11b81526001600160a01b039091169063aa178b5690614628908b908b9060040161590f565b600154604051633c557a6f60e11b81526001600160a01b038a81166004830152909116906378aaf4de90602401602060405180830381865afa15801561491d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614941919061588c565b861015801561494f57508386105b801561495c575081518510155b15614b825760105460208201516040808401519051632076ee1d60e01b81526001600160a01b0390931692632076ee1d9261499b928d926004016154c8565b600060405180830381600087803b1580156149b557600080fd5b505af11580156149c9573d6000803e3d6000fd5b50505050846000036149dd576149dd615a69565b601054604051633ed3a18f60e21b81526001600160a01b039091169063fb4e863c90614a0f908b908b9060040161590f565b600060405180830381600087803b158015614a2957600080fd5b505af1158015614a3d573d6000803e3d6000fd5b50505050614a558883600001518460200151866151e8565b60105460405163550bc5ab60e11b81529193506001600160a01b03169063aa178b5690614a88908b908b9060040161590f565b600060405180830381600087803b158015614aa257600080fd5b505af1158015614ab6573d6000803e3d6000fd5b50505050816101000151600014614b3257600354610100830151604051633fa5152d60e21b81526001600160a01b039092169163fe9454b491614aff918c918c916004016158eb565b600060405180830381600087803b158015614b1957600080fd5b505af1158015614b2d573d6000803e3d6000fd5b505050505b866001600160a01b0316886001600160a01b03167fd13515134171b35d13ca928c7912f43125417d82681b5f284b52f97563ccb86584600001518560a0015160026040516146aa93929190615a2f565b614b8a6153ce565b9150614b959050565b505b9695505050505050565b614ba76153ce565b81604001518360400151614bbb91906158bb565b604082015260608083015190840151614bd491906158bb565b606082015281516020840151614bea91906158bb565b6020808301919091528201518351614c0291906158bb565b815260808083015190840151614c1891906158bb565b608082015260a08083015190840151614c3191906158bb565b60a082015260c08083015190840151614c4a91906158bb565b60c082015260e08083015190840151614c6391906158bb565b60e08201526101008083015190840151614c7d91906158bb565b61010082015292915050565b600080614c97858585614297565b60015460405163316a306d60e11b81526001600160a01b0389811660048301529293509116906362d460da90602401602060405180830381865afa158015614ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d07919061588c565b1195945050505050565b614d196153ce565b614d3d60405180606001604052806000815260200160008152602001600081525090565b6010546040516309bde83560e21b81526001600160a01b03909116906326f7a0d490614d6f908890889060040161590f565b608060405180830381865afa158015614d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614db091906159f9565b60408086019182526020868101938452870193909352928552601054905192519151632076ee1d60e01b81526001600160a01b0390911692632076ee1d92614dfe928a9291906004016154c8565b600060405180830381600087803b158015614e1857600080fd5b505af1158015614e2c573d6000803e3d6000fd5b5050601054604051633ed3a18f60e21b81526001600160a01b03909116925063fb4e863c9150614e62908890889060040161590f565b600060405180830381600087803b158015614e7c57600080fd5b505af1158015614e90573d6000803e3d6000fd5b50505050614ea285836020015161510e565b604083810191909152600154905163c08261db60e01b81526001600160a01b0387811660048301529091169063c08261db90602401602060405180830381865afa158015614ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f18919061588c565b606083015260408201516020830151600091614f3391615940565b9050614f4483600001518286615187565b60e087015260c086015260a0850152608084015260105460405163550bc5ab60e11b81526001600160a01b039091169063aa178b5690614f8a908990899060040161590f565b600060405180830381600087803b158015614fa457600080fd5b505af1158015614fb8573d6000803e3d6000fd5b50505050846001600160a01b0316866001600160a01b03167fd13515134171b35d13ca928c7912f43125417d82681b5f284b52f97563ccb86585600001518660200151600160405161500c93929190615a2f565b60405180910390a350509392505050565b806001600160a01b03163b60000361505357604051634c9c8ce360e01b81526001600160a01b0382166004820152602401611ead565b600080516020615a9c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b03168460405161509f9190615a7f565b600060405180830381855af49150503d80600081146150da576040519150601f19603f3d011682016040523d82523d6000602084013e6150df565b606091505b50915091506141df858383615349565b3415611b095760405163b398979f60e01b815260040160405180910390fd5b6001546040516315ee08fb60e31b81526001600160a01b038481166004830152600092169063af7047d890602401602060405180830381865afa158015615159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061517d919061588c565b6123ea9083615980565b600080808084156151d25761519c8786612ae2565b9350866151a98588615953565b6151b39190615980565b92506151bf8488615940565b91506151cb8387615940565b90506151df565b5060009250829150859050845b93509350935093565b6151f06153ce565b83815260208101839052600154604051633c557a6f60e11b81526001600160a01b03878116600483015260009285929116906378aaf4de90602401602060405180830381865afa158015615248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061526c919061588c565b6152769087615953565b6152809190615980565b905061528c868261510e565b604083810191909152600154905163c08261db60e01b81526001600160a01b0388811660048301529091169063c08261db90602401602060405180830381865afa1580156152de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615302919061588c565b606083015260808201859052604082015161531d9082615940565b60a083015261532c8185615940565b61010083015250600060c0820181905260e0820152949350505050565b60608261535e57615359826153a5565b6142c4565b815115801561537557506001600160a01b0384163b155b1561539e57604051639996b31560e01b81526001600160a01b0385166004820152602401611ead565b50806142c4565b8051156153b55780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060c00160405280600081526020016000815260200160006001600160a01b0316815260200160001515815260200160008152602001600081525090565b6001600160a01b0381168114612a0257600080fd5b60006020828403121561548257600080fd5b81356142c48161545b565b600080600080608085870312156154a357600080fd5b84356154ae8161545b565b966020860135965060408601359560600135945092505050565b6001600160a01b039390931683526020830191909152604082015260600190565b600080600080600080600080610100898b03121561550657600080fd5b88356155118161545b565b97506020890135965060408901356155288161545b565b955060608901356155388161545b565b945060808901356155488161545b565b979a969950949793969560a0850135955060c08501359460e001359350915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156155a9576155a961556a565b604052919050565b600080604083850312156155c457600080fd5b82356155cf8161545b565b915060208381013567ffffffffffffffff808211156155ed57600080fd5b818601915086601f83011261560157600080fd5b8135818111156156135761561361556a565b615625601f8201601f19168501615580565b9150808252878482850101111561563b57600080fd5b80848401858401376000848284010152508093505050509250929050565b6000806040838503121561566c57600080fd5b82356156778161545b565b915060208301356156878161545b565b809150509250929050565b60005b838110156156ad578181015183820152602001615695565b50506000910152565b60208152600082518060208401526156d5816040850160208701615692565b601f01601f19169190910160400192915050565b600080602083850312156156fc57600080fd5b823567ffffffffffffffff8082111561571457600080fd5b818501915085601f83011261572857600080fd5b81358181111561573757600080fd5b8660208260051b850101111561574c57600080fd5b60209290920196919550909350505050565b60006020828403121561577057600080fd5b5035919050565b6000806040838503121561578a57600080fd5b50508035926020909101359150565b600080604083850312156157ac57600080fd5b82356157b78161545b565b946020939093013593505050565b600080604083850312156157d857600080fd5b82356157e38161545b565b915060208381013567ffffffffffffffff8082111561580157600080fd5b818601915086601f83011261581557600080fd5b8135818111156158275761582761556a565b8060051b9150615838848301615580565b818152918301840191848101908984111561585257600080fd5b938501935b8385101561587c578435925061586c8361545b565b8282529385019390850190615857565b8096505050505050509250929050565b60006020828403121561589e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156123ed576123ed6158a5565b6000602082840312156158e057600080fd5b81516142c48161545b565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b600081615938576159386158a5565b506000190190565b818103818111156123ed576123ed6158a5565b80820281158282048414176123ed576123ed6158a5565b634e487b7160e01b600052601260045260246000fd5b60008261598f5761598f61596a565b500490565b6000602082840312156159a657600080fd5b815180151581146142c457600080fd5b6000826159c5576159c561596a565b500690565b6000600182016159dc576159dc6158a5565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60008060008060808587031215615a0f57600080fd5b505082516020840151604085015160609095015191969095509092509050565b838152602081018390526060810160048310615a5b57634e487b7160e01b600052602160045260246000fd5b826040830152949350505050565b634e487b7160e01b600052600160045260246000fd5b60008251615a91818460208701615692565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a164736f6c6343000817000a",
  "deployedBytecode": "0x6080604052600436106102675760003560e01c806395fb16bb11610144578063c8564c62116100b6578063e256888f1161007a578063e256888f1461079a578063f1c05a7e146107b0578063f2fde38b146107d0578063f8d89898146107f0578063fe06073314610810578063fe9d03231461083057600080fd5b8063c8564c62146106e9578063cc8b21e41461071a578063cda775f91461073a578063d58d446c1461075a578063d9eb5ff61461077a57600080fd5b8063b957172111610108578063b957172114610629578063bf74ba0714610649578063c05c5e9414610669578063c394a7fa14610689578063c415b95c146106a9578063c5f956af146106c957600080fd5b806395fb16bb1461054d5780639e86d0c41461056d578063a3f4df7e1461058d578063ad3cb1cc146105e3578063ad59db651461061457600080fd5b806355dafa46116101dd57806377553ad4116101a157806377553ad4146104855780637f7dde4a146104a55780638129fc1c146104c557806382eaca21146104da57806386b9d81f146104f05780638da5cb5b1461051057600080fd5b806355dafa46146103f05780636a85d67d14610410578063701526b414610430578063715018a614610450578063741bef1a1461046557600080fd5b80633cc742251161022f5780633cc742251461034857806340a44bd1146103685780634169467d146103885780634bc66f32146103a85780634f1ef286146103c857806352d1902d146103db57600080fd5b806301c931001461026c578063048c661d1461028e5780630a34d4d6146102cb57806327d04b35146102eb578063301be45914610319575b600080fd5b34801561027857600080fd5b5061028c610287366004615470565b610850565b005b34801561029a57600080fd5b50600d546102ae906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102d757600080fd5b506011546102ae906001600160a01b031681565b3480156102f757600080fd5b5061030b610306366004615470565b6108a1565b6040519081526020016102c2565b34801561032557600080fd5b5061033961033436600461548d565b610999565b6040516102c2939291906154c8565b34801561035457600080fd5b506006546102ae906001600160a01b031681565b34801561037457600080fd5b5061028c6103833660046154e9565b61103e565b34801561039457600080fd5b506008546102ae906001600160a01b031681565b3480156103b457600080fd5b50600e546102ae906001600160a01b031681565b61028c6103d63660046155b1565b611776565b3480156103e757600080fd5b5061030b611795565b3480156103fc57600080fd5b50600a546102ae906001600160a01b031681565b34801561041c57600080fd5b5061028c61042b366004615470565b6117b2565b34801561043c57600080fd5b5061033961044b36600461548d565b611803565b34801561045c57600080fd5b5061028c611af7565b34801561047157600080fd5b50600b546102ae906001600160a01b031681565b34801561049157600080fd5b506002546102ae906001600160a01b031681565b3480156104b157600080fd5b506000546102ae906001600160a01b031681565b3480156104d157600080fd5b5061028c611b0b565b3480156104e657600080fd5b5061030b60335481565b3480156104fc57600080fd5b5061028c61050b366004615659565b611c2c565b34801561051c57600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166102ae565b34801561055957600080fd5b506004546102ae906001600160a01b031681565b34801561057957600080fd5b5061030b610588366004615470565b611d21565b34801561059957600080fd5b506105d66040518060400160405280601881526020017f5472656e426f784d616e616765724f7065726174696f6e73000000000000000081525081565b6040516102c291906156b6565b3480156105ef57600080fd5b506105d6604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561062057600080fd5b5061030b601981565b34801561063557600080fd5b5061028c6106443660046156e9565b611dc8565b34801561065557600080fd5b5061028c61066436600461575e565b612349565b34801561067557600080fd5b506001546102ae906001600160a01b031681565b34801561069557600080fd5b5061030b6106a4366004615777565b6123de565b3480156106b557600080fd5b506007546102ae906001600160a01b031681565b3480156106d557600080fd5b50600f546102ae906001600160a01b031681565b3480156106f557600080fd5b5060115461070a90600160a01b900460ff1681565b60405190151581526020016102c2565b34801561072657600080fd5b50600c546102ae906001600160a01b031681565b34801561074657600080fd5b506003546102ae906001600160a01b031681565b34801561076657600080fd5b5061028c610775366004615799565b6123f3565b34801561078657600080fd5b5061028c6107953660046157c5565b61282a565b3480156107a657600080fd5b5061030b61271081565b3480156107bc57600080fd5b506010546102ae906001600160a01b031681565b3480156107dc57600080fd5b5061028c6107eb366004615470565b6129c7565b3480156107fc57600080fd5b506005546102ae906001600160a01b031681565b34801561081c57600080fd5b5061028c61082b366004615470565b612a05565b34801561083c57600080fd5b506009546102ae906001600160a01b031681565b610858612a0e565b6001600160a01b03811661087f576040516385d3330760e01b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000805460405163c5739d0b60e01b81526001600160a01b0384811660048301528392169063c5739d0b90602401602060405180830381865afa1580156108ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610910919061588c565b60065460405163c5739d0b60e01b81526001600160a01b0386811660048301529293506000929091169063c5739d0b906024015b602060405180830381865afa158015610961573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610985919061588c565b905061099181836158bb565b949350505050565b604080516080810182526001600160a01b038681168083526020830187905282840186905260608301859052600c549351637608271560e01b81526004810191909152600093849384939092899285921690637608271590602401602060405180830381865afa158015610a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3591906158ce565b90505b6001600160a01b03811615801590610b3757506001548351604051633c557a6f60e11b81526001600160a01b0391821660048201529116906378aaf4de90602401602060405180830381865afa158015610a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aba919061588c565b6010548451604080870151905163b1eafaab60e01b81526001600160a01b039093169263b1eafaab92610af49290918791906004016158eb565b602060405180830381865afa158015610b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b35919061588c565b105b15610bb557600c5483516040516239c6e160ea1b81526001600160a01b039092169163e71b840091610b6d91859060040161590f565b602060405180830381865afa158015610b8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bae91906158ce565b9050610a38565b8095508260600151600003610bcd5760001960608401525b6001600160a01b03811615801590610be457508115155b8015610c00575060608301805190610bfb82615929565b905215155b1561102557825160105460405162a79b1d60e31b8152600092610d049290916001600160a01b039091169063053cd8e890610c41908490889060040161590f565b602060405180830381865afa158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c82919061588c565b601054875160405163f9a3d41f60e01b81526001600160a01b039092169163f9a3d41f91610cb491899060040161590f565b602060405180830381865afa158015610cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf5919061588c565b610cff91906158bb565b612a69565b9050828111610d1e57610d178184615940565b9250610fab565b60015484516040516321b443a360e21b81526001600160a01b0391821660048201529116906386d10e8c90602401602060405180830381865afa158015610d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8d919061588c565b811115610fa55760015484516040516321b443a360e21b81526001600160a01b039182166004820152600092610e1c9287929116906386d10e8c906024015b602060405180830381865afa158015610de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0d919061588c565b610e179085615940565b612ae2565b6010548651604051635f0b504b60e11b81529293506000926001600160a01b039092169163be16a09691610e5491889060040161590f565b602060405180830381865afa158015610e71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e95919061588c565b6010548751604051633517ff1b60e11b81526001600160a01b0390921691636a2ffe3691610ec791899060040161590f565b602060405180830381865afa158015610ee4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f08919061588c565b610f1291906158bb565b905060008660400151670de0b6b3a764000084610f2f9190615953565b610f399190615980565b905061271060335482610f4c9190615953565b610f569190615980565b90506000610f648284615940565b90506000610f728587615940565b90506000610f848a6000015183612af8565b9050610f908382612b71565b9b50610f9c868a615940565b98505050505050505b50611025565b600c5484516040516239c6e160ea1b81526001600160a01b039092169163e71b840091610fdc91869060040161590f565b602060405180830381865afa158015610ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101d91906158ce565b915050610bcd565b61102f828a615940565b93505050509450945094915050565b611046612ba7565b61108e60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600b54604051635670bcc760e11b81526001600160a01b038b811660048301529091169063ace1798e90602401602060405180830381865afa1580156110d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fc919061588c565b60c08201819052611112908a9084908b90612bdf565b61111b896108a1565b60e082015287815260105460c08201516040516352576cdf60e01b81526000926001600160a01b0316916352576cdf9161115c918e918b91906004016158eb565b6020604051808303816000875af115801561117b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119f9190615994565b156111ab575084611395565b600c54604051637608271560e01b81526001600160a01b038c8116600483015290911690637608271590602401602060405180830381865afa1580156111f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121991906158ce565b90505b6001600160a01b038116158015906113175750600154604051633c557a6f60e11b81526001600160a01b038c81166004830152909116906378aaf4de90602401602060405180830381865afa158015611279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129d919061588c565b60105460c084015160405163b1eafaab60e01b81526001600160a01b039092169163b1eafaab916112d4918f9187916004016158eb565b602060405180830381865afa1580156112f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611315919061588c565b105b1561139557600c546040516239c6e160ea1b81526001600160a01b039091169063e71b84009061134d908d90859060040161590f565b602060405180830381865afa15801561136a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138e91906158ce565b905061121c565b836000036113a35760001993505b6001600160a01b038116158015906113bb5750815115155b80156113c657508315155b1561152657836113d581615929565b600c546040516239c6e160ea1b8152919650600092506001600160a01b03169063e71b84009061140b908e90869060040161590f565b602060405180830381865afa158015611428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144c91906158ce565b60105460405163df4fb9ef60e01b81529192506001600160a01b03169063df4fb9ef9061147f908e90869060040161590f565b600060405180830381600087803b15801561149957600080fd5b505af11580156114ad573d6000803e3d6000fd5b5050505060006114ca8c8486600001518760c001518e8e8d612e91565b90508060400151156114dd575050611526565b805160208501516114ee91906158bb565b602080860191909152810151604085015161150991906158bb565b60408501528051845161151c9190615940565b84525090506113a3565b816040015160000361154b576040516346c7d89b60e11b815260040160405180910390fd5b60105460408084015160c085015160e0860151925163c5d75f7b60e01b81526001600160a01b038f811660048301526024820193909352604481019190915260648101929092529091169063c5d75f7b90608401600060405180830381600087803b1580156115b957600080fd5b505af11580156115cd573d6000803e3d6000fd5b50506010546040858101519051631ee9211f60e01b81526001600160a01b038f81166004830152602482019290925291169250631ee9211f9150604401602060405180830381865afa158015611627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164b919061588c565b606083018190526040830151611662919085613271565b60105460208301516060840151604080860151905163025eeff360e41b81526001600160a01b038f811660048301523360248301526044820194909452606481019290925260848201529116906325eeff309060a401600060405180830381600087803b1580156116d257600080fd5b505af11580156116e6573d6000803e3d6000fd5b50505050896001600160a01b03167f08b6f1ce3f9ab2722e8ea40c31a3e3a806a41702c5994f29af43dc0c1f2837df8a84602001518560400151866060015160405161174b949392919093845260208401929092526040830152606082015260800190565b60405180910390a2505061176c6001600080516020615abc83398151915255565b5050505050505050565b61177e613346565b611787826133eb565b61179182826133f3565b5050565b600061179f6134b0565b50600080516020615a9c83398151915290565b6117ba612a0e565b6001600160a01b0381166117e15760405163706ebc6560e11b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60105460405163bc8793a960e01b81526001600160a01b038681166004830152600092839283928392169063bc8793a990602401602060405180830381865afa158015611854573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611878919061588c565b905080600003611892576000808693509350935050611aed565b600c54604051637608271560e01b81526001600160a01b038a8116600483015290911690637608271590602401602060405180830381865afa1580156118dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190091906158ce565b6010546040516390ec230160e01b815291955061197f9189916001600160a01b0316906390ec230190611939908d908a9060040161590f565b602060405180830381865afa158015611956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197a919061588c565b6134f9565b925084915060015b86811015611aea5760408051602081018590520160408051601f198184030181529190528051602090910120925060006119c183856159b6565b60105460405163c226882360e01b81526001600160a01b038d81166004830152602482018490529293506000929091169063c226882390604401602060405180830381865afa158015611a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3c91906158ce565b6010546040516390ec230160e01b81529192506000916001600160a01b03909116906390ec230190611a74908f90869060040161590f565b602060405180830381865afa158015611a91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab5919061588c565b90506000611ac3828d6134f9565b905087811015611ad4578097508298505b84611ade816159ca565b95505050505050611987565b50505b9450945094915050565b611aff612a0e565b611b09600061351c565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015611b515750825b905060008267ffffffffffffffff166001148015611b6e5750303b155b905081158015611b7c575080155b15611b9a5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315611bc457845460ff60401b1916600160401b1785555b33611bce8161358d565b611bd661359e565b611bde6135a6565b508315611c2557845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b601054604051637316290f60e11b81526001600160a01b039091169063e62c521e90611c5e908590859060040161590f565b602060405180830381865afa158015611c7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9f9190615994565b611cbc5760405163327cb9bf60e11b815260040160405180910390fd5b604080516001808252818301909252600091602080830190803683370190505090508181600081518110611cf257611cf26159e3565b60200260200101906001600160a01b031690816001600160a01b031681525050611d1c838261282a565b505050565b60008054604051635373433f60e01b81526001600160a01b03848116600483015283921690635373433f90602401602060405180830381865afa158015611d6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d90919061588c565b600654604051635373433f60e01b81526001600160a01b03868116600483015292935060009290911690635373433f90602401610944565b611dd0612a0e565b601154600160a01b900460ff1615611dfa57604051625f22e960e41b815260040160405180910390fd5b60108114611e1b57604051633f5a111d60e21b815260040160405180910390fd5b60005b6010811015611ebe576000838383818110611e3b57611e3b6159e3565b9050602002016020810190611e509190615470565b6001600160a01b031603611eb65780838383818110611e7157611e716159e3565b9050602002016020810190611e869190615470565b604051630d9d339f60e01b815260048101929092526001600160a01b031660248201526044015b60405180910390fd5b600101611e1e565b5081816000818110611ed257611ed26159e3565b9050602002016020810190611ee79190615470565b600080546001600160a01b0319166001600160a01b039290921691909117905581816001818110611f1a57611f1a6159e3565b9050602002016020810190611f2f9190615470565b600180546001600160a01b0319166001600160a01b039290921691909117905581816002818110611f6257611f626159e3565b9050602002016020810190611f779190615470565b600280546001600160a01b0319166001600160a01b039290921691909117905581816003818110611faa57611faa6159e3565b9050602002016020810190611fbf9190615470565b600380546001600160a01b0319166001600160a01b039290921691909117905581816004818110611ff257611ff26159e3565b90506020020160208101906120079190615470565b600580546001600160a01b0319166001600160a01b03929092169190911781558290829081811061203a5761203a6159e3565b905060200201602081019061204f9190615470565b600680546001600160a01b0319166001600160a01b039290921691909117815582908290818110612082576120826159e3565b90506020020160208101906120979190615470565b600780546001600160a01b0319166001600160a01b0392909216919091178155829082908181106120ca576120ca6159e3565b90506020020160208101906120df9190615470565b600880546001600160a01b0319166001600160a01b039290921691909117815582908290818110612112576121126159e3565b90506020020160208101906121279190615470565b600980546001600160a01b0319166001600160a01b03929092169190911781558290829081811061215a5761215a6159e3565b905060200201602081019061216f9190615470565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a8181106121a2576121a26159e3565b90506020020160208101906121b79190615470565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b8181106121ea576121ea6159e3565b90506020020160208101906121ff9190615470565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c818110612232576122326159e3565b90506020020160208101906122479190615470565b600e80546001600160a01b0319166001600160a01b03929092169190911790558181600d81811061227a5761227a6159e3565b905060200201602081019061228f9190615470565b600f80546001600160a01b0319166001600160a01b03929092169190911790558181600e8181106122c2576122c26159e3565b90506020020160208101906122d79190615470565b601080546001600160a01b0319166001600160a01b03929092169190911790558181600f81811061230a5761230a6159e3565b905060200201602081019061231f9190615470565b601180546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b600e546001600160a01b0316331461237457604051630e50357d60e01b815260040160405180910390fd5b6125e4811080612385575061271081115b156123a3576040516334d8ee5360e21b815260040160405180910390fd5b60338190556040518181527f39e82d837dcc454e3b68bd2a39ec088a78af1570fa1a2de0b9b2e2d45c1158c69060200160405180910390a150565b60006123ea8383612b71565b90505b92915050565b6123fb612ba7565b61242f6040518060a00160405280600081526020016000815260200160001515815260200160008152602001600081525090565b6124376153ce565b600b54604051635670bcc760e11b81526001600160a01b0386811660048301529091169063ace1798e90602401602060405180830381865afa158015612481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a5919061588c565b8252600d5460408051630d9a6b3560e01b815290516001600160a01b0390921691630d9a6b35916004808201926020929091908290030181865afa1580156124f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612515919061588c565b602083015281516125279085906135b6565b158015604084015261254e5761254784836000015184602001518661363b565b9050612565565b612562848360000151846020015186613ac8565b90505b806020015160000361258a5760405163520522c760e01b815260040160405180910390fd5b60105460c082015160e0830151608084015160a0850151604051637012f7fb60e01b81526001600160a01b038a811660048301526024820195909552604481019390935260648301919091526084820152911690637012f7fb9060a401600060405180830381600087803b15801561260157600080fd5b505af1158015612615573d6000803e3d6000fd5b50505050806101000151600014612697576000546003546101008301516040516347878f1560e01b81526001600160a01b03938416936347878f1593612664938a9392909116916004016158eb565b600060405180830381600087803b15801561267e57600080fd5b505af1158015612692573d6000803e3d6000fd5b505050505b601054604082810151905163da3835ad60e01b81526001600160a01b038781166004830152602482019290925291169063da3835ad90604401600060405180830381600087803b1580156126ea57600080fd5b505af11580156126fe573d6000803e3d6000fd5b5050506020820151606084015250610100810151604082015182516127239190615940565b61272d9190615940565b6080808401829052606080850151604080860151868401518251938452602084019690965290820152908101929092526001600160a01b038616917fa3f221854f649364e9a3bb384dd1ff938482664f4a0eac0f6e39a542f5193bd3910160405180910390a26010546060820151604080840151905163b65c72bf60e01b81526001600160a01b0388811660048301523360248301526044820193909352606481019190915291169063b65c72bf90608401600060405180830381600087803b1580156127f957600080fd5b505af115801561280d573d6000803e3d6000fd5b5050505050506117916001600080516020615abc83398151915255565b612832612ba7565b80511580612841575060198151115b1561285f57604051637f9c2a2560e01b815260040160405180910390fd5b6128936040518060a00160405280600081526020016000815260200160001515815260200160008152602001600081525090565b61289b6153ce565b600d60009054906101000a90046001600160a01b03166001600160a01b0316630d9a6b356040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612912919061588c565b6020830152600b54604051635670bcc760e11b81526001600160a01b0386811660048301529091169063ace1798e90602401602060405180830381865afa158015612961573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612985919061588c565b8083526129939085906135b6565b15801560408401526129b357612547848360000151846020015186613ca8565b61256284836000015184602001518661403d565b6129cf612a0e565b6001600160a01b0381166129f957604051631e4fbdf760e01b815260006004820152602401611ead565b612a028161351c565b50565b612a02816133eb565b33612a407f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614611b095760405163118cdaa760e01b8152336004820152602401611ead565b60015460405163c08261db60e01b81526001600160a01b038481166004830152600092169063c08261db90602401602060405180830381865afa158015612ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad8919061588c565b6123ea9083615940565b6000818310612af157816123ea565b5090919050565b60015460405163c08261db60e01b81526001600160a01b038481166004830152600092169063c08261db90602401602060405180830381865afa158015612b43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b67919061588c565b6123ea90836158bb565b60008115612b9e5781612b8d68056bc75e2d6310000085615953565b612b979190615980565b90506123ed565b506000196123ed565b600080516020615abc833981519152805460011901612bd957604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b600154604051633d15092560e21b81526001600160a01b038681166004830152600092169063f454249490602401602060405180830381865afa158015612c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4e919061588c565b905042811115612c7157604051637fe8d35d60e01b815260040160405180910390fd5b60015460405163443c4fcb60e01b81526001600160a01b038781166004830152600092169063443c4fcb90602401602060405180830381865afa158015612cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ce0919061588c565b905080851080612cf75750670de0b6b3a764000085115b15612d2657604051636b44726760e11b815260048101829052670de0b6b3a76400006024820152604401611ead565b83600003612d4757604051630fcbc67160e21b815260040160405180910390fd5b6005546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db4919061588c565b905084811015612dda5760405163780a921960e11b815260048101829052602401611ead565b6000612de688866141b9565b600154604051633c557a6f60e11b81526001600160a01b038b81166004830152929350600092909116906378aaf4de90602401602060405180830381865afa158015612e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5a919061588c565b905080821015612e865760405162132add60e91b81526004810183905260248101829052604401611ead565b505050505050505050565b612eb7604051806060016040528060008152602001600081526020016000151581525090565b60105460405163f9a3d41f60e01b81526000916001600160a01b03169063f9a3d41f90612eea908c908c9060040161590f565b602060405180830381865afa158015612f07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2b919061588c565b601054604051633517ff1b60e11b81529192506000916001600160a01b0390911690636a2ffe3690612f63908d908d9060040161590f565b602060405180830381865afa158015612f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa4919061588c565b60015460405163c08261db60e01b81526001600160a01b038d81166004830152929350612fdd928b92169063c08261db90602401610dcc565b8084528790612ff590670de0b6b3a764000090615953565b612fff9190615980565b60208401819052603354612710916130179190615953565b6130219190615980565b602084015282516000906130359084615940565b905060008460200151836130499190615940565b60015460405163c08261db60e01b81526001600160a01b038f8116600483015292935091169063c08261db90602401602060405180830381865afa158015613095573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b9919061588c565b820361312a5760105460405163456dc0ff60e11b81526001600160a01b0390911690638adb81fe906130f3908f908f9086906004016158eb565b600060405180830381600087803b15801561310d57600080fd5b505af1158015613121573d6000803e3d6000fd5b50505050613261565b60006131368284612b71565b905086811415806131bc57506001546040516321b443a360e21b81526001600160a01b038f81166004830152909116906386d10e8c90602401602060405180830381865afa15801561318c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b0919061588c565b6131ba8e85612a69565b105b156131d35750506001604085015250613266915050565b60105460405163038027ff60e21b81526001600160a01b038f811660048301528e811660248301526044820186905260648201859052608482018490528b811660a48301528a811660c483015290911690630e009ffc9060e401600060405180830381600087803b15801561324757600080fd5b505af115801561325b573d6000803e3d6000fd5b50505050505b505050505b979650505050505050565b600082600160009054906101000a90046001600160a01b03166001600160a01b031663a20baee66040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132eb919061588c565b6132f59086615953565b6132ff9190615980565b90508181111561332c57604051632e364cc160e21b81526004810182905260248101839052604401611ead565b50505050565b6001600080516020615abc83398151915255565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806133cd57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166133c1600080516020615a9c833981519152546001600160a01b031690565b6001600160a01b031614155b15611b095760405163703e46dd60e11b815260040160405180910390fd5b612a02612a0e565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561344d575060408051601f3d908101601f1916820190925261344a9181019061588c565b60015b61347557604051634c9c8ce360e01b81526001600160a01b0383166004820152602401611ead565b600080516020615a9c83398151915281146134a657604051632a87526960e21b815260048101829052602401611ead565b611d1c83836141e8565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611b095760405163703e46dd60e11b815260040160405180910390fd5b6000818310156135125761350d8383615940565b6123ea565b6123ea8284615940565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b61359561423e565b612a0281614287565b611b0961423e565b6135ae61423e565b611b0961428f565b6000806135c384846141b9565b60015460405163316a306d60e11b81526001600160a01b0387811660048301529293509116906362d460da90602401602060405180830381865afa15801561360f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613633919061588c565b119392505050565b6136436153ce565b61364b61541a565b6136536153ce565b84825260006060830152613666876108a1565b608083015261367487611d21565b60a0830152600c54604051637608271560e01b81526001600160a01b03898116600483015290911690637608271590602401602060405180830381865afa1580156136c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136e791906158ce565b6001600160a01b03908116604084810191909152600c549051631bdb4c8d60e01b815289831660048201526000929190911690631bdb4c8d90602401602060405180830381865afa158015613740573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061376491906158ce565b905060005b858110801561378e5750816001600160a01b031684604001516001600160a01b031614155b15613abc57600c5460408086015190516239c6e160ea1b81526000926001600160a01b03169163e71b8400916137c8918e9160040161590f565b602060405180830381865afa1580156137e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061380991906158ce565b601054604080880151905163b1eafaab60e01b81529293506001600160a01b039091169163b1eafaab91613844918e91908e906004016158eb565b602060405180830381865afa158015613861573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613885919061588c565b602086015260608501516139e157600154604051633c557a6f60e11b81526001600160a01b038c81166004830152909116906378aaf4de90602401602060405180830381865afa1580156138dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613901919061588c565b85602001511015801561391357508451155b1561391e5750613abc565b60006139338660a0015187608001518c614297565b905061394f8b876040015188602001518960000151858f6142cb565b6080810151875191965061396291615940565b8652608080860151908701516139789190615940565b6080870152610100850151604086015160a0808801519089015161399c9190615940565b6139a69190615940565b6139b09190615940565b60a08701526139bf8786614b9f565b96506139d58b8760a0015188608001518d614c89565b15606087015250613aa6565b84606001518015613a625750600154604051633c557a6f60e11b81526001600160a01b038c81166004830152909116906378aaf4de90602401602060405180830381865afa158015613a37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a5b919061588c565b8560200151105b15613aa057613a7a8a86604001518760000151614d11565b60808101518651919550613a8d91615940565b8552613a998685614b9f565b9550613aa6565b50613abc565b6001600160a01b03166040850152600101613769565b50505050949350505050565b613ad06153ce565b613ad861541a565b613ae06153ce565b84825260005b84811015613c9d57600c54604051637608271560e01b81526001600160a01b038a8116600483015290911690637608271590602401602060405180830381865afa158015613b38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b5c91906158ce565b6001600160a01b039081166040808601829052601054905163b1eafaab60e01b815292169163b1eafaab91613b98918c91908c906004016158eb565b602060405180830381865afa158015613bb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bd9919061588c565b6020840152600154604051633c557a6f60e11b81526001600160a01b038a81166004830152909116906378aaf4de90602401602060405180830381865afa158015613c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c4c919061588c565b83602001511015613c9057613c6a8884604001518560000151614d11565b60808101518451919350613c7d91615940565b8352613c898483614b9f565b9350613c95565b613c9d565b600101613ae6565b505050949350505050565b613cb06153ce565b613cb861541a565b613cc06153ce565b84825260006060830152613cd3876108a1565b6080830152613ce187611d21565b60a083015260005b8451811015613c9d57848181518110613d0457613d046159e3565b60209081029190910101516001600160a01b0316604084015260016010546040808601519051632862f79760e11b81526001600160a01b03909216916350c5ef2e91613d55918d919060040161590f565b602060405180830381865afa158015613d72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d96919061588c565b14613da357600101613ce9565b601054604080850151905163b1eafaab60e01b81526001600160a01b039092169163b1eafaab91613ddb918c91908c906004016158eb565b602060405180830381865afa158015613df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e1c919061588c565b60208401526060830151613f7a57600154604051633c557a6f60e11b81526001600160a01b038a81166004830152909116906378aaf4de90602401602060405180830381865afa158015613e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e98919061588c565b836020015110158015613eaa57508251155b15613eb757600101613ce9565b6000613ecc8460a0015185608001518a614297565b9050613ee889856040015186602001518760000151858d6142cb565b60808101518551919450613efb91615940565b845260808084015190850151613f119190615940565b6080850152610100830151604084015160a08086015190870151613f359190615940565b613f3f9190615940565b613f499190615940565b60a0850152613f588584614b9f565b9450613f6e898560a0015186608001518b614c89565b15606085015250614035565b82606001518015613ffb5750600154604051633c557a6f60e11b81526001600160a01b038a81166004830152909116906378aaf4de90602401602060405180830381865afa158015613fd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ff4919061588c565b8360200151105b15614035576140138884604001518560000151614d11565b6080810151845191935061402691615940565b83526140328483614b9f565b93505b600101613ce9565b6140456153ce565b61404d61541a565b6140556153ce565b84825260005b8451811015613c9d57848181518110614076576140766159e3565b60209081029190910101516001600160a01b039081166040808601829052601054905163b1eafaab60e01b815292169163b1eafaab916140bd918c91908c906004016158eb565b602060405180830381865afa1580156140da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140fe919061588c565b6020840152600154604051633c557a6f60e11b81526001600160a01b038a81166004830152909116906378aaf4de90602401602060405180830381865afa15801561414d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614171919061588c565b836020015110156141b15761418f8884604001518560000151614d11565b608081015184519193506141a291615940565b83526141ae8483614b9f565b93505b60010161405b565b6000806141c584611d21565b905060006141d2856108a1565b90506141df828286614297565b95945050505050565b6141f18261501d565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561423657611d1c8282615082565b6117916150ef565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16611b0957604051631afcd79f60e31b815260040160405180910390fd5b6129cf61423e565b61333261423e565b600082156142bf576000836142ac8487615953565b6142b69190615980565b91506142c49050565b506000195b9392505050565b6142d36153ce565b6142f760405180606001604052806000815260200160008152602001600081525090565b60105460405163bc8793a960e01b81526001600160a01b038a81166004830152600192169063bc8793a990602401602060405180830381865afa158015614342573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614366919061588c565b116143715750614b95565b6010546040516309bde83560e21b81526001600160a01b03909116906326f7a0d4906143a3908b908b9060040161590f565b608060405180830381865afa1580156143c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143e491906159f9565b6040850152602084810191909152840181905290835261440590899061510e565b604083810191909152600154905163c08261db60e01b81526001600160a01b038a811660048301529091169063c08261db90602401602060405180830381865afa158015614457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061447b919061588c565b6060830152604082015160208301516144949190615940565b81526001546040805163397f12d560e11b815290516001600160a01b03909216916372fe25aa916004808201926020929091908290030181865afa1580156144e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614504919061588c565b86116146b75760105460208201516040808401519051632076ee1d60e01b81526001600160a01b0390931692632076ee1d92614544928d926004016154c8565b600060405180830381600087803b15801561455e57600080fd5b505af1158015614572573d6000803e3d6000fd5b5050601054604051633ed3a18f60e21b81526001600160a01b03909116925063fb4e863c91506145a8908b908b9060040161590f565b600060405180830381600087803b1580156145c257600080fd5b505af11580156145d6573d6000803e3d6000fd5b505060006080850181905260a08501525050815160c0830152805160e083015260105460405163550bc5ab60e11b81526001600160a01b039091169063aa178b5690614628908b908b9060040161590f565b600060405180830381600087803b15801561464257600080fd5b505af1158015614656573d6000803e3d6000fd5b50505050866001600160a01b0316886001600160a01b03167fd13515134171b35d13ca928c7912f43125417d82681b5f284b52f97563ccb8658460000151856020015160026040516146aa93929190615a2f565b60405180910390a3614b93565b600160009054906101000a90046001600160a01b03166001600160a01b03166372fe25aa6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561470a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061472e919061588c565b861180156147a85750600154604051633c557a6f60e11b81526001600160a01b038a81166004830152909116906378aaf4de90602401602060405180830381865afa158015614781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147a5919061588c565b86105b156148d35760105460208201516040808401519051632076ee1d60e01b81526001600160a01b0390931692632076ee1d926147e7928d926004016154c8565b600060405180830381600087803b15801561480157600080fd5b505af1158015614815573d6000803e3d6000fd5b5050601054604051633ed3a18f60e21b81526001600160a01b03909116925063fb4e863c915061484b908b908b9060040161590f565b600060405180830381600087803b15801561486557600080fd5b505af1158015614879573d6000803e3d6000fd5b50508351835161488d935090915087615187565b60e086015260c085015260a0840152608083015260105460405163550bc5ab60e11b81526001600160a01b039091169063aa178b5690614628908b908b9060040161590f565b600154604051633c557a6f60e11b81526001600160a01b038a81166004830152909116906378aaf4de90602401602060405180830381865afa15801561491d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614941919061588c565b861015801561494f57508386105b801561495c575081518510155b15614b825760105460208201516040808401519051632076ee1d60e01b81526001600160a01b0390931692632076ee1d9261499b928d926004016154c8565b600060405180830381600087803b1580156149b557600080fd5b505af11580156149c9573d6000803e3d6000fd5b50505050846000036149dd576149dd615a69565b601054604051633ed3a18f60e21b81526001600160a01b039091169063fb4e863c90614a0f908b908b9060040161590f565b600060405180830381600087803b158015614a2957600080fd5b505af1158015614a3d573d6000803e3d6000fd5b50505050614a558883600001518460200151866151e8565b60105460405163550bc5ab60e11b81529193506001600160a01b03169063aa178b5690614a88908b908b9060040161590f565b600060405180830381600087803b158015614aa257600080fd5b505af1158015614ab6573d6000803e3d6000fd5b50505050816101000151600014614b3257600354610100830151604051633fa5152d60e21b81526001600160a01b039092169163fe9454b491614aff918c918c916004016158eb565b600060405180830381600087803b158015614b1957600080fd5b505af1158015614b2d573d6000803e3d6000fd5b505050505b866001600160a01b0316886001600160a01b03167fd13515134171b35d13ca928c7912f43125417d82681b5f284b52f97563ccb86584600001518560a0015160026040516146aa93929190615a2f565b614b8a6153ce565b9150614b959050565b505b9695505050505050565b614ba76153ce565b81604001518360400151614bbb91906158bb565b604082015260608083015190840151614bd491906158bb565b606082015281516020840151614bea91906158bb565b6020808301919091528201518351614c0291906158bb565b815260808083015190840151614c1891906158bb565b608082015260a08083015190840151614c3191906158bb565b60a082015260c08083015190840151614c4a91906158bb565b60c082015260e08083015190840151614c6391906158bb565b60e08201526101008083015190840151614c7d91906158bb565b61010082015292915050565b600080614c97858585614297565b60015460405163316a306d60e11b81526001600160a01b0389811660048301529293509116906362d460da90602401602060405180830381865afa158015614ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d07919061588c565b1195945050505050565b614d196153ce565b614d3d60405180606001604052806000815260200160008152602001600081525090565b6010546040516309bde83560e21b81526001600160a01b03909116906326f7a0d490614d6f908890889060040161590f565b608060405180830381865afa158015614d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614db091906159f9565b60408086019182526020868101938452870193909352928552601054905192519151632076ee1d60e01b81526001600160a01b0390911692632076ee1d92614dfe928a9291906004016154c8565b600060405180830381600087803b158015614e1857600080fd5b505af1158015614e2c573d6000803e3d6000fd5b5050601054604051633ed3a18f60e21b81526001600160a01b03909116925063fb4e863c9150614e62908890889060040161590f565b600060405180830381600087803b158015614e7c57600080fd5b505af1158015614e90573d6000803e3d6000fd5b50505050614ea285836020015161510e565b604083810191909152600154905163c08261db60e01b81526001600160a01b0387811660048301529091169063c08261db90602401602060405180830381865afa158015614ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f18919061588c565b606083015260408201516020830151600091614f3391615940565b9050614f4483600001518286615187565b60e087015260c086015260a0850152608084015260105460405163550bc5ab60e11b81526001600160a01b039091169063aa178b5690614f8a908990899060040161590f565b600060405180830381600087803b158015614fa457600080fd5b505af1158015614fb8573d6000803e3d6000fd5b50505050846001600160a01b0316866001600160a01b03167fd13515134171b35d13ca928c7912f43125417d82681b5f284b52f97563ccb86585600001518660200151600160405161500c93929190615a2f565b60405180910390a350509392505050565b806001600160a01b03163b60000361505357604051634c9c8ce360e01b81526001600160a01b0382166004820152602401611ead565b600080516020615a9c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b03168460405161509f9190615a7f565b600060405180830381855af49150503d80600081146150da576040519150601f19603f3d011682016040523d82523d6000602084013e6150df565b606091505b50915091506141df858383615349565b3415611b095760405163b398979f60e01b815260040160405180910390fd5b6001546040516315ee08fb60e31b81526001600160a01b038481166004830152600092169063af7047d890602401602060405180830381865afa158015615159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061517d919061588c565b6123ea9083615980565b600080808084156151d25761519c8786612ae2565b9350866151a98588615953565b6151b39190615980565b92506151bf8488615940565b91506151cb8387615940565b90506151df565b5060009250829150859050845b93509350935093565b6151f06153ce565b83815260208101839052600154604051633c557a6f60e11b81526001600160a01b03878116600483015260009285929116906378aaf4de90602401602060405180830381865afa158015615248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061526c919061588c565b6152769087615953565b6152809190615980565b905061528c868261510e565b604083810191909152600154905163c08261db60e01b81526001600160a01b0388811660048301529091169063c08261db90602401602060405180830381865afa1580156152de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615302919061588c565b606083015260808201859052604082015161531d9082615940565b60a083015261532c8185615940565b61010083015250600060c0820181905260e0820152949350505050565b60608261535e57615359826153a5565b6142c4565b815115801561537557506001600160a01b0384163b155b1561539e57604051639996b31560e01b81526001600160a01b0385166004820152602401611ead565b50806142c4565b8051156153b55780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060c00160405280600081526020016000815260200160006001600160a01b0316815260200160001515815260200160008152602001600081525090565b6001600160a01b0381168114612a0257600080fd5b60006020828403121561548257600080fd5b81356142c48161545b565b600080600080608085870312156154a357600080fd5b84356154ae8161545b565b966020860135965060408601359560600135945092505050565b6001600160a01b039390931683526020830191909152604082015260600190565b600080600080600080600080610100898b03121561550657600080fd5b88356155118161545b565b97506020890135965060408901356155288161545b565b955060608901356155388161545b565b945060808901356155488161545b565b979a969950949793969560a0850135955060c08501359460e001359350915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156155a9576155a961556a565b604052919050565b600080604083850312156155c457600080fd5b82356155cf8161545b565b915060208381013567ffffffffffffffff808211156155ed57600080fd5b818601915086601f83011261560157600080fd5b8135818111156156135761561361556a565b615625601f8201601f19168501615580565b9150808252878482850101111561563b57600080fd5b80848401858401376000848284010152508093505050509250929050565b6000806040838503121561566c57600080fd5b82356156778161545b565b915060208301356156878161545b565b809150509250929050565b60005b838110156156ad578181015183820152602001615695565b50506000910152565b60208152600082518060208401526156d5816040850160208701615692565b601f01601f19169190910160400192915050565b600080602083850312156156fc57600080fd5b823567ffffffffffffffff8082111561571457600080fd5b818501915085601f83011261572857600080fd5b81358181111561573757600080fd5b8660208260051b850101111561574c57600080fd5b60209290920196919550909350505050565b60006020828403121561577057600080fd5b5035919050565b6000806040838503121561578a57600080fd5b50508035926020909101359150565b600080604083850312156157ac57600080fd5b82356157b78161545b565b946020939093013593505050565b600080604083850312156157d857600080fd5b82356157e38161545b565b915060208381013567ffffffffffffffff8082111561580157600080fd5b818601915086601f83011261581557600080fd5b8135818111156158275761582761556a565b8060051b9150615838848301615580565b818152918301840191848101908984111561585257600080fd5b938501935b8385101561587c578435925061586c8361545b565b8282529385019390850190615857565b8096505050505050509250929050565b60006020828403121561589e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156123ed576123ed6158a5565b6000602082840312156158e057600080fd5b81516142c48161545b565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b600081615938576159386158a5565b506000190190565b818103818111156123ed576123ed6158a5565b80820281158282048414176123ed576123ed6158a5565b634e487b7160e01b600052601260045260246000fd5b60008261598f5761598f61596a565b500490565b6000602082840312156159a657600080fd5b815180151581146142c457600080fd5b6000826159c5576159c561596a565b500690565b6000600182016159dc576159dc6158a5565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60008060008060808587031215615a0f57600080fd5b505082516020840151604085015160609095015191969095509092509050565b838152602081018390526060810160048310615a5b57634e487b7160e01b600052602160045260246000fd5b826040830152949350505050565b634e487b7160e01b600052600160045260246000fd5b60008251615a91818460208701615692565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a164736f6c6343000817000a",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9991,
        "contract": "contracts/TrenBoxManagerOperations.sol:TrenBoxManagerOperations",
        "label": "activePool",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9993,
        "contract": "contracts/TrenBoxManagerOperations.sol:TrenBoxManagerOperations",
        "label": "adminContract",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9995,
        "contract": "contracts/TrenBoxManagerOperations.sol:TrenBoxManagerOperations",
        "label": "borrowerOperations",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9997,
        "contract": "contracts/TrenBoxManagerOperations.sol:TrenBoxManagerOperations",
        "label": "collSurplusPool",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9999,
        "contract": "contracts/TrenBoxManagerOperations.sol:TrenBoxManagerOperations",
        "label": "communityIssuance",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 10001,
        "contract": "contracts/TrenBoxManagerOperations.sol:TrenBoxManagerOperations",
        "label": "debtToken",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 10003,
        "contract": "contracts/TrenBoxManagerOperations.sol:TrenBoxManagerOperations",
        "label": "defaultPool",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 10005,
        "contract": "contracts/TrenBoxManagerOperations.sol:TrenBoxManagerOperations",
        "label": "feeCollector",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 10007,
        "contract": "contracts/TrenBoxManagerOperations.sol:TrenBoxManagerOperations",
        "label": "flashLoanAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 10009,
        "contract": "contracts/TrenBoxManagerOperations.sol:TrenBoxManagerOperations",
        "label": "gasPoolAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 10011,
        "contract": "contracts/TrenBoxManagerOperations.sol:TrenBoxManagerOperations",
        "label": "trenStaking",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 10013,
        "contract": "contracts/TrenBoxManagerOperations.sol:TrenBoxManagerOperations",
        "label": "priceFeed",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 10015,
        "contract": "contracts/TrenBoxManagerOperations.sol:TrenBoxManagerOperations",
        "label": "sortedTrenBoxes",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 10017,
        "contract": "contracts/TrenBoxManagerOperations.sol:TrenBoxManagerOperations",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 10019,
        "contract": "contracts/TrenBoxManagerOperations.sol:TrenBoxManagerOperations",
        "label": "timelockAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 10021,
        "contract": "contracts/TrenBoxManagerOperations.sol:TrenBoxManagerOperations",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 10023,
        "contract": "contracts/TrenBoxManagerOperations.sol:TrenBoxManagerOperations",
        "label": "trenBoxManager",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 10025,
        "contract": "contracts/TrenBoxManagerOperations.sol:TrenBoxManagerOperations",
        "label": "trenBoxManagerOperations",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 10027,
        "contract": "contracts/TrenBoxManagerOperations.sol:TrenBoxManagerOperations",
        "label": "isAddressSetupInitialized",
        "offset": 20,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 10032,
        "contract": "contracts/TrenBoxManagerOperations.sol:TrenBoxManagerOperations",
        "label": "__gap",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_uint256)33_storage"
      },
      {
        "astId": 24979,
        "contract": "contracts/TrenBoxManagerOperations.sol:TrenBoxManagerOperations",
        "label": "redemptionSofteningParam",
        "offset": 0,
        "slot": "51",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)33_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[33]",
        "numberOfBytes": "1056"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}