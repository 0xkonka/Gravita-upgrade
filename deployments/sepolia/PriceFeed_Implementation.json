{
  "address": "0x384A045c2ea0bf3388B9A1BF38f7800Ebd6D1185",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceFeed__ExistingOracleRequired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceFeed__InvalidDecimalsError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "PriceFeed__InvalidOracleResponseError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceFeed__TimelockOnlyError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceFeed__UnknownAssetError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracleAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isEthIndexed",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isFallback",
          "type": "bool"
        }
      ],
      "name": "NewOracleRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TARGET_DIGITS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "authorizeUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collSurplusPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityIssuance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "fallbacks",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracleAddress",
          "type": "address"
        },
        {
          "internalType": "enum IPriceFeed.ProviderType",
          "name": "providerType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "timeoutSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isEthIndexed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "fetchPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAddressSetupInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "oracles",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracleAddress",
          "type": "address"
        },
        {
          "internalType": "enum IPriceFeed.ProviderType",
          "name": "providerType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "timeoutSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isEthIndexed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_communityIssuance",
          "type": "address"
        }
      ],
      "name": "setCommunityIssuance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "enum IPriceFeed.ProviderType",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_timeoutSeconds",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isEthIndexed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_isFallback",
          "type": "bool"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trenStaking",
          "type": "address"
        }
      ],
      "name": "setTRENStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTrenBoxes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManagerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ad8402905e953ee6280b4cf81e089f982f8bdfe485d38da56b112ff61a661aa",
  "receipt": {
    "to": null,
    "from": "0x19E733F20aAdaB8996f7895ACBD04f746BF4Aac1",
    "contractAddress": "0x384A045c2ea0bf3388B9A1BF38f7800Ebd6D1185",
    "transactionIndex": 76,
    "gasUsed": "1815530",
    "logsBloom": "0x
    "blockHash": "0x3f6dd2f2b7c425d19753960ae33869de5355637d36d23ad7c5dae7b5730b5bec",
    "transactionHash": "0x8ad8402905e953ee6280b4cf81e089f982f8bdfe485d38da56b112ff61a661aa",
    "logs": [],
    "blockNumber": 5625472,
    "cumulativeGasUsed": "15415386",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e6971fb87a17deef3641f1719687e39f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceFeed__ExistingOracleRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceFeed__InvalidDecimalsError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PriceFeed__InvalidOracleResponseError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceFeed__TimelockOnlyError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceFeed__UnknownAssetError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEthIndexed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFallback\",\"type\":\"bool\"}],\"name\":\"NewOracleRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TARGET_DIGITS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"authorizeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collSurplusPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityIssuance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fallbacks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"enum IPriceFeed.ProviderType\",\"name\":\"providerType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timeoutSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEthIndexed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"fetchPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAddressSetupInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"enum IPriceFeed.ProviderType\",\"name\":\"providerType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timeoutSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEthIndexed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityIssuance\",\"type\":\"address\"}],\"name\":\"setCommunityIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"enum IPriceFeed.ProviderType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_timeoutSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isEthIndexed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isFallback\",\"type\":\"bool\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trenStaking\",\"type\":\"address\"}],\"name\":\"setTRENStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTrenBoxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManagerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"fetchPrice(address)\":{\"details\":\"Callers:     - BorrowerOperations.openTrenBox()     - BorrowerOperations.adjustTrenBox()     - BorrowerOperations.closeTrenBox()     - TrenBoxManagerOperations.liquidateTrenBoxes()     - TrenBoxManagerOperations.batchLiquidateTrenBoxes()     - TrenBoxManagerOperations.redeemCollateral()\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"RESPONSE_TIMEOUT\":{\"details\":\"Deprecated, but retained for upgradeability\"},\"TARGET_DIGITS\":{\"details\":\"Used to convert an oracle price answer to an 18-digit precision uint\"},\"oracleRecords\":{\"details\":\"Deprecated, but retained for upgradeability\"}},\"title\":\"The PriceFeed contract contains a directory of oracles for fetching prices for assets based on their     addresses; optionally fallback oracles can also be registered in case the primary source fails or is stale.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fetchPrice(address)\":{\"notice\":\"Fetches the price for an asset from a previosly configured oracle.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceFeed.sol\":\"PriceFeed\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"contracts/Addresses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { AddressesConfigurable } from \\\"./Dependencies/AddressesConfigurable.sol\\\";\\n\\ncontract Addresses is AddressesConfigurable { }\\n\",\"keccak256\":\"0xee6f0debf09164467fe0766a99b35a0c3f7837429bcc0d519cd6987b00e81b8c\",\"license\":\"MIT\"},\"contracts/Dependencies/AddressesConfigurable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract AddressesConfigurable is OwnableUpgradeable {\\n    address public activePool;\\n    address public adminContract;\\n    address public borrowerOperations;\\n    address public collSurplusPool;\\n    address public communityIssuance;\\n    address public debtToken;\\n    address public defaultPool;\\n    address public feeCollector;\\n    address public gasPoolAddress;\\n    address public trenStaking;\\n    address public priceFeed;\\n    address public sortedTrenBoxes;\\n    address public stabilityPool;\\n    address public timelockAddress;\\n    address public treasuryAddress;\\n    address public trenBoxManager;\\n    address public trenBoxManagerOperations;\\n\\n    bool public isAddressSetupInitialized;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[33] private __gap; // Goerli uses 47; Arbitrum uses 33\\n\\n    // Dependency setters\\n    // -----------------------------------------------------------------------------------------------\\n\\n    function setAddresses(address[] calldata _addresses) external onlyOwner {\\n        require(!isAddressSetupInitialized, \\\"Setup is already initialized\\\");\\n        require(_addresses.length == 15, \\\"Expected 15 addresses at setup\\\");\\n        for (uint256 i = 0; i < 15; i++) {\\n            require(_addresses[i] != address(0), \\\"Invalid address\\\");\\n        }\\n        activePool = _addresses[0];\\n        adminContract = _addresses[1];\\n        borrowerOperations = _addresses[2];\\n        collSurplusPool = _addresses[3];\\n        debtToken = _addresses[4];\\n        defaultPool = _addresses[5];\\n        feeCollector = _addresses[6];\\n        gasPoolAddress = _addresses[7];\\n        priceFeed = _addresses[8];\\n        sortedTrenBoxes = _addresses[9];\\n        stabilityPool = _addresses[10];\\n        timelockAddress = _addresses[11];\\n        treasuryAddress = _addresses[12];\\n        trenBoxManager = _addresses[13];\\n        trenBoxManagerOperations = _addresses[14];\\n\\n        isAddressSetupInitialized = true;\\n    }\\n\\n    function setCommunityIssuance(address _communityIssuance) public onlyOwner {\\n        communityIssuance = _communityIssuance;\\n    }\\n\\n    function setTRENStaking(address _trenStaking) public onlyOwner {\\n        trenStaking = _trenStaking;\\n    }\\n}\\n\",\"keccak256\":\"0xd11d486cb2a0c07199b14176e64ad449567e453db4bccdb1d35a06bf732ccc4a\",\"license\":\"MIT\"},\"contracts/Interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\n/*\\n* @dev from\\nhttps://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\n */\\ninterface ChainlinkAggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\\ninterface IPriceFeed {\\n    // Enums\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    enum ProviderType {\\n        Chainlink,\\n        API3\\n    }\\n\\n    // Structs\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    struct OracleRecordV2 {\\n        address oracleAddress;\\n        ProviderType providerType;\\n        uint256 timeoutSeconds;\\n        uint256 decimals;\\n        bool isEthIndexed;\\n    }\\n\\n    /// @dev Deprecated, but retained for upgradeability\\n    struct OracleRecord {\\n        address chainLinkOracle;\\n        uint256 maxDeviationBetweenRounds;\\n        bool exists;\\n        bool isFeedWorking;\\n        bool isEthIndexed;\\n    }\\n\\n    /// @dev Deprecated, but retained for upgradeability\\n    struct PriceRecord {\\n        uint256 scaledPrice;\\n        uint256 timestamp;\\n    }\\n\\n    /// @dev Deprecated, but retained for upgradeability\\n    struct FeedResponse {\\n        uint80 roundId;\\n        int256 answer;\\n        uint256 timestamp;\\n        bool success;\\n        uint8 decimals;\\n    }\\n\\n    // Custom Errors\\n    // --------------------------------------------------------------------------------------------------\\n\\n    error PriceFeed__ExistingOracleRequired();\\n    error PriceFeed__InvalidDecimalsError();\\n    error PriceFeed__InvalidOracleResponseError(address token);\\n    error PriceFeed__TimelockOnlyError();\\n    error PriceFeed__UnknownAssetError();\\n\\n    // Events\\n    // ---------------------------------------------------------------------------------------------------------\\n\\n    event NewOracleRegistered(\\n        address token, address oracleAddress, bool isEthIndexed, bool isFallback\\n    );\\n\\n    // Functions\\n    // ------------------------------------------------------------------------------------------------------\\n\\n    function fetchPrice(address _token) external view returns (uint256);\\n\\n    function setOracle(\\n        address _token,\\n        address _oracle,\\n        ProviderType _type,\\n        uint256 _timeoutSeconds,\\n        bool _isEthIndexed,\\n        bool _isFallback\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0xf0c82fbfb780e4eff5d3fce5a6b38af415f42a2daec9c3bfb4cfa5d17764532c\",\"license\":\"MIT\"},\"contracts/PriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { UUPSUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport { Addresses } from \\\"./Addresses.sol\\\";\\nimport { IPriceFeed, ChainlinkAggregatorV3Interface } from \\\"./Interfaces/IPriceFeed.sol\\\";\\nimport { API3ProxyInterface } from \\\"./Pricing/API3ProxyInterface.sol\\\";\\n\\n/**\\n * @title The PriceFeed contract contains a directory of oracles for fetching prices for assets\\n * based on their\\n *     addresses; optionally fallback oracles can also be registered in case the primary source\\n * fails or is stale.\\n */\\ncontract PriceFeed is IPriceFeed, OwnableUpgradeable, UUPSUpgradeable, Addresses {\\n    // Constants\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    string public constant NAME = \\\"PriceFeed\\\";\\n\\n    /// @dev Used to convert an oracle price answer to an 18-digit precision uint\\n    uint256 public constant TARGET_DIGITS = 18;\\n\\n    /// @dev Deprecated, but retained for upgradeability\\n    uint256 private constant RESPONSE_TIMEOUT = 25 hours;\\n    uint256 private constant MAX_PRICE_DEVIATION_BETWEEN_ROUNDS_LOWER_LIMIT = 0.2 ether;\\n    uint256 private constant MAX_PRICE_DEVIATION_BETWEEN_ROUNDS_UPPER_LIMIT = 0.5 ether;\\n\\n    // State\\n    // ------------------------------------------------------------------------------------------------------------\\n\\n    /// @dev Deprecated, but retained for upgradeability\\n    mapping(address => OracleRecord) private oracleRecords;\\n    mapping(address => PriceRecord) private priceRecords;\\n\\n    mapping(address => OracleRecordV2) public oracles;\\n    mapping(address => OracleRecordV2) public fallbacks;\\n\\n    // Initializer\\n    // ------------------------------------------------------------------------------------------------------\\n\\n    function initialize() public initializer {\\n        address initialOwner = _msgSender();\\n\\n        __Ownable_init(initialOwner);\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    // Admin routines\\n    // ---------------------------------------------------------------------------------------------------\\n\\n    function setOracle(\\n        address _token,\\n        address _oracle,\\n        ProviderType _type,\\n        uint256 _timeoutSeconds,\\n        bool _isEthIndexed,\\n        bool _isFallback\\n    )\\n        external\\n        override\\n    {\\n        _requireOwnerOrTimelock(_token, _isFallback);\\n        if (_isFallback && oracles[_token].oracleAddress == address(0)) {\\n            // fallback setup requires an existing primary oracle for the asset\\n            revert PriceFeed__ExistingOracleRequired();\\n        }\\n        uint256 decimals = _fetchDecimals(_oracle, _type);\\n        if (decimals == 0) {\\n            revert PriceFeed__InvalidDecimalsError();\\n        }\\n        OracleRecordV2 memory newOracle = OracleRecordV2({\\n            oracleAddress: _oracle,\\n            providerType: _type,\\n            timeoutSeconds: _timeoutSeconds,\\n            decimals: decimals,\\n            isEthIndexed: _isEthIndexed\\n        });\\n        uint256 price = _fetchOracleScaledPrice(newOracle);\\n        if (price == 0) {\\n            revert PriceFeed__InvalidOracleResponseError(_token);\\n        }\\n        if (_isFallback) {\\n            fallbacks[_token] = newOracle;\\n        } else {\\n            oracles[_token] = newOracle;\\n        }\\n        emit NewOracleRegistered(_token, _oracle, _isEthIndexed, _isFallback);\\n    }\\n\\n    // Public functions\\n    // -------------------------------------------------------------------------------------------------\\n\\n    /**\\n     * @notice Fetches the price for an asset from a previosly configured oracle.\\n     * @dev Callers:\\n     *     - BorrowerOperations.openTrenBox()\\n     *     - BorrowerOperations.adjustTrenBox()\\n     *     - BorrowerOperations.closeTrenBox()\\n     *     - TrenBoxManagerOperations.liquidateTrenBoxes()\\n     *     - TrenBoxManagerOperations.batchLiquidateTrenBoxes()\\n     *     - TrenBoxManagerOperations.redeemCollateral()\\n     */\\n    function fetchPrice(address _token) public view virtual returns (uint256) {\\n        // Tries fetching the price from the oracle\\n        OracleRecordV2 memory oracle = oracles[_token];\\n        uint256 price = _fetchOracleScaledPrice(oracle);\\n        if (price != 0) {\\n            return oracle.isEthIndexed ? _calcEthIndexedPrice(price) : price;\\n        }\\n        // If the oracle fails (and returns 0), try again with the fallback\\n        oracle = fallbacks[_token];\\n        price = _fetchOracleScaledPrice(oracle);\\n        if (price != 0) {\\n            return oracle.isEthIndexed ? _calcEthIndexedPrice(price) : price;\\n        }\\n        revert PriceFeed__InvalidOracleResponseError(_token);\\n    }\\n\\n    // Internal functions\\n    // -----------------------------------------------------------------------------------------------\\n\\n    function _fetchDecimals(address _oracle, ProviderType _type) internal view returns (uint8) {\\n        if (ProviderType.Chainlink == _type) {\\n            return ChainlinkAggregatorV3Interface(_oracle).decimals();\\n        } else if (ProviderType.API3 == _type) {\\n            return 18;\\n        }\\n        return 0;\\n    }\\n\\n    function _fetchOracleScaledPrice(OracleRecordV2 memory oracle)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 oraclePrice;\\n        uint256 priceTimestamp;\\n        if (oracle.oracleAddress == address(0)) {\\n            revert PriceFeed__UnknownAssetError();\\n        }\\n        if (ProviderType.Chainlink == oracle.providerType) {\\n            (oraclePrice, priceTimestamp) = _fetchChainlinkOracleResponse(oracle.oracleAddress);\\n        } else if (ProviderType.API3 == oracle.providerType) {\\n            (oraclePrice, priceTimestamp) = _fetchAPI3OracleResponse(oracle.oracleAddress);\\n        }\\n        if (oraclePrice != 0 && !_isStalePrice(priceTimestamp, oracle.timeoutSeconds)) {\\n            return _scalePriceByDigits(oraclePrice, oracle.decimals);\\n        }\\n        return 0;\\n    }\\n\\n    function _isStalePrice(\\n        uint256 _priceTimestamp,\\n        uint256 _oracleTimeoutSeconds\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return block.timestamp - _priceTimestamp > _oracleTimeoutSeconds;\\n    }\\n\\n    function _fetchChainlinkOracleResponse(address _oracleAddress)\\n        internal\\n        view\\n        returns (uint256 price, uint256 timestamp)\\n    {\\n        try ChainlinkAggregatorV3Interface(_oracleAddress).latestRoundData() returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256, /* startedAt */\\n            uint256 updatedAt,\\n            uint80 /* answeredInRound */\\n        ) {\\n            if (roundId != 0 && updatedAt != 0 && answer != 0) {\\n                price = uint256(answer);\\n                timestamp = updatedAt;\\n            }\\n        } catch {\\n            // If call to Chainlink aggregator reverts, return a zero response\\n        }\\n    }\\n\\n    function _fetchAPI3OracleResponse(address _oracleAddress)\\n        internal\\n        view\\n        returns (uint256 price, uint256 timestamp)\\n    {\\n        (int224 _value, uint256 _timestamp) = API3ProxyInterface(_oracleAddress).read();\\n        if (_value > 0) {\\n            /// @dev negative check -> see API3ProxyInterface\\n            price = uint256(int256(_value));\\n            timestamp = _timestamp;\\n        }\\n    }\\n\\n    /**\\n     * @dev Fetches the ETH:USD price (using the zero address as being the ETH asset), then\\n     * multiplies it by the\\n     *     indexed price. Assumes an oracle has been set for that purpose.\\n     */\\n    function _calcEthIndexedPrice(uint256 _ethAmount) internal view returns (uint256) {\\n        uint256 ethPrice = fetchPrice(address(0));\\n        return (ethPrice * _ethAmount) / 1 ether;\\n    }\\n\\n    /**\\n     * @dev Scales oracle's response up/down to Gravita's target precision; returns unaltered price\\n     * if already on\\n     *     target digits.\\n     */\\n    function _scalePriceByDigits(\\n        uint256 _price,\\n        uint256 _priceDigits\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            if (_priceDigits > TARGET_DIGITS) {\\n                return _price / (10 ** (_priceDigits - TARGET_DIGITS));\\n            } else if (_priceDigits < TARGET_DIGITS) {\\n                return _price * (10 ** (TARGET_DIGITS - _priceDigits));\\n            }\\n        }\\n        return _price;\\n    }\\n\\n    // Access control functions\\n    // -----------------------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Requires msg.sender to be the contract owner when the oracle is first set. Subsequent\\n     * updates need to come\\n     *     through the timelock contract.\\n     */\\n    function _requireOwnerOrTimelock(address _token, bool _isFallback) internal view {\\n        OracleRecordV2 storage record = _isFallback ? fallbacks[_token] : oracles[_token];\\n        if (record.oracleAddress == address(0)) {\\n            _checkOwner();\\n        } else if (msg.sender != timelockAddress) {\\n            revert PriceFeed__TimelockOnlyError();\\n        }\\n    }\\n\\n    function authorizeUpgrade(address newImplementation) public {\\n        _authorizeUpgrade(newImplementation);\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner { }\\n}\\n\",\"keccak256\":\"0x57fbc071a38b8a17d9aea861534918d4f9b022cb7c0d31de49ec8474e07bf230\",\"license\":\"MIT\"},\"contracts/Pricing/API3ProxyInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\n/**\\n * @notice Interface for reading dAPI data feeds from https://market.api3.org/dapis\\n */\\ninterface API3ProxyInterface {\\n    function read() external view returns (int224 value, uint32 timestamp);\\n}\\n\\n/// @see https://vscode.blockscan.com/arbitrum-one/0x26690F9f17FdC26D419371315bc17950a0FC90eD\\n\\n/// @dev The proxy contracts are generalized to support most types of numerical\\n/// data feeds. This means that the user of this proxy is expected to validate\\n/// the read values according to the specific use-case. For example, `value` is\\n/// a signed integer, yet it being negative may not make sense in the case that\\n/// the data feed represents the spot price of an asset. In that case, the user\\n/// is responsible with ensuring that `value` is not negative.\\n/// In the case that the data feed is from a single source, `timestamp` is the\\n/// system time of the Airnode when it signed the data. In the case that the\\n/// data feed is from multiple sources, `timestamp` is the median of system\\n/// times of the Airnodes when they signed the respective data. There are two\\n/// points to consider while using `timestamp` in your contract logic: (1) It\\n/// is based on the system time of the Airnodes, and not the block timestamp.\\n/// This may be relevant when either of them drifts. (2) `timestamp` is an\\n/// off-chain value that is being reported, similar to `value`. Both should\\n/// only be trusted as much as the Airnode(s) that report them.\\n\",\"keccak256\":\"0x980a46947270e0af7192dbc5efeaeec587c257556ee832e4995527211d8433ad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b50608051611fe061003e600039600081816113440152818161136d01526114b30152611fe06000f3fe6080604052600436106102045760003560e01c806395fb16bb11610118578063c8564c62116100a0578063f2fde38b1161006f578063f2fde38b146106a1578063f8d89898146106c1578063fcca7fd1146106e1578063fe06073314610701578063fe9d03231461072157600080fd5b8063c8564c6214610610578063cc8b21e414610641578063cda775f914610661578063f1c05a7e1461068157600080fd5b8063addd5099116100e7578063addd509914610537578063b957172114610590578063c05c5e94146105b0578063c415b95c146105d0578063c5f956af146105f057600080fd5b806395fb16bb14610484578063a3f4df7e146104a4578063ace1798e146104e6578063ad3cb1cc1461050657600080fd5b806352d1902d1161019b578063741bef1a1161016a578063741bef1a146103d257806377553ad4146103f25780637f7dde4a146104125780638129fc1c146104325780638da5cb5b1461044757600080fd5b806352d1902d1461036857806355dafa461461037d5780636a85d67d1461039d578063715018a6146103bd57600080fd5b806326256c0b116101d757806326256c0b146102ab5780633cc74225146103155780634bc66f32146103355780634f1ef2861461035557600080fd5b806301c9310014610209578063048c661d1461022b5780630a34d4d6146102685780631be5c92f14610288575b600080fd5b34801561021557600080fd5b50610229610224366004611b70565b610741565b005b34801561023757600080fd5b50600c5461024b906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561027457600080fd5b5060105461024b906001600160a01b031681565b34801561029457600080fd5b5061029d601281565b60405190815260200161025f565b3480156102b757600080fd5b506103046102c6366004611b70565b60356020526000908152604090208054600182015460028301546003909301546001600160a01b0383169360ff600160a01b90940484169390911685565b60405161025f959493929190611ba1565b34801561032157600080fd5b5060065461024b906001600160a01b031681565b34801561034157600080fd5b50600d5461024b906001600160a01b031681565b610229610363366004611c09565b61076b565b34801561037457600080fd5b5061029d61078a565b34801561038957600080fd5b5060095461024b906001600160a01b031681565b3480156103a957600080fd5b506102296103b8366004611b70565b6107a7565b3480156103c957600080fd5b506102296107d1565b3480156103de57600080fd5b50600a5461024b906001600160a01b031681565b3480156103fe57600080fd5b5060025461024b906001600160a01b031681565b34801561041e57600080fd5b5060005461024b906001600160a01b031681565b34801561043e57600080fd5b506102296107e5565b34801561045357600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031661024b565b34801561049057600080fd5b5060045461024b906001600160a01b031681565b3480156104b057600080fd5b506104d960405180604001604052806009815260200168141c9a58d95199595960ba1b81525081565b60405161025f9190611cef565b3480156104f257600080fd5b5061029d610501366004611b70565b6108fe565b34801561051257600080fd5b506104d9604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561054357600080fd5b50610304610552366004611b70565b60346020526000908152604090208054600182015460028301546003909301546001600160a01b0383169360ff600160a01b90940484169390911685565b34801561059c57600080fd5b506102296105ab366004611d22565b610a8c565b3480156105bc57600080fd5b5060015461024b906001600160a01b031681565b3480156105dc57600080fd5b5060075461024b906001600160a01b031681565b3480156105fc57600080fd5b50600e5461024b906001600160a01b031681565b34801561061c57600080fd5b5060105461063190600160a01b900460ff1681565b604051901515815260200161025f565b34801561064d57600080fd5b50600b5461024b906001600160a01b031681565b34801561066d57600080fd5b5060035461024b906001600160a01b031681565b34801561068d57600080fd5b50600f5461024b906001600160a01b031681565b3480156106ad57600080fd5b506102296106bc366004611b70565b611006565b3480156106cd57600080fd5b5060055461024b906001600160a01b031681565b3480156106ed57600080fd5b506102296106fc366004611da7565b611044565b34801561070d57600080fd5b5061022961071c366004611b70565b6112d5565b34801561072d57600080fd5b5060085461024b906001600160a01b031681565b6107496112de565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b610773611339565b61077c826113de565b61078682826113e6565b5050565b60006107946114a8565b50600080516020611fb483398151915290565b6107af6112de565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6107d96112de565b6107e360006114f1565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff1660008115801561082b5750825b905060008267ffffffffffffffff1660011480156108485750303b155b905081158015610856575080155b156108745760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561089e57845460ff60401b1916600160401b1785555b336108a881611562565b6108b0611573565b5083156108f757845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b6001600160a01b038181166000908152603460209081526040808320815160a0810190925280549485168252929384939192830190600160a01b900460ff16600181111561094e5761094e611b8b565b600181111561095f5761095f611b8b565b8152600182015460208201526002820154604082015260039091015460ff161515606090910152905060006109938261157b565b905080156109bb5781608001516109aa57806109b3565b6109b381611641565b949350505050565b6001600160a01b03848116600090815260356020908152604091829020825160a0810190935280549384168352919290830190600160a01b900460ff166001811115610a0957610a09611b8b565b6001811115610a1a57610a1a611b8b565b8152600182015460208201526002820154604082015260039091015460ff1615156060909101529150610a4c8261157b565b90508015610a635781608001516109aa57806109b3565b60405163283f5cb560e01b81526001600160a01b03851660048201526024015b60405180910390fd5b610a946112de565b601054600160a01b900460ff1615610aee5760405162461bcd60e51b815260206004820152601c60248201527f536574757020697320616c726561647920696e697469616c697a6564000000006044820152606401610a83565b600f8114610b3e5760405162461bcd60e51b815260206004820152601e60248201527f45787065637465642031352061646472657373657320617420736574757000006044820152606401610a83565b60005b600f811015610bc3576000838383818110610b5e57610b5e611e1a565b9050602002016020810190610b739190611b70565b6001600160a01b031603610bbb5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610a83565b600101610b41565b5081816000818110610bd757610bd7611e1a565b9050602002016020810190610bec9190611b70565b600080546001600160a01b0319166001600160a01b039290921691909117905581816001818110610c1f57610c1f611e1a565b9050602002016020810190610c349190611b70565b600180546001600160a01b0319166001600160a01b039290921691909117905581816002818110610c6757610c67611e1a565b9050602002016020810190610c7c9190611b70565b600280546001600160a01b0319166001600160a01b039290921691909117905581816003818110610caf57610caf611e1a565b9050602002016020810190610cc49190611b70565b600380546001600160a01b0319166001600160a01b039290921691909117905581816004818110610cf757610cf7611e1a565b9050602002016020810190610d0c9190611b70565b600580546001600160a01b0319166001600160a01b039290921691909117815582908290818110610d3f57610d3f611e1a565b9050602002016020810190610d549190611b70565b600680546001600160a01b0319166001600160a01b039290921691909117815582908290818110610d8757610d87611e1a565b9050602002016020810190610d9c9190611b70565b600780546001600160a01b0319166001600160a01b039290921691909117815582908290818110610dcf57610dcf611e1a565b9050602002016020810190610de49190611b70565b600880546001600160a01b0319166001600160a01b039290921691909117815582908290818110610e1757610e17611e1a565b9050602002016020810190610e2c9190611b70565b600a80546001600160a01b0319166001600160a01b039290921691909117905581816009818110610e5f57610e5f611e1a565b9050602002016020810190610e749190611b70565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a818110610ea757610ea7611e1a565b9050602002016020810190610ebc9190611b70565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b818110610eef57610eef611e1a565b9050602002016020810190610f049190611b70565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c818110610f3757610f37611e1a565b9050602002016020810190610f4c9190611b70565b600e80546001600160a01b0319166001600160a01b03929092169190911790558181600d818110610f7f57610f7f611e1a565b9050602002016020810190610f949190611b70565b600f80546001600160a01b0319166001600160a01b03929092169190911790558181600e818110610fc757610fc7611e1a565b9050602002016020810190610fdc9190611b70565b601080546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b61100e6112de565b6001600160a01b03811661103857604051631e4fbdf760e01b815260006004820152602401610a83565b611041816114f1565b50565b61104e8682611674565b80801561107357506001600160a01b0386811660009081526034602052604090205416155b1561109157604051634a0e0c3b60e11b815260040160405180910390fd5b600061109d86866116f6565b60ff169050806000036110c35760405163ee65a7e560e01b815260040160405180910390fd5b60006040518060a00160405280886001600160a01b031681526020018760018111156110f1576110f1611b8b565b8152602001868152602001838152602001851515815250905060006111158261157b565b9050806000036111435760405163283f5cb560e01b81526001600160a01b038a166004820152602401610a83565b83156111e2576001600160a01b03808a1660009081526035602090815260409091208451815493166001600160a01b03198416811782559185015185939192909183916001600160a81b031990911617600160a01b8360018111156111aa576111aa611b8b565b021790555060408201516001820155606082015160028201556080909101516003909101805460ff1916911515919091179055611277565b6001600160a01b03808a1660009081526034602090815260409091208451815493166001600160a01b03198416811782559185015185939192909183916001600160a81b031990911617600160a01b83600181111561124357611243611b8b565b021790555060408201516001820155606082015160028201556080909101516003909101805460ff19169115159190911790555b604080516001600160a01b038b811682528a16602082015286151581830152851515606082015290517fcbde3c20c68ba036ef9cd1c074d075187be3640bc7a5b3fb85f045b07ab9a9309181900360800190a1505050505050505050565b611041816113de565b336113107f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146107e35760405163118cdaa760e01b8152336004820152602401610a83565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806113c057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166113b4600080516020611fb4833981519152546001600160a01b031690565b6001600160a01b031614155b156107e35760405163703e46dd60e11b815260040160405180910390fd5b6110416112de565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611440575060408051601f3d908101601f1916820190925261143d91810190611e30565b60015b61146857604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610a83565b600080516020611fb4833981519152811461149957604051632a87526960e21b815260048101829052602401610a83565b6114a383836117a5565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107e35760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b61156a6117fb565b61104181611844565b6107e36117fb565b8051600090819081906001600160a01b03166115aa57604051632e054cdf60e21b815260040160405180910390fd5b836020015160018111156115c0576115c0611b8b565b6000036115dc5783516115d29061184c565b909250905061160a565b836020015160018111156115f2576115f2611b8b565b60010361160a578351611604906118ea565b90925090505b81158015906116245750611622818560400151611978565b155b15611637576109b382856060015161198d565b5060009392505050565b60008061164e60006108fe565b9050670de0b6b3a76400006116638483611e5f565b61166d9190611e8c565b9392505050565b600081611698576001600160a01b03831660009081526034602052604090206116b1565b6001600160a01b03831660009081526035602052604090205b80549091506001600160a01b03166116cb576114a36112de565b600d546001600160a01b031633146114a357604051633bc92b2160e01b815260040160405180910390fd5b600081600181111561170a5761170a611b8b565b60000361177a57826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561174f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117739190611eae565b905061179f565b81600181111561178c5761178c611b8b565b60010361179b5750601261179f565b5060005b92915050565b6117ae826119d5565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156117f3576114a38282611a3a565b610786611ab0565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166107e357604051631afcd79f60e31b815260040160405180910390fd5b61100e6117fb565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa9250505080156118a9575060408051601f3d908101601f191682019092526118a691810190611eeb565b60015b156118e55769ffffffffffffffffffff8516158015906118c857508115155b80156118d357508315155b156118df578396508195505b50505050505b915091565b600080600080846001600160a01b03166357de26a46040518163ffffffff1660e01b81526004016040805180830381865afa15801561192d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119519190611f3b565b63ffffffff1691509150600082601b0b13156119715781601b0b93508092505b5050915091565b6000816119858442611f84565b119392505050565b600060128211156119b55760128203600a0a83816119ad576119ad611e76565b04905061179f565b60128210156119ce5781601203600a0a8302905061179f565b5090919050565b806001600160a01b03163b600003611a0b57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610a83565b600080516020611fb483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051611a579190611f97565b600060405180830381855af49150503d8060008114611a92576040519150601f19603f3d011682016040523d82523d6000602084013e611a97565b606091505b5091509150611aa7858383611acf565b95945050505050565b34156107e35760405163b398979f60e01b815260040160405180910390fd5b606082611ae457611adf82611b2b565b61166d565b8151158015611afb57506001600160a01b0384163b155b15611b2457604051639996b31560e01b81526001600160a01b0385166004820152602401610a83565b5092915050565b805115611b3b5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b0381168114611b6b57600080fd5b919050565b600060208284031215611b8257600080fd5b61166d82611b54565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038616815260a0810160028610611bcf57634e487b7160e01b600052602160045260246000fd5b85602083015284604083015283606083015282151560808301529695505050505050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611c1c57600080fd5b611c2583611b54565b9150602083013567ffffffffffffffff80821115611c4257600080fd5b818501915085601f830112611c5657600080fd5b813581811115611c6857611c68611bf3565b604051601f8201601f19908116603f01168101908382118183101715611c9057611c90611bf3565b81604052828152886020848701011115611ca957600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b83811015611ce6578181015183820152602001611cce565b50506000910152565b6020815260008251806020840152611d0e816040850160208701611ccb565b601f01601f19169190910160400192915050565b60008060208385031215611d3557600080fd5b823567ffffffffffffffff80821115611d4d57600080fd5b818501915085601f830112611d6157600080fd5b813581811115611d7057600080fd5b8660208260051b8501011115611d8557600080fd5b60209290920196919550909350505050565b80358015158114611b6b57600080fd5b60008060008060008060c08789031215611dc057600080fd5b611dc987611b54565b9550611dd760208801611b54565b9450604087013560028110611deb57600080fd5b935060608701359250611e0060808801611d97565b9150611e0e60a08801611d97565b90509295509295509295565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611e4257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761179f5761179f611e49565b634e487b7160e01b600052601260045260246000fd5b600082611ea957634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611ec057600080fd5b815160ff8116811461166d57600080fd5b805169ffffffffffffffffffff81168114611b6b57600080fd5b600080600080600060a08688031215611f0357600080fd5b611f0c86611ed1565b9450602086015193506040860151925060608601519150611f2f60808701611ed1565b90509295509295909350565b60008060408385031215611f4e57600080fd5b825180601b0b8114611f5f57600080fd5b602084015190925063ffffffff81168114611f7957600080fd5b809150509250929050565b8181038181111561179f5761179f611e49565b60008251611fa9818460208701611ccb565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca164736f6c6343000817000a",
  "deployedBytecode": "0x6080604052600436106102045760003560e01c806395fb16bb11610118578063c8564c62116100a0578063f2fde38b1161006f578063f2fde38b146106a1578063f8d89898146106c1578063fcca7fd1146106e1578063fe06073314610701578063fe9d03231461072157600080fd5b8063c8564c6214610610578063cc8b21e414610641578063cda775f914610661578063f1c05a7e1461068157600080fd5b8063addd5099116100e7578063addd509914610537578063b957172114610590578063c05c5e94146105b0578063c415b95c146105d0578063c5f956af146105f057600080fd5b806395fb16bb14610484578063a3f4df7e146104a4578063ace1798e146104e6578063ad3cb1cc1461050657600080fd5b806352d1902d1161019b578063741bef1a1161016a578063741bef1a146103d257806377553ad4146103f25780637f7dde4a146104125780638129fc1c146104325780638da5cb5b1461044757600080fd5b806352d1902d1461036857806355dafa461461037d5780636a85d67d1461039d578063715018a6146103bd57600080fd5b806326256c0b116101d757806326256c0b146102ab5780633cc74225146103155780634bc66f32146103355780634f1ef2861461035557600080fd5b806301c9310014610209578063048c661d1461022b5780630a34d4d6146102685780631be5c92f14610288575b600080fd5b34801561021557600080fd5b50610229610224366004611b70565b610741565b005b34801561023757600080fd5b50600c5461024b906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561027457600080fd5b5060105461024b906001600160a01b031681565b34801561029457600080fd5b5061029d601281565b60405190815260200161025f565b3480156102b757600080fd5b506103046102c6366004611b70565b60356020526000908152604090208054600182015460028301546003909301546001600160a01b0383169360ff600160a01b90940484169390911685565b60405161025f959493929190611ba1565b34801561032157600080fd5b5060065461024b906001600160a01b031681565b34801561034157600080fd5b50600d5461024b906001600160a01b031681565b610229610363366004611c09565b61076b565b34801561037457600080fd5b5061029d61078a565b34801561038957600080fd5b5060095461024b906001600160a01b031681565b3480156103a957600080fd5b506102296103b8366004611b70565b6107a7565b3480156103c957600080fd5b506102296107d1565b3480156103de57600080fd5b50600a5461024b906001600160a01b031681565b3480156103fe57600080fd5b5060025461024b906001600160a01b031681565b34801561041e57600080fd5b5060005461024b906001600160a01b031681565b34801561043e57600080fd5b506102296107e5565b34801561045357600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031661024b565b34801561049057600080fd5b5060045461024b906001600160a01b031681565b3480156104b057600080fd5b506104d960405180604001604052806009815260200168141c9a58d95199595960ba1b81525081565b60405161025f9190611cef565b3480156104f257600080fd5b5061029d610501366004611b70565b6108fe565b34801561051257600080fd5b506104d9604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561054357600080fd5b50610304610552366004611b70565b60346020526000908152604090208054600182015460028301546003909301546001600160a01b0383169360ff600160a01b90940484169390911685565b34801561059c57600080fd5b506102296105ab366004611d22565b610a8c565b3480156105bc57600080fd5b5060015461024b906001600160a01b031681565b3480156105dc57600080fd5b5060075461024b906001600160a01b031681565b3480156105fc57600080fd5b50600e5461024b906001600160a01b031681565b34801561061c57600080fd5b5060105461063190600160a01b900460ff1681565b604051901515815260200161025f565b34801561064d57600080fd5b50600b5461024b906001600160a01b031681565b34801561066d57600080fd5b5060035461024b906001600160a01b031681565b34801561068d57600080fd5b50600f5461024b906001600160a01b031681565b3480156106ad57600080fd5b506102296106bc366004611b70565b611006565b3480156106cd57600080fd5b5060055461024b906001600160a01b031681565b3480156106ed57600080fd5b506102296106fc366004611da7565b611044565b34801561070d57600080fd5b5061022961071c366004611b70565b6112d5565b34801561072d57600080fd5b5060085461024b906001600160a01b031681565b6107496112de565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b610773611339565b61077c826113de565b61078682826113e6565b5050565b60006107946114a8565b50600080516020611fb483398151915290565b6107af6112de565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6107d96112de565b6107e360006114f1565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff1660008115801561082b5750825b905060008267ffffffffffffffff1660011480156108485750303b155b905081158015610856575080155b156108745760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561089e57845460ff60401b1916600160401b1785555b336108a881611562565b6108b0611573565b5083156108f757845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b6001600160a01b038181166000908152603460209081526040808320815160a0810190925280549485168252929384939192830190600160a01b900460ff16600181111561094e5761094e611b8b565b600181111561095f5761095f611b8b565b8152600182015460208201526002820154604082015260039091015460ff161515606090910152905060006109938261157b565b905080156109bb5781608001516109aa57806109b3565b6109b381611641565b949350505050565b6001600160a01b03848116600090815260356020908152604091829020825160a0810190935280549384168352919290830190600160a01b900460ff166001811115610a0957610a09611b8b565b6001811115610a1a57610a1a611b8b565b8152600182015460208201526002820154604082015260039091015460ff1615156060909101529150610a4c8261157b565b90508015610a635781608001516109aa57806109b3565b60405163283f5cb560e01b81526001600160a01b03851660048201526024015b60405180910390fd5b610a946112de565b601054600160a01b900460ff1615610aee5760405162461bcd60e51b815260206004820152601c60248201527f536574757020697320616c726561647920696e697469616c697a6564000000006044820152606401610a83565b600f8114610b3e5760405162461bcd60e51b815260206004820152601e60248201527f45787065637465642031352061646472657373657320617420736574757000006044820152606401610a83565b60005b600f811015610bc3576000838383818110610b5e57610b5e611e1a565b9050602002016020810190610b739190611b70565b6001600160a01b031603610bbb5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610a83565b600101610b41565b5081816000818110610bd757610bd7611e1a565b9050602002016020810190610bec9190611b70565b600080546001600160a01b0319166001600160a01b039290921691909117905581816001818110610c1f57610c1f611e1a565b9050602002016020810190610c349190611b70565b600180546001600160a01b0319166001600160a01b039290921691909117905581816002818110610c6757610c67611e1a565b9050602002016020810190610c7c9190611b70565b600280546001600160a01b0319166001600160a01b039290921691909117905581816003818110610caf57610caf611e1a565b9050602002016020810190610cc49190611b70565b600380546001600160a01b0319166001600160a01b039290921691909117905581816004818110610cf757610cf7611e1a565b9050602002016020810190610d0c9190611b70565b600580546001600160a01b0319166001600160a01b039290921691909117815582908290818110610d3f57610d3f611e1a565b9050602002016020810190610d549190611b70565b600680546001600160a01b0319166001600160a01b039290921691909117815582908290818110610d8757610d87611e1a565b9050602002016020810190610d9c9190611b70565b600780546001600160a01b0319166001600160a01b039290921691909117815582908290818110610dcf57610dcf611e1a565b9050602002016020810190610de49190611b70565b600880546001600160a01b0319166001600160a01b039290921691909117815582908290818110610e1757610e17611e1a565b9050602002016020810190610e2c9190611b70565b600a80546001600160a01b0319166001600160a01b039290921691909117905581816009818110610e5f57610e5f611e1a565b9050602002016020810190610e749190611b70565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a818110610ea757610ea7611e1a565b9050602002016020810190610ebc9190611b70565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b818110610eef57610eef611e1a565b9050602002016020810190610f049190611b70565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c818110610f3757610f37611e1a565b9050602002016020810190610f4c9190611b70565b600e80546001600160a01b0319166001600160a01b03929092169190911790558181600d818110610f7f57610f7f611e1a565b9050602002016020810190610f949190611b70565b600f80546001600160a01b0319166001600160a01b03929092169190911790558181600e818110610fc757610fc7611e1a565b9050602002016020810190610fdc9190611b70565b601080546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b61100e6112de565b6001600160a01b03811661103857604051631e4fbdf760e01b815260006004820152602401610a83565b611041816114f1565b50565b61104e8682611674565b80801561107357506001600160a01b0386811660009081526034602052604090205416155b1561109157604051634a0e0c3b60e11b815260040160405180910390fd5b600061109d86866116f6565b60ff169050806000036110c35760405163ee65a7e560e01b815260040160405180910390fd5b60006040518060a00160405280886001600160a01b031681526020018760018111156110f1576110f1611b8b565b8152602001868152602001838152602001851515815250905060006111158261157b565b9050806000036111435760405163283f5cb560e01b81526001600160a01b038a166004820152602401610a83565b83156111e2576001600160a01b03808a1660009081526035602090815260409091208451815493166001600160a01b03198416811782559185015185939192909183916001600160a81b031990911617600160a01b8360018111156111aa576111aa611b8b565b021790555060408201516001820155606082015160028201556080909101516003909101805460ff1916911515919091179055611277565b6001600160a01b03808a1660009081526034602090815260409091208451815493166001600160a01b03198416811782559185015185939192909183916001600160a81b031990911617600160a01b83600181111561124357611243611b8b565b021790555060408201516001820155606082015160028201556080909101516003909101805460ff19169115159190911790555b604080516001600160a01b038b811682528a16602082015286151581830152851515606082015290517fcbde3c20c68ba036ef9cd1c074d075187be3640bc7a5b3fb85f045b07ab9a9309181900360800190a1505050505050505050565b611041816113de565b336113107f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146107e35760405163118cdaa760e01b8152336004820152602401610a83565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806113c057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166113b4600080516020611fb4833981519152546001600160a01b031690565b6001600160a01b031614155b156107e35760405163703e46dd60e11b815260040160405180910390fd5b6110416112de565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611440575060408051601f3d908101601f1916820190925261143d91810190611e30565b60015b61146857604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610a83565b600080516020611fb4833981519152811461149957604051632a87526960e21b815260048101829052602401610a83565b6114a383836117a5565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107e35760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b61156a6117fb565b61104181611844565b6107e36117fb565b8051600090819081906001600160a01b03166115aa57604051632e054cdf60e21b815260040160405180910390fd5b836020015160018111156115c0576115c0611b8b565b6000036115dc5783516115d29061184c565b909250905061160a565b836020015160018111156115f2576115f2611b8b565b60010361160a578351611604906118ea565b90925090505b81158015906116245750611622818560400151611978565b155b15611637576109b382856060015161198d565b5060009392505050565b60008061164e60006108fe565b9050670de0b6b3a76400006116638483611e5f565b61166d9190611e8c565b9392505050565b600081611698576001600160a01b03831660009081526034602052604090206116b1565b6001600160a01b03831660009081526035602052604090205b80549091506001600160a01b03166116cb576114a36112de565b600d546001600160a01b031633146114a357604051633bc92b2160e01b815260040160405180910390fd5b600081600181111561170a5761170a611b8b565b60000361177a57826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561174f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117739190611eae565b905061179f565b81600181111561178c5761178c611b8b565b60010361179b5750601261179f565b5060005b92915050565b6117ae826119d5565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156117f3576114a38282611a3a565b610786611ab0565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166107e357604051631afcd79f60e31b815260040160405180910390fd5b61100e6117fb565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa9250505080156118a9575060408051601f3d908101601f191682019092526118a691810190611eeb565b60015b156118e55769ffffffffffffffffffff8516158015906118c857508115155b80156118d357508315155b156118df578396508195505b50505050505b915091565b600080600080846001600160a01b03166357de26a46040518163ffffffff1660e01b81526004016040805180830381865afa15801561192d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119519190611f3b565b63ffffffff1691509150600082601b0b13156119715781601b0b93508092505b5050915091565b6000816119858442611f84565b119392505050565b600060128211156119b55760128203600a0a83816119ad576119ad611e76565b04905061179f565b60128210156119ce5781601203600a0a8302905061179f565b5090919050565b806001600160a01b03163b600003611a0b57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610a83565b600080516020611fb483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051611a579190611f97565b600060405180830381855af49150503d8060008114611a92576040519150601f19603f3d011682016040523d82523d6000602084013e611a97565b606091505b5091509150611aa7858383611acf565b95945050505050565b34156107e35760405163b398979f60e01b815260040160405180910390fd5b606082611ae457611adf82611b2b565b61166d565b8151158015611afb57506001600160a01b0384163b155b15611b2457604051639996b31560e01b81526001600160a01b0385166004820152602401610a83565b5092915050565b805115611b3b5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b0381168114611b6b57600080fd5b919050565b600060208284031215611b8257600080fd5b61166d82611b54565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038616815260a0810160028610611bcf57634e487b7160e01b600052602160045260246000fd5b85602083015284604083015283606083015282151560808301529695505050505050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611c1c57600080fd5b611c2583611b54565b9150602083013567ffffffffffffffff80821115611c4257600080fd5b818501915085601f830112611c5657600080fd5b813581811115611c6857611c68611bf3565b604051601f8201601f19908116603f01168101908382118183101715611c9057611c90611bf3565b81604052828152886020848701011115611ca957600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b83811015611ce6578181015183820152602001611cce565b50506000910152565b6020815260008251806020840152611d0e816040850160208701611ccb565b601f01601f19169190910160400192915050565b60008060208385031215611d3557600080fd5b823567ffffffffffffffff80821115611d4d57600080fd5b818501915085601f830112611d6157600080fd5b813581811115611d7057600080fd5b8660208260051b8501011115611d8557600080fd5b60209290920196919550909350505050565b80358015158114611b6b57600080fd5b60008060008060008060c08789031215611dc057600080fd5b611dc987611b54565b9550611dd760208801611b54565b9450604087013560028110611deb57600080fd5b935060608701359250611e0060808801611d97565b9150611e0e60a08801611d97565b90509295509295509295565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611e4257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761179f5761179f611e49565b634e487b7160e01b600052601260045260246000fd5b600082611ea957634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611ec057600080fd5b815160ff8116811461166d57600080fd5b805169ffffffffffffffffffff81168114611b6b57600080fd5b600080600080600060a08688031215611f0357600080fd5b611f0c86611ed1565b9450602086015193506040860151925060608601519150611f2f60808701611ed1565b90509295509295909350565b60008060408385031215611f4e57600080fd5b825180601b0b8114611f5f57600080fd5b602084015190925063ffffffff81168114611f7957600080fd5b809150509250929050565b8181038181111561179f5761179f611e49565b60008251611fa9818460208701611ccb565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca164736f6c6343000817000a",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "fetchPrice(address)": {
        "details": "Callers:     - BorrowerOperations.openTrenBox()     - BorrowerOperations.adjustTrenBox()     - BorrowerOperations.closeTrenBox()     - TrenBoxManagerOperations.liquidateTrenBoxes()     - TrenBoxManagerOperations.batchLiquidateTrenBoxes()     - TrenBoxManagerOperations.redeemCollateral()"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "RESPONSE_TIMEOUT": {
        "details": "Deprecated, but retained for upgradeability"
      },
      "TARGET_DIGITS": {
        "details": "Used to convert an oracle price answer to an 18-digit precision uint"
      },
      "oracleRecords": {
        "details": "Deprecated, but retained for upgradeability"
      }
    },
    "title": "The PriceFeed contract contains a directory of oracles for fetching prices for assets based on their     addresses; optionally fallback oracles can also be registered in case the primary source fails or is stale.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fetchPrice(address)": {
        "notice": "Fetches the price for an asset from a previosly configured oracle."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9891,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "activePool",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9893,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "adminContract",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9895,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "borrowerOperations",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9897,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "collSurplusPool",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9899,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "communityIssuance",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 9901,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "debtToken",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 9903,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "defaultPool",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 9905,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "feeCollector",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 9907,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "gasPoolAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 9909,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "trenStaking",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 9911,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "priceFeed",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 9913,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "sortedTrenBoxes",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 9915,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 9917,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "timelockAddress",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 9919,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 9921,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "trenBoxManager",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 9923,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "trenBoxManagerOperations",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 9925,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "isAddressSetupInitialized",
        "offset": 20,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 9930,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "__gap",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_uint256)33_storage"
      },
      {
        "astId": 14135,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "oracleRecords",
        "offset": 0,
        "slot": "50",
        "type": "t_mapping(t_address,t_struct(OracleRecord)12698_storage)"
      },
      {
        "astId": 14140,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "priceRecords",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_struct(PriceRecord)12704_storage)"
      },
      {
        "astId": 14145,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "oracles",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_struct(OracleRecordV2)12686_storage)"
      },
      {
        "astId": 14150,
        "contract": "contracts/PriceFeed.sol:PriceFeed",
        "label": "fallbacks",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_struct(OracleRecordV2)12686_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)33_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[33]",
        "numberOfBytes": "1056"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ProviderType)12674": {
        "encoding": "inplace",
        "label": "enum IPriceFeed.ProviderType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(OracleRecord)12698_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IPriceFeed.OracleRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(OracleRecord)12698_storage"
      },
      "t_mapping(t_address,t_struct(OracleRecordV2)12686_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IPriceFeed.OracleRecordV2)",
        "numberOfBytes": "32",
        "value": "t_struct(OracleRecordV2)12686_storage"
      },
      "t_mapping(t_address,t_struct(PriceRecord)12704_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IPriceFeed.PriceRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(PriceRecord)12704_storage"
      },
      "t_struct(OracleRecord)12698_storage": {
        "encoding": "inplace",
        "label": "struct IPriceFeed.OracleRecord",
        "members": [
          {
            "astId": 12689,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "chainLinkOracle",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12691,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "maxDeviationBetweenRounds",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12693,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "exists",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 12695,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "isFeedWorking",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 12697,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "isEthIndexed",
            "offset": 2,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(OracleRecordV2)12686_storage": {
        "encoding": "inplace",
        "label": "struct IPriceFeed.OracleRecordV2",
        "members": [
          {
            "astId": 12676,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "oracleAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12679,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "providerType",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(ProviderType)12674"
          },
          {
            "astId": 12681,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "timeoutSeconds",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12683,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "decimals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12685,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "isEthIndexed",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PriceRecord)12704_storage": {
        "encoding": "inplace",
        "label": "struct IPriceFeed.PriceRecord",
        "members": [
          {
            "astId": 12701,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "scaledPrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12703,
            "contract": "contracts/PriceFeed.sol:PriceFeed",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}