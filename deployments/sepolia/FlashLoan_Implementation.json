{
  "address": "0x31a607AA5bee642177a7b755002729346953f7AC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__CommunityIssuanceZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__LengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__SetupIsInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__TRENStakingZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "address_",
          "type": "address"
        }
      ],
      "name": "ConfigurableAddresses__ZeroAddresses",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FlashLoan__AmountBeyondMax",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FlashLoan__AmountBeyondMin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FlashLoan__CollateralIsNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FlashLoan__LoanIsNotRepayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FlashLoan__SetupIsInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FlashLoan__ZeroAddresses",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_stableCoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "name": "AddressesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_debtAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "name": "FlashLoanExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "authorizeUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collSurplusPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityIssuance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "flashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "flashLoanForRepay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFlashLoanRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAddressSetupInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSetupInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_communityIssuance",
          "type": "address"
        }
      ],
      "name": "setCommunityIssuance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stableCoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "name": "setInternalAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trenStaking",
          "type": "address"
        }
      ],
      "name": "setTRENStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTrenBoxes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableCoin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapRouterV3",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManagerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x62d516514dcbc155fdd3aa0288ddfdfa87e8aa4a43cf0bac9d0f6189935f9335",
  "receipt": {
    "to": null,
    "from": "0x19E733F20aAdaB8996f7895ACBD04f746BF4Aac1",
    "contractAddress": "0x31a607AA5bee642177a7b755002729346953f7AC",
    "transactionIndex": 44,
    "gasUsed": "2181004",
    "logsBloom": "0x
    "blockHash": "0x8c84d7ab5ae5d0e3cf776caa2b9f693bc29ccc48072d7c35115b616c968c853e",
    "transactionHash": "0x62d516514dcbc155fdd3aa0288ddfdfa87e8aa4a43cf0bac9d0f6189935f9335",
    "logs": [],
    "blockNumber": 5678789,
    "cumulativeGasUsed": "7343609",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "95c5aca5a7d37a227eda09db9261aa6b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__CommunityIssuanceZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__SetupIsInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__TRENStakingZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"ConfigurableAddresses__ZeroAddresses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FlashLoan__AmountBeyondMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FlashLoan__AmountBeyondMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FlashLoan__CollateralIsNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FlashLoan__LoanIsNotRepayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FlashLoan__SetupIsInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FlashLoan__ZeroAddresses\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"AddressesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_debtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"FlashLoanExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"authorizeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collSurplusPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityIssuance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"flashLoanForRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlashLoanRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAddressSetupInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSetupInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityIssuance\",\"type\":\"address\"}],\"name\":\"setCommunityIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"setInternalAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trenStaking\",\"type\":\"address\"}],\"name\":\"setTRENStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTrenBoxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapRouterV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManagerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FlashLoan.sol\":\"FlashLoan\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"contracts/Dependencies/ConfigurableAddresses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract ConfigurableAddresses is OwnableUpgradeable {\\n    address public activePool;\\n    address public adminContract;\\n    address public borrowerOperations;\\n    address public collSurplusPool;\\n    address public communityIssuance;\\n    address public debtToken;\\n    address public defaultPool;\\n    address public feeCollector;\\n    address public flashLoanAddress;\\n    address public gasPoolAddress;\\n    address public trenStaking;\\n    address public priceFeed;\\n    address public sortedTrenBoxes;\\n    address public stabilityPool;\\n    address public timelockAddress;\\n    address public treasuryAddress;\\n    address public trenBoxManager;\\n    address public trenBoxManagerOperations;\\n\\n    bool public isAddressSetupInitialized;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[33] private __gap; // Goerli uses 47; Arbitrum uses 33\\n\\n    error ConfigurableAddresses__SetupIsInitialized();\\n    error ConfigurableAddresses__ZeroAddresses(uint256 position, address address_);\\n    error ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n    error ConfigurableAddresses__TRENStakingZeroAddress();\\n    error ConfigurableAddresses__LengthMismatch();\\n\\n    // Dependency setters\\n    // -----------------------------------------------------------------------------------------------\\n\\n    function setAddresses(address[] calldata _addresses) external onlyOwner {\\n        if (isAddressSetupInitialized) {\\n            revert ConfigurableAddresses__SetupIsInitialized();\\n        }\\n        if (_addresses.length != 16) {\\n            revert ConfigurableAddresses__LengthMismatch();\\n        }\\n\\n        for (uint256 i = 0; i < 16; i++) {\\n            if (_addresses[i] == address(0)) {\\n                revert ConfigurableAddresses__ZeroAddresses(i, _addresses[i]);\\n            }\\n        }\\n        activePool = _addresses[0];\\n        adminContract = _addresses[1];\\n        borrowerOperations = _addresses[2];\\n        collSurplusPool = _addresses[3];\\n        debtToken = _addresses[4];\\n        defaultPool = _addresses[5];\\n        feeCollector = _addresses[6];\\n        flashLoanAddress = _addresses[7];\\n        gasPoolAddress = _addresses[8];\\n        priceFeed = _addresses[9];\\n        sortedTrenBoxes = _addresses[10];\\n        stabilityPool = _addresses[11];\\n        timelockAddress = _addresses[12];\\n        treasuryAddress = _addresses[13];\\n        trenBoxManager = _addresses[14];\\n        trenBoxManagerOperations = _addresses[15];\\n\\n        isAddressSetupInitialized = true;\\n    }\\n\\n    function setCommunityIssuance(address _communityIssuance) public onlyOwner {\\n        if (_communityIssuance == address(0)) {\\n            revert ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n        }\\n        communityIssuance = _communityIssuance;\\n    }\\n\\n    function setTRENStaking(address _trenStaking) public onlyOwner {\\n        if (_trenStaking == address(0)) {\\n            revert ConfigurableAddresses__TRENStakingZeroAddress();\\n        }\\n        trenStaking = _trenStaking;\\n    }\\n}\\n\",\"keccak256\":\"0xaf7c303784379bebf2e43e41c33c27c1309a639d360b5823240b1a8f5935b064\",\"license\":\"MIT\"},\"contracts/FlashLoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { UUPSUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport { IAdminContract } from \\\"./Interfaces/IAdminContract.sol\\\";\\nimport { IBorrowerOperations } from \\\"./Interfaces/IBorrowerOperations.sol\\\";\\nimport { IFeeCollector } from \\\"./Interfaces/IFeeCollector.sol\\\";\\nimport { IFlashLoan } from \\\"./Interfaces/IFlashLoan.sol\\\";\\nimport { IFlashLoanReceiver } from \\\"./Interfaces/IFlashLoanReceiver.sol\\\";\\nimport { ITrenBoxManager } from \\\"./Interfaces/ITrenBoxManager.sol\\\";\\nimport { IUniswapRouterV3 } from \\\"./Interfaces/IUniswapRouterV3.sol\\\";\\nimport { IDebtToken } from \\\"./Interfaces/IDebtToken.sol\\\";\\nimport { ConfigurableAddresses } from \\\"./Dependencies/ConfigurableAddresses.sol\\\";\\n\\ncontract FlashLoan is\\n    IFlashLoan,\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable,\\n    ConfigurableAddresses,\\n    UUPSUpgradeable\\n{\\n    string public constant NAME = \\\"FlashLoan\\\";\\n\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n\\n    IUniswapRouterV3 public swapRouter;\\n    address public stableCoin;\\n\\n    bool public isSetupInitialized;\\n\\n    function initialize() public initializer {\\n        address initialOwner = _msgSender();\\n\\n        __Ownable_init(initialOwner);\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    // ------------------------------------------ Set functions -----------------------------------\\n\\n    function setInternalAddresses(address _stableCoin, address _swapRouter) external onlyOwner {\\n        if (isSetupInitialized) revert FlashLoan__SetupIsInitialized();\\n        if (_stableCoin == address(0) || _swapRouter == address(0)) {\\n            revert FlashLoan__ZeroAddresses();\\n        }\\n        stableCoin = _stableCoin;\\n        swapRouter = IUniswapRouterV3(_swapRouter);\\n\\n        isSetupInitialized = true;\\n\\n        emit AddressesSet(_stableCoin, _swapRouter);\\n    }\\n\\n    // ------------------------------------------ External functions ------------------------------\\n\\n    // Get a simple flash loan of trenUSD\\n    function flashLoan(uint256 _amount) external nonReentrant {\\n        if (IAdminContract(adminContract).getFlashLoanMinNetDebt() > _amount) {\\n            revert FlashLoan__AmountBeyondMin();\\n        }\\n        if (IAdminContract(adminContract).getFlashLoanMaxNetDebt() < _amount) {\\n            revert FlashLoan__AmountBeyondMax();\\n        }\\n\\n        mintTokens(_amount);\\n        uint256 balanceBefore = IDebtToken(debtToken).balanceOf(address(this));\\n        uint256 fee = calculateFee(_amount);\\n\\n        IDebtToken(debtToken).transfer(msg.sender, _amount);\\n\\n        IFlashLoanReceiver(msg.sender).executeOperation(_amount, fee, address(debtToken));\\n\\n        if (IDebtToken(debtToken).balanceOf(address(this)) < balanceBefore + fee) {\\n            revert FlashLoan__LoanIsNotRepayable();\\n        }\\n\\n        burnTokens(_amount);\\n        sendFeeToCollector();\\n\\n        emit FlashLoanExecuted(msg.sender, _amount, fee);\\n    }\\n\\n    function flashLoanForRepay(address _asset) external nonReentrant {\\n        if (!IAdminContract(adminContract).getIsActive(_asset)) {\\n            revert FlashLoan__CollateralIsNotActive();\\n        }\\n        uint256 debt = ITrenBoxManager(trenBoxManager).getTrenBoxDebt(_asset, msg.sender);\\n        uint256 gasCompensation = IAdminContract(adminContract).getDebtTokenGasCompensation(_asset);\\n        uint256 refund = IFeeCollector(feeCollector).simulateRefund(msg.sender, _asset, 1 ether);\\n        uint256 netDebt = debt - gasCompensation - refund;\\n\\n        mintTokens(netDebt);\\n\\n        IDebtToken(debtToken).transfer(msg.sender, netDebt);\\n\\n        uint256 fee = calculateFee(netDebt);\\n\\n        IBorrowerOperations(borrowerOperations).closeTrenBox(_asset); // TODO: push borr address\\n\\n        uint256 collAmountIn = IERC20(_asset).balanceOf(address(this));\\n        uint256 debtTokensToGet = netDebt + fee;\\n\\n        swapTokens(_asset, collAmountIn, debtTokensToGet);\\n\\n        if (IDebtToken(debtToken).balanceOf(address(this)) < debtTokensToGet) {\\n            revert FlashLoan__LoanIsNotRepayable();\\n        }\\n\\n        burnTokens(netDebt);\\n\\n        sendFeeToCollector();\\n\\n        emit FlashLoanExecuted(msg.sender, netDebt, fee);\\n    }\\n\\n    function getFlashLoanRate() external view returns (uint256) {\\n        return IAdminContract(adminContract).getFlashLoanFee();\\n    }\\n\\n    function authorizeUpgrade(address newImplementation) public {\\n        _authorizeUpgrade(newImplementation);\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner { }\\n\\n    // ------------------------------------------ Private functions -------------------------------\\n\\n    function calculateFee(uint256 _amount) private view returns (uint256) {\\n        uint256 _feeRate = IAdminContract(adminContract).getFlashLoanFee();\\n        return (_amount * _feeRate) / FEE_DENOMINATOR;\\n    }\\n\\n    function sendFeeToCollector() private {\\n        address collector = IFeeCollector(feeCollector).getProtocolRevenueDestination();\\n        uint256 feeAmount = IDebtToken(debtToken).balanceOf(address(this));\\n        IDebtToken(debtToken).transfer(collector, feeAmount);\\n    }\\n\\n    function mintTokens(uint256 _amount) private {\\n        IDebtToken(debtToken).mintFromWhitelistedContract(_amount);\\n    }\\n\\n    function burnTokens(uint256 _amount) private {\\n        IDebtToken(debtToken).burnFromWhitelistedContract(_amount);\\n    }\\n\\n    function swapTokens(address _tokenIn, uint256 _collAmountIn, uint256 _debtAmountOut) private {\\n        // Approve swapRouter to spend amountInMaximum\\n        IERC20(_tokenIn).approve(address(swapRouter), _collAmountIn);\\n\\n        // The tokenIn/tokenOut field is the shared token between the two pools used in the multiple\\n        // pool swap. In this case stable coin is the \\\"shared\\\" token.\\n        // For an exactOutput swap, the first swap that occurs is the swap which returns the\\n        // eventual desired token.\\n        // In this case, our desired output token is debtToken so that swap happpens first, and is\\n        // encoded in the path accordingly.\\n        IUniswapRouterV3.ExactOutputParams memory params = IUniswapRouterV3.ExactOutputParams({\\n            path: abi.encodePacked(address(debtToken), uint24(3000), stableCoin, uint24(3000), _tokenIn),\\n            recipient: address(this),\\n            deadline: block.timestamp,\\n            amountOut: _debtAmountOut,\\n            amountInMaximum: _collAmountIn\\n        });\\n\\n        // Executes the swap, returning the amountIn actually spent.\\n        uint256 amountIn = swapRouter.exactOutput(params);\\n\\n        // If the swap did not require the full _collAmountIn to achieve the exact amountOut then we\\n        // refund msg.sender and approve the router to spend 0.\\n        if (amountIn < _collAmountIn) {\\n            IERC20(_tokenIn).approve(address(swapRouter), 0);\\n            IERC20(_tokenIn).transfer(msg.sender, _collAmountIn - amountIn);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7b967b31f7724e9bafc039d20dd50c04a2aa602b3246be479997f31d068bfc80\",\"license\":\"MIT\"},\"contracts/Interfaces/IAdminContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IAdminContract {\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    struct CollateralParams {\\n        uint256 decimals;\\n        uint256 index; // Maps to token address in validCollateral[]\\n        bool active;\\n        uint256 borrowingFee;\\n        uint256 ccr;\\n        uint256 mcr;\\n        uint256 debtTokenGasCompensation; // Amount of debtToken to be locked in gas pool on opening\\n            // trenBoxes\\n        uint256 minNetDebt; // Minimum amount of net debtToken a trenBox must have\\n        uint256 mintCap;\\n        uint256 percentDivisor;\\n        uint256 redemptionFeeFloor;\\n        uint256 redemptionBlockTimestamp;\\n    }\\n\\n    struct FlashLoanParams {\\n        uint256 flashLoanFee; // 10 = 0,1%, 100 = 10% => 10 out of $1000 = $10\\n        uint256 flashLoanMinDebt; // min amount of trenUSD to mint for Flash Loan\\n        uint256 flashLoanMaxDebt; // max amount of trenUSD to mint for Flash Loan\\n    }\\n\\n    // Custom Errors\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    error SafeCheckError(string parameter, uint256 valueEntered, uint256 minValue, uint256 maxValue);\\n    error AdminContract__OnlyOwner();\\n    error AdminContract__OnlyTimelock();\\n    error AdminContract__CollateralAlreadyInitialized();\\n    error AdminContract__CollateralExists();\\n    error AdminContract__CollateralDoesNotExist();\\n    error AdminContract__CollateralNotConfigured();\\n\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    event CollateralAdded(address _collateral);\\n    event MCRChanged(uint256 oldMCR, uint256 newMCR);\\n    event CCRChanged(uint256 oldCCR, uint256 newCCR);\\n    event MinNetDebtChanged(uint256 oldMinNet, uint256 newMinNet);\\n    event PercentDivisorChanged(uint256 oldPercentDiv, uint256 newPercentDiv);\\n    event BorrowingFeeChanged(uint256 oldBorrowingFee, uint256 newBorrowingFee);\\n    event RedemptionFeeFloorChanged(uint256 oldRedemptionFeeFloor, uint256 newRedemptionFeeFloor);\\n    event MintCapChanged(uint256 oldMintCap, uint256 newMintCap);\\n    event RedemptionBlockTimestampChanged(address _collateral, uint256 _blockTimestamp);\\n    event FlashLoanFeeChanged(uint256 oldFee, uint256 newFee);\\n    event FlashLoanMinDebtChanged(uint256 oldMinDebt, uint256 newMinDebt);\\n    event FlashLoanMaxDebtChanged(uint256 oldMaxDebt, uint256 newMaxDebt);\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    function DECIMAL_PRECISION() external view returns (uint256);\\n\\n    function _100pct() external view returns (uint256);\\n\\n    function addNewCollateral(\\n        address _collateral,\\n        uint256 _debtTokenGasCompensation,\\n        uint256 _decimals\\n    )\\n        external;\\n\\n    function setCollateralParameters(\\n        address _collateral,\\n        uint256 borrowingFee,\\n        uint256 ccr,\\n        uint256 mcr,\\n        uint256 minNetDebt,\\n        uint256 mintCap,\\n        uint256 percentDivisor,\\n        uint256 redemptionFeeFloor\\n    )\\n        external;\\n\\n    function setMCR(address _collateral, uint256 newMCR) external;\\n\\n    function setCCR(address _collateral, uint256 newCCR) external;\\n\\n    function setMinNetDebt(address _collateral, uint256 minNetDebt) external;\\n\\n    function setPercentDivisor(address _collateral, uint256 precentDivisor) external;\\n\\n    function setBorrowingFee(address _collateral, uint256 borrowingFee) external;\\n\\n    function setRedemptionFeeFloor(address _collateral, uint256 redemptionFeeFloor) external;\\n\\n    function setMintCap(address _collateral, uint256 mintCap) external;\\n\\n    function setRedemptionBlockTimestamp(address _collateral, uint256 _blockTimestamp) external;\\n\\n    function getIndex(address _collateral) external view returns (uint256);\\n\\n    function getIsActive(address _collateral) external view returns (bool);\\n\\n    function getValidCollateral() external view returns (address[] memory);\\n\\n    function getMcr(address _collateral) external view returns (uint256);\\n\\n    function getCcr(address _collateral) external view returns (uint256);\\n\\n    function getDebtTokenGasCompensation(address _collateral) external view returns (uint256);\\n\\n    function getMinNetDebt(address _collateral) external view returns (uint256);\\n\\n    function getPercentDivisor(address _collateral) external view returns (uint256);\\n\\n    function getBorrowingFee(address _collateral) external view returns (uint256);\\n\\n    function getRedemptionFeeFloor(address _collateral) external view returns (uint256);\\n\\n    function getRedemptionBlockTimestamp(address _collateral) external view returns (uint256);\\n\\n    function getMintCap(address _collateral) external view returns (uint256);\\n\\n    function getTotalAssetDebt(address _asset) external view returns (uint256);\\n\\n    function getFlashLoanFee() external view returns (uint256);\\n\\n    function getFlashLoanMinNetDebt() external view returns (uint256);\\n\\n    function getFlashLoanMaxNetDebt() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5f98c866a63d63b59693a26e2f8a7df6da6c3d4a20514435834298758198db05\",\"license\":\"MIT\"},\"contracts/Interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface IBorrowerOperations {\\n    // --- Enums ---\\n    enum BorrowerOperation {\\n        openTrenBox,\\n        closeTrenBox,\\n        adjustTrenBox\\n    }\\n\\n    // --- Events ---\\n\\n    event BorrowingFeePaid(address indexed _asset, address indexed _borrower, uint256 _feeAmount);\\n    event TrenBoxCreated(address indexed _asset, address indexed _borrower, uint256 arrayIndex);\\n    event TrenBoxUpdated(\\n        address indexed _asset,\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 stake,\\n        BorrowerOperation operation\\n    );\\n\\n    // --- Functions ---\\n\\n    function openTrenBox(\\n        address _asset,\\n        uint256 _assetAmount,\\n        uint256 _debtTokenAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external;\\n\\n    function addColl(\\n        address _asset,\\n        uint256 _assetSent,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external;\\n\\n    function withdrawColl(\\n        address _asset,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external;\\n\\n    function withdrawDebtTokens(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external;\\n\\n    function repayDebtTokens(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external;\\n\\n    function closeTrenBox(address _asset) external;\\n\\n    function adjustTrenBox(\\n        address _asset,\\n        uint256 _assetSent,\\n        uint256 _collWithdrawal,\\n        uint256 _debtChange,\\n        bool isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external;\\n\\n    function claimCollateral(address _asset) external;\\n\\n    function getCompositeDebt(address _asset, uint256 _debt) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9790073652b09a0adf0f81fdd3227b0330260934b671c83c1d657a3d5c818900\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDebtToken is IERC20 {\\n    event TokenBalanceUpdated(address _user, uint256 _amount);\\n    event EmergencyStopMintingCollateral(address _asset, bool state);\\n    event WhitelistChanged(address _whitelisted, bool whitelisted);\\n    event ProtocolContractsAddressesSet(\\n        address borrowerOperations, address stabilityPool, address trenBoxManager\\n    );\\n\\n    error DebtToken__MintBlockedForCollateral(address collateral);\\n    error DebtToken__InvalidAddressToConnect();\\n    error DebtToken__CannotTransferTokensToZeroAddress();\\n    error DebtToken__CannotTransferTokensToTokenContract();\\n    error DebtToken__NotWhitelistedContract(address notWhitelistedContract);\\n    error DebtToken__CallerIsNotBorrowerOperations(address caller);\\n    error DebtToken__CallerIsNotStabilityPool(address caller);\\n    error DebtToken__CannotBurnTokens();\\n    error DebtToken__CannotReturnFromPool();\\n\\n    function emergencyStopMinting(address _asset, bool status) external;\\n\\n    function mint(address _asset, address _account, uint256 _amount) external;\\n\\n    function mintFromWhitelistedContract(uint256 _amount) external;\\n\\n    function burnFromWhitelistedContract(uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function sendToPool(address _sender, address poolAddress, uint256 _amount) external;\\n\\n    function returnFromPool(address poolAddress, address user, uint256 _amount) external;\\n\\n    function addWhitelist(address _address) external;\\n\\n    function removeWhitelist(address _address) external;\\n}\\n\",\"keccak256\":\"0x4c48896e514f0900029e5b4433bbb627cf2aea7102f792cac729ca9cd79782d1\",\"license\":\"MIT\"},\"contracts/Interfaces/IFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface IFeeCollector {\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    event FeeRecordUpdated(\\n        address borrower, address asset, uint256 from, uint256 to, uint256 amount\\n    );\\n    event FeeCollected(address borrower, address asset, address collector, uint256 amount);\\n    event FeeRefunded(address borrower, address asset, uint256 amount);\\n    event RedemptionFeeCollected(address asset, uint256 amount);\\n\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    struct FeeRecord {\\n        uint256 from; // timestamp in seconds\\n        uint256 to; // timestamp in seconds\\n        uint256 amount; // refundable fee amount\\n    }\\n\\n    // Custom Errors\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    error FeeCollector__ArrayMismatch();\\n    error FeeCollector__BorrowerOperationsOnly(address sender, address expected);\\n    error FeeCollector__BorrowerOperationsOrTrenBoxManagerOnly(\\n        address sender, address expected1, address expected2\\n    );\\n    error FeeCollector__InvalidTRENStakingAddress();\\n    error FeeCollector__TrenBoxManagerOnly(address sender, address expected);\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    function increaseDebt(address _borrower, address _asset, uint256 _feeAmount) external;\\n\\n    function decreaseDebt(address _borrower, address _asset, uint256 _paybackFraction) external;\\n\\n    function closeDebt(address _borrower, address _asset) external;\\n\\n    function liquidateDebt(address _borrower, address _asset) external;\\n\\n    function simulateRefund(\\n        address _borrower,\\n        address _asset,\\n        uint256 _paybackFraction\\n    )\\n        external\\n        returns (uint256);\\n\\n    function collectFees(address[] calldata _borrowers, address[] calldata _assets) external;\\n\\n    function handleRedemptionFee(address _asset, uint256 _amount) external;\\n\\n    function getProtocolRevenueDestination() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4acb0589d73afd26dd9ea281eef5052818955b501f2371c21a1acac953bf5152\",\"license\":\"MIT\"},\"contracts/Interfaces/IFlashLoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IFlashLoan {\\n    error FlashLoan__SetupIsInitialized();\\n    error FlashLoan__ZeroAddresses();\\n    error FlashLoan__LoanIsNotRepayable();\\n    error FlashLoan__AmountBeyondMin();\\n    error FlashLoan__AmountBeyondMax();\\n    error FlashLoan__CollateralIsNotActive();\\n\\n    event FlashLoanExecuted(\\n        address indexed _borrower, uint256 indexed _debtAmount, uint256 _feeAmount\\n    );\\n    event AddressesSet(address _stableCoin, address _swapRouter);\\n\\n    function flashLoan(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xa3cf648df656b54e5deab5eee873dfbc16dd09be099d2fba695230cb14d84ae9\",\"license\":\"MIT\"},\"contracts/Interfaces/IFlashLoanReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IFlashLoanReceiver {\\n    function executeOperation(uint256 _amount, uint256 _fee, address _debtToken) external;\\n}\\n\",\"keccak256\":\"0xec5f2ba39621ea603205c610cc0f443ba4d2de4c50deccedd169ef7ba17b9419\",\"license\":\"MIT\"},\"contracts/Interfaces/ITrenBoxManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface ITrenBoxManager {\\n    // Enums\\n    // ------------------------------------------------------------------------------------------------------------\\n\\n    enum Status {\\n        nonExistent,\\n        active,\\n        closedByOwner,\\n        closedByLiquidation,\\n        closedByRedemption\\n    }\\n\\n    enum TrenBoxManagerOperation {\\n        applyPendingRewards,\\n        liquidateInNormalMode,\\n        liquidateInRecoveryMode,\\n        redeemCollateral\\n    }\\n\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    event BaseRateUpdated(address indexed _asset, uint256 _baseRate);\\n    event LastFeeOpTimeUpdated(address indexed _asset, uint256 _lastFeeOpTime);\\n    event TotalStakesUpdated(address indexed _asset, uint256 _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        address indexed _asset, uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(address indexed _asset, uint256 _L_Coll, uint256 _L_Debt);\\n    event TrenBoxSnapshotsUpdated(address indexed _asset, uint256 _L_Coll, uint256 _L_Debt);\\n    event TrenBoxIndexUpdated(address indexed _asset, address _borrower, uint256 _newIndex);\\n\\n    event TrenBoxUpdated(\\n        address indexed _asset,\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 _stake,\\n        TrenBoxManagerOperation _operation\\n    );\\n\\n    // Custom Errors\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    error TrenBoxManager__FeeBiggerThanAssetDraw();\\n    error TrenBoxManager__OnlyOneTrenBox();\\n\\n    error TrenBoxManager__OnlyTrenBoxManagerOperations();\\n    error TrenBoxManager__OnlyBorrowerOperations();\\n    error TrenBoxManager__OnlyTrenBoxManagerOperationsOrBorrowerOperations();\\n\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    struct TrenBox {\\n        uint256 debt;\\n        uint256 coll;\\n        uint256 stake;\\n        Status status;\\n        uint128 arrayIndex;\\n    }\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    function executeFullRedemption(address _asset, address _borrower, uint256 _newColl) external;\\n\\n    function executePartialRedemption(\\n        address _asset,\\n        address _borrower,\\n        uint256 _newDebt,\\n        uint256 _newColl,\\n        uint256 _newNICR,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint\\n    )\\n        external;\\n\\n    function getTrenBoxOwnersCount(address _asset) external view returns (uint256);\\n\\n    function getTrenBoxFromTrenBoxOwnersArray(\\n        address _asset,\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (address);\\n\\n    function getNominalICR(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getCurrentICR(\\n        address _asset,\\n        address _borrower,\\n        uint256 _price\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function updateStakeAndTotalStakes(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        returns (uint256);\\n\\n    function updateTrenBoxRewardSnapshots(address _asset, address _borrower) external;\\n\\n    function addTrenBoxOwnerToArray(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        returns (uint256 index);\\n\\n    function applyPendingRewards(address _asset, address _borrower) external;\\n\\n    function getPendingAssetReward(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPendingDebtTokenReward(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function hasPendingRewards(address _asset, address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 debt,\\n            uint256 coll,\\n            uint256 pendingDebtTokenReward,\\n            uint256 pendingAssetReward\\n        );\\n\\n    function closeTrenBox(address _asset, address _borrower) external;\\n\\n    function closeTrenBoxLiquidation(address _asset, address _borrower) external;\\n\\n    function removeStake(address _asset, address _borrower) external;\\n\\n    function getRedemptionRate(address _asset) external view returns (uint256);\\n\\n    function getRedemptionRateWithDecay(address _asset) external view returns (uint256);\\n\\n    function getRedemptionFeeWithDecay(\\n        address _asset,\\n        uint256 _assetDraw\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getBorrowingRate(address _asset) external view returns (uint256);\\n\\n    function getBorrowingFee(\\n        address _asset,\\n        uint256 _debtTokenAmount\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTrenBoxStatus(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getTrenBoxStake(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getTrenBoxDebt(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getTrenBoxColl(address _asset, address _borrower) external view returns (uint256);\\n\\n    function setTrenBoxStatus(address _asset, address _borrower, uint256 num) external;\\n\\n    function increaseTrenBoxColl(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collIncrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function decreaseTrenBoxColl(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collDecrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function increaseTrenBoxDebt(\\n        address _asset,\\n        address _borrower,\\n        uint256 _debtIncrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function decreaseTrenBoxDebt(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collDecrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function getTCR(address _asset, uint256 _price) external view returns (uint256);\\n\\n    function checkRecoveryMode(address _asset, uint256 _price) external returns (bool);\\n\\n    function isValidFirstRedemptionHint(\\n        address _asset,\\n        address _firstRedemptionHint,\\n        uint256 _price\\n    )\\n        external\\n        returns (bool);\\n\\n    function updateBaseRateFromRedemption(\\n        address _asset,\\n        uint256 _assetDrawn,\\n        uint256 _price,\\n        uint256 _totalDebtTokenSupply\\n    )\\n        external;\\n\\n    function getRedemptionFee(address _asset, uint256 _assetDraw) external view returns (uint256);\\n\\n    function finalizeRedemption(\\n        address _asset,\\n        address _receiver,\\n        uint256 _debtToRedeem,\\n        uint256 _fee,\\n        uint256 _totalRedemptionRewards\\n    )\\n        external;\\n\\n    function redistributeDebtAndColl(\\n        address _asset,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 _debtToOffset,\\n        uint256 _collToSendToStabilityPool\\n    )\\n        external;\\n\\n    function updateSystemSnapshots_excludeCollRemainder(\\n        address _asset,\\n        uint256 _collRemainder\\n    )\\n        external;\\n\\n    function movePendingTrenBoxRewardsToActivePool(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        uint256 _assetAmount\\n    )\\n        external;\\n\\n    function isTrenBoxActive(address _asset, address _borrower) external view returns (bool);\\n\\n    function sendGasCompensation(\\n        address _asset,\\n        address _liquidator,\\n        uint256 _debtTokenAmount,\\n        uint256 _assetAmount\\n    )\\n        external;\\n\\n    function getNetDebt(address _asset, uint256 _debt) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x183a49a4fefc8f74c19327281dfaa9c88745695efad43225fb8d1411e4c47377\",\"license\":\"MIT\"},\"contracts/Interfaces/IUniswapRouterV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\npragma abicoder v2;\\n\\ninterface IUniswapRouterV3 {\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    function exactOutput(ExactOutputParams memory params) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x46679398489bca131603da49d9b7bee7a286ad230d7cbd6f43560c3133e2668b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5060805161267c61003e6000396000818161191c015281816119450152611a8b015261267c6000f3fe6080604052600436106102305760003560e01c8063992642e51161012e578063c5f956af116100ab578063f1c05a7e1161006f578063f1c05a7e146106c1578063f2fde38b146106e1578063f8d8989814610701578063fe06073314610721578063fe9d03231461074157600080fd5b8063c5f956af1461062a578063c8564c621461064a578063cc8b21e41461066b578063cda775f91461068b578063d73792a9146106ab57600080fd5b8063ad3cb1cc116100f2578063ad3cb1cc14610579578063b9571721146105aa578063c05c5e94146105ca578063c31c9c07146105ea578063c415b95c1461060a57600080fd5b8063992642e5146104a65780639ab603b9146104c6578063a142f35a146104e6578063a2e61b7b14610517578063a3f4df7e1461053757600080fd5b806358fd44a5116101bc5780637f7dde4a116101805780637f7dde4a146103ff5780638129fc1c1461041f5780638da5cb5b1461043457806390681ad31461047157806395fb16bb1461048657600080fd5b806358fd44a51461036a5780636a85d67d1461038a578063715018a6146103aa578063741bef1a146103bf57806377553ad4146103df57600080fd5b80634169467d116102035780634169467d146102d45780634bc66f32146102f45780634f1ef2861461031457806352d1902d1461032757806355dafa461461034a57600080fd5b806301c9310014610235578063048c661d146102575780630a34d4d6146102945780633cc74225146102b4575b600080fd5b34801561024157600080fd5b506102556102503660046122d7565b610761565b005b34801561026357600080fd5b50600d54610277906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102a057600080fd5b50601154610277906001600160a01b031681565b3480156102c057600080fd5b50600654610277906001600160a01b031681565b3480156102e057600080fd5b50600854610277906001600160a01b031681565b34801561030057600080fd5b50600e54610277906001600160a01b031681565b61025561032236600461230a565b6107b2565b34801561033357600080fd5b5061033c6107d1565b60405190815260200161028b565b34801561035657600080fd5b50600a54610277906001600160a01b031681565b34801561037657600080fd5b506102556103853660046123ce565b6107ee565b34801561039657600080fd5b506102556103a53660046122d7565b6108d9565b3480156103b657600080fd5b5061025561092a565b3480156103cb57600080fd5b50600b54610277906001600160a01b031681565b3480156103eb57600080fd5b50600254610277906001600160a01b031681565b34801561040b57600080fd5b50600054610277906001600160a01b031681565b34801561042b57600080fd5b5061025561093e565b34801561044057600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b0316610277565b34801561047d57600080fd5b5061033c610a57565b34801561049257600080fd5b50600454610277906001600160a01b031681565b3480156104b257600080fd5b50603454610277906001600160a01b031681565b3480156104d257600080fd5b506102556104e1366004612407565b610aca565b3480156104f257600080fd5b5060345461050790600160a01b900460ff1681565b604051901515815260200161028b565b34801561052357600080fd5b506102556105323660046122d7565b610e5c565b34801561054357600080fd5b5061056c60405180604001604052806009815260200168233630b9b42637b0b760b91b81525081565b60405161028b9190612470565b34801561058557600080fd5b5061056c604051806040016040528060058152602001640352e302e360dc1b81525081565b3480156105b657600080fd5b506102556105c5366004612483565b6112f1565b3480156105d657600080fd5b50600154610277906001600160a01b031681565b3480156105f657600080fd5b50603354610277906001600160a01b031681565b34801561061657600080fd5b50600754610277906001600160a01b031681565b34801561063657600080fd5b50600f54610277906001600160a01b031681565b34801561065657600080fd5b5060115461050790600160a01b900460ff1681565b34801561067757600080fd5b50600c54610277906001600160a01b031681565b34801561069757600080fd5b50600354610277906001600160a01b031681565b3480156106b757600080fd5b5061033c6103e881565b3480156106cd57600080fd5b50601054610277906001600160a01b031681565b3480156106ed57600080fd5b506102556106fc3660046122d7565b611872565b34801561070d57600080fd5b50600554610277906001600160a01b031681565b34801561072d57600080fd5b5061025561073c3660046122d7565b6118ad565b34801561074d57600080fd5b50600954610277906001600160a01b031681565b6107696118b6565b6001600160a01b038116610790576040516385d3330760e01b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6107ba611911565b6107c3826119b6565b6107cd82826119be565b5050565b60006107db611a80565b5060008051602061265083398151915290565b6107f66118b6565b603454600160a01b900460ff16156108215760405163afe60fe960e01b815260040160405180910390fd5b6001600160a01b038216158061083e57506001600160a01b038116155b1561085c5760405163cc8d850960e01b815260040160405180910390fd5b60348054603380546001600160a01b038581166001600160a01b031990921682179092556001600160a81b0319909216908516908117600160a01b179092556040805192835260208301919091527fc85d03f020ecd6e7e68d949922d7bfbf9b0ac67d6e9d24792773b8df88a89dea910160405180910390a15050565b6108e16118b6565b6001600160a01b0381166109085760405163706ebc6560e11b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6109326118b6565b61093c6000611ac9565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156109845750825b905060008267ffffffffffffffff1660011480156109a15750303b155b9050811580156109af575080155b156109cd5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156109f757845460ff60401b1916600160401b1785555b33610a0181611b3a565b610a09611b4b565b508315610a5057845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b60015460408051637ec8615f60e11b815290516000926001600160a01b03169163fd90c2be9160048083019260209291908290030181865afa158015610aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac591906124f8565b905090565b610ad2611b53565b60015460408051632416b72d60e01b8152905183926001600160a01b031691632416b72d9160048083019260209291908290030181865afa158015610b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3f91906124f8565b1115610b5e57604051637e77404960e01b815260040160405180910390fd5b60015460408051630f8624d760e21b8152905183926001600160a01b031691633e18935c9160048083019260209291908290030181865afa158015610ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcb91906124f8565b1015610bea5760405163ee7328bf60e01b815260040160405180910390fd5b610bf381611b9d565b6005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6091906124f8565b90506000610c6d83611bf8565b60055460405163a9059cbb60e01b8152336004820152602481018690529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610cbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce39190612511565b50600554604051636b4a653b60e11b815260048101859052602481018390526001600160a01b039091166044820152339063d694ca7690606401600060405180830381600087803b158015610d3757600080fd5b505af1158015610d4b573d6000803e3d6000fd5b505050508082610d5b9190612549565b6005546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc791906124f8565b1015610de657604051639d29765b60e01b815260040160405180910390fd5b610def83611c92565b610df7611cc3565b604051818152839033907f61268d74931c41c9775dffb6169a5208aab1d09cb2eb6aabe8b97162801e5dfa9060200160405180910390a35050610e5960017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b50565b610e64611b53565b6001546040516317ae1fc560e01b81526001600160a01b038381166004830152909116906317ae1fc590602401602060405180830381865afa158015610eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed29190612511565b610eef5760405163f4cdefa560e01b815260040160405180910390fd5b60105460405163f9a3d41f60e01b81526001600160a01b038381166004830152336024830152600092169063f9a3d41f90604401602060405180830381865afa158015610f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6491906124f8565b60015460405163c08261db60e01b81526001600160a01b0385811660048301529293506000929091169063c08261db90602401602060405180830381865afa158015610fb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd891906124f8565b6007546040516320e3d2f760e11b81523360048201526001600160a01b038681166024830152670de0b6b3a76400006044830152929350600092909116906341c7a5ee906064016020604051808303816000875af115801561103e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106291906124f8565b9050600081611071848661255c565b61107b919061255c565b905061108681611b9d565b60055460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156110d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fb9190612511565b50600061110782611bf8565b6002546040516360a7054560e11b81526001600160a01b03898116600483015292935091169063c14e0a8a90602401600060405180830381600087803b15801561115057600080fd5b505af1158015611164573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03891691506370a0823190602401602060405180830381865afa1580156111af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d391906124f8565b905060006111e18385612549565b90506111ee888383611e1c565b6005546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015611236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125a91906124f8565b101561127957604051639d29765b60e01b815260040160405180910390fd5b61128284611c92565b61128a611cc3565b604051838152849033907f61268d74931c41c9775dffb6169a5208aab1d09cb2eb6aabe8b97162801e5dfa9060200160405180910390a350505050505050610e5960017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b6112f96118b6565b601154600160a01b900460ff161561132357604051625f22e960e41b815260040160405180910390fd5b6010811461134457604051633f5a111d60e21b815260040160405180910390fd5b60005b60108110156113e75760008383838181106113645761136461256f565b905060200201602081019061137991906122d7565b6001600160a01b0316036113df578083838381811061139a5761139a61256f565b90506020020160208101906113af91906122d7565b604051630d9d339f60e01b815260048101929092526001600160a01b031660248201526044015b60405180910390fd5b600101611347565b50818160008181106113fb576113fb61256f565b905060200201602081019061141091906122d7565b600080546001600160a01b0319166001600160a01b0392909216919091179055818160018181106114435761144361256f565b905060200201602081019061145891906122d7565b600180546001600160a01b0319166001600160a01b03929092169190911790558181600281811061148b5761148b61256f565b90506020020160208101906114a091906122d7565b600280546001600160a01b0319166001600160a01b0392909216919091179055818160038181106114d3576114d361256f565b90506020020160208101906114e891906122d7565b600380546001600160a01b0319166001600160a01b03929092169190911790558181600481811061151b5761151b61256f565b905060200201602081019061153091906122d7565b600580546001600160a01b0319166001600160a01b0392909216919091178155829082908181106115635761156361256f565b905060200201602081019061157891906122d7565b600680546001600160a01b0319166001600160a01b0392909216919091178155829082908181106115ab576115ab61256f565b90506020020160208101906115c091906122d7565b600780546001600160a01b0319166001600160a01b0392909216919091178155829082908181106115f3576115f361256f565b905060200201602081019061160891906122d7565b600880546001600160a01b0319166001600160a01b03929092169190911781558290829081811061163b5761163b61256f565b905060200201602081019061165091906122d7565b600980546001600160a01b0319166001600160a01b0392909216919091178155829082908181106116835761168361256f565b905060200201602081019061169891906122d7565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a8181106116cb576116cb61256f565b90506020020160208101906116e091906122d7565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b8181106117135761171361256f565b905060200201602081019061172891906122d7565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c81811061175b5761175b61256f565b905060200201602081019061177091906122d7565b600e80546001600160a01b0319166001600160a01b03929092169190911790558181600d8181106117a3576117a361256f565b90506020020160208101906117b891906122d7565b600f80546001600160a01b0319166001600160a01b03929092169190911790558181600e8181106117eb576117eb61256f565b905060200201602081019061180091906122d7565b601080546001600160a01b0319166001600160a01b03929092169190911790558181600f8181106118335761183361256f565b905060200201602081019061184891906122d7565b601180546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b61187a6118b6565b6001600160a01b0381166118a457604051631e4fbdf760e01b8152600060048201526024016113d6565b610e5981611ac9565b610e59816119b6565b336118e87f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b03161461093c5760405163118cdaa760e01b81523360048201526024016113d6565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061199857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661198c600080516020612650833981519152546001600160a01b031690565b6001600160a01b031614155b1561093c5760405163703e46dd60e11b815260040160405180910390fd5b610e596118b6565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611a18575060408051601f3d908101601f19168201909252611a15918101906124f8565b60015b611a4057604051634c9c8ce360e01b81526001600160a01b03831660048201526024016113d6565b6000805160206126508339815191528114611a7157604051632a87526960e21b8152600481018290526024016113d6565b611a7b838361209a565b505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461093c5760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b611b426120f0565b610e5981612139565b61093c6120f0565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805460011901611b9757604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b600554604051637bfa6ced60e11b8152600481018390526001600160a01b039091169063f7f4d9da906024015b600060405180830381600087803b158015611be457600080fd5b505af1158015610a50573d6000803e3d6000fd5b600080600160009054906101000a90046001600160a01b03166001600160a01b031663fd90c2be6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7291906124f8565b90506103e8611c818285612585565b611c8b919061259c565b9392505050565b600554604051635cad563b60e11b8152600481018390526001600160a01b039091169063b95aac7690602401611bca565b6007546040805163039e4def60e51b815290516000926001600160a01b0316916373c9bde09160048083019260209291908290030181865afa158015611d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3191906125be565b6005546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da391906124f8565b60055460405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af1158015611df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7b9190612511565b60335460405163095ea7b360e01b81526001600160a01b039182166004820152602481018490529084169063095ea7b3906044016020604051808303816000875af1158015611e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e939190612511565b506040805160a0810182526005546034546bffffffffffffffffffffffff19606092831b811660c085015261017760eb1b60d4850181905291831b811660d785015260eb84019190915286821b1660ee830152825180830360e201815261010283018452825230602083015242828401528101839052608081018490526033549151631e51809360e31b815290916000916001600160a01b039091169063f28c049890611f449085906004016125db565b6020604051808303816000875af1158015611f63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8791906124f8565b905083811015610a505760335460405163095ea7b360e01b81526001600160a01b039182166004820152600060248201529086169063095ea7b3906044016020604051808303816000875af1158015611fe4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120089190612511565b506001600160a01b03851663a9059cbb33612023848861255c565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561206e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120929190612511565b505050505050565b6120a382612141565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156120e857611a7b82826121a6565b6107cd61221e565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661093c57604051631afcd79f60e31b815260040160405180910390fd5b61187a6120f0565b806001600160a01b03163b60000361217757604051634c9c8ce360e01b81526001600160a01b03821660048201526024016113d6565b60008051602061265083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516121c39190612633565b600060405180830381855af49150503d80600081146121fe576040519150601f19603f3d011682016040523d82523d6000602084013e612203565b606091505b509150915061221385838361223d565b925050505b92915050565b341561093c5760405163b398979f60e01b815260040160405180910390fd5b6060826122525761224d82612299565b611c8b565b815115801561226957506001600160a01b0384163b155b1561229257604051639996b31560e01b81526001600160a01b03851660048201526024016113d6565b5092915050565b8051156122a95780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b0381168114610e5957600080fd5b6000602082840312156122e957600080fd5b8135611c8b816122c2565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561231d57600080fd5b8235612328816122c2565b9150602083013567ffffffffffffffff8082111561234557600080fd5b818501915085601f83011261235957600080fd5b81358181111561236b5761236b6122f4565b604051601f8201601f19908116603f01168101908382118183101715612393576123936122f4565b816040528281528860208487010111156123ac57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080604083850312156123e157600080fd5b82356123ec816122c2565b915060208301356123fc816122c2565b809150509250929050565b60006020828403121561241957600080fd5b5035919050565b60005b8381101561243b578181015183820152602001612423565b50506000910152565b6000815180845261245c816020860160208601612420565b601f01601f19169290920160200192915050565b602081526000611c8b6020830184612444565b6000806020838503121561249657600080fd5b823567ffffffffffffffff808211156124ae57600080fd5b818501915085601f8301126124c257600080fd5b8135818111156124d157600080fd5b8660208260051b85010111156124e657600080fd5b60209290920196919550909350505050565b60006020828403121561250a57600080fd5b5051919050565b60006020828403121561252357600080fd5b81518015158114611c8b57600080fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561221857612218612533565b8181038181111561221857612218612533565b634e487b7160e01b600052603260045260246000fd5b808202811582820484141761221857612218612533565b6000826125b957634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156125d057600080fd5b8151611c8b816122c2565b602081526000825160a060208401526125f760c0840182612444565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b60008251612645818460208701612420565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca164736f6c6343000817000a",
  "deployedBytecode": "0x6080604052600436106102305760003560e01c8063992642e51161012e578063c5f956af116100ab578063f1c05a7e1161006f578063f1c05a7e146106c1578063f2fde38b146106e1578063f8d8989814610701578063fe06073314610721578063fe9d03231461074157600080fd5b8063c5f956af1461062a578063c8564c621461064a578063cc8b21e41461066b578063cda775f91461068b578063d73792a9146106ab57600080fd5b8063ad3cb1cc116100f2578063ad3cb1cc14610579578063b9571721146105aa578063c05c5e94146105ca578063c31c9c07146105ea578063c415b95c1461060a57600080fd5b8063992642e5146104a65780639ab603b9146104c6578063a142f35a146104e6578063a2e61b7b14610517578063a3f4df7e1461053757600080fd5b806358fd44a5116101bc5780637f7dde4a116101805780637f7dde4a146103ff5780638129fc1c1461041f5780638da5cb5b1461043457806390681ad31461047157806395fb16bb1461048657600080fd5b806358fd44a51461036a5780636a85d67d1461038a578063715018a6146103aa578063741bef1a146103bf57806377553ad4146103df57600080fd5b80634169467d116102035780634169467d146102d45780634bc66f32146102f45780634f1ef2861461031457806352d1902d1461032757806355dafa461461034a57600080fd5b806301c9310014610235578063048c661d146102575780630a34d4d6146102945780633cc74225146102b4575b600080fd5b34801561024157600080fd5b506102556102503660046122d7565b610761565b005b34801561026357600080fd5b50600d54610277906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102a057600080fd5b50601154610277906001600160a01b031681565b3480156102c057600080fd5b50600654610277906001600160a01b031681565b3480156102e057600080fd5b50600854610277906001600160a01b031681565b34801561030057600080fd5b50600e54610277906001600160a01b031681565b61025561032236600461230a565b6107b2565b34801561033357600080fd5b5061033c6107d1565b60405190815260200161028b565b34801561035657600080fd5b50600a54610277906001600160a01b031681565b34801561037657600080fd5b506102556103853660046123ce565b6107ee565b34801561039657600080fd5b506102556103a53660046122d7565b6108d9565b3480156103b657600080fd5b5061025561092a565b3480156103cb57600080fd5b50600b54610277906001600160a01b031681565b3480156103eb57600080fd5b50600254610277906001600160a01b031681565b34801561040b57600080fd5b50600054610277906001600160a01b031681565b34801561042b57600080fd5b5061025561093e565b34801561044057600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b0316610277565b34801561047d57600080fd5b5061033c610a57565b34801561049257600080fd5b50600454610277906001600160a01b031681565b3480156104b257600080fd5b50603454610277906001600160a01b031681565b3480156104d257600080fd5b506102556104e1366004612407565b610aca565b3480156104f257600080fd5b5060345461050790600160a01b900460ff1681565b604051901515815260200161028b565b34801561052357600080fd5b506102556105323660046122d7565b610e5c565b34801561054357600080fd5b5061056c60405180604001604052806009815260200168233630b9b42637b0b760b91b81525081565b60405161028b9190612470565b34801561058557600080fd5b5061056c604051806040016040528060058152602001640352e302e360dc1b81525081565b3480156105b657600080fd5b506102556105c5366004612483565b6112f1565b3480156105d657600080fd5b50600154610277906001600160a01b031681565b3480156105f657600080fd5b50603354610277906001600160a01b031681565b34801561061657600080fd5b50600754610277906001600160a01b031681565b34801561063657600080fd5b50600f54610277906001600160a01b031681565b34801561065657600080fd5b5060115461050790600160a01b900460ff1681565b34801561067757600080fd5b50600c54610277906001600160a01b031681565b34801561069757600080fd5b50600354610277906001600160a01b031681565b3480156106b757600080fd5b5061033c6103e881565b3480156106cd57600080fd5b50601054610277906001600160a01b031681565b3480156106ed57600080fd5b506102556106fc3660046122d7565b611872565b34801561070d57600080fd5b50600554610277906001600160a01b031681565b34801561072d57600080fd5b5061025561073c3660046122d7565b6118ad565b34801561074d57600080fd5b50600954610277906001600160a01b031681565b6107696118b6565b6001600160a01b038116610790576040516385d3330760e01b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6107ba611911565b6107c3826119b6565b6107cd82826119be565b5050565b60006107db611a80565b5060008051602061265083398151915290565b6107f66118b6565b603454600160a01b900460ff16156108215760405163afe60fe960e01b815260040160405180910390fd5b6001600160a01b038216158061083e57506001600160a01b038116155b1561085c5760405163cc8d850960e01b815260040160405180910390fd5b60348054603380546001600160a01b038581166001600160a01b031990921682179092556001600160a81b0319909216908516908117600160a01b179092556040805192835260208301919091527fc85d03f020ecd6e7e68d949922d7bfbf9b0ac67d6e9d24792773b8df88a89dea910160405180910390a15050565b6108e16118b6565b6001600160a01b0381166109085760405163706ebc6560e11b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6109326118b6565b61093c6000611ac9565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156109845750825b905060008267ffffffffffffffff1660011480156109a15750303b155b9050811580156109af575080155b156109cd5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156109f757845460ff60401b1916600160401b1785555b33610a0181611b3a565b610a09611b4b565b508315610a5057845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b60015460408051637ec8615f60e11b815290516000926001600160a01b03169163fd90c2be9160048083019260209291908290030181865afa158015610aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac591906124f8565b905090565b610ad2611b53565b60015460408051632416b72d60e01b8152905183926001600160a01b031691632416b72d9160048083019260209291908290030181865afa158015610b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3f91906124f8565b1115610b5e57604051637e77404960e01b815260040160405180910390fd5b60015460408051630f8624d760e21b8152905183926001600160a01b031691633e18935c9160048083019260209291908290030181865afa158015610ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcb91906124f8565b1015610bea5760405163ee7328bf60e01b815260040160405180910390fd5b610bf381611b9d565b6005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6091906124f8565b90506000610c6d83611bf8565b60055460405163a9059cbb60e01b8152336004820152602481018690529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610cbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce39190612511565b50600554604051636b4a653b60e11b815260048101859052602481018390526001600160a01b039091166044820152339063d694ca7690606401600060405180830381600087803b158015610d3757600080fd5b505af1158015610d4b573d6000803e3d6000fd5b505050508082610d5b9190612549565b6005546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc791906124f8565b1015610de657604051639d29765b60e01b815260040160405180910390fd5b610def83611c92565b610df7611cc3565b604051818152839033907f61268d74931c41c9775dffb6169a5208aab1d09cb2eb6aabe8b97162801e5dfa9060200160405180910390a35050610e5960017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b50565b610e64611b53565b6001546040516317ae1fc560e01b81526001600160a01b038381166004830152909116906317ae1fc590602401602060405180830381865afa158015610eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed29190612511565b610eef5760405163f4cdefa560e01b815260040160405180910390fd5b60105460405163f9a3d41f60e01b81526001600160a01b038381166004830152336024830152600092169063f9a3d41f90604401602060405180830381865afa158015610f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6491906124f8565b60015460405163c08261db60e01b81526001600160a01b0385811660048301529293506000929091169063c08261db90602401602060405180830381865afa158015610fb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd891906124f8565b6007546040516320e3d2f760e11b81523360048201526001600160a01b038681166024830152670de0b6b3a76400006044830152929350600092909116906341c7a5ee906064016020604051808303816000875af115801561103e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106291906124f8565b9050600081611071848661255c565b61107b919061255c565b905061108681611b9d565b60055460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156110d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fb9190612511565b50600061110782611bf8565b6002546040516360a7054560e11b81526001600160a01b03898116600483015292935091169063c14e0a8a90602401600060405180830381600087803b15801561115057600080fd5b505af1158015611164573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03891691506370a0823190602401602060405180830381865afa1580156111af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d391906124f8565b905060006111e18385612549565b90506111ee888383611e1c565b6005546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015611236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125a91906124f8565b101561127957604051639d29765b60e01b815260040160405180910390fd5b61128284611c92565b61128a611cc3565b604051838152849033907f61268d74931c41c9775dffb6169a5208aab1d09cb2eb6aabe8b97162801e5dfa9060200160405180910390a350505050505050610e5960017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b6112f96118b6565b601154600160a01b900460ff161561132357604051625f22e960e41b815260040160405180910390fd5b6010811461134457604051633f5a111d60e21b815260040160405180910390fd5b60005b60108110156113e75760008383838181106113645761136461256f565b905060200201602081019061137991906122d7565b6001600160a01b0316036113df578083838381811061139a5761139a61256f565b90506020020160208101906113af91906122d7565b604051630d9d339f60e01b815260048101929092526001600160a01b031660248201526044015b60405180910390fd5b600101611347565b50818160008181106113fb576113fb61256f565b905060200201602081019061141091906122d7565b600080546001600160a01b0319166001600160a01b0392909216919091179055818160018181106114435761144361256f565b905060200201602081019061145891906122d7565b600180546001600160a01b0319166001600160a01b03929092169190911790558181600281811061148b5761148b61256f565b90506020020160208101906114a091906122d7565b600280546001600160a01b0319166001600160a01b0392909216919091179055818160038181106114d3576114d361256f565b90506020020160208101906114e891906122d7565b600380546001600160a01b0319166001600160a01b03929092169190911790558181600481811061151b5761151b61256f565b905060200201602081019061153091906122d7565b600580546001600160a01b0319166001600160a01b0392909216919091178155829082908181106115635761156361256f565b905060200201602081019061157891906122d7565b600680546001600160a01b0319166001600160a01b0392909216919091178155829082908181106115ab576115ab61256f565b90506020020160208101906115c091906122d7565b600780546001600160a01b0319166001600160a01b0392909216919091178155829082908181106115f3576115f361256f565b905060200201602081019061160891906122d7565b600880546001600160a01b0319166001600160a01b03929092169190911781558290829081811061163b5761163b61256f565b905060200201602081019061165091906122d7565b600980546001600160a01b0319166001600160a01b0392909216919091178155829082908181106116835761168361256f565b905060200201602081019061169891906122d7565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a8181106116cb576116cb61256f565b90506020020160208101906116e091906122d7565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b8181106117135761171361256f565b905060200201602081019061172891906122d7565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c81811061175b5761175b61256f565b905060200201602081019061177091906122d7565b600e80546001600160a01b0319166001600160a01b03929092169190911790558181600d8181106117a3576117a361256f565b90506020020160208101906117b891906122d7565b600f80546001600160a01b0319166001600160a01b03929092169190911790558181600e8181106117eb576117eb61256f565b905060200201602081019061180091906122d7565b601080546001600160a01b0319166001600160a01b03929092169190911790558181600f8181106118335761183361256f565b905060200201602081019061184891906122d7565b601180546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b61187a6118b6565b6001600160a01b0381166118a457604051631e4fbdf760e01b8152600060048201526024016113d6565b610e5981611ac9565b610e59816119b6565b336118e87f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b03161461093c5760405163118cdaa760e01b81523360048201526024016113d6565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061199857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661198c600080516020612650833981519152546001600160a01b031690565b6001600160a01b031614155b1561093c5760405163703e46dd60e11b815260040160405180910390fd5b610e596118b6565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611a18575060408051601f3d908101601f19168201909252611a15918101906124f8565b60015b611a4057604051634c9c8ce360e01b81526001600160a01b03831660048201526024016113d6565b6000805160206126508339815191528114611a7157604051632a87526960e21b8152600481018290526024016113d6565b611a7b838361209a565b505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461093c5760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b611b426120f0565b610e5981612139565b61093c6120f0565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805460011901611b9757604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b600554604051637bfa6ced60e11b8152600481018390526001600160a01b039091169063f7f4d9da906024015b600060405180830381600087803b158015611be457600080fd5b505af1158015610a50573d6000803e3d6000fd5b600080600160009054906101000a90046001600160a01b03166001600160a01b031663fd90c2be6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7291906124f8565b90506103e8611c818285612585565b611c8b919061259c565b9392505050565b600554604051635cad563b60e11b8152600481018390526001600160a01b039091169063b95aac7690602401611bca565b6007546040805163039e4def60e51b815290516000926001600160a01b0316916373c9bde09160048083019260209291908290030181865afa158015611d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3191906125be565b6005546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da391906124f8565b60055460405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af1158015611df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7b9190612511565b60335460405163095ea7b360e01b81526001600160a01b039182166004820152602481018490529084169063095ea7b3906044016020604051808303816000875af1158015611e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e939190612511565b506040805160a0810182526005546034546bffffffffffffffffffffffff19606092831b811660c085015261017760eb1b60d4850181905291831b811660d785015260eb84019190915286821b1660ee830152825180830360e201815261010283018452825230602083015242828401528101839052608081018490526033549151631e51809360e31b815290916000916001600160a01b039091169063f28c049890611f449085906004016125db565b6020604051808303816000875af1158015611f63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8791906124f8565b905083811015610a505760335460405163095ea7b360e01b81526001600160a01b039182166004820152600060248201529086169063095ea7b3906044016020604051808303816000875af1158015611fe4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120089190612511565b506001600160a01b03851663a9059cbb33612023848861255c565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561206e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120929190612511565b505050505050565b6120a382612141565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156120e857611a7b82826121a6565b6107cd61221e565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661093c57604051631afcd79f60e31b815260040160405180910390fd5b61187a6120f0565b806001600160a01b03163b60000361217757604051634c9c8ce360e01b81526001600160a01b03821660048201526024016113d6565b60008051602061265083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516121c39190612633565b600060405180830381855af49150503d80600081146121fe576040519150601f19603f3d011682016040523d82523d6000602084013e612203565b606091505b509150915061221385838361223d565b925050505b92915050565b341561093c5760405163b398979f60e01b815260040160405180910390fd5b6060826122525761224d82612299565b611c8b565b815115801561226957506001600160a01b0384163b155b1561229257604051639996b31560e01b81526001600160a01b03851660048201526024016113d6565b5092915050565b8051156122a95780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b0381168114610e5957600080fd5b6000602082840312156122e957600080fd5b8135611c8b816122c2565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561231d57600080fd5b8235612328816122c2565b9150602083013567ffffffffffffffff8082111561234557600080fd5b818501915085601f83011261235957600080fd5b81358181111561236b5761236b6122f4565b604051601f8201601f19908116603f01168101908382118183101715612393576123936122f4565b816040528281528860208487010111156123ac57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080604083850312156123e157600080fd5b82356123ec816122c2565b915060208301356123fc816122c2565b809150509250929050565b60006020828403121561241957600080fd5b5035919050565b60005b8381101561243b578181015183820152602001612423565b50506000910152565b6000815180845261245c816020860160208601612420565b601f01601f19169290920160200192915050565b602081526000611c8b6020830184612444565b6000806020838503121561249657600080fd5b823567ffffffffffffffff808211156124ae57600080fd5b818501915085601f8301126124c257600080fd5b8135818111156124d157600080fd5b8660208260051b85010111156124e657600080fd5b60209290920196919550909350505050565b60006020828403121561250a57600080fd5b5051919050565b60006020828403121561252357600080fd5b81518015158114611c8b57600080fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561221857612218612533565b8181038181111561221857612218612533565b634e487b7160e01b600052603260045260246000fd5b808202811582820484141761221857612218612533565b6000826125b957634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156125d057600080fd5b8151611c8b816122c2565b602081526000825160a060208401526125f760c0840182612444565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b60008251612645818460208701612420565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca164736f6c6343000817000a",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9991,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "activePool",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9993,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "adminContract",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9995,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "borrowerOperations",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9997,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "collSurplusPool",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9999,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "communityIssuance",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 10001,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "debtToken",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 10003,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "defaultPool",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 10005,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "feeCollector",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 10007,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "flashLoanAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 10009,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "gasPoolAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 10011,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "trenStaking",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 10013,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "priceFeed",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 10015,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "sortedTrenBoxes",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 10017,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 10019,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "timelockAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 10021,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 10023,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "trenBoxManager",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 10025,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "trenBoxManagerOperations",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 10027,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "isAddressSetupInitialized",
        "offset": 20,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 10032,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "__gap",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_uint256)33_storage"
      },
      {
        "astId": 11990,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "swapRouter",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IUniswapRouterV3)14846"
      },
      {
        "astId": 11992,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "stableCoin",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 11994,
        "contract": "contracts/FlashLoan.sol:FlashLoan",
        "label": "isSetupInitialized",
        "offset": 20,
        "slot": "52",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)33_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[33]",
        "numberOfBytes": "1056"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IUniswapRouterV3)14846": {
        "encoding": "inplace",
        "label": "contract IUniswapRouterV3",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}