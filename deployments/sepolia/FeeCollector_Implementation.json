{
  "address": "0x50183816a5d467ce98e44f1e637e379fe846edaf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeCollector__ArrayMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expected",
          "type": "address"
        }
      ],
      "name": "FeeCollector__BorrowerOperationsOnly",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expected1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expected2",
          "type": "address"
        }
      ],
      "name": "FeeCollector__BorrowerOperationsOrTrenBoxManagerOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeCollector__InvalidTRENStakingAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expected",
          "type": "address"
        }
      ],
      "name": "FeeCollector__TrenBoxManagerOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeRecordUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RedemptionFeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_EXPIRATION_SECONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_FEE_DAYS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_FEE_FRACTION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "authorizeUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "closeDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collSurplusPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_borrowers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        }
      ],
      "name": "collectFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityIssuance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_paybackFraction",
          "type": "uint256"
        }
      ],
      "name": "decreaseDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeRecords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolRevenueDestination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "handleRedemptionFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "name": "increaseDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAddressSetupInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "liquidateDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "routeToTRENStaking",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_communityIssuance",
          "type": "address"
        }
      ],
      "name": "setCommunityIssuance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trenStaking",
          "type": "address"
        }
      ],
      "name": "setTRENStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_paybackFraction",
          "type": "uint256"
        }
      ],
      "name": "simulateRefund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTrenBoxes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManagerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x36ecab752a2cc8a4c027b54adc19573af9d5b68dabcf692a65b109c21b94978c",
  "receipt": {
    "to": null,
    "from": "0x19E733F20aAdaB8996f7895ACBD04f746BF4Aac1",
    "contractAddress": "0x2412459Ef500c3fFAaF43E83856ffb73A9dA45a4",
    "transactionIndex": 44,
    "gasUsed": "2155800",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xaa7ba7a8e276dac8aac01a8c873499c7789733199cb7d5ed5933488f1ed890bd",
    "transactionHash": "0x36ecab752a2cc8a4c027b54adc19573af9d5b68dabcf692a65b109c21b94978c",
    "logs": [],
    "blockNumber": 5625498,
    "cumulativeGasUsed": "7148455",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e6971fb87a17deef3641f1719687e39f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeCollector__ArrayMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"}],\"name\":\"FeeCollector__BorrowerOperationsOnly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expected1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expected2\",\"type\":\"address\"}],\"name\":\"FeeCollector__BorrowerOperationsOrTrenBoxManagerOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeCollector__InvalidTRENStakingAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"}],\"name\":\"FeeCollector__TrenBoxManagerOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeRecordUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedemptionFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_EXPIRATION_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEE_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEE_FRACTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"authorizeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"closeDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collSurplusPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_borrowers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityIssuance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_paybackFraction\",\"type\":\"uint256\"}],\"name\":\"decreaseDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolRevenueDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"handleRedemptionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"increaseDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAddressSetupInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"liquidateDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routeToTRENStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityIssuance\",\"type\":\"address\"}],\"name\":\"setCommunityIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trenStaking\",\"type\":\"address\"}],\"name\":\"setTRENStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_paybackFraction\",\"type\":\"uint256\"}],\"name\":\"simulateRefund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTrenBoxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManagerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"closeDebt(address,address)\":{\"notice\":\"Triggered when a debt is paid in full.\"},\"collectFees(address[],address[])\":{\"notice\":\"Batch collect fees from an array of borrowers/assets.\"},\"decreaseDebt(address,address,uint256)\":{\"notice\":\"Triggered when a trenBox is adjusted or closed (and the borrower has paid back/decreased his loan).\"},\"handleRedemptionFee(address,uint256)\":{\"notice\":\"Triggered by TrenBoxManager.finalizeRedemption(); assumes _amount of _asset has been already transferred to getProtocolRevenueDestination().\"},\"increaseDebt(address,address,uint256)\":{\"notice\":\"Triggered when a trenBox is created and again whenever the borrower acquires additional loans. Collects the minimum fee to the platform, for which there is no refund; holds on to the remaining fees until debt is paid, liquidated, or expired. Attention: this method assumes that (debt token) _feeAmount has already been minted and transferred to this contract.\"},\"liquidateDebt(address,address)\":{\"notice\":\"Triggered when a trenBox is liquidated; in that case, all remaining fees are collected by the platform, and no refunds are generated.\"},\"simulateRefund(address,address,uint256)\":{\"notice\":\"Simulates the refund due -if- trenBox would be closed at this moment (helper function used by the UI).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FeeCollector.sol\":\"FeeCollector\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"contracts/Addresses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { AddressesConfigurable } from \\\"./Dependencies/AddressesConfigurable.sol\\\";\\n\\ncontract Addresses is AddressesConfigurable { }\\n\",\"keccak256\":\"0xee6f0debf09164467fe0766a99b35a0c3f7837429bcc0d519cd6987b00e81b8c\",\"license\":\"MIT\"},\"contracts/Dependencies/AddressesConfigurable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract AddressesConfigurable is OwnableUpgradeable {\\n    address public activePool;\\n    address public adminContract;\\n    address public borrowerOperations;\\n    address public collSurplusPool;\\n    address public communityIssuance;\\n    address public debtToken;\\n    address public defaultPool;\\n    address public feeCollector;\\n    address public gasPoolAddress;\\n    address public trenStaking;\\n    address public priceFeed;\\n    address public sortedTrenBoxes;\\n    address public stabilityPool;\\n    address public timelockAddress;\\n    address public treasuryAddress;\\n    address public trenBoxManager;\\n    address public trenBoxManagerOperations;\\n\\n    bool public isAddressSetupInitialized;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[33] private __gap; // Goerli uses 47; Arbitrum uses 33\\n\\n    // Dependency setters\\n    // -----------------------------------------------------------------------------------------------\\n\\n    function setAddresses(address[] calldata _addresses) external onlyOwner {\\n        require(!isAddressSetupInitialized, \\\"Setup is already initialized\\\");\\n        require(_addresses.length == 15, \\\"Expected 15 addresses at setup\\\");\\n        for (uint256 i = 0; i < 15; i++) {\\n            require(_addresses[i] != address(0), \\\"Invalid address\\\");\\n        }\\n        activePool = _addresses[0];\\n        adminContract = _addresses[1];\\n        borrowerOperations = _addresses[2];\\n        collSurplusPool = _addresses[3];\\n        debtToken = _addresses[4];\\n        defaultPool = _addresses[5];\\n        feeCollector = _addresses[6];\\n        gasPoolAddress = _addresses[7];\\n        priceFeed = _addresses[8];\\n        sortedTrenBoxes = _addresses[9];\\n        stabilityPool = _addresses[10];\\n        timelockAddress = _addresses[11];\\n        treasuryAddress = _addresses[12];\\n        trenBoxManager = _addresses[13];\\n        trenBoxManagerOperations = _addresses[14];\\n\\n        isAddressSetupInitialized = true;\\n    }\\n\\n    function setCommunityIssuance(address _communityIssuance) public onlyOwner {\\n        communityIssuance = _communityIssuance;\\n    }\\n\\n    function setTRENStaking(address _trenStaking) public onlyOwner {\\n        trenStaking = _trenStaking;\\n    }\\n}\\n\",\"keccak256\":\"0xd11d486cb2a0c07199b14176e64ad449567e453db4bccdb1d35a06bf732ccc4a\",\"license\":\"MIT\"},\"contracts/FeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { UUPSUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport { IDebtToken } from \\\"./Interfaces/IDebtToken.sol\\\";\\nimport { IFeeCollector } from \\\"./Interfaces/IFeeCollector.sol\\\";\\nimport { ITRENStaking } from \\\"./Interfaces/ITRENStaking.sol\\\";\\n\\nimport \\\"./Addresses.sol\\\";\\n\\ncontract FeeCollector is IFeeCollector, UUPSUpgradeable, OwnableUpgradeable, Addresses {\\n    using SafeERC20 for IERC20;\\n\\n    // Constants\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    string public constant NAME = \\\"FeeCollector\\\";\\n\\n    uint256 public constant MIN_FEE_DAYS = 7;\\n    uint256 public constant MIN_FEE_FRACTION = 0.038461538 * 1 ether; // (1/26) fee divided by 26\\n        // weeks\\n    uint256 public constant FEE_EXPIRATION_SECONDS = 175 * 1 days; // ~ 6 months, minus one week\\n        // (MIN_FEE_DAYS)\\n\\n    // State\\n    // ------------------------------------------------------------------------------------------------------------\\n\\n    mapping(address => mapping(address => FeeRecord)) public feeRecords; // borrower -> asset ->\\n        // fees\\n\\n    bool public constant routeToTRENStaking = false; // if true, collected fees go to stakers; if\\n        // false, to the treasury\\n\\n    // Initializer\\n    // ------------------------------------------------------------------------------------------------------\\n\\n    function initialize() public initializer {\\n        address initialOwner = _msgSender();\\n\\n        __Ownable_init(initialOwner);\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    // Public/external methods\\n    // ------------------------------------------------------------------------------------------\\n\\n    /**\\n     * Triggered when a trenBox is created and again whenever the borrower acquires additional\\n     * loans.\\n     * Collects the minimum fee to the platform, for which there is no refund; holds on to the\\n     * remaining fees until\\n     * debt is paid, liquidated, or expired.\\n     *\\n     * Attention: this method assumes that (debt token) _feeAmount has already been minted and\\n     * transferred to this contract.\\n     */\\n    function increaseDebt(\\n        address _borrower,\\n        address _asset,\\n        uint256 _feeAmount\\n    )\\n        external\\n        override\\n        onlyBorrowerOperations\\n    {\\n        uint256 minFeeAmount = (MIN_FEE_FRACTION * _feeAmount) / 1 ether;\\n        uint256 refundableFeeAmount = _feeAmount - minFeeAmount;\\n        uint256 feeToCollect = _createOrUpdateFeeRecord(_borrower, _asset, refundableFeeAmount);\\n        _collectFee(_borrower, _asset, minFeeAmount + feeToCollect);\\n    }\\n\\n    /**\\n     * Triggered when a trenBox is adjusted or closed (and the borrower has paid back/decreased his\\n     * loan).\\n     */\\n    function decreaseDebt(\\n        address _borrower,\\n        address _asset,\\n        uint256 _paybackFraction\\n    )\\n        external\\n        override\\n        onlyBorrowerOperationsOrTrenBoxManager\\n    {\\n        _decreaseDebt(_borrower, _asset, _paybackFraction);\\n    }\\n\\n    /**\\n     * Triggered when a debt is paid in full.\\n     */\\n    function closeDebt(\\n        address _borrower,\\n        address _asset\\n    )\\n        external\\n        override\\n        onlyBorrowerOperationsOrTrenBoxManager\\n    {\\n        _decreaseDebt(_borrower, _asset, 1 ether);\\n    }\\n\\n    /**\\n     * Simulates the refund due -if- trenBox would be closed at this moment (helper function used by\\n     * the UI).\\n     */\\n    function simulateRefund(\\n        address _borrower,\\n        address _asset,\\n        uint256 _paybackFraction\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(_paybackFraction <= 1 ether, \\\"Payback fraction cannot be higher than 1 (@ 10**18)\\\");\\n        require(_paybackFraction != 0, \\\"Payback fraction cannot be zero\\\");\\n        FeeRecord storage record = feeRecords[_borrower][_asset];\\n        if (record.amount == 0 || record.to < block.timestamp) {\\n            return 0;\\n        }\\n        uint256 expiredAmount = _calcExpiredAmount(record.from, record.to, record.amount);\\n        if (_paybackFraction == 1e18) {\\n            // full payback\\n            return record.amount - expiredAmount;\\n        } else {\\n            // calc refund amount proportional to the payment\\n            return ((record.amount - expiredAmount) * _paybackFraction) / 1 ether;\\n        }\\n    }\\n\\n    /**\\n     * Triggered when a trenBox is liquidated; in that case, all remaining fees are collected by the\\n     * platform,\\n     * and no refunds are generated.\\n     */\\n    function liquidateDebt(\\n        address _borrower,\\n        address _asset\\n    )\\n        external\\n        override\\n        onlyTrenBoxManager\\n    {\\n        FeeRecord memory mRecord = feeRecords[_borrower][_asset];\\n        if (mRecord.amount != 0) {\\n            _closeExpiredOrLiquidatedFeeRecord(_borrower, _asset, mRecord.amount);\\n        }\\n    }\\n\\n    /**\\n     * Batch collect fees from an array of borrowers/assets.\\n     */\\n    function collectFees(\\n        address[] calldata _borrowers,\\n        address[] calldata _assets\\n    )\\n        external\\n        override\\n    {\\n        uint256 borrowersLength = _borrowers.length;\\n        if (borrowersLength != _assets.length || borrowersLength == 0) {\\n            revert FeeCollector__ArrayMismatch();\\n        }\\n        uint256 NOW = block.timestamp;\\n        for (uint256 i = 0; i < borrowersLength;) {\\n            address borrower = _borrowers[i];\\n            address asset = _assets[i];\\n            FeeRecord storage sRecord = feeRecords[borrower][asset];\\n            uint256 expiredAmount = _calcExpiredAmount(sRecord.from, sRecord.to, sRecord.amount);\\n            if (expiredAmount > 0) {\\n                uint256 updatedAmount = sRecord.amount - expiredAmount;\\n                sRecord.amount = updatedAmount;\\n                sRecord.from = NOW;\\n                _collectFee(borrower, asset, expiredAmount);\\n                emit FeeRecordUpdated(borrower, asset, NOW, sRecord.to, updatedAmount);\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Triggered by TrenBoxManager.finalizeRedemption(); assumes _amount of _asset has been already\\n     * transferred to\\n     * getProtocolRevenueDestination().\\n     */\\n    function handleRedemptionFee(address _asset, uint256 _amount) external onlyTrenBoxManager {\\n        if (_routeToTRENStaking()) {\\n            ITRENStaking(trenStaking).increaseFee_Asset(_asset, _amount);\\n        }\\n        emit RedemptionFeeCollected(_asset, _amount);\\n    }\\n\\n    function getProtocolRevenueDestination() public view override returns (address) {\\n        return _routeToTRENStaking() ? trenStaking : treasuryAddress;\\n    }\\n\\n    // Helper & internal methods\\n    // ----------------------------------------------------------------------------------------\\n\\n    function _decreaseDebt(address _borrower, address _asset, uint256 _paybackFraction) internal {\\n        uint256 NOW = block.timestamp;\\n        require(_paybackFraction <= 1 ether, \\\"Payback fraction cannot be higher than 1 (@ 10**18)\\\");\\n        require(_paybackFraction != 0, \\\"Payback fraction cannot be zero\\\");\\n        FeeRecord storage sRecord = feeRecords[_borrower][_asset];\\n        if (sRecord.amount == 0) {\\n            return;\\n        }\\n        if (sRecord.to <= NOW) {\\n            _closeExpiredOrLiquidatedFeeRecord(_borrower, _asset, sRecord.amount);\\n        } else {\\n            // collect expired refund\\n            uint256 expiredAmount = _calcExpiredAmount(sRecord.from, sRecord.to, sRecord.amount);\\n            _collectFee(_borrower, _asset, expiredAmount);\\n            if (_paybackFraction == 1e18) {\\n                // on a full payback, there's no refund; refund amount is discounted from final\\n                // payment\\n                uint256 refundAmount = sRecord.amount - expiredAmount;\\n                IDebtToken(debtToken).burnFromWhitelistedContract(refundAmount);\\n                sRecord.amount = 0;\\n                emit FeeRecordUpdated(_borrower, _asset, NOW, 0, 0);\\n            } else {\\n                // refund amount proportional to the payment\\n                uint256 refundAmount =\\n                    ((sRecord.amount - expiredAmount) * _paybackFraction) / 1 ether;\\n                _refundFee(_borrower, _asset, refundAmount);\\n                uint256 updatedAmount = sRecord.amount - expiredAmount - refundAmount;\\n                sRecord.amount = updatedAmount;\\n                sRecord.from = NOW;\\n                emit FeeRecordUpdated(_borrower, _asset, NOW, sRecord.to, updatedAmount);\\n            }\\n        }\\n    }\\n\\n    function _createOrUpdateFeeRecord(\\n        address _borrower,\\n        address _asset,\\n        uint256 _feeAmount\\n    )\\n        internal\\n        returns (uint256 feeToCollect)\\n    {\\n        FeeRecord storage sRecord = feeRecords[_borrower][_asset];\\n        if (sRecord.amount == 0) {\\n            _createFeeRecord(_borrower, _asset, _feeAmount, sRecord);\\n        } else {\\n            if (sRecord.to <= block.timestamp) {\\n                feeToCollect = sRecord.amount;\\n                _createFeeRecord(_borrower, _asset, _feeAmount, sRecord);\\n            } else {\\n                feeToCollect = _updateFeeRecord(_borrower, _asset, _feeAmount, sRecord);\\n            }\\n        }\\n    }\\n\\n    function _createFeeRecord(\\n        address _borrower,\\n        address _asset,\\n        uint256 _feeAmount,\\n        FeeRecord storage _sRecord\\n    )\\n        internal\\n    {\\n        uint256 from = block.timestamp + MIN_FEE_DAYS * 1 days;\\n        uint256 to = from + FEE_EXPIRATION_SECONDS;\\n        _sRecord.amount = _feeAmount;\\n        _sRecord.from = from;\\n        _sRecord.to = to;\\n        emit FeeRecordUpdated(_borrower, _asset, from, to, _feeAmount);\\n    }\\n\\n    function _updateFeeRecord(\\n        address _borrower,\\n        address _asset,\\n        uint256 _addedAmount,\\n        FeeRecord storage _sRecord\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 NOW = block.timestamp;\\n        if (NOW < _sRecord.from) {\\n            // loan is still in its first week (MIN_FEE_DAYS)\\n            NOW = _sRecord.from;\\n        }\\n        uint256 expiredAmount = _calcExpiredAmount(_sRecord.from, _sRecord.to, _sRecord.amount);\\n        uint256 remainingAmount = _sRecord.amount - expiredAmount;\\n        uint256 remainingTime = _sRecord.to - NOW;\\n        uint256 updatedAmount = remainingAmount + _addedAmount;\\n        uint256 updatedTo = NOW + _calcNewDuration(remainingAmount, remainingTime, _addedAmount);\\n        _sRecord.amount = updatedAmount;\\n        _sRecord.from = NOW;\\n        _sRecord.to = updatedTo;\\n        emit FeeRecordUpdated(_borrower, _asset, NOW, updatedTo, updatedAmount);\\n        return expiredAmount;\\n    }\\n\\n    function _closeExpiredOrLiquidatedFeeRecord(\\n        address _borrower,\\n        address _asset,\\n        uint256 _amount\\n    )\\n        internal\\n    {\\n        _collectFee(_borrower, _asset, _amount);\\n        delete feeRecords[_borrower][_asset];\\n        emit FeeRecordUpdated(_borrower, _asset, block.timestamp, 0, 0);\\n    }\\n\\n    function _calcExpiredAmount(\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 _amount\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 NOW = block.timestamp;\\n        if (_from > NOW) {\\n            return 0;\\n        }\\n        if (NOW >= _to) {\\n            return _amount;\\n        }\\n        uint256 PRECISION = 1e9;\\n        uint256 lifeTime = _to - _from;\\n        uint256 elapsedTime = NOW - _from;\\n        uint256 decayRate = (_amount * PRECISION) / lifeTime;\\n        uint256 expiredAmount = (elapsedTime * decayRate) / PRECISION;\\n        return expiredAmount;\\n    }\\n\\n    function _calcNewDuration(\\n        uint256 remainingAmount,\\n        uint256 remainingTimeToLive,\\n        uint256 addedAmount\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 prevWeight = remainingAmount * remainingTimeToLive;\\n        uint256 nextWeight = addedAmount * FEE_EXPIRATION_SECONDS;\\n        uint256 newDuration = (prevWeight + nextWeight) / (remainingAmount + addedAmount);\\n        return newDuration;\\n    }\\n\\n    /**\\n     * Transfers collected (debt token) fees to either the treasury or the TRENStaking contract,\\n     * depending on a flag.\\n     */\\n    function _collectFee(address _borrower, address _asset, uint256 _feeAmount) internal {\\n        if (_feeAmount != 0) {\\n            address collector = getProtocolRevenueDestination();\\n            IERC20(debtToken).safeTransfer(collector, _feeAmount);\\n            if (_routeToTRENStaking()) {\\n                ITRENStaking(trenStaking).increaseFee_DebtToken(_feeAmount);\\n            }\\n            emit FeeCollected(_borrower, _asset, collector, _feeAmount);\\n        }\\n    }\\n\\n    function _refundFee(address _borrower, address _asset, uint256 _refundAmount) internal {\\n        if (_refundAmount != 0) {\\n            IERC20(debtToken).safeTransfer(_borrower, _refundAmount);\\n            emit FeeRefunded(_borrower, _asset, _refundAmount);\\n        }\\n    }\\n\\n    /**\\n     * Use a function for reading the constant, as it will be overwritten by the Tester contract.\\n     */\\n    function _routeToTRENStaking() internal view virtual returns (bool) {\\n        return routeToTRENStaking;\\n    }\\n\\n    // Modifiers\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    modifier onlyBorrowerOperations() {\\n        if (msg.sender != borrowerOperations) {\\n            revert FeeCollector__BorrowerOperationsOnly(msg.sender, borrowerOperations);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyTrenBoxManager() {\\n        if (msg.sender != trenBoxManager) {\\n            revert FeeCollector__TrenBoxManagerOnly(msg.sender, trenBoxManager);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyBorrowerOperationsOrTrenBoxManager() {\\n        if (msg.sender != borrowerOperations && msg.sender != trenBoxManager) {\\n            revert FeeCollector__BorrowerOperationsOrTrenBoxManagerOnly(\\n                msg.sender, borrowerOperations, trenBoxManager\\n            );\\n        }\\n        _;\\n    }\\n\\n    function authorizeUpgrade(address newImplementation) public {\\n        _authorizeUpgrade(newImplementation);\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner { }\\n}\\n\",\"keccak256\":\"0x49a783db80a73f8ae4ce47be63ede182ed6508aa0c41241eeb3996c91fcc73ee\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStabilityPool } from \\\"./IStabilityPool.sol\\\";\\n\\ninterface IDebtToken is IERC20 {\\n    // --- Events ---\\n\\n    event TokenBalanceUpdated(address _user, uint256 _amount);\\n    event EmergencyStopMintingCollateral(address _asset, bool state);\\n    event WhitelistChanged(address _whitelisted, bool whitelisted);\\n\\n    function emergencyStopMinting(address _asset, bool status) external;\\n\\n    function mint(address _asset, address _account, uint256 _amount) external;\\n\\n    function mintFromWhitelistedContract(uint256 _amount) external;\\n\\n    function burnFromWhitelistedContract(uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function sendToPool(address _sender, address poolAddress, uint256 _amount) external;\\n\\n    function returnFromPool(address poolAddress, address user, uint256 _amount) external;\\n\\n    function addWhitelist(address _address) external;\\n\\n    function removeWhitelist(address _address) external;\\n}\\n\",\"keccak256\":\"0xf2e2cf49ec210bd5e0078d96ae9dbd82eb6b89155ea11673b7b9b43b816e5e2b\",\"license\":\"MIT\"},\"contracts/Interfaces/IDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface IDeposit {\\n    function receivedERC20(address _asset, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x2791510cd93e4aab04349c67b20fc52ac0af5ac9aed9b1c12e10743d1f1f7e61\",\"license\":\"MIT\"},\"contracts/Interfaces/IFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface IFeeCollector {\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    event FeeRecordUpdated(\\n        address borrower, address asset, uint256 from, uint256 to, uint256 amount\\n    );\\n    event FeeCollected(address borrower, address asset, address collector, uint256 amount);\\n    event FeeRefunded(address borrower, address asset, uint256 amount);\\n    event RedemptionFeeCollected(address asset, uint256 amount);\\n\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    struct FeeRecord {\\n        uint256 from; // timestamp in seconds\\n        uint256 to; // timestamp in seconds\\n        uint256 amount; // refundable fee amount\\n    }\\n\\n    // Custom Errors\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    error FeeCollector__ArrayMismatch();\\n    error FeeCollector__BorrowerOperationsOnly(address sender, address expected);\\n    error FeeCollector__BorrowerOperationsOrTrenBoxManagerOnly(\\n        address sender, address expected1, address expected2\\n    );\\n    error FeeCollector__InvalidTRENStakingAddress();\\n    error FeeCollector__TrenBoxManagerOnly(address sender, address expected);\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    function increaseDebt(address _borrower, address _asset, uint256 _feeAmount) external;\\n\\n    function decreaseDebt(address _borrower, address _asset, uint256 _paybackFraction) external;\\n\\n    function closeDebt(address _borrower, address _asset) external;\\n\\n    function liquidateDebt(address _borrower, address _asset) external;\\n\\n    function simulateRefund(\\n        address _borrower,\\n        address _asset,\\n        uint256 _paybackFraction\\n    )\\n        external\\n        returns (uint256);\\n\\n    function collectFees(address[] calldata _borrowers, address[] calldata _assets) external;\\n\\n    function handleRedemptionFee(address _asset, uint256 _amount) external;\\n\\n    function getProtocolRevenueDestination() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4acb0589d73afd26dd9ea281eef5052818955b501f2371c21a1acac953bf5152\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IDeposit } from \\\"./IDeposit.sol\\\";\\n\\ninterface IStabilityPool is IDeposit {\\n    // --- Structs ---\\n\\n    struct Snapshots {\\n        mapping(address => uint256) S;\\n        uint256 P;\\n        uint256 G;\\n        uint128 scale;\\n        uint128 epoch;\\n    }\\n\\n    // --- Events ---\\n\\n    event CommunityIssuanceAddressChanged(address newAddress);\\n    event DepositSnapshotUpdated(address indexed _depositor, uint256 _P, uint256 _G);\\n    event SystemSnapshotUpdated(uint256 _P, uint256 _G);\\n\\n    event AssetSent(address _asset, address _to, uint256 _amount);\\n    event GainsWithdrawn(\\n        address indexed _depositor,\\n        address[] _collaterals,\\n        uint256[] _amounts,\\n        uint256 _debtTokenLoss\\n    );\\n    event TRENPaidToDepositor(address indexed _depositor, uint256 _TREN);\\n    event StabilityPoolAssetBalanceUpdated(address _asset, uint256 _newBalance);\\n    event StabilityPoolDebtTokenBalanceUpdated(uint256 _newBalance);\\n    event StakeChanged(uint256 _newSystemStake, address _depositor);\\n    event UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\n\\n    event P_Updated(uint256 _P);\\n    event S_Updated(address _asset, uint256 _S, uint128 _epoch, uint128 _scale);\\n    event G_Updated(uint256 _G, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    // --- Errors ---\\n\\n    error StabilityPool__ActivePoolOnly(address sender, address expected);\\n    error StabilityPool__AdminContractOnly(address sender, address expected);\\n    error StabilityPool__TrenBoxManagerOnly(address sender, address expected);\\n    error StabilityPool__ArrayNotInAscendingOrder();\\n\\n    // --- Functions ---\\n\\n    function addCollateralType(address _collateral) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is not zero\\n     * ---\\n    * - Triggers a TREN issuance, based on time passed since the last issuance. The TREN issuance is\\n    shared between *all* depositors.\\n     * - Sends depositor's accumulated gains (TREN, assets) to depositor\\n     */\\n    function provideToSP(uint256 _amount, address[] calldata _assets) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized trenBoxes left in the system\\n     * - User has a non zero deposit\\n     * ---\\n    * - Triggers a TREN issuance, based on time passed since the last issuance. The TREN issuance is\\n    shared between *all* depositors.\\n     * - Sends all depositor's accumulated gains (TREN, assets) to depositor\\n     * - Decreases deposit's stake, and takes new snapshots.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint256 _amount, address[] calldata _assets) external;\\n\\n    /*\\n    Initial checks:\\n    * - Caller is TrenBoxManager\\n    * ---\\n    * Cancels out the specified debt against the debt token contained in the Stability Pool (as far\\n    as possible)\\n    * and transfers the TrenBox's collateral from ActivePool to StabilityPool.\\n    * Only called by liquidation functions in the TrenBoxManager.\\n    */\\n    function offset(uint256 _debt, address _asset, uint256 _coll) external;\\n\\n    /*\\n    * Returns debt tokens held in the pool. Changes when users deposit/withdraw, and when TrenBox\\n    debt is offset.\\n     */\\n    function getTotalDebtTokenDeposits() external view returns (uint256);\\n\\n    /*\\n     * Calculates the asset gains earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorGains(\\n        address _depositor,\\n        address[] calldata _assets\\n    )\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory);\\n\\n    /*\\n     * Calculate the TREN gain earned by a deposit since its last snapshots were taken.\\n     */\\n    function getDepositorTRENGain(address _depositor) external view returns (uint256);\\n\\n    /*\\n     * Return the user's compounded deposits.\\n     */\\n    function getCompoundedDebtTokenDeposits(address _depositor) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6de08cb9a9ddb600e67363917078a6778b683187a559a53b0c7c24759ca7a28\",\"license\":\"MIT\"},\"contracts/Interfaces/ITRENStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface ITRENStaking {\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    event TreasuryAddressChanged(address _treausury);\\n    event SentToTreasury(address indexed _asset, uint256 _amount);\\n\\n    event StakeChanged(address indexed staker, uint256 newStake);\\n    event StakingGainsAssetWithdrawn(\\n        address indexed staker, address indexed asset, uint256 AssetGain\\n    );\\n    event StakingGainsDebtTokensWithdrawn(address indexed staker, uint256 debtTokenAmount);\\n    event Fee_AssetUpdated(address indexed _asset, uint256 _amount);\\n    event Fee_DebtTokenUpdated(uint256 _amount);\\n    event TotalTRENStakedUpdated(uint256 _totalTRENStaked);\\n    event AssetSent(address indexed _asset, address indexed _account, uint256 _amount);\\n    event StakerSnapshotsUpdated(address _staker, uint256 _F_Asset, uint256 _F_DebtToken);\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    function trenToken() external view returns (IERC20);\\n\\n    function stake(uint256 _TRENamount) external;\\n\\n    function unstake(uint256 _TRENamount) external;\\n\\n    function increaseFee_Asset(address _asset, uint256 _AssetFee) external;\\n\\n    function increaseFee_DebtToken(uint256 _TRENFee) external;\\n\\n    function getPendingAssetGain(address _asset, address _user) external view returns (uint256);\\n\\n    function getPendingDebtTokenGain(address _user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x42c4bc7b34f510727956bcc38062e7e1c88db80a047bab6323beba76995f9828\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5060805161260861003e600039600081816116710152818161169a01526117db01526126086000f3fe60806040526004361061025c5760003560e01c80638da5cb5b11610144578063c5f956af116100b6578063ed60f1881161007a578063ed60f18814610780578063f1c05a7e146107a0578063f2fde38b146107c0578063f8d89898146107e0578063fe06073314610800578063fe9d03231461082057600080fd5b8063c5f956af146106e4578063c8564c6214610704578063cc8b21e414610725578063cda775f914610745578063d0224e6c1461076557600080fd5b8063a3f4df7e11610108578063a3f4df7e146105ee578063aa36069d14610633578063ad3cb1cc14610653578063b957172114610684578063c05c5e94146106a4578063c415b95c146106c457600080fd5b80638da5cb5b146104f35780638dfac87a1461053057806395fb16bb1461055557806398768db2146105755780639f802fb81461058c57600080fd5b806355dafa46116101dd578063741bef1a116101a1578063741bef1a146104495780637693ccdb1461046957806377553ad41461047e5780637f7dde4a1461049e5780638129fc1c146104be578063871d8145146104d357600080fd5b806355dafa46146103b65780636a85d67d146103d65780636de24492146103f6578063715018a61461041657806373c9bde01461042b57600080fd5b806341c7a5ee1161022457806341c7a5ee146103205780634a7919571461034e5780634bc66f321461036e5780634f1ef2861461038e57806352d1902d146103a157600080fd5b806301c9310014610261578063048c661d146102835780630833c62d146102c05780630a34d4d6146102e05780633cc7422514610300575b600080fd5b34801561026d57600080fd5b5061028161027c366004612178565b610840565b005b34801561028f57600080fd5b50600c546102a3906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102cc57600080fd5b506102816102db3660046121df565b61086a565b3480156102ec57600080fd5b506010546102a3906001600160a01b031681565b34801561030c57600080fd5b506006546102a3906001600160a01b031681565b34801561032c57600080fd5b5061034061033b36600461224b565b6109b5565b6040519081526020016102b7565b34801561035a57600080fd5b50610281610369366004612287565b610af8565b34801561037a57600080fd5b50600d546102a3906001600160a01b031681565b61028161039c3660046122c7565b610b7e565b3480156103ad57600080fd5b50610340610b9d565b3480156103c257600080fd5b506009546102a3906001600160a01b031681565b3480156103e257600080fd5b506102816103f1366004612178565b610bba565b34801561040257600080fd5b5061028161041136600461224b565b610be4565b34801561042257600080fd5b50610281610c85565b34801561043757600080fd5b50600e546001600160a01b03166102a3565b34801561045557600080fd5b50600a546102a3906001600160a01b031681565b34801561047557600080fd5b50610340600781565b34801561048a57600080fd5b506002546102a3906001600160a01b031681565b3480156104aa57600080fd5b506000546102a3906001600160a01b031681565b3480156104ca57600080fd5b50610281610c99565b3480156104df57600080fd5b506102816104ee366004612389565b610db2565b3480156104ff57600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166102a3565b34801561053c57600080fd5b50610545600081565b60405190151581526020016102b7565b34801561056157600080fd5b506004546102a3906001600160a01b031681565b34801561058157600080fd5b5061034062e6b68081565b34801561059857600080fd5b506105d36105a7366004612389565b603260209081526000928352604080842090915290825290208054600182015460029092015490919083565b604080519384526020840192909252908201526060016102b7565b3480156105fa57600080fd5b506106266040518060400160405280600c81526020016b2332b2a1b7b63632b1ba37b960a11b81525081565b6040516102b791906123e0565b34801561063f57600080fd5b5061028161064e366004612389565b610e28565b34801561065f57600080fd5b50610626604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561069057600080fd5b5061028161069f366004612413565b610ecc565b3480156106b057600080fd5b506001546102a3906001600160a01b031681565b3480156106d057600080fd5b506007546102a3906001600160a01b031681565b3480156106f057600080fd5b50600e546102a3906001600160a01b031681565b34801561071057600080fd5b5060105461054590600160a01b900460ff1681565b34801561073157600080fd5b50600b546102a3906001600160a01b031681565b34801561075157600080fd5b506003546102a3906001600160a01b031681565b34801561077157600080fd5b506103406688a490a601540081565b34801561078c57600080fd5b5061028161079b36600461224b565b611446565b3480156107ac57600080fd5b50600f546102a3906001600160a01b031681565b3480156107cc57600080fd5b506102816107db366004612178565b6114b4565b3480156107ec57600080fd5b506005546102a3906001600160a01b031681565b34801561080c57600080fd5b5061028161081b366004612178565b6114f2565b34801561082c57600080fd5b506008546102a3906001600160a01b031681565b6108486114fb565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b828181141580610878575080155b1561089657604051631a04c91160e01b815260040160405180910390fd5b4260005b828110156109ac5760008787838181106108b6576108b6612455565b90506020020160208101906108cb9190612178565b905060008686848181106108e1576108e1612455565b90506020020160208101906108f69190612178565b6001600160a01b038084166000908152603260209081526040808320938516835292905290812080546001820154600283015494955091936109389290611556565b9050801561099c5760008183600201546109529190612481565b6002840181905587845590506109698585846115da565b6000805160206125bc833981519152858589866001015485604051610992959493929190612494565b60405180910390a1505b50506001909201915061089a9050565b50505050505050565b6000670de0b6b3a76400008211156109e85760405162461bcd60e51b81526004016109df906124c5565b60405180910390fd5b81600003610a385760405162461bcd60e51b815260206004820152601f60248201527f5061796261636b206672616374696f6e2063616e6e6f74206265207a65726f0060448201526064016109df565b6001600160a01b03808516600090815260326020908152604080832093871683529290522060028101541580610a715750428160010154105b15610a80576000915050610af1565b6000610a99826000015483600101548460020154611556565b905083670de0b6b3a764000003610ac357808260020154610aba9190612481565b92505050610af1565b670de0b6b3a764000084828460020154610add9190612481565b610ae79190612518565b610aba919061252f565b9392505050565b600f546001600160a01b03163314610b3857600f54604051636545048760e01b81523360048201526001600160a01b0390911660248201526044016109df565b604080516001600160a01b0384168152602081018390527fcf74743fee8ef45d0f775d63c2e7129e1aec29d2ce0222e2d979104c29210481910160405180910390a15050565b610b86611666565b610b8f8261170b565b610b998282611713565b5050565b6000610ba76117d0565b506000805160206125dc83398151915290565b610bc26114fb565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314610c245760025460405163428f391560e11b81523360048201526001600160a01b0390911660248201526044016109df565b6000670de0b6b3a7640000610c40836688a490a6015400612518565b610c4a919061252f565b90506000610c588284612481565b90506000610c67868684611819565b9050610c7d8686610c788487612551565b6115da565b505050505050565b610c8d6114fb565b610c976000611891565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610cdf5750825b905060008267ffffffffffffffff166001148015610cfc5750303b155b905081158015610d0a575080155b15610d285760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610d5257845460ff60401b1916600160401b1785555b33610d5c81611902565b610d64611913565b508315610dab57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b6002546001600160a01b03163314801590610dd85750600f546001600160a01b03163314155b15610e1557600254600f5460405163bea6c3fd60e01b81523360048201526001600160a01b039283166024820152911660448201526064016109df565b610b998282670de0b6b3a764000061191b565b600f546001600160a01b03163314610e6857600f54604051636545048760e01b81523360048201526001600160a01b0390911660248201526044016109df565b6001600160a01b038083166000908152603260209081526040808320938516835292815290829020825160608101845281548152600182015492810192909252600201549181018290529015610ec757610ec783838360400151611b71565b505050565b610ed46114fb565b601054600160a01b900460ff1615610f2e5760405162461bcd60e51b815260206004820152601c60248201527f536574757020697320616c726561647920696e697469616c697a65640000000060448201526064016109df565b600f8114610f7e5760405162461bcd60e51b815260206004820152601e60248201527f457870656374656420313520616464726573736573206174207365747570000060448201526064016109df565b60005b600f811015611003576000838383818110610f9e57610f9e612455565b9050602002016020810190610fb39190612178565b6001600160a01b031603610ffb5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b60448201526064016109df565b600101610f81565b508181600081811061101757611017612455565b905060200201602081019061102c9190612178565b600080546001600160a01b0319166001600160a01b03929092169190911790558181600181811061105f5761105f612455565b90506020020160208101906110749190612178565b600180546001600160a01b0319166001600160a01b0392909216919091179055818160028181106110a7576110a7612455565b90506020020160208101906110bc9190612178565b600280546001600160a01b0319166001600160a01b0392909216919091179055818160038181106110ef576110ef612455565b90506020020160208101906111049190612178565b600380546001600160a01b0319166001600160a01b03929092169190911790558181600481811061113757611137612455565b905060200201602081019061114c9190612178565b600580546001600160a01b0319166001600160a01b03929092169190911781558290829081811061117f5761117f612455565b90506020020160208101906111949190612178565b600680546001600160a01b0319166001600160a01b0392909216919091178155829082908181106111c7576111c7612455565b90506020020160208101906111dc9190612178565b600780546001600160a01b0319166001600160a01b03929092169190911781558290829081811061120f5761120f612455565b90506020020160208101906112249190612178565b600880546001600160a01b0319166001600160a01b03929092169190911781558290829081811061125757611257612455565b905060200201602081019061126c9190612178565b600a80546001600160a01b0319166001600160a01b03929092169190911790558181600981811061129f5761129f612455565b90506020020160208101906112b49190612178565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a8181106112e7576112e7612455565b90506020020160208101906112fc9190612178565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b81811061132f5761132f612455565b90506020020160208101906113449190612178565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c81811061137757611377612455565b905060200201602081019061138c9190612178565b600e80546001600160a01b0319166001600160a01b03929092169190911790558181600d8181106113bf576113bf612455565b90506020020160208101906113d49190612178565b600f80546001600160a01b0319166001600160a01b03929092169190911790558181600e81811061140757611407612455565b905060200201602081019061141c9190612178565b601080546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b6002546001600160a01b0316331480159061146c5750600f546001600160a01b03163314155b156114a957600254600f5460405163bea6c3fd60e01b81523360048201526001600160a01b039283166024820152911660448201526064016109df565b610ec783838361191b565b6114bc6114fb565b6001600160a01b0381166114e657604051631e4fbdf760e01b8152600060048201526024016109df565b6114ef81611891565b50565b6114ef8161170b565b3361152d7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610c975760405163118cdaa760e01b81523360048201526024016109df565b6000428085111561156b576000915050610af1565b83811061157b5782915050610af1565b633b9aca00600061158c8787612481565b9050600061159a8885612481565b90506000826115a98589612518565b6115b3919061252f565b90506000846115c28385612518565b6115cc919061252f565b9a9950505050505050505050565b8015610ec75760006115f4600e546001600160a01b031690565b60055490915061160e906001600160a01b03168284611be4565b604080516001600160a01b03868116825285811660208301528316818301526060810184905290517f3e7be0af9d546b20a6a2e91e4151659dfcad117daa1df79e78d17c5ad2f45b769181900360800190a150505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806116ed57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166116e16000805160206125dc833981519152546001600160a01b031690565b6001600160a01b031614155b15610c975760405163703e46dd60e11b815260040160405180910390fd5b6114ef6114fb565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561176d575060408051601f3d908101601f1916820190925261176a91810190612564565b60015b61179557604051634c9c8ce360e01b81526001600160a01b03831660048201526024016109df565b6000805160206125dc83398151915281146117c657604051632a87526960e21b8152600481018290526024016109df565b610ec78383611c36565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c975760405163703e46dd60e11b815260040160405180910390fd5b6001600160a01b03808416600090815260326020908152604080832093861683529290529081206002810154820361185c5761185785858584611c8c565b611889565b4281600101541161187a578060020154915061185785858584611c8c565b61188685858584611d01565b91505b509392505050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b61190a611dcc565b6114ef81611e15565b610c97611dcc565b42670de0b6b3a76400008211156119445760405162461bcd60e51b81526004016109df906124c5565b816000036119945760405162461bcd60e51b815260206004820152601f60248201527f5061796261636b206672616374696f6e2063616e6e6f74206265207a65726f0060448201526064016109df565b6001600160a01b038085166000908152603260209081526040808320938716835292905290812060028101549091036119ce575050505050565b818160010154116119ed576119e885858360020154611b71565b610dab565b6000611a06826000015483600101548460020154611556565b9050611a138686836115da565b83670de0b6b3a764000003611acf576000818360020154611a349190612481565b600554604051635cad563b60e11b8152600481018390529192506001600160a01b03169063b95aac7690602401600060405180830381600087803b158015611a7b57600080fd5b505af1158015611a8f573d6000803e3d6000fd5b50506000600286018190556040516000805160206125bc8339815191529350611ac192508a918a918991908190612494565b60405180910390a150610c7d565b6000670de0b6b3a764000085838560020154611aeb9190612481565b611af59190612518565b611aff919061252f565b9050611b0c878783611e1d565b600081838560020154611b1f9190612481565b611b299190612481565b6002850181905585855560018501546040519192506000805160206125bc83398151915291611b5f918b918b918a918790612494565b60405180910390a15050505050505050565b611b7c8383836115da565b6001600160a01b03808416600090815260326020908152604080832093861683529290528181208181556001810182905560020181905590516000805160206125bc83398151915291611bd791869186914291908190612494565b60405180910390a1505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610ec7908490611e82565b611c3f82611ee5565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611c8457610ec78282611f4a565b610b99611fc2565b6000611c9c600762015180612518565b611ca69042612551565b90506000611cb762e6b68083612551565b60028401859055828455600184018190556040519091506000805160206125bc83398151915290611cf19088908890869086908a90612494565b60405180910390a1505050505050565b80546000904290811015611d13575081545b6000611d2c846000015485600101548660020154611556565b90506000818560020154611d409190612481565b90506000838660010154611d549190612481565b90506000611d628884612551565b90506000611d7184848b611fe1565b611d7b9087612551565b60028901839055868955600189018190556040519091506000805160206125bc83398151915290611db5908d908d908a9086908890612494565b60405180910390a150929998505050505050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610c9757604051631afcd79f60e31b815260040160405180910390fd5b6114bc611dcc565b8015610ec757600554611e3a906001600160a01b03168483611be4565b604080516001600160a01b038086168252841660208201529081018290527f70930c4d7c90caf6befd84368a02f1e5493c254095e7d3c5b5105922befb92e590606001611bd7565b6000611e976001600160a01b0384168361202c565b90508051600014158015611ebc575080806020019051810190611eba919061257d565b155b15610ec757604051635274afe760e01b81526001600160a01b03841660048201526024016109df565b806001600160a01b03163b600003611f1b57604051634c9c8ce360e01b81526001600160a01b03821660048201526024016109df565b6000805160206125dc83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051611f67919061259f565b600060405180830381855af49150503d8060008114611fa2576040519150601f19603f3d011682016040523d82523d6000602084013e611fa7565b606091505b5091509150611fb785838361203a565b925050505b92915050565b3415610c975760405163b398979f60e01b815260040160405180910390fd5b600080611fee8486612518565b90506000611fff62e6b68085612518565b9050600061200d8588612551565b6120178385612551565b612021919061252f565b979650505050505050565b6060610af183836000612096565b60608261204f5761204a82612133565b610af1565b815115801561206657506001600160a01b0384163b155b1561208f57604051639996b31560e01b81526001600160a01b03851660048201526024016109df565b5080610af1565b6060814710156120bb5760405163cd78605960e01b81523060048201526024016109df565b600080856001600160a01b031684866040516120d7919061259f565b60006040518083038185875af1925050503d8060008114612114576040519150601f19603f3d011682016040523d82523d6000602084013e612119565b606091505b509150915061212986838361203a565b9695505050505050565b8051156121435780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b038116811461217357600080fd5b919050565b60006020828403121561218a57600080fd5b610af18261215c565b60008083601f8401126121a557600080fd5b50813567ffffffffffffffff8111156121bd57600080fd5b6020830191508360208260051b85010111156121d857600080fd5b9250929050565b600080600080604085870312156121f557600080fd5b843567ffffffffffffffff8082111561220d57600080fd5b61221988838901612193565b9096509450602087013591508082111561223257600080fd5b5061223f87828801612193565b95989497509550505050565b60008060006060848603121561226057600080fd5b6122698461215c565b92506122776020850161215c565b9150604084013590509250925092565b6000806040838503121561229a57600080fd5b6122a38361215c565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156122da57600080fd5b6122e38361215c565b9150602083013567ffffffffffffffff8082111561230057600080fd5b818501915085601f83011261231457600080fd5b813581811115612326576123266122b1565b604051601f8201601f19908116603f0116810190838211818310171561234e5761234e6122b1565b8160405282815288602084870101111561236757600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806040838503121561239c57600080fd5b6123a58361215c565b91506123b36020840161215c565b90509250929050565b60005b838110156123d75781810151838201526020016123bf565b50506000910152565b60208152600082518060208401526123ff8160408501602087016123bc565b601f01601f19169190910160400192915050565b6000806020838503121561242657600080fd5b823567ffffffffffffffff81111561243d57600080fd5b61244985828601612193565b90969095509350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115611fbc57611fbc61246b565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b60208082526033908201527f5061796261636b206672616374696f6e2063616e6e6f7420626520686967686560408201527272207468616e20312028402031302a2a31382960681b606082015260800190565b8082028115828204841417611fbc57611fbc61246b565b60008261254c57634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115611fbc57611fbc61246b565b60006020828403121561257657600080fd5b5051919050565b60006020828403121561258f57600080fd5b81518015158114610af157600080fd5b600082516125b18184602087016123bc565b919091019291505056fe6f0b61812a1954a00351239cba469186147c5b10a1b12ed7f226dc5c1aaafa23360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca164736f6c6343000817000a",
  "deployedBytecode": "0x60806040526004361061025c5760003560e01c80638da5cb5b11610144578063c5f956af116100b6578063ed60f1881161007a578063ed60f18814610780578063f1c05a7e146107a0578063f2fde38b146107c0578063f8d89898146107e0578063fe06073314610800578063fe9d03231461082057600080fd5b8063c5f956af146106e4578063c8564c6214610704578063cc8b21e414610725578063cda775f914610745578063d0224e6c1461076557600080fd5b8063a3f4df7e11610108578063a3f4df7e146105ee578063aa36069d14610633578063ad3cb1cc14610653578063b957172114610684578063c05c5e94146106a4578063c415b95c146106c457600080fd5b80638da5cb5b146104f35780638dfac87a1461053057806395fb16bb1461055557806398768db2146105755780639f802fb81461058c57600080fd5b806355dafa46116101dd578063741bef1a116101a1578063741bef1a146104495780637693ccdb1461046957806377553ad41461047e5780637f7dde4a1461049e5780638129fc1c146104be578063871d8145146104d357600080fd5b806355dafa46146103b65780636a85d67d146103d65780636de24492146103f6578063715018a61461041657806373c9bde01461042b57600080fd5b806341c7a5ee1161022457806341c7a5ee146103205780634a7919571461034e5780634bc66f321461036e5780634f1ef2861461038e57806352d1902d146103a157600080fd5b806301c9310014610261578063048c661d146102835780630833c62d146102c05780630a34d4d6146102e05780633cc7422514610300575b600080fd5b34801561026d57600080fd5b5061028161027c366004612178565b610840565b005b34801561028f57600080fd5b50600c546102a3906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102cc57600080fd5b506102816102db3660046121df565b61086a565b3480156102ec57600080fd5b506010546102a3906001600160a01b031681565b34801561030c57600080fd5b506006546102a3906001600160a01b031681565b34801561032c57600080fd5b5061034061033b36600461224b565b6109b5565b6040519081526020016102b7565b34801561035a57600080fd5b50610281610369366004612287565b610af8565b34801561037a57600080fd5b50600d546102a3906001600160a01b031681565b61028161039c3660046122c7565b610b7e565b3480156103ad57600080fd5b50610340610b9d565b3480156103c257600080fd5b506009546102a3906001600160a01b031681565b3480156103e257600080fd5b506102816103f1366004612178565b610bba565b34801561040257600080fd5b5061028161041136600461224b565b610be4565b34801561042257600080fd5b50610281610c85565b34801561043757600080fd5b50600e546001600160a01b03166102a3565b34801561045557600080fd5b50600a546102a3906001600160a01b031681565b34801561047557600080fd5b50610340600781565b34801561048a57600080fd5b506002546102a3906001600160a01b031681565b3480156104aa57600080fd5b506000546102a3906001600160a01b031681565b3480156104ca57600080fd5b50610281610c99565b3480156104df57600080fd5b506102816104ee366004612389565b610db2565b3480156104ff57600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166102a3565b34801561053c57600080fd5b50610545600081565b60405190151581526020016102b7565b34801561056157600080fd5b506004546102a3906001600160a01b031681565b34801561058157600080fd5b5061034062e6b68081565b34801561059857600080fd5b506105d36105a7366004612389565b603260209081526000928352604080842090915290825290208054600182015460029092015490919083565b604080519384526020840192909252908201526060016102b7565b3480156105fa57600080fd5b506106266040518060400160405280600c81526020016b2332b2a1b7b63632b1ba37b960a11b81525081565b6040516102b791906123e0565b34801561063f57600080fd5b5061028161064e366004612389565b610e28565b34801561065f57600080fd5b50610626604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561069057600080fd5b5061028161069f366004612413565b610ecc565b3480156106b057600080fd5b506001546102a3906001600160a01b031681565b3480156106d057600080fd5b506007546102a3906001600160a01b031681565b3480156106f057600080fd5b50600e546102a3906001600160a01b031681565b34801561071057600080fd5b5060105461054590600160a01b900460ff1681565b34801561073157600080fd5b50600b546102a3906001600160a01b031681565b34801561075157600080fd5b506003546102a3906001600160a01b031681565b34801561077157600080fd5b506103406688a490a601540081565b34801561078c57600080fd5b5061028161079b36600461224b565b611446565b3480156107ac57600080fd5b50600f546102a3906001600160a01b031681565b3480156107cc57600080fd5b506102816107db366004612178565b6114b4565b3480156107ec57600080fd5b506005546102a3906001600160a01b031681565b34801561080c57600080fd5b5061028161081b366004612178565b6114f2565b34801561082c57600080fd5b506008546102a3906001600160a01b031681565b6108486114fb565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b828181141580610878575080155b1561089657604051631a04c91160e01b815260040160405180910390fd5b4260005b828110156109ac5760008787838181106108b6576108b6612455565b90506020020160208101906108cb9190612178565b905060008686848181106108e1576108e1612455565b90506020020160208101906108f69190612178565b6001600160a01b038084166000908152603260209081526040808320938516835292905290812080546001820154600283015494955091936109389290611556565b9050801561099c5760008183600201546109529190612481565b6002840181905587845590506109698585846115da565b6000805160206125bc833981519152858589866001015485604051610992959493929190612494565b60405180910390a1505b50506001909201915061089a9050565b50505050505050565b6000670de0b6b3a76400008211156109e85760405162461bcd60e51b81526004016109df906124c5565b60405180910390fd5b81600003610a385760405162461bcd60e51b815260206004820152601f60248201527f5061796261636b206672616374696f6e2063616e6e6f74206265207a65726f0060448201526064016109df565b6001600160a01b03808516600090815260326020908152604080832093871683529290522060028101541580610a715750428160010154105b15610a80576000915050610af1565b6000610a99826000015483600101548460020154611556565b905083670de0b6b3a764000003610ac357808260020154610aba9190612481565b92505050610af1565b670de0b6b3a764000084828460020154610add9190612481565b610ae79190612518565b610aba919061252f565b9392505050565b600f546001600160a01b03163314610b3857600f54604051636545048760e01b81523360048201526001600160a01b0390911660248201526044016109df565b604080516001600160a01b0384168152602081018390527fcf74743fee8ef45d0f775d63c2e7129e1aec29d2ce0222e2d979104c29210481910160405180910390a15050565b610b86611666565b610b8f8261170b565b610b998282611713565b5050565b6000610ba76117d0565b506000805160206125dc83398151915290565b610bc26114fb565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314610c245760025460405163428f391560e11b81523360048201526001600160a01b0390911660248201526044016109df565b6000670de0b6b3a7640000610c40836688a490a6015400612518565b610c4a919061252f565b90506000610c588284612481565b90506000610c67868684611819565b9050610c7d8686610c788487612551565b6115da565b505050505050565b610c8d6114fb565b610c976000611891565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610cdf5750825b905060008267ffffffffffffffff166001148015610cfc5750303b155b905081158015610d0a575080155b15610d285760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610d5257845460ff60401b1916600160401b1785555b33610d5c81611902565b610d64611913565b508315610dab57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b6002546001600160a01b03163314801590610dd85750600f546001600160a01b03163314155b15610e1557600254600f5460405163bea6c3fd60e01b81523360048201526001600160a01b039283166024820152911660448201526064016109df565b610b998282670de0b6b3a764000061191b565b600f546001600160a01b03163314610e6857600f54604051636545048760e01b81523360048201526001600160a01b0390911660248201526044016109df565b6001600160a01b038083166000908152603260209081526040808320938516835292815290829020825160608101845281548152600182015492810192909252600201549181018290529015610ec757610ec783838360400151611b71565b505050565b610ed46114fb565b601054600160a01b900460ff1615610f2e5760405162461bcd60e51b815260206004820152601c60248201527f536574757020697320616c726561647920696e697469616c697a65640000000060448201526064016109df565b600f8114610f7e5760405162461bcd60e51b815260206004820152601e60248201527f457870656374656420313520616464726573736573206174207365747570000060448201526064016109df565b60005b600f811015611003576000838383818110610f9e57610f9e612455565b9050602002016020810190610fb39190612178565b6001600160a01b031603610ffb5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b60448201526064016109df565b600101610f81565b508181600081811061101757611017612455565b905060200201602081019061102c9190612178565b600080546001600160a01b0319166001600160a01b03929092169190911790558181600181811061105f5761105f612455565b90506020020160208101906110749190612178565b600180546001600160a01b0319166001600160a01b0392909216919091179055818160028181106110a7576110a7612455565b90506020020160208101906110bc9190612178565b600280546001600160a01b0319166001600160a01b0392909216919091179055818160038181106110ef576110ef612455565b90506020020160208101906111049190612178565b600380546001600160a01b0319166001600160a01b03929092169190911790558181600481811061113757611137612455565b905060200201602081019061114c9190612178565b600580546001600160a01b0319166001600160a01b03929092169190911781558290829081811061117f5761117f612455565b90506020020160208101906111949190612178565b600680546001600160a01b0319166001600160a01b0392909216919091178155829082908181106111c7576111c7612455565b90506020020160208101906111dc9190612178565b600780546001600160a01b0319166001600160a01b03929092169190911781558290829081811061120f5761120f612455565b90506020020160208101906112249190612178565b600880546001600160a01b0319166001600160a01b03929092169190911781558290829081811061125757611257612455565b905060200201602081019061126c9190612178565b600a80546001600160a01b0319166001600160a01b03929092169190911790558181600981811061129f5761129f612455565b90506020020160208101906112b49190612178565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a8181106112e7576112e7612455565b90506020020160208101906112fc9190612178565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b81811061132f5761132f612455565b90506020020160208101906113449190612178565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c81811061137757611377612455565b905060200201602081019061138c9190612178565b600e80546001600160a01b0319166001600160a01b03929092169190911790558181600d8181106113bf576113bf612455565b90506020020160208101906113d49190612178565b600f80546001600160a01b0319166001600160a01b03929092169190911790558181600e81811061140757611407612455565b905060200201602081019061141c9190612178565b601080546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b6002546001600160a01b0316331480159061146c5750600f546001600160a01b03163314155b156114a957600254600f5460405163bea6c3fd60e01b81523360048201526001600160a01b039283166024820152911660448201526064016109df565b610ec783838361191b565b6114bc6114fb565b6001600160a01b0381166114e657604051631e4fbdf760e01b8152600060048201526024016109df565b6114ef81611891565b50565b6114ef8161170b565b3361152d7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610c975760405163118cdaa760e01b81523360048201526024016109df565b6000428085111561156b576000915050610af1565b83811061157b5782915050610af1565b633b9aca00600061158c8787612481565b9050600061159a8885612481565b90506000826115a98589612518565b6115b3919061252f565b90506000846115c28385612518565b6115cc919061252f565b9a9950505050505050505050565b8015610ec75760006115f4600e546001600160a01b031690565b60055490915061160e906001600160a01b03168284611be4565b604080516001600160a01b03868116825285811660208301528316818301526060810184905290517f3e7be0af9d546b20a6a2e91e4151659dfcad117daa1df79e78d17c5ad2f45b769181900360800190a150505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806116ed57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166116e16000805160206125dc833981519152546001600160a01b031690565b6001600160a01b031614155b15610c975760405163703e46dd60e11b815260040160405180910390fd5b6114ef6114fb565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561176d575060408051601f3d908101601f1916820190925261176a91810190612564565b60015b61179557604051634c9c8ce360e01b81526001600160a01b03831660048201526024016109df565b6000805160206125dc83398151915281146117c657604051632a87526960e21b8152600481018290526024016109df565b610ec78383611c36565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c975760405163703e46dd60e11b815260040160405180910390fd5b6001600160a01b03808416600090815260326020908152604080832093861683529290529081206002810154820361185c5761185785858584611c8c565b611889565b4281600101541161187a578060020154915061185785858584611c8c565b61188685858584611d01565b91505b509392505050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b61190a611dcc565b6114ef81611e15565b610c97611dcc565b42670de0b6b3a76400008211156119445760405162461bcd60e51b81526004016109df906124c5565b816000036119945760405162461bcd60e51b815260206004820152601f60248201527f5061796261636b206672616374696f6e2063616e6e6f74206265207a65726f0060448201526064016109df565b6001600160a01b038085166000908152603260209081526040808320938716835292905290812060028101549091036119ce575050505050565b818160010154116119ed576119e885858360020154611b71565b610dab565b6000611a06826000015483600101548460020154611556565b9050611a138686836115da565b83670de0b6b3a764000003611acf576000818360020154611a349190612481565b600554604051635cad563b60e11b8152600481018390529192506001600160a01b03169063b95aac7690602401600060405180830381600087803b158015611a7b57600080fd5b505af1158015611a8f573d6000803e3d6000fd5b50506000600286018190556040516000805160206125bc8339815191529350611ac192508a918a918991908190612494565b60405180910390a150610c7d565b6000670de0b6b3a764000085838560020154611aeb9190612481565b611af59190612518565b611aff919061252f565b9050611b0c878783611e1d565b600081838560020154611b1f9190612481565b611b299190612481565b6002850181905585855560018501546040519192506000805160206125bc83398151915291611b5f918b918b918a918790612494565b60405180910390a15050505050505050565b611b7c8383836115da565b6001600160a01b03808416600090815260326020908152604080832093861683529290528181208181556001810182905560020181905590516000805160206125bc83398151915291611bd791869186914291908190612494565b60405180910390a1505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610ec7908490611e82565b611c3f82611ee5565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611c8457610ec78282611f4a565b610b99611fc2565b6000611c9c600762015180612518565b611ca69042612551565b90506000611cb762e6b68083612551565b60028401859055828455600184018190556040519091506000805160206125bc83398151915290611cf19088908890869086908a90612494565b60405180910390a1505050505050565b80546000904290811015611d13575081545b6000611d2c846000015485600101548660020154611556565b90506000818560020154611d409190612481565b90506000838660010154611d549190612481565b90506000611d628884612551565b90506000611d7184848b611fe1565b611d7b9087612551565b60028901839055868955600189018190556040519091506000805160206125bc83398151915290611db5908d908d908a9086908890612494565b60405180910390a150929998505050505050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610c9757604051631afcd79f60e31b815260040160405180910390fd5b6114bc611dcc565b8015610ec757600554611e3a906001600160a01b03168483611be4565b604080516001600160a01b038086168252841660208201529081018290527f70930c4d7c90caf6befd84368a02f1e5493c254095e7d3c5b5105922befb92e590606001611bd7565b6000611e976001600160a01b0384168361202c565b90508051600014158015611ebc575080806020019051810190611eba919061257d565b155b15610ec757604051635274afe760e01b81526001600160a01b03841660048201526024016109df565b806001600160a01b03163b600003611f1b57604051634c9c8ce360e01b81526001600160a01b03821660048201526024016109df565b6000805160206125dc83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051611f67919061259f565b600060405180830381855af49150503d8060008114611fa2576040519150601f19603f3d011682016040523d82523d6000602084013e611fa7565b606091505b5091509150611fb785838361203a565b925050505b92915050565b3415610c975760405163b398979f60e01b815260040160405180910390fd5b600080611fee8486612518565b90506000611fff62e6b68085612518565b9050600061200d8588612551565b6120178385612551565b612021919061252f565b979650505050505050565b6060610af183836000612096565b60608261204f5761204a82612133565b610af1565b815115801561206657506001600160a01b0384163b155b1561208f57604051639996b31560e01b81526001600160a01b03851660048201526024016109df565b5080610af1565b6060814710156120bb5760405163cd78605960e01b81523060048201526024016109df565b600080856001600160a01b031684866040516120d7919061259f565b60006040518083038185875af1925050503d8060008114612114576040519150601f19603f3d011682016040523d82523d6000602084013e612119565b606091505b509150915061212986838361203a565b9695505050505050565b8051156121435780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b038116811461217357600080fd5b919050565b60006020828403121561218a57600080fd5b610af18261215c565b60008083601f8401126121a557600080fd5b50813567ffffffffffffffff8111156121bd57600080fd5b6020830191508360208260051b85010111156121d857600080fd5b9250929050565b600080600080604085870312156121f557600080fd5b843567ffffffffffffffff8082111561220d57600080fd5b61221988838901612193565b9096509450602087013591508082111561223257600080fd5b5061223f87828801612193565b95989497509550505050565b60008060006060848603121561226057600080fd5b6122698461215c565b92506122776020850161215c565b9150604084013590509250925092565b6000806040838503121561229a57600080fd5b6122a38361215c565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156122da57600080fd5b6122e38361215c565b9150602083013567ffffffffffffffff8082111561230057600080fd5b818501915085601f83011261231457600080fd5b813581811115612326576123266122b1565b604051601f8201601f19908116603f0116810190838211818310171561234e5761234e6122b1565b8160405282815288602084870101111561236757600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806040838503121561239c57600080fd5b6123a58361215c565b91506123b36020840161215c565b90509250929050565b60005b838110156123d75781810151838201526020016123bf565b50506000910152565b60208152600082518060208401526123ff8160408501602087016123bc565b601f01601f19169190910160400192915050565b6000806020838503121561242657600080fd5b823567ffffffffffffffff81111561243d57600080fd5b61244985828601612193565b90969095509350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115611fbc57611fbc61246b565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b60208082526033908201527f5061796261636b206672616374696f6e2063616e6e6f7420626520686967686560408201527272207468616e20312028402031302a2a31382960681b606082015260800190565b8082028115828204841417611fbc57611fbc61246b565b60008261254c57634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115611fbc57611fbc61246b565b60006020828403121561257657600080fd5b5051919050565b60006020828403121561258f57600080fd5b81518015158114610af157600080fd5b600082516125b18184602087016123bc565b919091019291505056fe6f0b61812a1954a00351239cba469186147c5b10a1b12ed7f226dc5c1aaafa23360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca164736f6c6343000817000a",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "closeDebt(address,address)": {
        "notice": "Triggered when a debt is paid in full."
      },
      "collectFees(address[],address[])": {
        "notice": "Batch collect fees from an array of borrowers/assets."
      },
      "decreaseDebt(address,address,uint256)": {
        "notice": "Triggered when a trenBox is adjusted or closed (and the borrower has paid back/decreased his loan)."
      },
      "handleRedemptionFee(address,uint256)": {
        "notice": "Triggered by TrenBoxManager.finalizeRedemption(); assumes _amount of _asset has been already transferred to getProtocolRevenueDestination()."
      },
      "increaseDebt(address,address,uint256)": {
        "notice": "Triggered when a trenBox is created and again whenever the borrower acquires additional loans. Collects the minimum fee to the platform, for which there is no refund; holds on to the remaining fees until debt is paid, liquidated, or expired. Attention: this method assumes that (debt token) _feeAmount has already been minted and transferred to this contract."
      },
      "liquidateDebt(address,address)": {
        "notice": "Triggered when a trenBox is liquidated; in that case, all remaining fees are collected by the platform, and no refunds are generated."
      },
      "simulateRefund(address,address,uint256)": {
        "notice": "Simulates the refund due -if- trenBox would be closed at this moment (helper function used by the UI)."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9891,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "activePool",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9893,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "adminContract",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9895,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "borrowerOperations",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9897,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "collSurplusPool",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9899,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "communityIssuance",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 9901,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "debtToken",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 9903,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "defaultPool",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 9905,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "feeCollector",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 9907,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "gasPoolAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 9909,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "trenStaking",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 9911,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "priceFeed",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 9913,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "sortedTrenBoxes",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 9915,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 9917,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "timelockAddress",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 9919,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 9921,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "trenBoxManager",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 9923,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "trenBoxManagerOperations",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 9925,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "isAddressSetupInitialized",
        "offset": 20,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 9930,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "__gap",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_uint256)33_storage"
      },
      {
        "astId": 10735,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "feeRecords",
        "offset": 0,
        "slot": "50",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(FeeRecord)12518_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)33_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[33]",
        "numberOfBytes": "1056"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(FeeRecord)12518_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IFeeCollector.FeeRecord))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(FeeRecord)12518_storage)"
      },
      "t_mapping(t_address,t_struct(FeeRecord)12518_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IFeeCollector.FeeRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeRecord)12518_storage"
      },
      "t_struct(FeeRecord)12518_storage": {
        "encoding": "inplace",
        "label": "struct IFeeCollector.FeeRecord",
        "members": [
          {
            "astId": 12513,
            "contract": "contracts/FeeCollector.sol:FeeCollector",
            "label": "from",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12515,
            "contract": "contracts/FeeCollector.sol:FeeCollector",
            "label": "to",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12517,
            "contract": "contracts/FeeCollector.sol:FeeCollector",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}