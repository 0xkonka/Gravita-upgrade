{
  "address": "0xB1Fe7C970777e8523Efa4E482c4507eaaB466A36",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__CommunityIssuanceZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__LengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__SetupIsInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__TRENStakingZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "address_",
          "type": "address"
        }
      ],
      "name": "ConfigurableAddresses__ZeroAddresses",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeCollector__ArrayMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expected",
          "type": "address"
        }
      ],
      "name": "FeeCollector__BorrowerOperationsOnly",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expected1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expected2",
          "type": "address"
        }
      ],
      "name": "FeeCollector__BorrowerOperationsOrTrenBoxManagerOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeCollector__InvalidTRENStakingAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expected",
          "type": "address"
        }
      ],
      "name": "FeeCollector__TrenBoxManagerOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeRecordUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RedemptionFeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_EXPIRATION_SECONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_FEE_DAYS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_FEE_FRACTION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "authorizeUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "closeDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collSurplusPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_borrowers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        }
      ],
      "name": "collectFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityIssuance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_paybackFraction",
          "type": "uint256"
        }
      ],
      "name": "decreaseDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "feeRecords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolRevenueDestination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "handleRedemptionFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "name": "increaseDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAddressSetupInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "liquidateDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_communityIssuance",
          "type": "address"
        }
      ],
      "name": "setCommunityIssuance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trenStaking",
          "type": "address"
        }
      ],
      "name": "setTRENStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_paybackFraction",
          "type": "uint256"
        }
      ],
      "name": "simulateRefund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTrenBoxes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManagerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaf80196bfe0f35801aa30474ce26441dd6b9c0d12cbe66a50050f7d272eefb24",
  "receipt": {
    "to": null,
    "from": "0xf812844A1f3187F6e31336d3684FAd2dD31219E3",
    "contractAddress": "0xB1Fe7C970777e8523Efa4E482c4507eaaB466A36",
    "transactionIndex": 1,
    "gasUsed": "2299265",
    "logsBloom": "0x
    "blockHash": "0xaaa0467332abbdc495f048503e2113606935b8c847943c65e174aa05af641bc1",
    "transactionHash": "0xaf80196bfe0f35801aa30474ce26441dd6b9c0d12cbe66a50050f7d272eefb24",
    "logs": [],
    "blockNumber": 10772411,
    "cumulativeGasUsed": "2343140",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "76f2ac0d2a40f527e6541dfc9894b953",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__CommunityIssuanceZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__SetupIsInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__TRENStakingZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"ConfigurableAddresses__ZeroAddresses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeCollector__ArrayMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"}],\"name\":\"FeeCollector__BorrowerOperationsOnly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expected1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expected2\",\"type\":\"address\"}],\"name\":\"FeeCollector__BorrowerOperationsOrTrenBoxManagerOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeCollector__InvalidTRENStakingAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"}],\"name\":\"FeeCollector__TrenBoxManagerOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeRecordUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedemptionFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_EXPIRATION_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEE_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEE_FRACTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"authorizeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"closeDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collSurplusPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_borrowers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityIssuance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_paybackFraction\",\"type\":\"uint256\"}],\"name\":\"decreaseDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"feeRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolRevenueDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"handleRedemptionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"increaseDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAddressSetupInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"liquidateDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityIssuance\",\"type\":\"address\"}],\"name\":\"setCommunityIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trenStaking\",\"type\":\"address\"}],\"name\":\"setTRENStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_paybackFraction\",\"type\":\"uint256\"}],\"name\":\"simulateRefund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTrenBoxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManagerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"closeDebt(address,address)\":{\"notice\":\"Triggered when a debt is paid in full.\"},\"collectFees(address[],address[])\":{\"notice\":\"Batch collect fees from an array of borrowers/assets.\"},\"decreaseDebt(address,address,uint256)\":{\"notice\":\"Triggered when a trenBox is adjusted or closed (and the borrower has paid back/decreased his loan).\"},\"increaseDebt(address,address,uint256)\":{\"notice\":\"Triggered when a trenBox is created and again whenever the borrower acquires additional loans. Collects the minimum fee to the platform, for which there is no refund; holds on to the remaining fees until debt is paid, liquidated, or expired. Attention: this method assumes that (debt token) _feeAmount has already been minted and transferred to this contract.\"},\"liquidateDebt(address,address)\":{\"notice\":\"Triggered when a trenBox is liquidated; in that case, all remaining fees are collected by the platform, and no refunds are generated.\"},\"simulateRefund(address,address,uint256)\":{\"notice\":\"Simulates the refund due -if- trenBox would be closed at this moment (helper function used by the UI).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FeeCollector.sol\":\"FeeCollector\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"contracts/Dependencies/ConfigurableAddresses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract ConfigurableAddresses is OwnableUpgradeable {\\n    address public activePool;\\n    address public adminContract;\\n    address public borrowerOperations;\\n    address public collSurplusPool;\\n    address public communityIssuance;\\n    address public debtToken;\\n    address public defaultPool;\\n    address public feeCollector;\\n    address public flashLoanAddress;\\n    address public gasPoolAddress;\\n    address public trenStaking;\\n    address public priceFeed;\\n    address public sortedTrenBoxes;\\n    address public stabilityPool;\\n    address public timelockAddress;\\n    address public treasuryAddress;\\n    address public trenBoxManager;\\n    address public trenBoxManagerOperations;\\n\\n    bool public isAddressSetupInitialized;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[33] private __gap; // Goerli uses 47; Arbitrum uses 33\\n\\n    error ConfigurableAddresses__SetupIsInitialized();\\n    error ConfigurableAddresses__ZeroAddresses(uint256 position, address address_);\\n    error ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n    error ConfigurableAddresses__TRENStakingZeroAddress();\\n    error ConfigurableAddresses__LengthMismatch();\\n\\n    // Dependency setters\\n    // -----------------------------------------------------------------------------------------------\\n\\n    function setAddresses(address[] calldata _addresses) external onlyOwner {\\n        if (isAddressSetupInitialized) {\\n            revert ConfigurableAddresses__SetupIsInitialized();\\n        }\\n        if (_addresses.length != 16) {\\n            revert ConfigurableAddresses__LengthMismatch();\\n        }\\n\\n        for (uint256 i = 0; i < 16; i++) {\\n            if (_addresses[i] == address(0)) {\\n                revert ConfigurableAddresses__ZeroAddresses(i, _addresses[i]);\\n            }\\n        }\\n        activePool = _addresses[0];\\n        adminContract = _addresses[1];\\n        borrowerOperations = _addresses[2];\\n        collSurplusPool = _addresses[3];\\n        debtToken = _addresses[4];\\n        defaultPool = _addresses[5];\\n        feeCollector = _addresses[6];\\n        flashLoanAddress = _addresses[7];\\n        gasPoolAddress = _addresses[8];\\n        priceFeed = _addresses[9];\\n        sortedTrenBoxes = _addresses[10];\\n        stabilityPool = _addresses[11];\\n        timelockAddress = _addresses[12];\\n        treasuryAddress = _addresses[13];\\n        trenBoxManager = _addresses[14];\\n        trenBoxManagerOperations = _addresses[15];\\n\\n        isAddressSetupInitialized = true;\\n    }\\n\\n    function setCommunityIssuance(address _communityIssuance) public onlyOwner {\\n        if (_communityIssuance == address(0)) {\\n            revert ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n        }\\n        communityIssuance = _communityIssuance;\\n    }\\n\\n    function setTRENStaking(address _trenStaking) public onlyOwner {\\n        if (_trenStaking == address(0)) {\\n            revert ConfigurableAddresses__TRENStakingZeroAddress();\\n        }\\n        trenStaking = _trenStaking;\\n    }\\n}\\n\",\"keccak256\":\"0xaf7c303784379bebf2e43e41c33c27c1309a639d360b5823240b1a8f5935b064\",\"license\":\"MIT\"},\"contracts/FeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { UUPSUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport { ConfigurableAddresses } from \\\"./Dependencies/ConfigurableAddresses.sol\\\";\\nimport { IDebtToken } from \\\"./Interfaces/IDebtToken.sol\\\";\\nimport { IFeeCollector } from \\\"./Interfaces/IFeeCollector.sol\\\";\\nimport { ITRENStaking } from \\\"./Interfaces/ITRENStaking.sol\\\";\\nimport { IAdminContract } from \\\"./Interfaces/IAdminContract.sol\\\";\\n\\ncontract FeeCollector is\\n    IFeeCollector,\\n    UUPSUpgradeable,\\n    OwnableUpgradeable,\\n    ConfigurableAddresses\\n{\\n    using SafeERC20 for IERC20;\\n\\n    // Constants\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    string public constant NAME = \\\"FeeCollector\\\";\\n\\n    uint256 public constant MIN_FEE_DAYS = 7;\\n    uint256 public constant MIN_FEE_FRACTION = 0.038461538 * 1 ether; // (1/26) fee divided by 26\\n        // weeks\\n    uint256 public constant FEE_EXPIRATION_SECONDS = 175 * 1 days; // ~ 6 months, minus one week\\n        // (MIN_FEE_DAYS)\\n\\n    // State\\n    // ------------------------------------------------------------------------------------------------------------\\n\\n    mapping(address borrower => mapping(address asset => FeeRecord feeParams)) public feeRecords;\\n\\n    // Initializer\\n    // ------------------------------------------------------------------------------------------------------\\n\\n    function initialize() public initializer {\\n        address initialOwner = _msgSender();\\n\\n        __Ownable_init(initialOwner);\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    // Public/external methods\\n    // ------------------------------------------------------------------------------------------\\n\\n    /**\\n     * Triggered when a trenBox is created and again whenever the borrower acquires additional\\n     * loans.\\n     * Collects the minimum fee to the platform, for which there is no refund; holds on to the\\n     * remaining fees until\\n     * debt is paid, liquidated, or expired.\\n     *\\n     * Attention: this method assumes that (debt token) _feeAmount has already been minted and\\n     * transferred to this contract.\\n     */\\n    function increaseDebt(\\n        address _borrower,\\n        address _asset,\\n        uint256 _feeAmount\\n    )\\n        external\\n        override\\n        onlyBorrowerOperations\\n    {\\n        uint256 minFeeAmount = (MIN_FEE_FRACTION * _feeAmount) / 1 ether;\\n        uint256 refundableFeeAmount = _feeAmount - minFeeAmount;\\n        uint256 feeToCollect = _createOrUpdateFeeRecord(_borrower, _asset, refundableFeeAmount);\\n        _collectFee(_borrower, _asset, minFeeAmount + feeToCollect);\\n    }\\n\\n    /**\\n     * Triggered when a trenBox is adjusted or closed (and the borrower has paid back/decreased his\\n     * loan).\\n     */\\n    function decreaseDebt(\\n        address _borrower,\\n        address _asset,\\n        uint256 _paybackFraction\\n    )\\n        external\\n        override\\n        onlyBorrowerOperationsOrTrenBoxManager\\n    {\\n        _decreaseDebt(_borrower, _asset, _paybackFraction);\\n    }\\n\\n    /**\\n     * Triggered when a debt is paid in full.\\n     */\\n    function closeDebt(\\n        address _borrower,\\n        address _asset\\n    )\\n        external\\n        override\\n        onlyBorrowerOperationsOrTrenBoxManager\\n    {\\n        _decreaseDebt(_borrower, _asset, 1 ether);\\n    }\\n\\n    /**\\n     * Simulates the refund due -if- trenBox would be closed at this moment (helper function used by\\n     * the UI).\\n     */\\n    function simulateRefund(\\n        address _borrower,\\n        address _asset,\\n        uint256 _paybackFraction\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(_paybackFraction <= 1 ether, \\\"Payback fraction cannot be higher than 1 (@ 10**18)\\\");\\n        require(_paybackFraction != 0, \\\"Payback fraction cannot be zero\\\");\\n        FeeRecord storage record = feeRecords[_borrower][_asset];\\n        if (record.amount == 0 || record.to < block.timestamp) {\\n            return 0;\\n        }\\n        uint256 expiredAmount = _calcExpiredAmount(record.from, record.to, record.amount);\\n        if (_paybackFraction == 1e18) {\\n            // full payback\\n            return record.amount - expiredAmount;\\n        } else {\\n            // calc refund amount proportional to the payment\\n            return ((record.amount - expiredAmount) * _paybackFraction) / 1 ether;\\n        }\\n    }\\n\\n    /**\\n     * Triggered when a trenBox is liquidated; in that case, all remaining fees are collected by the\\n     * platform,\\n     * and no refunds are generated.\\n     */\\n    function liquidateDebt(\\n        address _borrower,\\n        address _asset\\n    )\\n        external\\n        override\\n        onlyTrenBoxManager\\n    {\\n        FeeRecord memory mRecord = feeRecords[_borrower][_asset];\\n        if (mRecord.amount != 0) {\\n            _closeExpiredOrLiquidatedFeeRecord(_borrower, _asset, mRecord.amount);\\n        }\\n    }\\n\\n    /**\\n     * Batch collect fees from an array of borrowers/assets.\\n     */\\n    function collectFees(\\n        address[] calldata _borrowers,\\n        address[] calldata _assets\\n    )\\n        external\\n        override\\n    {\\n        uint256 borrowersLength = _borrowers.length;\\n        if (borrowersLength != _assets.length || borrowersLength == 0) {\\n            revert FeeCollector__ArrayMismatch();\\n        }\\n        uint256 NOW = block.timestamp;\\n        for (uint256 i = 0; i < borrowersLength;) {\\n            address borrower = _borrowers[i];\\n            address asset = _assets[i];\\n            FeeRecord storage sRecord = feeRecords[borrower][asset];\\n            uint256 expiredAmount = _calcExpiredAmount(sRecord.from, sRecord.to, sRecord.amount);\\n            if (expiredAmount > 0) {\\n                uint256 updatedAmount = sRecord.amount - expiredAmount;\\n                sRecord.amount = updatedAmount;\\n                sRecord.from = NOW;\\n                _collectFee(borrower, asset, expiredAmount);\\n                emit FeeRecordUpdated(borrower, asset, NOW, sRecord.to, updatedAmount);\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function handleRedemptionFee(address _asset, uint256 _amount) external onlyTrenBoxManager {\\n        if (IAdminContract(adminContract).getRouteToTRENStaking()) {\\n            ITRENStaking(trenStaking).increaseFeeAsset(_asset, _amount);\\n        }\\n        emit RedemptionFeeCollected(_asset, _amount);\\n    }\\n\\n    function getProtocolRevenueDestination() public view override returns (address) {\\n        return IAdminContract(adminContract).getRouteToTRENStaking() ? trenStaking : treasuryAddress;\\n    }\\n\\n    // Helper & internal methods\\n    // ----------------------------------------------------------------------------------------\\n\\n    function _decreaseDebt(address _borrower, address _asset, uint256 _paybackFraction) internal {\\n        uint256 NOW = block.timestamp;\\n        require(_paybackFraction <= 1 ether, \\\"Payback fraction cannot be higher than 1 (@ 10**18)\\\");\\n        require(_paybackFraction != 0, \\\"Payback fraction cannot be zero\\\");\\n        FeeRecord storage sRecord = feeRecords[_borrower][_asset];\\n        if (sRecord.amount == 0) {\\n            return;\\n        }\\n        if (sRecord.to <= NOW) {\\n            _closeExpiredOrLiquidatedFeeRecord(_borrower, _asset, sRecord.amount);\\n        } else {\\n            // collect expired refund\\n            uint256 expiredAmount = _calcExpiredAmount(sRecord.from, sRecord.to, sRecord.amount);\\n            _collectFee(_borrower, _asset, expiredAmount);\\n            if (_paybackFraction == 1e18) {\\n                // on a full payback, there's no refund; refund amount is discounted from final\\n                // payment\\n                uint256 refundAmount = sRecord.amount - expiredAmount;\\n                IDebtToken(debtToken).burnFromWhitelistedContract(refundAmount);\\n                sRecord.amount = 0;\\n                emit FeeRecordUpdated(_borrower, _asset, NOW, 0, 0);\\n            } else {\\n                // refund amount proportional to the payment\\n                uint256 refundAmount =\\n                    ((sRecord.amount - expiredAmount) * _paybackFraction) / 1 ether;\\n                _refundFee(_borrower, _asset, refundAmount);\\n                uint256 updatedAmount = sRecord.amount - expiredAmount - refundAmount;\\n                sRecord.amount = updatedAmount;\\n                sRecord.from = NOW;\\n                emit FeeRecordUpdated(_borrower, _asset, NOW, sRecord.to, updatedAmount);\\n            }\\n        }\\n    }\\n\\n    function _createOrUpdateFeeRecord(\\n        address _borrower,\\n        address _asset,\\n        uint256 _feeAmount\\n    )\\n        internal\\n        returns (uint256 feeToCollect)\\n    {\\n        FeeRecord storage sRecord = feeRecords[_borrower][_asset];\\n        if (sRecord.amount == 0) {\\n            _createFeeRecord(_borrower, _asset, _feeAmount, sRecord);\\n        } else {\\n            if (sRecord.to <= block.timestamp) {\\n                feeToCollect = sRecord.amount;\\n                _createFeeRecord(_borrower, _asset, _feeAmount, sRecord);\\n            } else {\\n                feeToCollect = _updateFeeRecord(_borrower, _asset, _feeAmount, sRecord);\\n            }\\n        }\\n    }\\n\\n    function _createFeeRecord(\\n        address _borrower,\\n        address _asset,\\n        uint256 _feeAmount,\\n        FeeRecord storage _sRecord\\n    )\\n        internal\\n    {\\n        uint256 from = block.timestamp + MIN_FEE_DAYS * 1 days;\\n        uint256 to = from + FEE_EXPIRATION_SECONDS;\\n        _sRecord.amount = _feeAmount;\\n        _sRecord.from = from;\\n        _sRecord.to = to;\\n        emit FeeRecordUpdated(_borrower, _asset, from, to, _feeAmount);\\n    }\\n\\n    function _updateFeeRecord(\\n        address _borrower,\\n        address _asset,\\n        uint256 _addedAmount,\\n        FeeRecord storage _sRecord\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 NOW = block.timestamp;\\n        if (NOW < _sRecord.from) {\\n            // loan is still in its first week (MIN_FEE_DAYS)\\n            NOW = _sRecord.from;\\n        }\\n        uint256 expiredAmount = _calcExpiredAmount(_sRecord.from, _sRecord.to, _sRecord.amount);\\n        uint256 remainingAmount = _sRecord.amount - expiredAmount;\\n        uint256 remainingTime = _sRecord.to - NOW;\\n        uint256 updatedAmount = remainingAmount + _addedAmount;\\n        uint256 updatedTo = NOW + _calcNewDuration(remainingAmount, remainingTime, _addedAmount);\\n        _sRecord.amount = updatedAmount;\\n        _sRecord.from = NOW;\\n        _sRecord.to = updatedTo;\\n        emit FeeRecordUpdated(_borrower, _asset, NOW, updatedTo, updatedAmount);\\n        return expiredAmount;\\n    }\\n\\n    function _closeExpiredOrLiquidatedFeeRecord(\\n        address _borrower,\\n        address _asset,\\n        uint256 _amount\\n    )\\n        internal\\n    {\\n        _collectFee(_borrower, _asset, _amount);\\n        delete feeRecords[_borrower][_asset];\\n        emit FeeRecordUpdated(_borrower, _asset, block.timestamp, 0, 0);\\n    }\\n\\n    function _calcExpiredAmount(\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 _amount\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 NOW = block.timestamp;\\n        if (_from > NOW) {\\n            return 0;\\n        }\\n        if (NOW >= _to) {\\n            return _amount;\\n        }\\n        uint256 PRECISION = 1e9;\\n        uint256 lifeTime = _to - _from;\\n        uint256 elapsedTime = NOW - _from;\\n        uint256 decayRate = (_amount * PRECISION) / lifeTime;\\n        uint256 expiredAmount = (elapsedTime * decayRate) / PRECISION;\\n        return expiredAmount;\\n    }\\n\\n    function _calcNewDuration(\\n        uint256 remainingAmount,\\n        uint256 remainingTimeToLive,\\n        uint256 addedAmount\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 prevWeight = remainingAmount * remainingTimeToLive;\\n        uint256 nextWeight = addedAmount * FEE_EXPIRATION_SECONDS;\\n        uint256 newDuration = (prevWeight + nextWeight) / (remainingAmount + addedAmount);\\n        return newDuration;\\n    }\\n\\n    /**\\n     * Transfers collected (debt token) fees to either the treasury or the TRENStaking contract,\\n     * depending on a flag.\\n     */\\n    function _collectFee(address _borrower, address _asset, uint256 _feeAmount) internal {\\n        if (_feeAmount != 0) {\\n            address destination = getProtocolRevenueDestination();\\n            IERC20(debtToken).safeTransfer(destination, _feeAmount);\\n            if (IAdminContract(adminContract).getRouteToTRENStaking()) {\\n                ITRENStaking(trenStaking).increaseFeeDebtToken(_feeAmount);\\n            }\\n            emit FeeCollected(_borrower, _asset, destination, _feeAmount);\\n        }\\n    }\\n\\n    function _refundFee(address _borrower, address _asset, uint256 _refundAmount) internal {\\n        if (_refundAmount != 0) {\\n            IERC20(debtToken).safeTransfer(_borrower, _refundAmount);\\n            emit FeeRefunded(_borrower, _asset, _refundAmount);\\n        }\\n    }\\n\\n    // Modifiers\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    modifier onlyBorrowerOperations() {\\n        if (msg.sender != borrowerOperations) {\\n            revert FeeCollector__BorrowerOperationsOnly(msg.sender, borrowerOperations);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyTrenBoxManager() {\\n        if (msg.sender != trenBoxManager) {\\n            revert FeeCollector__TrenBoxManagerOnly(msg.sender, trenBoxManager);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyBorrowerOperationsOrTrenBoxManager() {\\n        if (msg.sender != borrowerOperations && msg.sender != trenBoxManager) {\\n            revert FeeCollector__BorrowerOperationsOrTrenBoxManagerOnly(\\n                msg.sender, borrowerOperations, trenBoxManager\\n            );\\n        }\\n        _;\\n    }\\n\\n    function authorizeUpgrade(address newImplementation) public {\\n        _authorizeUpgrade(newImplementation);\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner { }\\n}\\n\",\"keccak256\":\"0x19086f6b14f318018d5adbc1b5cd7608c34ba722771b76d31ee8057856a6c91e\",\"license\":\"MIT\"},\"contracts/Interfaces/IAdminContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IAdminContract {\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    struct CollateralParams {\\n        uint256 decimals;\\n        uint256 index; // Maps to token address in validCollateral[]\\n        bool active;\\n        uint256 borrowingFee;\\n        uint256 ccr;\\n        uint256 mcr;\\n        uint256 debtTokenGasCompensation; // Amount of debtToken to be locked in gas pool on opening\\n            // trenBoxes\\n        uint256 minNetDebt; // Minimum amount of net debtToken a trenBox must have\\n        uint256 mintCap;\\n        uint256 percentDivisor;\\n        uint256 redemptionFeeFloor;\\n        uint256 redemptionBlockTimestamp;\\n    }\\n\\n    struct FlashLoanParams {\\n        uint256 flashLoanFee; // 10 = 0,1%, 100 = 10% => 10 out of $1000 = $10\\n        uint256 flashLoanMinDebt; // min amount of trenUSD to mint for Flash Loan\\n        uint256 flashLoanMaxDebt; // max amount of trenUSD to mint for Flash Loan\\n    }\\n\\n    // Custom Errors\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    error SafeCheckError(string parameter, uint256 valueEntered, uint256 minValue, uint256 maxValue);\\n    error AdminContract__OnlyOwner();\\n    error AdminContract__OnlyTimelock();\\n    error AdminContract__CollateralAlreadyInitialized();\\n    error AdminContract__CollateralExists();\\n    error AdminContract__CollateralDoesNotExist();\\n    error AdminContract__CollateralNotConfigured();\\n\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    event CollateralAdded(address _collateral);\\n    event MCRChanged(uint256 oldMCR, uint256 newMCR);\\n    event CCRChanged(uint256 oldCCR, uint256 newCCR);\\n    event MinNetDebtChanged(uint256 oldMinNet, uint256 newMinNet);\\n    event PercentDivisorChanged(uint256 oldPercentDiv, uint256 newPercentDiv);\\n    event BorrowingFeeChanged(uint256 oldBorrowingFee, uint256 newBorrowingFee);\\n    event RedemptionFeeFloorChanged(uint256 oldRedemptionFeeFloor, uint256 newRedemptionFeeFloor);\\n    event MintCapChanged(uint256 oldMintCap, uint256 newMintCap);\\n    event RedemptionBlockTimestampChanged(address _collateral, uint256 _blockTimestamp);\\n    event FlashLoanFeeChanged(uint256 oldFee, uint256 newFee);\\n    event FlashLoanMinDebtChanged(uint256 oldMinDebt, uint256 newMinDebt);\\n    event FlashLoanMaxDebtChanged(uint256 oldMaxDebt, uint256 newMaxDebt);\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    function DECIMAL_PRECISION() external view returns (uint256);\\n\\n    function _100pct() external view returns (uint256);\\n\\n    function addNewCollateral(\\n        address _collateral,\\n        uint256 _debtTokenGasCompensation,\\n        uint256 _decimals\\n    )\\n        external;\\n\\n    function setCollateralParameters(\\n        address _collateral,\\n        uint256 borrowingFee,\\n        uint256 ccr,\\n        uint256 mcr,\\n        uint256 minNetDebt,\\n        uint256 mintCap,\\n        uint256 percentDivisor,\\n        uint256 redemptionFeeFloor\\n    )\\n        external;\\n\\n    function setMCR(address _collateral, uint256 newMCR) external;\\n\\n    function setCCR(address _collateral, uint256 newCCR) external;\\n\\n    function setMinNetDebt(address _collateral, uint256 minNetDebt) external;\\n\\n    function setPercentDivisor(address _collateral, uint256 precentDivisor) external;\\n\\n    function setBorrowingFee(address _collateral, uint256 borrowingFee) external;\\n\\n    function setRedemptionFeeFloor(address _collateral, uint256 redemptionFeeFloor) external;\\n\\n    function setMintCap(address _collateral, uint256 mintCap) external;\\n\\n    function setRedemptionBlockTimestamp(address _collateral, uint256 _blockTimestamp) external;\\n\\n    function switchRouteToTRENStaking() external;\\n\\n    function getIndex(address _collateral) external view returns (uint256);\\n\\n    function getIsActive(address _collateral) external view returns (bool);\\n\\n    function getValidCollateral() external view returns (address[] memory);\\n\\n    function getMcr(address _collateral) external view returns (uint256);\\n\\n    function getCcr(address _collateral) external view returns (uint256);\\n\\n    function getDebtTokenGasCompensation(address _collateral) external view returns (uint256);\\n\\n    function getMinNetDebt(address _collateral) external view returns (uint256);\\n\\n    function getPercentDivisor(address _collateral) external view returns (uint256);\\n\\n    function getBorrowingFee(address _collateral) external view returns (uint256);\\n\\n    function getRedemptionFeeFloor(address _collateral) external view returns (uint256);\\n\\n    function getRedemptionBlockTimestamp(address _collateral) external view returns (uint256);\\n\\n    function getMintCap(address _collateral) external view returns (uint256);\\n\\n    function getTotalAssetDebt(address _asset) external view returns (uint256);\\n\\n    function getFlashLoanFee() external view returns (uint256);\\n\\n    function getFlashLoanMinNetDebt() external view returns (uint256);\\n\\n    function getFlashLoanMaxNetDebt() external view returns (uint256);\\n\\n    function getRouteToTRENStaking() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8bde7a9f4688d7332d5623a8d7c03ea4d3f2023b70e73196dfc87a3d4c0913df\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDebtToken is IERC20 {\\n    event TokenBalanceUpdated(address _user, uint256 _amount);\\n    event EmergencyStopMintingCollateral(address _asset, bool state);\\n    event WhitelistChanged(address _whitelisted, bool whitelisted);\\n    event ProtocolContractsAddressesSet(\\n        address borrowerOperations, address stabilityPool, address trenBoxManager\\n    );\\n\\n    error DebtToken__MintBlockedForCollateral(address collateral);\\n    error DebtToken__InvalidAddressToConnect();\\n    error DebtToken__CannotTransferTokensToZeroAddress();\\n    error DebtToken__CannotTransferTokensToTokenContract();\\n    error DebtToken__NotWhitelistedContract(address notWhitelistedContract);\\n    error DebtToken__CallerIsNotBorrowerOperations(address caller);\\n    error DebtToken__CallerIsNotStabilityPool(address caller);\\n    error DebtToken__CannotBurnTokens();\\n    error DebtToken__CannotReturnFromPool();\\n\\n    function emergencyStopMinting(address _asset, bool status) external;\\n\\n    function mint(address _asset, address _account, uint256 _amount) external;\\n\\n    function mintFromWhitelistedContract(uint256 _amount) external;\\n\\n    function burnFromWhitelistedContract(uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function sendToPool(address _sender, address poolAddress, uint256 _amount) external;\\n\\n    function returnFromPool(address poolAddress, address user, uint256 _amount) external;\\n\\n    function addWhitelist(address _address) external;\\n\\n    function removeWhitelist(address _address) external;\\n}\\n\",\"keccak256\":\"0x4c48896e514f0900029e5b4433bbb627cf2aea7102f792cac729ca9cd79782d1\",\"license\":\"MIT\"},\"contracts/Interfaces/IFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface IFeeCollector {\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    event FeeRecordUpdated(\\n        address borrower, address asset, uint256 from, uint256 to, uint256 amount\\n    );\\n    event FeeCollected(address borrower, address asset, address collector, uint256 amount);\\n    event FeeRefunded(address borrower, address asset, uint256 amount);\\n    event RedemptionFeeCollected(address asset, uint256 amount);\\n\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    struct FeeRecord {\\n        uint256 from; // timestamp in seconds\\n        uint256 to; // timestamp in seconds\\n        uint256 amount; // refundable fee amount\\n    }\\n\\n    // Custom Errors\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    error FeeCollector__ArrayMismatch();\\n    error FeeCollector__BorrowerOperationsOnly(address sender, address expected);\\n    error FeeCollector__BorrowerOperationsOrTrenBoxManagerOnly(\\n        address sender, address expected1, address expected2\\n    );\\n    error FeeCollector__InvalidTRENStakingAddress();\\n    error FeeCollector__TrenBoxManagerOnly(address sender, address expected);\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    function increaseDebt(address _borrower, address _asset, uint256 _feeAmount) external;\\n\\n    function decreaseDebt(address _borrower, address _asset, uint256 _paybackFraction) external;\\n\\n    function closeDebt(address _borrower, address _asset) external;\\n\\n    function liquidateDebt(address _borrower, address _asset) external;\\n\\n    function simulateRefund(\\n        address _borrower,\\n        address _asset,\\n        uint256 _paybackFraction\\n    )\\n        external\\n        returns (uint256);\\n\\n    function collectFees(address[] calldata _borrowers, address[] calldata _assets) external;\\n\\n    function handleRedemptionFee(address _asset, uint256 _amount) external;\\n\\n    function getProtocolRevenueDestination() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4acb0589d73afd26dd9ea281eef5052818955b501f2371c21a1acac953bf5152\",\"license\":\"MIT\"},\"contracts/Interfaces/ITRENStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface ITRENStaking {\\n    struct Snapshot {\\n        mapping(address asset => uint256 feeAmount) assetsFeeSnapshot;\\n        uint256 debtTokenFeeSnapshot;\\n    }\\n\\n    error TRENStaking__SetupAlreadyInitialized();\\n    error TRENStaking__StakingOnPause();\\n    error TRENStaking__InvalidAddresses();\\n    error TRENStaking__InvalidAmount(uint256 zeroValue);\\n    error TRENStaking__OnlyFeeCollector(address caller, address expected);\\n    error TRENStaking__InvalidStakeAmount(uint256 zeroValue);\\n\\n    event SentAssetFeeToTreasury(address indexed _asset, uint256 _amount);\\n    event StakeUpdated(address indexed _staker, uint256 _newStake);\\n    event StakingAssetGainWithdrawn(\\n        address indexed _staker, address indexed _asset, uint256 _assetGain\\n    );\\n\\n    event StakingDebtTokenGainWithdrawn(address indexed _staker, uint256 _debtTokenAmount);\\n    event AssetFeeUpdated(address indexed _asset, uint256 _amount);\\n    event TotalDebtTokenFeeUpdated(uint256 _amount);\\n    event TotalTRENStakedUpdated(uint256 _totalTRENStaked);\\n    event SentAsset(address indexed _asset, address indexed _account, uint256 _amount);\\n    event StakerSnapshotsUpdated(address _staker, uint256 _feeAsset, uint256 _feeDebtToken);\\n\\n    function increaseFeeAsset(address _asset, uint256 _feeAsset) external;\\n    function increaseFeeDebtToken(uint256 _TRENFee) external;\\n}\\n\",\"keccak256\":\"0x767e80b6e6c96a6ce2669f61feb32751220c9d858ed6c8c7ff89298751db43eb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b506080516128a061003e60003960008181611909015281816119320152611a7301526128a06000f3fe60806040526004361061025c5760003560e01c8063871d814511610144578063c5f956af116100b6578063ed60f1881161007a578063ed60f18814610782578063f1c05a7e146107a2578063f2fde38b146107c2578063f8d89898146107e2578063fe06073314610802578063fe9d03231461082257600080fd5b8063c5f956af146106d6578063c8564c62146106f6578063cc8b21e414610727578063cda775f914610747578063d0224e6c1461076757600080fd5b8063a3f4df7e11610108578063a3f4df7e146105e0578063aa36069d14610625578063ad3cb1cc14610645578063b957172114610676578063c05c5e9414610696578063c415b95c146106b657600080fd5b8063871d8145146104ea5780638da5cb5b1461050a57806395fb16bb1461054757806398768db2146105675780639f802fb81461057e57600080fd5b806352d1902d116101dd57806373c9bde0116101a157806373c9bde01461044b578063741bef1a146104605780637693ccdb1461048057806377553ad4146104955780637f7dde4a146104b55780638129fc1c146104d557600080fd5b806352d1902d146103c157806355dafa46146103d65780636a85d67d146103f65780636de2449214610416578063715018a61461043657600080fd5b80634169467d116102245780634169467d1461032057806341c7a5ee146103405780634a7919571461036e5780634bc66f321461038e5780634f1ef286146103ae57600080fd5b806301c9310014610261578063048c661d146102835780630833c62d146102c05780630a34d4d6146102e05780633cc7422514610300575b600080fd5b34801561026d57600080fd5b5061028161027c366004612410565b610842565b005b34801561028f57600080fd5b50600d546102a3906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102cc57600080fd5b506102816102db366004612477565b610893565b3480156102ec57600080fd5b506011546102a3906001600160a01b031681565b34801561030c57600080fd5b506006546102a3906001600160a01b031681565b34801561032c57600080fd5b506008546102a3906001600160a01b031681565b34801561034c57600080fd5b5061036061035b3660046124e3565b6109de565b6040519081526020016102b7565b34801561037a57600080fd5b5061028161038936600461251f565b610b21565b34801561039a57600080fd5b50600e546102a3906001600160a01b031681565b6102816103bc36600461255f565b610c8a565b3480156103cd57600080fd5b50610360610ca9565b3480156103e257600080fd5b50600a546102a3906001600160a01b031681565b34801561040257600080fd5b50610281610411366004612410565b610cc6565b34801561042257600080fd5b506102816104313660046124e3565b610d17565b34801561044257600080fd5b50610281610db8565b34801561045757600080fd5b506102a3610dcc565b34801561046c57600080fd5b50600b546102a3906001600160a01b031681565b34801561048c57600080fd5b50610360600781565b3480156104a157600080fd5b506002546102a3906001600160a01b031681565b3480156104c157600080fd5b506000546102a3906001600160a01b031681565b3480156104e157600080fd5b50610281610e5e565b3480156104f657600080fd5b50610281610505366004612621565b610f77565b34801561051657600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166102a3565b34801561055357600080fd5b506004546102a3906001600160a01b031681565b34801561057357600080fd5b5061036062e6b68081565b34801561058a57600080fd5b506105c5610599366004612621565b603360209081526000928352604080842090915290825290208054600182015460029092015490919083565b604080519384526020840192909252908201526060016102b7565b3480156105ec57600080fd5b506106186040518060400160405280600c81526020016b2332b2a1b7b63632b1ba37b960a11b81525081565b6040516102b79190612678565b34801561063157600080fd5b50610281610640366004612621565b610fed565b34801561065157600080fd5b50610618604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561068257600080fd5b506102816106913660046126ab565b611091565b3480156106a257600080fd5b506001546102a3906001600160a01b031681565b3480156106c257600080fd5b506007546102a3906001600160a01b031681565b3480156106e257600080fd5b50600f546102a3906001600160a01b031681565b34801561070257600080fd5b5060115461071790600160a01b900460ff1681565b60405190151581526020016102b7565b34801561073357600080fd5b50600c546102a3906001600160a01b031681565b34801561075357600080fd5b506003546102a3906001600160a01b031681565b34801561077357600080fd5b506103606688a490a601540081565b34801561078e57600080fd5b5061028161079d3660046124e3565b61160d565b3480156107ae57600080fd5b506010546102a3906001600160a01b031681565b3480156107ce57600080fd5b506102816107dd366004612410565b61167b565b3480156107ee57600080fd5b506005546102a3906001600160a01b031681565b34801561080e57600080fd5b5061028161081d366004612410565b6116b9565b34801561082e57600080fd5b506009546102a3906001600160a01b031681565b61084a6116c2565b6001600160a01b038116610871576040516385d3330760e01b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b8281811415806108a1575080155b156108bf57604051631a04c91160e01b815260040160405180910390fd5b4260005b828110156109d55760008787838181106108df576108df6126ed565b90506020020160208101906108f49190612410565b9050600086868481811061090a5761090a6126ed565b905060200201602081019061091f9190612410565b6001600160a01b03808416600090815260336020908152604080832093851683529290529081208054600182015460028301549495509193610961929061171d565b905080156109c557600081836002015461097b9190612719565b6002840181905587845590506109928585846117a1565b6000805160206128548339815191528585898660010154856040516109bb95949392919061272c565b60405180910390a1505b5050600190920191506108c39050565b50505050505050565b6000670de0b6b3a7640000821115610a115760405162461bcd60e51b8152600401610a089061275d565b60405180910390fd5b81600003610a615760405162461bcd60e51b815260206004820152601f60248201527f5061796261636b206672616374696f6e2063616e6e6f74206265207a65726f006044820152606401610a08565b6001600160a01b03808516600090815260336020908152604080832093871683529290522060028101541580610a9a5750428160010154105b15610aa9576000915050610b1a565b6000610ac282600001548360010154846002015461171d565b905083670de0b6b3a764000003610aec57808260020154610ae39190612719565b92505050610b1a565b670de0b6b3a764000084828460020154610b069190612719565b610b1091906127b0565b610ae391906127c7565b9392505050565b6010546001600160a01b03163314610b6157601054604051636545048760e01b81523360048201526001600160a01b039091166024820152604401610a08565b600160009054906101000a90046001600160a01b03166001600160a01b031663650aabe26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd891906127e9565b15610c4457600a546040516330a8d47360e11b81526001600160a01b0384811660048301526024820184905290911690636151a8e690604401600060405180830381600087803b158015610c2b57600080fd5b505af1158015610c3f573d6000803e3d6000fd5b505050505b604080516001600160a01b0384168152602081018390527fcf74743fee8ef45d0f775d63c2e7129e1aec29d2ce0222e2d979104c29210481910160405180910390a15050565b610c926118fe565b610c9b826119a3565b610ca582826119ab565b5050565b6000610cb3611a68565b5060008051602061287483398151915290565b610cce6116c2565b6001600160a01b038116610cf55760405163706ebc6560e11b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314610d575760025460405163428f391560e11b81523360048201526001600160a01b039091166024820152604401610a08565b6000670de0b6b3a7640000610d73836688a490a60154006127b0565b610d7d91906127c7565b90506000610d8b8284612719565b90506000610d9a868684611ab1565b9050610db08686610dab848761280b565b6117a1565b505050505050565b610dc06116c2565b610dca6000611b29565b565b6001546040805163328555f160e11b815290516000926001600160a01b03169163650aabe29160048083019260209291908290030181865afa158015610e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3a91906127e9565b610e4e5750600f546001600160a01b031690565b50600a546001600160a01b031690565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610ea45750825b905060008267ffffffffffffffff166001148015610ec15750303b155b905081158015610ecf575080155b15610eed5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610f1757845460ff60401b1916600160401b1785555b33610f2181611b9a565b610f29611bab565b508315610f7057845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b6002546001600160a01b03163314801590610f9d57506010546001600160a01b03163314155b15610fda5760025460105460405163bea6c3fd60e01b81523360048201526001600160a01b03928316602482015291166044820152606401610a08565b610ca58282670de0b6b3a7640000611bb3565b6010546001600160a01b0316331461102d57601054604051636545048760e01b81523360048201526001600160a01b039091166024820152604401610a08565b6001600160a01b03808316600090815260336020908152604080832093851683529281529082902082516060810184528154815260018201549281019290925260020154918101829052901561108c5761108c83838360400151611e09565b505050565b6110996116c2565b601154600160a01b900460ff16156110c357604051625f22e960e41b815260040160405180910390fd5b601081146110e457604051633f5a111d60e21b815260040160405180910390fd5b60005b6010811015611182576000838383818110611104576111046126ed565b90506020020160208101906111199190612410565b6001600160a01b03160361117a578083838381811061113a5761113a6126ed565b905060200201602081019061114f9190612410565b604051630d9d339f60e01b815260048101929092526001600160a01b03166024820152604401610a08565b6001016110e7565b5081816000818110611196576111966126ed565b90506020020160208101906111ab9190612410565b600080546001600160a01b0319166001600160a01b0392909216919091179055818160018181106111de576111de6126ed565b90506020020160208101906111f39190612410565b600180546001600160a01b0319166001600160a01b039290921691909117905581816002818110611226576112266126ed565b905060200201602081019061123b9190612410565b600280546001600160a01b0319166001600160a01b03929092169190911790558181600381811061126e5761126e6126ed565b90506020020160208101906112839190612410565b600380546001600160a01b0319166001600160a01b0392909216919091179055818160048181106112b6576112b66126ed565b90506020020160208101906112cb9190612410565b600580546001600160a01b0319166001600160a01b0392909216919091178155829082908181106112fe576112fe6126ed565b90506020020160208101906113139190612410565b600680546001600160a01b0319166001600160a01b039290921691909117815582908290818110611346576113466126ed565b905060200201602081019061135b9190612410565b600780546001600160a01b0319166001600160a01b03929092169190911781558290829081811061138e5761138e6126ed565b90506020020160208101906113a39190612410565b600880546001600160a01b0319166001600160a01b0392909216919091178155829082908181106113d6576113d66126ed565b90506020020160208101906113eb9190612410565b600980546001600160a01b0319166001600160a01b03929092169190911781558290829081811061141e5761141e6126ed565b90506020020160208101906114339190612410565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a818110611466576114666126ed565b905060200201602081019061147b9190612410565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b8181106114ae576114ae6126ed565b90506020020160208101906114c39190612410565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c8181106114f6576114f66126ed565b905060200201602081019061150b9190612410565b600e80546001600160a01b0319166001600160a01b03929092169190911790558181600d81811061153e5761153e6126ed565b90506020020160208101906115539190612410565b600f80546001600160a01b0319166001600160a01b03929092169190911790558181600e818110611586576115866126ed565b905060200201602081019061159b9190612410565b601080546001600160a01b0319166001600160a01b03929092169190911790558181600f8181106115ce576115ce6126ed565b90506020020160208101906115e39190612410565b601180546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b6002546001600160a01b0316331480159061163357506010546001600160a01b03163314155b156116705760025460105460405163bea6c3fd60e01b81523360048201526001600160a01b03928316602482015291166044820152606401610a08565b61108c838383611bb3565b6116836116c2565b6001600160a01b0381166116ad57604051631e4fbdf760e01b815260006004820152602401610a08565b6116b681611b29565b50565b6116b6816119a3565b336116f47f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610dca5760405163118cdaa760e01b8152336004820152602401610a08565b60004280851115611732576000915050610b1a565b8381106117425782915050610b1a565b633b9aca0060006117538787612719565b905060006117618885612719565b905060008261177085896127b0565b61177a91906127c7565b905060008461178983856127b0565b61179391906127c7565b9a9950505050505050505050565b801561108c5760006117b1610dcc565b6005549091506117cb906001600160a01b03168284611e7c565b600160009054906101000a90046001600160a01b03166001600160a01b031663650aabe26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561181e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184291906127e9565b156118a657600a5460405163a035160d60e01b8152600481018490526001600160a01b039091169063a035160d90602401600060405180830381600087803b15801561188d57600080fd5b505af11580156118a1573d6000803e3d6000fd5b505050505b604080516001600160a01b03868116825285811660208301528316818301526060810184905290517f3e7be0af9d546b20a6a2e91e4151659dfcad117daa1df79e78d17c5ad2f45b769181900360800190a150505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061198557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611979600080516020612874833981519152546001600160a01b031690565b6001600160a01b031614155b15610dca5760405163703e46dd60e11b815260040160405180910390fd5b6116b66116c2565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611a05575060408051601f3d908101601f19168201909252611a029181019061281e565b60015b611a2d57604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610a08565b6000805160206128748339815191528114611a5e57604051632a87526960e21b815260048101829052602401610a08565b61108c8383611ece565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610dca5760405163703e46dd60e11b815260040160405180910390fd5b6001600160a01b038084166000908152603360209081526040808320938616835292905290812060028101548203611af457611aef85858584611f24565b611b21565b42816001015411611b125780600201549150611aef85858584611f24565b611b1e85858584611f99565b91505b509392505050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b611ba2612064565b6116b6816120ad565b610dca612064565b42670de0b6b3a7640000821115611bdc5760405162461bcd60e51b8152600401610a089061275d565b81600003611c2c5760405162461bcd60e51b815260206004820152601f60248201527f5061796261636b206672616374696f6e2063616e6e6f74206265207a65726f006044820152606401610a08565b6001600160a01b03808516600090815260336020908152604080832093871683529290529081206002810154909103611c66575050505050565b81816001015411611c8557611c8085858360020154611e09565b610f70565b6000611c9e82600001548360010154846002015461171d565b9050611cab8686836117a1565b83670de0b6b3a764000003611d67576000818360020154611ccc9190612719565b600554604051635cad563b60e11b8152600481018390529192506001600160a01b03169063b95aac7690602401600060405180830381600087803b158015611d1357600080fd5b505af1158015611d27573d6000803e3d6000fd5b50506000600286018190556040516000805160206128548339815191529350611d5992508a918a91899190819061272c565b60405180910390a150610db0565b6000670de0b6b3a764000085838560020154611d839190612719565b611d8d91906127b0565b611d9791906127c7565b9050611da48787836120b5565b600081838560020154611db79190612719565b611dc19190612719565b60028501819055858555600185015460405191925060008051602061285483398151915291611df7918b918b918a91879061272c565b60405180910390a15050505050505050565b611e148383836117a1565b6001600160a01b038084166000908152603360209081526040808320938616835292905281812081815560018101829055600201819055905160008051602061285483398151915291611e6f9186918691429190819061272c565b60405180910390a1505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261108c90849061211a565b611ed78261217d565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611f1c5761108c82826121e2565b610ca561225a565b6000611f346007620151806127b0565b611f3e904261280b565b90506000611f4f62e6b6808361280b565b600284018590558284556001840181905560405190915060008051602061285483398151915290611f899088908890869086908a9061272c565b60405180910390a1505050505050565b80546000904290811015611fab575081545b6000611fc484600001548560010154866002015461171d565b90506000818560020154611fd89190612719565b90506000838660010154611fec9190612719565b90506000611ffa888461280b565b9050600061200984848b612279565b612013908761280b565b60028901839055868955600189018190556040519091506000805160206128548339815191529061204d908d908d908a908690889061272c565b60405180910390a150929998505050505050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610dca57604051631afcd79f60e31b815260040160405180910390fd5b611683612064565b801561108c576005546120d2906001600160a01b03168483611e7c565b604080516001600160a01b038086168252841660208201529081018290527f70930c4d7c90caf6befd84368a02f1e5493c254095e7d3c5b5105922befb92e590606001611e6f565b600061212f6001600160a01b038416836122c4565b9050805160001415801561215457508080602001905181019061215291906127e9565b155b1561108c57604051635274afe760e01b81526001600160a01b0384166004820152602401610a08565b806001600160a01b03163b6000036121b357604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610a08565b60008051602061287483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516121ff9190612837565b600060405180830381855af49150503d806000811461223a576040519150601f19603f3d011682016040523d82523d6000602084013e61223f565b606091505b509150915061224f8583836122d2565b925050505b92915050565b3415610dca5760405163b398979f60e01b815260040160405180910390fd5b60008061228684866127b0565b9050600061229762e6b680856127b0565b905060006122a5858861280b565b6122af838561280b565b6122b991906127c7565b979650505050505050565b6060610b1a8383600061232e565b6060826122e7576122e2826123cb565b610b1a565b81511580156122fe57506001600160a01b0384163b155b1561232757604051639996b31560e01b81526001600160a01b0385166004820152602401610a08565b5080610b1a565b6060814710156123535760405163cd78605960e01b8152306004820152602401610a08565b600080856001600160a01b0316848660405161236f9190612837565b60006040518083038185875af1925050503d80600081146123ac576040519150601f19603f3d011682016040523d82523d6000602084013e6123b1565b606091505b50915091506123c18683836122d2565b9695505050505050565b8051156123db5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b038116811461240b57600080fd5b919050565b60006020828403121561242257600080fd5b610b1a826123f4565b60008083601f84011261243d57600080fd5b50813567ffffffffffffffff81111561245557600080fd5b6020830191508360208260051b850101111561247057600080fd5b9250929050565b6000806000806040858703121561248d57600080fd5b843567ffffffffffffffff808211156124a557600080fd5b6124b18883890161242b565b909650945060208701359150808211156124ca57600080fd5b506124d78782880161242b565b95989497509550505050565b6000806000606084860312156124f857600080fd5b612501846123f4565b925061250f602085016123f4565b9150604084013590509250925092565b6000806040838503121561253257600080fd5b61253b836123f4565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561257257600080fd5b61257b836123f4565b9150602083013567ffffffffffffffff8082111561259857600080fd5b818501915085601f8301126125ac57600080fd5b8135818111156125be576125be612549565b604051601f8201601f19908116603f011681019083821181831017156125e6576125e6612549565b816040528281528860208487010111156125ff57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806040838503121561263457600080fd5b61263d836123f4565b915061264b602084016123f4565b90509250929050565b60005b8381101561266f578181015183820152602001612657565b50506000910152565b6020815260008251806020840152612697816040850160208701612654565b601f01601f19169190910160400192915050565b600080602083850312156126be57600080fd5b823567ffffffffffffffff8111156126d557600080fd5b6126e18582860161242b565b90969095509350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561225457612254612703565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b60208082526033908201527f5061796261636b206672616374696f6e2063616e6e6f7420626520686967686560408201527272207468616e20312028402031302a2a31382960681b606082015260800190565b808202811582820484141761225457612254612703565b6000826127e457634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156127fb57600080fd5b81518015158114610b1a57600080fd5b8082018082111561225457612254612703565b60006020828403121561283057600080fd5b5051919050565b60008251612849818460208701612654565b919091019291505056fe6f0b61812a1954a00351239cba469186147c5b10a1b12ed7f226dc5c1aaafa23360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca164736f6c6343000817000a",
  "deployedBytecode": "0x60806040526004361061025c5760003560e01c8063871d814511610144578063c5f956af116100b6578063ed60f1881161007a578063ed60f18814610782578063f1c05a7e146107a2578063f2fde38b146107c2578063f8d89898146107e2578063fe06073314610802578063fe9d03231461082257600080fd5b8063c5f956af146106d6578063c8564c62146106f6578063cc8b21e414610727578063cda775f914610747578063d0224e6c1461076757600080fd5b8063a3f4df7e11610108578063a3f4df7e146105e0578063aa36069d14610625578063ad3cb1cc14610645578063b957172114610676578063c05c5e9414610696578063c415b95c146106b657600080fd5b8063871d8145146104ea5780638da5cb5b1461050a57806395fb16bb1461054757806398768db2146105675780639f802fb81461057e57600080fd5b806352d1902d116101dd57806373c9bde0116101a157806373c9bde01461044b578063741bef1a146104605780637693ccdb1461048057806377553ad4146104955780637f7dde4a146104b55780638129fc1c146104d557600080fd5b806352d1902d146103c157806355dafa46146103d65780636a85d67d146103f65780636de2449214610416578063715018a61461043657600080fd5b80634169467d116102245780634169467d1461032057806341c7a5ee146103405780634a7919571461036e5780634bc66f321461038e5780634f1ef286146103ae57600080fd5b806301c9310014610261578063048c661d146102835780630833c62d146102c05780630a34d4d6146102e05780633cc7422514610300575b600080fd5b34801561026d57600080fd5b5061028161027c366004612410565b610842565b005b34801561028f57600080fd5b50600d546102a3906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102cc57600080fd5b506102816102db366004612477565b610893565b3480156102ec57600080fd5b506011546102a3906001600160a01b031681565b34801561030c57600080fd5b506006546102a3906001600160a01b031681565b34801561032c57600080fd5b506008546102a3906001600160a01b031681565b34801561034c57600080fd5b5061036061035b3660046124e3565b6109de565b6040519081526020016102b7565b34801561037a57600080fd5b5061028161038936600461251f565b610b21565b34801561039a57600080fd5b50600e546102a3906001600160a01b031681565b6102816103bc36600461255f565b610c8a565b3480156103cd57600080fd5b50610360610ca9565b3480156103e257600080fd5b50600a546102a3906001600160a01b031681565b34801561040257600080fd5b50610281610411366004612410565b610cc6565b34801561042257600080fd5b506102816104313660046124e3565b610d17565b34801561044257600080fd5b50610281610db8565b34801561045757600080fd5b506102a3610dcc565b34801561046c57600080fd5b50600b546102a3906001600160a01b031681565b34801561048c57600080fd5b50610360600781565b3480156104a157600080fd5b506002546102a3906001600160a01b031681565b3480156104c157600080fd5b506000546102a3906001600160a01b031681565b3480156104e157600080fd5b50610281610e5e565b3480156104f657600080fd5b50610281610505366004612621565b610f77565b34801561051657600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166102a3565b34801561055357600080fd5b506004546102a3906001600160a01b031681565b34801561057357600080fd5b5061036062e6b68081565b34801561058a57600080fd5b506105c5610599366004612621565b603360209081526000928352604080842090915290825290208054600182015460029092015490919083565b604080519384526020840192909252908201526060016102b7565b3480156105ec57600080fd5b506106186040518060400160405280600c81526020016b2332b2a1b7b63632b1ba37b960a11b81525081565b6040516102b79190612678565b34801561063157600080fd5b50610281610640366004612621565b610fed565b34801561065157600080fd5b50610618604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561068257600080fd5b506102816106913660046126ab565b611091565b3480156106a257600080fd5b506001546102a3906001600160a01b031681565b3480156106c257600080fd5b506007546102a3906001600160a01b031681565b3480156106e257600080fd5b50600f546102a3906001600160a01b031681565b34801561070257600080fd5b5060115461071790600160a01b900460ff1681565b60405190151581526020016102b7565b34801561073357600080fd5b50600c546102a3906001600160a01b031681565b34801561075357600080fd5b506003546102a3906001600160a01b031681565b34801561077357600080fd5b506103606688a490a601540081565b34801561078e57600080fd5b5061028161079d3660046124e3565b61160d565b3480156107ae57600080fd5b506010546102a3906001600160a01b031681565b3480156107ce57600080fd5b506102816107dd366004612410565b61167b565b3480156107ee57600080fd5b506005546102a3906001600160a01b031681565b34801561080e57600080fd5b5061028161081d366004612410565b6116b9565b34801561082e57600080fd5b506009546102a3906001600160a01b031681565b61084a6116c2565b6001600160a01b038116610871576040516385d3330760e01b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b8281811415806108a1575080155b156108bf57604051631a04c91160e01b815260040160405180910390fd5b4260005b828110156109d55760008787838181106108df576108df6126ed565b90506020020160208101906108f49190612410565b9050600086868481811061090a5761090a6126ed565b905060200201602081019061091f9190612410565b6001600160a01b03808416600090815260336020908152604080832093851683529290529081208054600182015460028301549495509193610961929061171d565b905080156109c557600081836002015461097b9190612719565b6002840181905587845590506109928585846117a1565b6000805160206128548339815191528585898660010154856040516109bb95949392919061272c565b60405180910390a1505b5050600190920191506108c39050565b50505050505050565b6000670de0b6b3a7640000821115610a115760405162461bcd60e51b8152600401610a089061275d565b60405180910390fd5b81600003610a615760405162461bcd60e51b815260206004820152601f60248201527f5061796261636b206672616374696f6e2063616e6e6f74206265207a65726f006044820152606401610a08565b6001600160a01b03808516600090815260336020908152604080832093871683529290522060028101541580610a9a5750428160010154105b15610aa9576000915050610b1a565b6000610ac282600001548360010154846002015461171d565b905083670de0b6b3a764000003610aec57808260020154610ae39190612719565b92505050610b1a565b670de0b6b3a764000084828460020154610b069190612719565b610b1091906127b0565b610ae391906127c7565b9392505050565b6010546001600160a01b03163314610b6157601054604051636545048760e01b81523360048201526001600160a01b039091166024820152604401610a08565b600160009054906101000a90046001600160a01b03166001600160a01b031663650aabe26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd891906127e9565b15610c4457600a546040516330a8d47360e11b81526001600160a01b0384811660048301526024820184905290911690636151a8e690604401600060405180830381600087803b158015610c2b57600080fd5b505af1158015610c3f573d6000803e3d6000fd5b505050505b604080516001600160a01b0384168152602081018390527fcf74743fee8ef45d0f775d63c2e7129e1aec29d2ce0222e2d979104c29210481910160405180910390a15050565b610c926118fe565b610c9b826119a3565b610ca582826119ab565b5050565b6000610cb3611a68565b5060008051602061287483398151915290565b610cce6116c2565b6001600160a01b038116610cf55760405163706ebc6560e11b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314610d575760025460405163428f391560e11b81523360048201526001600160a01b039091166024820152604401610a08565b6000670de0b6b3a7640000610d73836688a490a60154006127b0565b610d7d91906127c7565b90506000610d8b8284612719565b90506000610d9a868684611ab1565b9050610db08686610dab848761280b565b6117a1565b505050505050565b610dc06116c2565b610dca6000611b29565b565b6001546040805163328555f160e11b815290516000926001600160a01b03169163650aabe29160048083019260209291908290030181865afa158015610e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3a91906127e9565b610e4e5750600f546001600160a01b031690565b50600a546001600160a01b031690565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610ea45750825b905060008267ffffffffffffffff166001148015610ec15750303b155b905081158015610ecf575080155b15610eed5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610f1757845460ff60401b1916600160401b1785555b33610f2181611b9a565b610f29611bab565b508315610f7057845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b6002546001600160a01b03163314801590610f9d57506010546001600160a01b03163314155b15610fda5760025460105460405163bea6c3fd60e01b81523360048201526001600160a01b03928316602482015291166044820152606401610a08565b610ca58282670de0b6b3a7640000611bb3565b6010546001600160a01b0316331461102d57601054604051636545048760e01b81523360048201526001600160a01b039091166024820152604401610a08565b6001600160a01b03808316600090815260336020908152604080832093851683529281529082902082516060810184528154815260018201549281019290925260020154918101829052901561108c5761108c83838360400151611e09565b505050565b6110996116c2565b601154600160a01b900460ff16156110c357604051625f22e960e41b815260040160405180910390fd5b601081146110e457604051633f5a111d60e21b815260040160405180910390fd5b60005b6010811015611182576000838383818110611104576111046126ed565b90506020020160208101906111199190612410565b6001600160a01b03160361117a578083838381811061113a5761113a6126ed565b905060200201602081019061114f9190612410565b604051630d9d339f60e01b815260048101929092526001600160a01b03166024820152604401610a08565b6001016110e7565b5081816000818110611196576111966126ed565b90506020020160208101906111ab9190612410565b600080546001600160a01b0319166001600160a01b0392909216919091179055818160018181106111de576111de6126ed565b90506020020160208101906111f39190612410565b600180546001600160a01b0319166001600160a01b039290921691909117905581816002818110611226576112266126ed565b905060200201602081019061123b9190612410565b600280546001600160a01b0319166001600160a01b03929092169190911790558181600381811061126e5761126e6126ed565b90506020020160208101906112839190612410565b600380546001600160a01b0319166001600160a01b0392909216919091179055818160048181106112b6576112b66126ed565b90506020020160208101906112cb9190612410565b600580546001600160a01b0319166001600160a01b0392909216919091178155829082908181106112fe576112fe6126ed565b90506020020160208101906113139190612410565b600680546001600160a01b0319166001600160a01b039290921691909117815582908290818110611346576113466126ed565b905060200201602081019061135b9190612410565b600780546001600160a01b0319166001600160a01b03929092169190911781558290829081811061138e5761138e6126ed565b90506020020160208101906113a39190612410565b600880546001600160a01b0319166001600160a01b0392909216919091178155829082908181106113d6576113d66126ed565b90506020020160208101906113eb9190612410565b600980546001600160a01b0319166001600160a01b03929092169190911781558290829081811061141e5761141e6126ed565b90506020020160208101906114339190612410565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a818110611466576114666126ed565b905060200201602081019061147b9190612410565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b8181106114ae576114ae6126ed565b90506020020160208101906114c39190612410565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c8181106114f6576114f66126ed565b905060200201602081019061150b9190612410565b600e80546001600160a01b0319166001600160a01b03929092169190911790558181600d81811061153e5761153e6126ed565b90506020020160208101906115539190612410565b600f80546001600160a01b0319166001600160a01b03929092169190911790558181600e818110611586576115866126ed565b905060200201602081019061159b9190612410565b601080546001600160a01b0319166001600160a01b03929092169190911790558181600f8181106115ce576115ce6126ed565b90506020020160208101906115e39190612410565b601180546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b6002546001600160a01b0316331480159061163357506010546001600160a01b03163314155b156116705760025460105460405163bea6c3fd60e01b81523360048201526001600160a01b03928316602482015291166044820152606401610a08565b61108c838383611bb3565b6116836116c2565b6001600160a01b0381166116ad57604051631e4fbdf760e01b815260006004820152602401610a08565b6116b681611b29565b50565b6116b6816119a3565b336116f47f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610dca5760405163118cdaa760e01b8152336004820152602401610a08565b60004280851115611732576000915050610b1a565b8381106117425782915050610b1a565b633b9aca0060006117538787612719565b905060006117618885612719565b905060008261177085896127b0565b61177a91906127c7565b905060008461178983856127b0565b61179391906127c7565b9a9950505050505050505050565b801561108c5760006117b1610dcc565b6005549091506117cb906001600160a01b03168284611e7c565b600160009054906101000a90046001600160a01b03166001600160a01b031663650aabe26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561181e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184291906127e9565b156118a657600a5460405163a035160d60e01b8152600481018490526001600160a01b039091169063a035160d90602401600060405180830381600087803b15801561188d57600080fd5b505af11580156118a1573d6000803e3d6000fd5b505050505b604080516001600160a01b03868116825285811660208301528316818301526060810184905290517f3e7be0af9d546b20a6a2e91e4151659dfcad117daa1df79e78d17c5ad2f45b769181900360800190a150505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061198557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611979600080516020612874833981519152546001600160a01b031690565b6001600160a01b031614155b15610dca5760405163703e46dd60e11b815260040160405180910390fd5b6116b66116c2565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611a05575060408051601f3d908101601f19168201909252611a029181019061281e565b60015b611a2d57604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610a08565b6000805160206128748339815191528114611a5e57604051632a87526960e21b815260048101829052602401610a08565b61108c8383611ece565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610dca5760405163703e46dd60e11b815260040160405180910390fd5b6001600160a01b038084166000908152603360209081526040808320938616835292905290812060028101548203611af457611aef85858584611f24565b611b21565b42816001015411611b125780600201549150611aef85858584611f24565b611b1e85858584611f99565b91505b509392505050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b611ba2612064565b6116b6816120ad565b610dca612064565b42670de0b6b3a7640000821115611bdc5760405162461bcd60e51b8152600401610a089061275d565b81600003611c2c5760405162461bcd60e51b815260206004820152601f60248201527f5061796261636b206672616374696f6e2063616e6e6f74206265207a65726f006044820152606401610a08565b6001600160a01b03808516600090815260336020908152604080832093871683529290529081206002810154909103611c66575050505050565b81816001015411611c8557611c8085858360020154611e09565b610f70565b6000611c9e82600001548360010154846002015461171d565b9050611cab8686836117a1565b83670de0b6b3a764000003611d67576000818360020154611ccc9190612719565b600554604051635cad563b60e11b8152600481018390529192506001600160a01b03169063b95aac7690602401600060405180830381600087803b158015611d1357600080fd5b505af1158015611d27573d6000803e3d6000fd5b50506000600286018190556040516000805160206128548339815191529350611d5992508a918a91899190819061272c565b60405180910390a150610db0565b6000670de0b6b3a764000085838560020154611d839190612719565b611d8d91906127b0565b611d9791906127c7565b9050611da48787836120b5565b600081838560020154611db79190612719565b611dc19190612719565b60028501819055858555600185015460405191925060008051602061285483398151915291611df7918b918b918a91879061272c565b60405180910390a15050505050505050565b611e148383836117a1565b6001600160a01b038084166000908152603360209081526040808320938616835292905281812081815560018101829055600201819055905160008051602061285483398151915291611e6f9186918691429190819061272c565b60405180910390a1505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261108c90849061211a565b611ed78261217d565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611f1c5761108c82826121e2565b610ca561225a565b6000611f346007620151806127b0565b611f3e904261280b565b90506000611f4f62e6b6808361280b565b600284018590558284556001840181905560405190915060008051602061285483398151915290611f899088908890869086908a9061272c565b60405180910390a1505050505050565b80546000904290811015611fab575081545b6000611fc484600001548560010154866002015461171d565b90506000818560020154611fd89190612719565b90506000838660010154611fec9190612719565b90506000611ffa888461280b565b9050600061200984848b612279565b612013908761280b565b60028901839055868955600189018190556040519091506000805160206128548339815191529061204d908d908d908a908690889061272c565b60405180910390a150929998505050505050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610dca57604051631afcd79f60e31b815260040160405180910390fd5b611683612064565b801561108c576005546120d2906001600160a01b03168483611e7c565b604080516001600160a01b038086168252841660208201529081018290527f70930c4d7c90caf6befd84368a02f1e5493c254095e7d3c5b5105922befb92e590606001611e6f565b600061212f6001600160a01b038416836122c4565b9050805160001415801561215457508080602001905181019061215291906127e9565b155b1561108c57604051635274afe760e01b81526001600160a01b0384166004820152602401610a08565b806001600160a01b03163b6000036121b357604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610a08565b60008051602061287483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516121ff9190612837565b600060405180830381855af49150503d806000811461223a576040519150601f19603f3d011682016040523d82523d6000602084013e61223f565b606091505b509150915061224f8583836122d2565b925050505b92915050565b3415610dca5760405163b398979f60e01b815260040160405180910390fd5b60008061228684866127b0565b9050600061229762e6b680856127b0565b905060006122a5858861280b565b6122af838561280b565b6122b991906127c7565b979650505050505050565b6060610b1a8383600061232e565b6060826122e7576122e2826123cb565b610b1a565b81511580156122fe57506001600160a01b0384163b155b1561232757604051639996b31560e01b81526001600160a01b0385166004820152602401610a08565b5080610b1a565b6060814710156123535760405163cd78605960e01b8152306004820152602401610a08565b600080856001600160a01b0316848660405161236f9190612837565b60006040518083038185875af1925050503d80600081146123ac576040519150601f19603f3d011682016040523d82523d6000602084013e6123b1565b606091505b50915091506123c18683836122d2565b9695505050505050565b8051156123db5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b038116811461240b57600080fd5b919050565b60006020828403121561242257600080fd5b610b1a826123f4565b60008083601f84011261243d57600080fd5b50813567ffffffffffffffff81111561245557600080fd5b6020830191508360208260051b850101111561247057600080fd5b9250929050565b6000806000806040858703121561248d57600080fd5b843567ffffffffffffffff808211156124a557600080fd5b6124b18883890161242b565b909650945060208701359150808211156124ca57600080fd5b506124d78782880161242b565b95989497509550505050565b6000806000606084860312156124f857600080fd5b612501846123f4565b925061250f602085016123f4565b9150604084013590509250925092565b6000806040838503121561253257600080fd5b61253b836123f4565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561257257600080fd5b61257b836123f4565b9150602083013567ffffffffffffffff8082111561259857600080fd5b818501915085601f8301126125ac57600080fd5b8135818111156125be576125be612549565b604051601f8201601f19908116603f011681019083821181831017156125e6576125e6612549565b816040528281528860208487010111156125ff57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806040838503121561263457600080fd5b61263d836123f4565b915061264b602084016123f4565b90509250929050565b60005b8381101561266f578181015183820152602001612657565b50506000910152565b6020815260008251806020840152612697816040850160208701612654565b601f01601f19169190910160400192915050565b600080602083850312156126be57600080fd5b823567ffffffffffffffff8111156126d557600080fd5b6126e18582860161242b565b90969095509350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561225457612254612703565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b60208082526033908201527f5061796261636b206672616374696f6e2063616e6e6f7420626520686967686560408201527272207468616e20312028402031302a2a31382960681b606082015260800190565b808202811582820484141761225457612254612703565b6000826127e457634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156127fb57600080fd5b81518015158114610b1a57600080fd5b8082018082111561225457612254612703565b60006020828403121561283057600080fd5b5051919050565b60008251612849818460208701612654565b919091019291505056fe6f0b61812a1954a00351239cba469186147c5b10a1b12ed7f226dc5c1aaafa23360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca164736f6c6343000817000a",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "closeDebt(address,address)": {
        "notice": "Triggered when a debt is paid in full."
      },
      "collectFees(address[],address[])": {
        "notice": "Batch collect fees from an array of borrowers/assets."
      },
      "decreaseDebt(address,address,uint256)": {
        "notice": "Triggered when a trenBox is adjusted or closed (and the borrower has paid back/decreased his loan)."
      },
      "increaseDebt(address,address,uint256)": {
        "notice": "Triggered when a trenBox is created and again whenever the borrower acquires additional loans. Collects the minimum fee to the platform, for which there is no refund; holds on to the remaining fees until debt is paid, liquidated, or expired. Attention: this method assumes that (debt token) _feeAmount has already been minted and transferred to this contract."
      },
      "liquidateDebt(address,address)": {
        "notice": "Triggered when a trenBox is liquidated; in that case, all remaining fees are collected by the platform, and no refunds are generated."
      },
      "simulateRefund(address,address,uint256)": {
        "notice": "Simulates the refund due -if- trenBox would be closed at this moment (helper function used by the UI)."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10031,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "activePool",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10033,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "adminContract",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10035,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "borrowerOperations",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10037,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "collSurplusPool",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10039,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "communityIssuance",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 10041,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "debtToken",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 10043,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "defaultPool",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 10045,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "feeCollector",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 10047,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "flashLoanAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 10049,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "gasPoolAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 10051,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "trenStaking",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 10053,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "priceFeed",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 10055,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "sortedTrenBoxes",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 10057,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 10059,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "timelockAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 10061,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 10063,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "trenBoxManager",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 10065,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "trenBoxManagerOperations",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 10067,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "isAddressSetupInitialized",
        "offset": 20,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 10072,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "__gap",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_uint256)33_storage"
      },
      {
        "astId": 10930,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "feeRecords",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(FeeRecord)13368_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)33_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[33]",
        "numberOfBytes": "1056"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(FeeRecord)13368_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IFeeCollector.FeeRecord))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(FeeRecord)13368_storage)"
      },
      "t_mapping(t_address,t_struct(FeeRecord)13368_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IFeeCollector.FeeRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeRecord)13368_storage"
      },
      "t_struct(FeeRecord)13368_storage": {
        "encoding": "inplace",
        "label": "struct IFeeCollector.FeeRecord",
        "members": [
          {
            "astId": 13363,
            "contract": "contracts/FeeCollector.sol:FeeCollector",
            "label": "from",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13365,
            "contract": "contracts/FeeCollector.sol:FeeCollector",
            "label": "to",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13367,
            "contract": "contracts/FeeCollector.sol:FeeCollector",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}