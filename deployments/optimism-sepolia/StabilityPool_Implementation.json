{
  "address": "0xa3f251a94625899cE6ED3E38956DEe74Dfc1a895",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__CommunityIssuanceZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__LengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__SetupIsInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__TRENStakingZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "address_",
          "type": "address"
        }
      ],
      "name": "ConfigurableAddresses__ZeroAddresses",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expected",
          "type": "address"
        }
      ],
      "name": "StabilityPool__ActivePoolOnly",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expected",
          "type": "address"
        }
      ],
      "name": "StabilityPool__AdminContractOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StabilityPool__AmountMustBeNonZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StabilityPool__ArrayNotInAscendingOrder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StabilityPool__AssetsAndAmountsLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StabilityPool__DebtLargerThanTotalDeposits",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "debtLoss",
          "type": "uint256"
        }
      ],
      "name": "StabilityPool__DebtLossBelowOne",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StabilityPool__ProductZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expected",
          "type": "address"
        }
      ],
      "name": "StabilityPool__TrenBoxManagerOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StabilityPool__UserHasNoDeposit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "feePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "TrenBase__FeeExceededMax",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "AssetSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "CommunityIssuanceAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_P",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_G",
          "type": "uint256"
        }
      ],
      "name": "DepositSnapshotUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_currentEpoch",
          "type": "uint128"
        }
      ],
      "name": "EpochUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_G",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_epoch",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_scale",
          "type": "uint128"
        }
      ],
      "name": "GainsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_collaterals",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debtTokenLoss",
          "type": "uint256"
        }
      ],
      "name": "GainsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_P",
          "type": "uint256"
        }
      ],
      "name": "ProductUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_currentScale",
          "type": "uint128"
        }
      ],
      "name": "ScaleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBalance",
          "type": "uint256"
        }
      ],
      "name": "StabilityPoolAssetBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBalance",
          "type": "uint256"
        }
      ],
      "name": "StabilityPoolDebtTokenBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newSystemStake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "StakeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_S",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_epoch",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_scale",
          "type": "uint128"
        }
      ],
      "name": "SumUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_P",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_G",
          "type": "uint256"
        }
      ],
      "name": "SystemSnapshotUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_TREN",
          "type": "uint256"
        }
      ],
      "name": "TRENPaidToDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newDeposit",
          "type": "uint256"
        }
      ],
      "name": "UserDepositChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "P",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "S",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SCALE_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "addCollateralType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "authorizeUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collSurplusPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityIssuance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpoch",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentScale",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "depositSnapshots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "P",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "G",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "scale",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "epoch",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "epoch",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "scale",
          "type": "uint128"
        }
      ],
      "name": "epochToScaleToG",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "G",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "collateralType",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "epoch",
          "type": "uint128"
        }
      ],
      "name": "epochToScaleToSum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllCollateral",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "getCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "getCompoundedDebtTokenDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        }
      ],
      "name": "getDepositorGains",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "getDepositorTRENGain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getEntireSystemColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemColl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getEntireSystemDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalDebtTokenDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAddressSetupInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastAssetError_Offset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDebtTokenLossError_Offset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTRENError",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtToOffset",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountAdded",
          "type": "uint256"
        }
      ],
      "name": "offset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        }
      ],
      "name": "provideToSP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "receivedERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_communityIssuance",
          "type": "address"
        }
      ],
      "name": "setCommunityIssuance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trenStaking",
          "type": "address"
        }
      ],
      "name": "setTRENStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTrenBoxes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManagerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        }
      ],
      "name": "withdrawFromSP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x65804dd3fee680228195c5b1dce523ba5685dae6eab2f3f596b9d6eead2b7f1e",
  "receipt": {
    "to": null,
    "from": "0xf812844A1f3187F6e31336d3684FAd2dD31219E3",
    "contractAddress": "0xa3f251a94625899cE6ED3E38956DEe74Dfc1a895",
    "transactionIndex": 2,
    "gasUsed": "3521631",
    "logsBloom": "0x
    "blockHash": "0x3e9a0204f38d97f42f191e5741690bcd6c70891b25dd26d3daf6c4112f1648ce",
    "transactionHash": "0x65804dd3fee680228195c5b1dce523ba5685dae6eab2f3f596b9d6eead2b7f1e",
    "logs": [],
    "blockNumber": 10772463,
    "cumulativeGasUsed": "4132974",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "76f2ac0d2a40f527e6541dfc9894b953",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__CommunityIssuanceZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__SetupIsInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__TRENStakingZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"ConfigurableAddresses__ZeroAddresses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"}],\"name\":\"StabilityPool__ActivePoolOnly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"}],\"name\":\"StabilityPool__AdminContractOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StabilityPool__AmountMustBeNonZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StabilityPool__ArrayNotInAscendingOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StabilityPool__AssetsAndAmountsLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StabilityPool__DebtLargerThanTotalDeposits\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debtLoss\",\"type\":\"uint256\"}],\"name\":\"StabilityPool__DebtLossBelowOne\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StabilityPool__ProductZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"}],\"name\":\"StabilityPool__TrenBoxManagerOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StabilityPool__UserHasNoDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePercentage\",\"type\":\"uint256\"}],\"name\":\"TrenBase__FeeExceededMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AssetSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"CommunityIssuanceAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_P\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_G\",\"type\":\"uint256\"}],\"name\":\"DepositSnapshotUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_currentEpoch\",\"type\":\"uint128\"}],\"name\":\"EpochUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_G\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_epoch\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_scale\",\"type\":\"uint128\"}],\"name\":\"GainsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_collaterals\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debtTokenLoss\",\"type\":\"uint256\"}],\"name\":\"GainsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_P\",\"type\":\"uint256\"}],\"name\":\"ProductUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_currentScale\",\"type\":\"uint128\"}],\"name\":\"ScaleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"StabilityPoolAssetBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"StabilityPoolDebtTokenBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newSystemStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"StakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_S\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_epoch\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_scale\",\"type\":\"uint128\"}],\"name\":\"SumUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_P\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_G\",\"type\":\"uint256\"}],\"name\":\"SystemSnapshotUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_TREN\",\"type\":\"uint256\"}],\"name\":\"TRENPaidToDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newDeposit\",\"type\":\"uint256\"}],\"name\":\"UserDepositChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"S\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"addCollateralType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"authorizeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collSurplusPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityIssuance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentScale\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"depositSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"P\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"G\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"scale\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"epoch\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"epoch\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"scale\",\"type\":\"uint128\"}],\"name\":\"epochToScaleToG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"G\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"collateralType\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"epoch\",\"type\":\"uint128\"}],\"name\":\"epochToScaleToSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCollateral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"getCompoundedDebtTokenDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"getDepositorGains\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"getDepositorTRENGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDebtTokenDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAddressSetupInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastAssetError_Offset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDebtTokenLossError_Offset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTRENError\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtToOffset\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountAdded\",\"type\":\"uint256\"}],\"name\":\"offset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"provideToSP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"receivedERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityIssuance\",\"type\":\"address\"}],\"name\":\"setCommunityIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trenStaking\",\"type\":\"address\"}],\"name\":\"setTRENStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTrenBoxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManagerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"withdrawFromSP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"When a trenBox is liquidated, then depending on system conditions, some of its debt tokens debt gets offset with debt tokens in the Stability Pool: that is, the offset debt evaporates, and an equal amount of debt tokens tokens in the Stability Pool is burned. Thus, a liquidation causes each depositor to receive a debt tokens loss, in proportion to their deposit as a share of total deposits. They also receive an Collateral gain, as the amount of collateral of the liquidated trenBox is distributed among Stability depositors, in the same proportion. When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40% of the total debt tokens in the Stability Pool, depletes 40% of each deposit. A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit, multiplying it by some factor in range ]0,1[ --- IMPLEMENTATION --- We use a highly scalable method of tracking deposits and Collateral gains that has O(1) complexity. When a liquidation occurs, rather than updating each depositor's deposit and Collateral gain, we simply update two state variables: a product P, and a sum S. These are kept track for each type of collateral. A mathematical manipulation allows us to factor out the initial deposit, and accurately track all depositors' compounded deposits and accumulated Collateral amount gains over time, as liquidations occur, using just these two variables P and S. When depositors join the Stability Pool, they get a snapshot of the latest P and S: P_t and S_t, respectively. The formula for a depositor's accumulated Collateral amount gain is derived here: https://github.com/liquity/dev/blob/main/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf For a given deposit d_t, the ratio P/P_t tells us the factor by which a deposit has decreased since it joined the Stability Pool, and the term d_t * (S - S_t)/P_t gives us the deposit's total accumulated Collateral amount gain. Each liquidation updates the product P and sum S. After a series of liquidations, a compounded deposit and corresponding Collateral amount gain can be calculated using the initial deposit, the depositor\\u2019s snapshots of P and S, and the latest values of P and S. Any time a depositor updates their deposit (withdrawal, top-up) their accumulated Collateral amount gain is paid out, their new deposit is recorded (based on their latest compounded deposit and modified by the withdrawal/top-up), and they receive new snapshots of the latest P and S. Essentially, they make a fresh deposit that overwrites the old one. --- SCALE FACTOR --- Since P is a running product in range ]0,1] that is always-decreasing, it should never reach 0 when multiplied by a number in range ]0,1[. Unfortunately, Solidity floor division always reaches 0, sooner or later. A series of liquidations that nearly empty the Pool (and thus each multiply P by a very small number in range ]0,1[ ) may push P to its 18 digit decimal limit, and round it to 0, when in fact the Pool hasn't been emptied: this would break deposit tracking. So, to track P accurately, we use a scale factor: if a liquidation would cause P to decrease to <1e-9 (and be rounded to 0 by Solidity), we first multiply P by 1e9, and increment a currentScale factor by 1. The added benefit of using 1e9 for the scale factor (rather than 1e18) is that it ensures negligible precision loss close to the scale boundary: when P is at its minimum value of 1e9, the relative precision loss in P due to floor division is only on the order of 1e-9. --- EPOCHS --- Whenever a liquidation fully empties the Stability Pool, all deposits should become 0. However, setting P to 0 would make P be 0 forever, and break all future reward calculations. So, every time the Stability Pool is emptied by a liquidation, we reset P = 1 and currentScale = 0, and increment the currentEpoch by 1. --- TRACKING DEPOSIT OVER SCALE CHANGES AND EPOCHS --- When a deposit is made, it gets snapshots of the currentEpoch and the currentScale. When calculating a compounded deposit, we compare the current epoch to the deposit's epoch snapshot. If the current epoch is newer, then the deposit was present during a pool-emptying liquidation, and necessarily has been depleted to 0. Otherwise, we then compare the current scale to the deposit's scale snapshot. If they're equal, the compounded deposit is given by d_t * P/P_t. If it spans one scale change, it is given by d_t * P/(P_t * 1e9). If it spans more than one scale change, we define the compounded deposit as 0, since it is now less than 1e-9'th of its initial value (e.g. a deposit of 1 billion debt tokens has depleted to < 1 debt token).  --- TRACKING DEPOSITOR'S COLLATERAL AMOUNT GAIN OVER SCALE CHANGES AND EPOCHS --- In the current epoch, the latest value of S is stored upon each scale change, and the mapping (scale -> S) is stored for each epoch. This allows us to calculate a deposit's accumulated Collateral amount gain, during the epoch in which the deposit was non-zero and earned Collateral amount. We calculate the depositor's accumulated Collateral amount gain for the scale at which they made the deposit, using the Collateral amount gain formula: e_1 = d_t * (S - S_t) / P_t and also for scale after, taking care to divide the latter by a factor of 1e9: e_2 = d_t * S / (P_t * 1e9) The gain in the second scale will be full, as the starting point was in the previous scale, thus no need to subtract anything. The deposit therefore was present for reward events from the beginning of that second scale.        S_i-S_t + S_{i+1}      .<--------.------------>      .         .      . S_i     .   S_{i+1}   <--.-------->.<----------->   S_t.         .   <->.         .      t         .  |---+---------|-------------|-----...         i            i+1 The sum of (e_1 + e_2) captures the depositor's total accumulated Collateral amount gain, handling the case where their deposit spanned one scale change. We only care about gains across one scale change, since the compounded deposit is defined as being 0 once it has spanned more than one scale change. --- UPDATING P WHEN A LIQUIDATION OCCURS --- Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / Collateral amount gain derivations: https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf --- Gravita ISSUANCE TO STABILITY POOL DEPOSITORS --- An Gravita issuance event occurs at every deposit operation, and every liquidation. All deposits earn a share of the issued Gravita in proportion to the deposit as a share of total deposits. Please see the system Readme for an overview: https://github.com/liquity/dev/blob/main/README.md#lqty-issuance-to-stability-providers We use the same mathematical product-sum approach to track Gravita gains for depositors, where 'G' is the sum corresponding to Gravita gains. The product P (and snapshot P_t) is re-used, as the ratio P/P_t tracks a deposit's depletion due to liquidations.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"addCollateralType(address)\":{\"details\":\"should be called anytime a collateral is added to controller keeps all arrays the correct length\",\"params\":{\"_collateral\":\"address of collateral to add\"}},\"getAllCollateral()\":{\"details\":\"gets collateral from totalColl This is not necessarily the contract's actual collateral balance; just what is stored in state\",\"returns\":{\"_0\":\"tokens and amounts\"}},\"getCollateral(address)\":{\"details\":\"Not necessarily this contract's actual collateral balance; just what is stored in state\",\"params\":{\"_collateral\":\"address of the collateral to get amount of\"},\"returns\":{\"_0\":\"amount of this specific collateral\"}},\"getDepositorGains(address,address[])\":{\"details\":\"Given by the formula:  E = d0 * (S - S(0))/P(0) where S(0) and P(0) are the depositor's snapshots of the sum S and product P, respectively. d0 is the last recorded deposit value.\",\"params\":{\"_assets\":\"array of assets to check gains for\",\"_depositor\":\"address of depositor in question\"},\"returns\":{\"_0\":\"assets, amounts\"}},\"getTotalDebtTokenDeposits()\":{\"details\":\"gets total debtToken from deposits\",\"returns\":{\"_0\":\"totalDebtTokenDeposits\"}},\"offset(uint256,address,uint256)\":{\"details\":\"Cancels out the specified debt against the debtTokens contained in the Stability Pool (as far as possible) and transfers the TrenBox's collateral from ActivePool to StabilityPool. Only called by liquidation functions in the TrenBoxManager.\",\"params\":{\"_amountAdded\":\"token amount as uint256\",\"_asset\":\"token address\",\"_debtToOffset\":\"how much debt to offset\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"provideToSP(uint256,address[])\":{\"details\":\"Triggers a TREN issuance, based on time passed since the last issuance. The TREN issuance is shared between *all* depositors - Sends depositor's accumulated gains (TREN, collateral assets) to depositor - Increases deposit stake, and takes new snapshots for each.\",\"params\":{\"_amount\":\"amount of debtToken provided\",\"_assets\":\"an array of collaterals to be claimed. Skipping a collateral forfeits the available rewards (can be useful for gas optimizations)\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdrawFromSP(uint256,address[])\":{\"params\":{\"_amount\":\"amount of debtToken to withdraw\",\"_assets\":\"an array of collaterals to be claimed.\"}}},\"title\":\"The Stability Pool holds debt tokens deposited by Stability Pool depositors.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addCollateralType(address)\":{\"notice\":\"add a collateral\"},\"getAllCollateral()\":{\"notice\":\"getter function\"},\"getCollateral(address)\":{\"notice\":\"get collateral balance in the SP for a given collateral type\"},\"getDepositorGains(address,address[])\":{\"notice\":\"Calculates the gains earned by the deposit since its last snapshots were taken for selected assets.\"},\"getTotalDebtTokenDeposits()\":{\"notice\":\"getter function\"},\"offset(uint256,address,uint256)\":{\"notice\":\"sets the offset for liquidation\"},\"provideToSP(uint256,address[])\":{\"notice\":\"Used to provide debt tokens to the stability Pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StabilityPool.sol\":\"StabilityPool\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"contracts/Dependencies/ConfigurableAddresses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract ConfigurableAddresses is OwnableUpgradeable {\\n    address public activePool;\\n    address public adminContract;\\n    address public borrowerOperations;\\n    address public collSurplusPool;\\n    address public communityIssuance;\\n    address public debtToken;\\n    address public defaultPool;\\n    address public feeCollector;\\n    address public flashLoanAddress;\\n    address public gasPoolAddress;\\n    address public trenStaking;\\n    address public priceFeed;\\n    address public sortedTrenBoxes;\\n    address public stabilityPool;\\n    address public timelockAddress;\\n    address public treasuryAddress;\\n    address public trenBoxManager;\\n    address public trenBoxManagerOperations;\\n\\n    bool public isAddressSetupInitialized;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[33] private __gap; // Goerli uses 47; Arbitrum uses 33\\n\\n    error ConfigurableAddresses__SetupIsInitialized();\\n    error ConfigurableAddresses__ZeroAddresses(uint256 position, address address_);\\n    error ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n    error ConfigurableAddresses__TRENStakingZeroAddress();\\n    error ConfigurableAddresses__LengthMismatch();\\n\\n    // Dependency setters\\n    // -----------------------------------------------------------------------------------------------\\n\\n    function setAddresses(address[] calldata _addresses) external onlyOwner {\\n        if (isAddressSetupInitialized) {\\n            revert ConfigurableAddresses__SetupIsInitialized();\\n        }\\n        if (_addresses.length != 16) {\\n            revert ConfigurableAddresses__LengthMismatch();\\n        }\\n\\n        for (uint256 i = 0; i < 16; i++) {\\n            if (_addresses[i] == address(0)) {\\n                revert ConfigurableAddresses__ZeroAddresses(i, _addresses[i]);\\n            }\\n        }\\n        activePool = _addresses[0];\\n        adminContract = _addresses[1];\\n        borrowerOperations = _addresses[2];\\n        collSurplusPool = _addresses[3];\\n        debtToken = _addresses[4];\\n        defaultPool = _addresses[5];\\n        feeCollector = _addresses[6];\\n        flashLoanAddress = _addresses[7];\\n        gasPoolAddress = _addresses[8];\\n        priceFeed = _addresses[9];\\n        sortedTrenBoxes = _addresses[10];\\n        stabilityPool = _addresses[11];\\n        timelockAddress = _addresses[12];\\n        treasuryAddress = _addresses[13];\\n        trenBoxManager = _addresses[14];\\n        trenBoxManagerOperations = _addresses[15];\\n\\n        isAddressSetupInitialized = true;\\n    }\\n\\n    function setCommunityIssuance(address _communityIssuance) public onlyOwner {\\n        if (_communityIssuance == address(0)) {\\n            revert ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n        }\\n        communityIssuance = _communityIssuance;\\n    }\\n\\n    function setTRENStaking(address _trenStaking) public onlyOwner {\\n        if (_trenStaking == address(0)) {\\n            revert ConfigurableAddresses__TRENStakingZeroAddress();\\n        }\\n        trenStaking = _trenStaking;\\n    }\\n}\\n\",\"keccak256\":\"0xaf7c303784379bebf2e43e41c33c27c1309a639d360b5823240b1a8f5935b064\",\"license\":\"MIT\"},\"contracts/Dependencies/TrenBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { ConfigurableAddresses } from \\\"./ConfigurableAddresses.sol\\\";\\nimport { TrenMath } from \\\"./TrenMath.sol\\\";\\nimport { IActivePool } from \\\"../Interfaces/IActivePool.sol\\\";\\nimport { IDefaultPool } from \\\"../Interfaces/IDefaultPool.sol\\\";\\nimport { IAdminContract } from \\\"../Interfaces/IAdminContract.sol\\\";\\nimport { IDefaultPool } from \\\"../Interfaces/IDefaultPool.sol\\\";\\nimport { TrenMath } from \\\"./TrenMath.sol\\\";\\n\\n/*\\n* Base contract for TrenBoxManager, BorrowerOperations and StabilityPool. Contains global system\\nconstants and\\n * common functions.\\n */\\nabstract contract TrenBase is OwnableUpgradeable, ConfigurableAddresses {\\n    struct Colls {\\n        address[] tokens;\\n        uint256[] amounts;\\n    }\\n\\n    error TrenBase__FeeExceededMax(uint256 feePercentage, uint256 maxFeePercentage);\\n\\n    // --- Gas compensation functions ---\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trenBox, for the purpose of\\n    // ICR calculation\\n    function _getCompositeDebt(address _asset, uint256 _debt) internal view returns (uint256) {\\n        return _debt + IAdminContract(adminContract).getDebtTokenGasCompensation(_asset);\\n    }\\n\\n    function _getNetDebt(address _asset, uint256 _debt) internal view returns (uint256) {\\n        return _debt - IAdminContract(adminContract).getDebtTokenGasCompensation(_asset);\\n    }\\n\\n    // Return the amount of ETH to be drawn from a trenBox's collateral and sent as gas\\n    // compensation.\\n    function _getCollGasCompensation(\\n        address _asset,\\n        uint256 _entireColl\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _entireColl / IAdminContract(adminContract).getPercentDivisor(_asset);\\n    }\\n\\n    function getEntireSystemColl(address _asset) public view returns (uint256 entireSystemColl) {\\n        uint256 activeColl = IActivePool(activePool).getAssetBalance(_asset);\\n        uint256 liquidatedColl = IDefaultPool(defaultPool).getAssetBalance(_asset);\\n        return activeColl + liquidatedColl;\\n    }\\n\\n    function getEntireSystemDebt(address _asset) public view returns (uint256 entireSystemDebt) {\\n        uint256 activeDebt = IActivePool(activePool).getDebtTokenBalance(_asset);\\n        uint256 closedDebt = IDefaultPool(defaultPool).getDebtTokenBalance(_asset);\\n        return activeDebt + closedDebt;\\n    }\\n\\n    function _getTCR(address _asset, uint256 _price) internal view returns (uint256 TCR) {\\n        uint256 entireSystemColl = getEntireSystemColl(_asset);\\n        uint256 entireSystemDebt = getEntireSystemDebt(_asset);\\n        TCR = TrenMath._computeCR(entireSystemColl, entireSystemDebt, _price);\\n    }\\n\\n    function _checkRecoveryMode(address _asset, uint256 _price) internal view returns (bool) {\\n        uint256 TCR = _getTCR(_asset, _price);\\n        return TCR < IAdminContract(adminContract).getCcr(_asset);\\n    }\\n\\n    function _requireUserAcceptsFee(\\n        uint256 _fee,\\n        uint256 _amount,\\n        uint256 _maxFeePercentage\\n    )\\n        internal\\n        view\\n    {\\n        uint256 feePercentage = (_fee * IAdminContract(adminContract).DECIMAL_PRECISION()) / _amount;\\n        if (feePercentage > _maxFeePercentage) {\\n            revert TrenBase__FeeExceededMax(feePercentage, _maxFeePercentage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1a151376a146abaf01cfff167eba6a1e5994ec67237ab7b60048769f8d2c4e78\",\"license\":\"MIT\"},\"contracts/Dependencies/TrenMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nuint256 constant DECIMAL_PRECISION = 1 ether;\\n\\nlibrary TrenMath {\\n    uint256 internal constant EXPONENT_CAP = 525_600_000;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n    * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity\\n    floor division.\\n     *\\n    * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39\\n    ETH,\\n    * and will only truncate to 0 if the denominator is at least 1e20 times greater than the\\n    numerator.\\n     *\\n     */\\n    uint256 internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /*\\n     * Multiply two decimal numbers and use normal rounding rules:\\n     * -round product up if 19'th mantissa digit >= 5\\n     * -round product down if 19'th mantissa digit < 5\\n     *\\n     * Used only inside the exponentiation, _decPow().\\n     */\\n    function decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\n        uint256 prod_xy = x * y;\\n\\n        decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\n    }\\n\\n    /*\\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n     *\\n     * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n     *\\n     * Called by two functions that represent time in units of minutes:\\n     * 1) TrenBoxManager._calcDecayedBaseRate\\n     * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n     *\\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n     * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n     *\\n    * If a period of > 1000 years is ever used as an exponent in either of the above functions, the\\n    result will be\\n     * negligibly different from just passing the cap, since:\\n     *\\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n    * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will\\n    be negligible\\n     */\\n    function _decPow(uint256 _base, uint256 _minutes) internal pure returns (uint256) {\\n        if (_minutes > EXPONENT_CAP) {\\n            _minutes = EXPONENT_CAP;\\n        } // cap to avoid overflow\\n\\n        if (_minutes == 0) {\\n            return DECIMAL_PRECISION;\\n        }\\n\\n        uint256 y = DECIMAL_PRECISION;\\n        uint256 x = _base;\\n        uint256 n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n / 2;\\n            } else {\\n                // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n - 1) / 2;\\n            }\\n        }\\n\\n        return decMul(x, y);\\n    }\\n\\n    function _getAbsoluteDifference(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a >= _b) ? _a - _b : _b - _a;\\n    }\\n\\n    function _computeNominalCR(uint256 _coll, uint256 _debt) internal pure returns (uint256) {\\n        if (_debt != 0) {\\n            return (_coll * NICR_PRECISION) / _debt;\\n        }\\n        // Return the maximal value for uint256 if the TrenBox has a debt of 0. Represents\\n        // \\\"infinite\\\"\\n        // CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n\\n    function _computeCR(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _price\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_debt != 0) {\\n            uint256 newCollRatio = (_coll * _price) / _debt;\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the TrenBox has a debt of 0. Represents\\n        // \\\"infinite\\\"\\n        // CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe994e212c74767f28667a0656d52a8178622016c50f0406914e485483576c40c\",\"license\":\"MIT\"},\"contracts/Interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { IPool } from \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    event ActivePoolDebtUpdated(address _asset, uint256 _debtTokenAmount);\\n    event ActivePoolAssetBalanceUpdated(address _asset, uint256 _balance);\\n\\n    error ActivePool__NotAuthorizedContract();\\n\\n    function sendAsset(address _asset, address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x0bd10156dfe4866f7b3d64483150149cac29d72d9b3a73144045f53e2396f5ff\",\"license\":\"MIT\"},\"contracts/Interfaces/IAdminContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IAdminContract {\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    struct CollateralParams {\\n        uint256 decimals;\\n        uint256 index; // Maps to token address in validCollateral[]\\n        bool active;\\n        uint256 borrowingFee;\\n        uint256 ccr;\\n        uint256 mcr;\\n        uint256 debtTokenGasCompensation; // Amount of debtToken to be locked in gas pool on opening\\n            // trenBoxes\\n        uint256 minNetDebt; // Minimum amount of net debtToken a trenBox must have\\n        uint256 mintCap;\\n        uint256 percentDivisor;\\n        uint256 redemptionFeeFloor;\\n        uint256 redemptionBlockTimestamp;\\n    }\\n\\n    struct FlashLoanParams {\\n        uint256 flashLoanFee; // 10 = 0,1%, 100 = 10% => 10 out of $1000 = $10\\n        uint256 flashLoanMinDebt; // min amount of trenUSD to mint for Flash Loan\\n        uint256 flashLoanMaxDebt; // max amount of trenUSD to mint for Flash Loan\\n    }\\n\\n    // Custom Errors\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    error SafeCheckError(string parameter, uint256 valueEntered, uint256 minValue, uint256 maxValue);\\n    error AdminContract__OnlyOwner();\\n    error AdminContract__OnlyTimelock();\\n    error AdminContract__CollateralAlreadyInitialized();\\n    error AdminContract__CollateralExists();\\n    error AdminContract__CollateralDoesNotExist();\\n    error AdminContract__CollateralNotConfigured();\\n\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    event CollateralAdded(address _collateral);\\n    event MCRChanged(uint256 oldMCR, uint256 newMCR);\\n    event CCRChanged(uint256 oldCCR, uint256 newCCR);\\n    event MinNetDebtChanged(uint256 oldMinNet, uint256 newMinNet);\\n    event PercentDivisorChanged(uint256 oldPercentDiv, uint256 newPercentDiv);\\n    event BorrowingFeeChanged(uint256 oldBorrowingFee, uint256 newBorrowingFee);\\n    event RedemptionFeeFloorChanged(uint256 oldRedemptionFeeFloor, uint256 newRedemptionFeeFloor);\\n    event MintCapChanged(uint256 oldMintCap, uint256 newMintCap);\\n    event RedemptionBlockTimestampChanged(address _collateral, uint256 _blockTimestamp);\\n    event FlashLoanFeeChanged(uint256 oldFee, uint256 newFee);\\n    event FlashLoanMinDebtChanged(uint256 oldMinDebt, uint256 newMinDebt);\\n    event FlashLoanMaxDebtChanged(uint256 oldMaxDebt, uint256 newMaxDebt);\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    function DECIMAL_PRECISION() external view returns (uint256);\\n\\n    function _100pct() external view returns (uint256);\\n\\n    function addNewCollateral(\\n        address _collateral,\\n        uint256 _debtTokenGasCompensation,\\n        uint256 _decimals\\n    )\\n        external;\\n\\n    function setCollateralParameters(\\n        address _collateral,\\n        uint256 borrowingFee,\\n        uint256 ccr,\\n        uint256 mcr,\\n        uint256 minNetDebt,\\n        uint256 mintCap,\\n        uint256 percentDivisor,\\n        uint256 redemptionFeeFloor\\n    )\\n        external;\\n\\n    function setMCR(address _collateral, uint256 newMCR) external;\\n\\n    function setCCR(address _collateral, uint256 newCCR) external;\\n\\n    function setMinNetDebt(address _collateral, uint256 minNetDebt) external;\\n\\n    function setPercentDivisor(address _collateral, uint256 precentDivisor) external;\\n\\n    function setBorrowingFee(address _collateral, uint256 borrowingFee) external;\\n\\n    function setRedemptionFeeFloor(address _collateral, uint256 redemptionFeeFloor) external;\\n\\n    function setMintCap(address _collateral, uint256 mintCap) external;\\n\\n    function setRedemptionBlockTimestamp(address _collateral, uint256 _blockTimestamp) external;\\n\\n    function switchRouteToTRENStaking() external;\\n\\n    function getIndex(address _collateral) external view returns (uint256);\\n\\n    function getIsActive(address _collateral) external view returns (bool);\\n\\n    function getValidCollateral() external view returns (address[] memory);\\n\\n    function getMcr(address _collateral) external view returns (uint256);\\n\\n    function getCcr(address _collateral) external view returns (uint256);\\n\\n    function getDebtTokenGasCompensation(address _collateral) external view returns (uint256);\\n\\n    function getMinNetDebt(address _collateral) external view returns (uint256);\\n\\n    function getPercentDivisor(address _collateral) external view returns (uint256);\\n\\n    function getBorrowingFee(address _collateral) external view returns (uint256);\\n\\n    function getRedemptionFeeFloor(address _collateral) external view returns (uint256);\\n\\n    function getRedemptionBlockTimestamp(address _collateral) external view returns (uint256);\\n\\n    function getMintCap(address _collateral) external view returns (uint256);\\n\\n    function getTotalAssetDebt(address _asset) external view returns (uint256);\\n\\n    function getFlashLoanFee() external view returns (uint256);\\n\\n    function getFlashLoanMinNetDebt() external view returns (uint256);\\n\\n    function getFlashLoanMaxNetDebt() external view returns (uint256);\\n\\n    function getRouteToTRENStaking() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8bde7a9f4688d7332d5623a8d7c03ea4d3f2023b70e73196dfc87a3d4c0913df\",\"license\":\"MIT\"},\"contracts/Interfaces/ICommunityIssuance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface ICommunityIssuance {\\n    // --- Errors ---\\n    error CommunityIssuance__SetupAlreadyInitialized();\\n    error CommunityIssuance__InvalidAddresses();\\n    error CommunityIssuance__InvalidAdminContractAddress();\\n\\n    // --- Events ---\\n\\n    event TotalTRENIssuedUpdated(uint256 _totalTRENIssued);\\n\\n    // --- Functions ---\\n\\n    function issueTREN() external returns (uint256);\\n\\n    function sendTREN(address _account, uint256 _TRENamount) external;\\n\\n    function addFundToStabilityPool(uint256 _assignedSupply) external;\\n\\n    function addFundToStabilityPoolFrom(uint256 _assignedSupply, address _spender) external;\\n\\n    function setWeeklyTrenDistribution(uint256 _weeklyReward) external;\\n}\\n\",\"keccak256\":\"0x5bad6c73a2637d88b09ef006dd452f8f9ca99063265b54490be87063c5206fce\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDebtToken is IERC20 {\\n    event TokenBalanceUpdated(address _user, uint256 _amount);\\n    event EmergencyStopMintingCollateral(address _asset, bool state);\\n    event WhitelistChanged(address _whitelisted, bool whitelisted);\\n    event ProtocolContractsAddressesSet(\\n        address borrowerOperations, address stabilityPool, address trenBoxManager\\n    );\\n\\n    error DebtToken__MintBlockedForCollateral(address collateral);\\n    error DebtToken__InvalidAddressToConnect();\\n    error DebtToken__CannotTransferTokensToZeroAddress();\\n    error DebtToken__CannotTransferTokensToTokenContract();\\n    error DebtToken__NotWhitelistedContract(address notWhitelistedContract);\\n    error DebtToken__CallerIsNotBorrowerOperations(address caller);\\n    error DebtToken__CallerIsNotStabilityPool(address caller);\\n    error DebtToken__CannotBurnTokens();\\n    error DebtToken__CannotReturnFromPool();\\n\\n    function emergencyStopMinting(address _asset, bool status) external;\\n\\n    function mint(address _asset, address _account, uint256 _amount) external;\\n\\n    function mintFromWhitelistedContract(uint256 _amount) external;\\n\\n    function burnFromWhitelistedContract(uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function sendToPool(address _sender, address poolAddress, uint256 _amount) external;\\n\\n    function returnFromPool(address poolAddress, address user, uint256 _amount) external;\\n\\n    function addWhitelist(address _address) external;\\n\\n    function removeWhitelist(address _address) external;\\n}\\n\",\"keccak256\":\"0x4c48896e514f0900029e5b4433bbb627cf2aea7102f792cac729ca9cd79782d1\",\"license\":\"MIT\"},\"contracts/Interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IPool } from \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event DefaultPoolDebtUpdated(address _asset, uint256 _debt);\\n    event DefaultPoolAssetBalanceUpdated(address _asset, uint256 _balance);\\n\\n    // --- Functions ---\\n    function sendAssetToActivePool(address _asset, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xe68312fe3192b59bea18d1c3f027842418c10ad647f3e282bace8417ba656327\",\"license\":\"MIT\"},\"contracts/Interfaces/IDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IDeposit {\\n    function receivedERC20(address _asset, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xedebb2b3e0c98d165db1f1b4a3b5e96f2b327cd7bc2ad1b1c07abdd1f47bce17\",\"license\":\"MIT\"},\"contracts/Interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IPool {\\n    // --- Events ---\\n\\n    event AssetSent(address _to, address indexed _asset, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function getAssetBalance(address _asset) external view returns (uint256);\\n\\n    function getDebtTokenBalance(address _asset) external view returns (uint256);\\n\\n    function increaseDebt(address _asset, uint256 _amount) external;\\n\\n    function decreaseDebt(address _asset, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x0ebfb25e4c8b578c35933bb6bcfaea9688e88047060b6f861fbc0bda25928bab\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IDeposit } from \\\"./IDeposit.sol\\\";\\n\\ninterface IStabilityPool is IDeposit {\\n    // --- Structs ---\\n\\n    struct Snapshots {\\n        mapping(address => uint256) S;\\n        uint256 P;\\n        uint256 G;\\n        uint128 scale;\\n        uint128 epoch;\\n    }\\n\\n    // --- Events ---\\n\\n    event CommunityIssuanceAddressChanged(address newAddress);\\n    event DepositSnapshotUpdated(address indexed _depositor, uint256 _P, uint256 _G);\\n    event SystemSnapshotUpdated(uint256 _P, uint256 _G);\\n\\n    event AssetSent(address _asset, address _to, uint256 _amount);\\n    event GainsWithdrawn(\\n        address indexed _depositor,\\n        address[] _collaterals,\\n        uint256[] _amounts,\\n        uint256 _debtTokenLoss\\n    );\\n    event TRENPaidToDepositor(address indexed _depositor, uint256 _TREN);\\n    event StabilityPoolAssetBalanceUpdated(address _asset, uint256 _newBalance);\\n    event StabilityPoolDebtTokenBalanceUpdated(uint256 _newBalance);\\n    event StakeChanged(uint256 _newSystemStake, address _depositor);\\n    event UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\n\\n    event ProductUpdated(uint256 _P);\\n    event SumUpdated(address _asset, uint256 _S, uint128 _epoch, uint128 _scale);\\n    event GainsUpdated(uint256 _G, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    // --- Errors ---\\n\\n    error StabilityPool__ActivePoolOnly(address sender, address expected);\\n    error StabilityPool__AdminContractOnly(address sender, address expected);\\n    error StabilityPool__TrenBoxManagerOnly(address sender, address expected);\\n    error StabilityPool__ArrayNotInAscendingOrder();\\n    error StabilityPool__DebtLossBelowOne(uint256 debtLoss);\\n    error StabilityPool__DebtLargerThanTotalDeposits();\\n    error StabilityPool__ProductZero();\\n    error StabilityPool__AssetsAndAmountsLengthMismatch();\\n    error StabilityPool__UserHasNoDeposit();\\n    error StabilityPool__AmountMustBeNonZero();\\n\\n    // --- Functions ---\\n\\n    function addCollateralType(address _collateral) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is not zero\\n     * ---\\n    * - Triggers a TREN issuance, based on time passed since the last issuance. The TREN issuance is\\n    shared between *all* depositors.\\n     * - Sends depositor's accumulated gains (TREN, assets) to depositor\\n     */\\n    function provideToSP(uint256 _amount, address[] calldata _assets) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized trenBoxes left in the system\\n     * - User has a non zero deposit\\n     * ---\\n    * - Triggers a TREN issuance, based on time passed since the last issuance. The TREN issuance is\\n    shared between *all* depositors.\\n     * - Sends all depositor's accumulated gains (TREN, assets) to depositor\\n     * - Decreases deposit's stake, and takes new snapshots.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint256 _amount, address[] calldata _assets) external;\\n\\n    /*\\n    Initial checks:\\n    * - Caller is TrenBoxManager\\n    * ---\\n    * Cancels out the specified debt against the debt token contained in the Stability Pool (as far\\n    as possible)\\n    * and transfers the TrenBox's collateral from ActivePool to StabilityPool.\\n    * Only called by liquidation functions in the TrenBoxManager.\\n    */\\n    function offset(uint256 _debt, address _asset, uint256 _coll) external;\\n\\n    /*\\n    * Returns debt tokens held in the pool. Changes when users deposit/withdraw, and when TrenBox\\n    debt is offset.\\n     */\\n    function getTotalDebtTokenDeposits() external view returns (uint256);\\n\\n    /*\\n     * Calculates the asset gains earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorGains(\\n        address _depositor,\\n        address[] calldata _assets\\n    )\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory);\\n\\n    /*\\n     * Calculate the TREN gain earned by a deposit since its last snapshots were taken.\\n     */\\n    function getDepositorTRENGain(address _depositor) external view returns (uint256);\\n\\n    /*\\n     * Return the user's compounded deposits.\\n     */\\n    function getCompoundedDebtTokenDeposits(address _depositor) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc121981fda59b3816b5df0829c1fc110a9bb6f6147ed67a634531b90ff925838\",\"license\":\"MIT\"},\"contracts/StabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport { UUPSUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport { TrenBase } from \\\"./Dependencies/TrenBase.sol\\\";\\nimport { TrenMath, DECIMAL_PRECISION } from \\\"./Dependencies/TrenMath.sol\\\";\\n\\nimport { IAdminContract } from \\\"./Interfaces/IAdminContract.sol\\\";\\nimport { IActivePool } from \\\"./Interfaces/IActivePool.sol\\\";\\nimport { IStabilityPool } from \\\"./Interfaces/IStabilityPool.sol\\\";\\nimport { IDebtToken } from \\\"./Interfaces/IDebtToken.sol\\\";\\nimport { ICommunityIssuance } from \\\"./Interfaces/ICommunityIssuance.sol\\\";\\n\\n/**\\n * @title The Stability Pool holds debt tokens deposited by Stability Pool depositors.\\n * @dev When a trenBox is liquidated, then depending on system conditions, some of its debt tokens\\n * debt gets offset with\\n * debt tokens in the Stability Pool: that is, the offset debt evaporates, and an equal amount of\\n * debt tokens tokens in the Stability Pool is burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a debt tokens loss, in proportion to their\\n * deposit as a share of total deposits.\\n * They also receive an Collateral gain, as the amount of collateral of the liquidated trenBox is\\n * distributed among Stability depositors,\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a\\n * liquidation that depletes 40%\\n * of the total debt tokens in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each\\n * liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n *\\n * --- IMPLEMENTATION ---\\n *\\n * We use a highly scalable method of tracking deposits and Collateral gains that has O(1)\\n * complexity.\\n *\\n * When a liquidation occurs, rather than updating each depositor's deposit and Collateral gain, we\\n * simply update two state variables:\\n * a product P, and a sum S. These are kept track for each type of collateral.\\n *\\n * A mathematical manipulation allows us to factor out the initial deposit, and accurately track all\\n * depositors' compounded deposits\\n * and accumulated Collateral amount gains over time, as liquidations occur, using just these two\\n * variables P and S. When depositors join the\\n * Stability Pool, they get a snapshot of the latest P and S: P_t and S_t, respectively.\\n *\\n * The formula for a depositor's accumulated Collateral amount gain is derived here:\\n * https://github.com/liquity/dev/blob/main/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n * For a given deposit d_t, the ratio P/P_t tells us the factor by which a deposit has decreased\\n * since it joined the Stability Pool,\\n * and the term d_t * (S - S_t)/P_t gives us the deposit's total accumulated Collateral amount gain.\\n *\\n * Each liquidation updates the product P and sum S. After a series of liquidations, a compounded\\n * deposit and corresponding Collateral amount gain\\n * can be calculated using the initial deposit, the depositor\\u2019s snapshots of P and S, and the\\n * latest values of P and S.\\n *\\n * Any time a depositor updates their deposit (withdrawal, top-up) their accumulated Collateral\\n * amount gain is paid out, their new deposit is recorded\\n * (based on their latest compounded deposit and modified by the withdrawal/top-up), and they\\n * receive new snapshots of the latest P and S.\\n * Essentially, they make a fresh deposit that overwrites the old one.\\n *\\n *\\n * --- SCALE FACTOR ---\\n *\\n * Since P is a running product in range ]0,1] that is always-decreasing, it should never reach 0\\n * when multiplied by a number in range ]0,1[.\\n * Unfortunately, Solidity floor division always reaches 0, sooner or later.\\n *\\n * A series of liquidations that nearly empty the Pool (and thus each multiply P by a very small\\n * number in range ]0,1[ ) may push P\\n * to its 18 digit decimal limit, and round it to 0, when in fact the Pool hasn't been emptied: this\\n * would break deposit tracking.\\n *\\n * So, to track P accurately, we use a scale factor: if a liquidation would cause P to decrease to\\n * <1e-9 (and be rounded to 0 by Solidity),\\n * we first multiply P by 1e9, and increment a currentScale factor by 1.\\n *\\n * The added benefit of using 1e9 for the scale factor (rather than 1e18) is that it ensures\\n * negligible precision loss close to the\\n * scale boundary: when P is at its minimum value of 1e9, the relative precision loss in P due to\\n * floor division is only on the\\n * order of 1e-9.\\n *\\n * --- EPOCHS ---\\n *\\n * Whenever a liquidation fully empties the Stability Pool, all deposits should become 0. However,\\n * setting P to 0 would make P be 0\\n * forever, and break all future reward calculations.\\n *\\n * So, every time the Stability Pool is emptied by a liquidation, we reset P = 1 and currentScale =\\n * 0, and increment the currentEpoch by 1.\\n *\\n * --- TRACKING DEPOSIT OVER SCALE CHANGES AND EPOCHS ---\\n *\\n * When a deposit is made, it gets snapshots of the currentEpoch and the currentScale.\\n *\\n * When calculating a compounded deposit, we compare the current epoch to the deposit's epoch\\n * snapshot. If the current epoch is newer,\\n * then the deposit was present during a pool-emptying liquidation, and necessarily has been\\n * depleted to 0.\\n *\\n * Otherwise, we then compare the current scale to the deposit's scale snapshot. If they're equal,\\n * the compounded deposit is given by d_t * P/P_t.\\n * If it spans one scale change, it is given by d_t * P/(P_t * 1e9). If it spans more than one scale\\n * change, we define the compounded deposit\\n * as 0, since it is now less than 1e-9'th of its initial value (e.g. a deposit of 1 billion debt\\n * tokens has depleted to < 1 debt token).\\n *\\n *\\n *  --- TRACKING DEPOSITOR'S COLLATERAL AMOUNT GAIN OVER SCALE CHANGES AND EPOCHS ---\\n *\\n * In the current epoch, the latest value of S is stored upon each scale change, and the mapping\\n * (scale -> S) is stored for each epoch.\\n *\\n * This allows us to calculate a deposit's accumulated Collateral amount gain, during the epoch in\\n * which the deposit was non-zero and earned Collateral amount.\\n *\\n * We calculate the depositor's accumulated Collateral amount gain for the scale at which they made\\n * the deposit, using the Collateral amount gain formula:\\n * e_1 = d_t * (S - S_t) / P_t\\n *\\n * and also for scale after, taking care to divide the latter by a factor of 1e9:\\n * e_2 = d_t * S / (P_t * 1e9)\\n *\\n * The gain in the second scale will be full, as the starting point was in the previous scale, thus\\n * no need to subtract anything.\\n * The deposit therefore was present for reward events from the beginning of that second scale.\\n *\\n *        S_i-S_t + S_{i+1}\\n *      .<--------.------------>\\n *      .         .\\n *      . S_i     .   S_{i+1}\\n *   <--.-------->.<----------->\\n *   S_t.         .\\n *   <->.         .\\n *      t         .\\n *  |---+---------|-------------|-----...\\n *         i            i+1\\n *\\n * The sum of (e_1 + e_2) captures the depositor's total accumulated Collateral amount gain,\\n * handling the case where their\\n * deposit spanned one scale change. We only care about gains across one scale change, since the\\n * compounded\\n * deposit is defined as being 0 once it has spanned more than one scale change.\\n *\\n *\\n * --- UPDATING P WHEN A LIQUIDATION OCCURS ---\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the\\n * compounded deposit / Collateral amount gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n *\\n * --- Gravita ISSUANCE TO STABILITY POOL DEPOSITORS ---\\n *\\n * An Gravita issuance event occurs at every deposit operation, and every liquidation.\\n *\\n * All deposits earn a share of the issued Gravita in proportion to the deposit as a share of total\\n * deposits.\\n *\\n * Please see the system Readme for an overview:\\n * https://github.com/liquity/dev/blob/main/README.md#lqty-issuance-to-stability-providers\\n *\\n * We use the same mathematical product-sum approach to track Gravita gains for depositors, where\\n * 'G' is the sum corresponding to Gravita gains.\\n * The product P (and snapshot P_t) is re-used, as the ratio P/P_t tracks a deposit's depletion due\\n * to liquidations.\\n *\\n */\\ncontract StabilityPool is ReentrancyGuardUpgradeable, UUPSUpgradeable, TrenBase, IStabilityPool {\\n    using SafeERC20 for IERC20;\\n\\n    string public constant NAME = \\\"StabilityPool\\\";\\n\\n    // Tracker for debtToken held in the pool. Changes when users deposit/withdraw, and when TrenBox\\n    // debt is offset.\\n    uint256 internal totalDebtTokenDeposits;\\n\\n    // totalColl.tokens and totalColl.amounts should be the same length and\\n    // always be the same length as IAdminContract(adminContract).validCollaterals().\\n    // Anytime a new collateral is added to AdminContract, both lists are lengthened\\n    Colls internal totalColl;\\n\\n    mapping(address depositor => uint256 amount) public deposits;\\n\\n    /*\\n     * depositSnapshots maintains an entry for each depositor\\n     * that tracks P, S, G, scale, and epoch.\\n     * depositor's snapshot is updated only when they\\n     * deposit or withdraw from stability pool\\n     * depositSnapshots are used to allocate TREN rewards, calculate compoundedDepositAmount\\n     * and to calculate how much Collateral amount the depositor is entitled to\\n     */\\n    mapping(address depositor => Snapshots snapshot) public depositSnapshots;\\n\\n    /*  Product 'P': Running product by which to multiply an initial deposit, in order to find the\\n    current compounded deposit,\\n    * after a series of liquidations have occurred, each of which cancel some debt tokens debt with\\n    the deposit.\\n     *\\n     * During its lifetime, a deposit's value evolves from d_t to d_t * P / P_t , where P_t\\n     * is the snapshot of P taken at the instant the deposit was made. 18-digit decimal.\\n     */\\n    uint256 public P;\\n\\n    uint256 public constant SCALE_FACTOR = 1e9;\\n\\n    // Each time the scale of P shifts by SCALE_FACTOR, the scale is incremented by 1\\n    uint128 public currentScale;\\n\\n    // With each offset that fully empties the Pool, the epoch is incremented by 1\\n    uint128 public currentEpoch;\\n\\n    /* Collateral amount Gain sum 'S': During its lifetime, each deposit d_t earns an Collateral\\n    amount gain of ( d_t * [S - S_t] )/P_t,\\n     * where S_t is the depositor's snapshot of S taken at the time t when the deposit was made.\\n     *\\n     * The 'S' sums are stored in a nested mapping (epoch => scale => sum):\\n     *\\n     * - The inner mapping records the (scale => sum)\\n     * - The middle mapping records (epoch => (scale => sum))\\n     * - The outer mapping records (collateralType => (epoch => (scale => sum)))\\n     */\\n    mapping(\\n        address collateral\\n            => mapping(uint128 collateralType => mapping(uint128 epoch => uint256 sum))\\n    ) public epochToScaleToSum;\\n\\n    /*\\n    * Similarly, the sum 'G' is used to calculate TREN gains. During it's lifetime, each deposit d_t\\n    earns a TREN gain of\\n    *  ( d_t * [G - G_t] )/P_t, where G_t is the depositor's snapshot of G taken at time t when  the\\n    deposit was made.\\n     *\\n    *  TREN reward events occur are triggered by depositor operations (new deposit, topup,\\n    withdrawal), and liquidations.\\n    *  In each case, the TREN reward is issued (i.e. G is updated), before other state changes are\\n    made.\\n     */\\n    mapping(uint128 epoch => mapping(uint128 scale => uint256 G)) public epochToScaleToG;\\n\\n    // Error tracker for the error correction in the TREN issuance calculation\\n    uint256 public lastTRENError;\\n    // Error trackers for the error correction in the offset calculation\\n    uint256[] public lastAssetError_Offset;\\n    uint256 public lastDebtTokenLossError_Offset;\\n\\n    // --- Initializer ---\\n\\n    function initialize() public initializer {\\n        address initialOwner = _msgSender();\\n\\n        __Ownable_init(initialOwner);\\n        __ReentrancyGuard_init();\\n        __UUPSUpgradeable_init();\\n        P = DECIMAL_PRECISION;\\n    }\\n\\n    /**\\n     * @notice add a collateral\\n     * @dev should be called anytime a collateral is added to controller\\n     * keeps all arrays the correct length\\n     * @param _collateral address of collateral to add\\n     */\\n    function addCollateralType(address _collateral) external onlyAdminContract {\\n        lastAssetError_Offset.push(0);\\n        totalColl.tokens.push(_collateral);\\n        totalColl.amounts.push(0);\\n    }\\n\\n    /**\\n     * @notice get collateral balance in the SP for a given collateral type\\n     * @dev Not necessarily this contract's actual collateral balance;\\n     * just what is stored in state\\n     * @param _collateral address of the collateral to get amount of\\n     * @return amount of this specific collateral\\n     */\\n    function getCollateral(address _collateral) external view returns (uint256) {\\n        uint256 collateralIndex = IAdminContract(adminContract).getIndex(_collateral);\\n        return totalColl.amounts[collateralIndex];\\n    }\\n\\n    /**\\n     * @notice getter function\\n     * @dev gets collateral from totalColl\\n     * This is not necessarily the contract's actual collateral balance;\\n     * just what is stored in state\\n     * @return tokens and amounts\\n     */\\n    function getAllCollateral() external view returns (address[] memory, uint256[] memory) {\\n        return (totalColl.tokens, totalColl.amounts);\\n    }\\n\\n    /**\\n     * @notice getter function\\n     * @dev gets total debtToken from deposits\\n     * @return totalDebtTokenDeposits\\n     */\\n    function getTotalDebtTokenDeposits() external view override returns (uint256) {\\n        return totalDebtTokenDeposits;\\n    }\\n\\n    // --- External Depositor Functions ---\\n\\n    /**\\n     * @notice Used to provide debt tokens to the stability Pool\\n     * @dev Triggers a TREN issuance, based on time passed since the last issuance.\\n     * The TREN issuance is shared between *all* depositors\\n     * - Sends depositor's accumulated gains (TREN, collateral assets) to depositor\\n     * - Increases deposit stake, and takes new snapshots for each.\\n     * @param _amount amount of debtToken provided\\n     * @param _assets an array of collaterals to be claimed.\\n     * Skipping a collateral forfeits the available rewards (can be useful for gas optimizations)\\n     */\\n    function provideToSP(\\n        uint256 _amount,\\n        address[] calldata _assets\\n    )\\n        external\\n        override\\n        nonReentrant\\n    {\\n        _requireNonZeroAmount(_amount);\\n\\n        uint256 initialDeposit = deposits[msg.sender];\\n\\n        _triggerTRENIssuance();\\n\\n        (address[] memory gainAssets, uint256[] memory gainAmounts) =\\n            getDepositorGains(msg.sender, _assets);\\n        uint256 compoundedDeposit = getCompoundedDebtTokenDeposits(msg.sender);\\n        uint256 loss = initialDeposit - compoundedDeposit; // Needed only for event log\\n\\n        // First pay out any TREN gains\\n        _payOutTRENGains(msg.sender);\\n\\n        // just pulls debtTokens into the pool, updates totalDeposits variable for the stability\\n        // pool and throws an event\\n        _sendToStabilityPool(msg.sender, _amount);\\n\\n        uint256 newDeposit = compoundedDeposit + _amount;\\n        _updateDepositAndSnapshots(msg.sender, newDeposit);\\n        emit UserDepositChanged(msg.sender, newDeposit);\\n\\n        // loss required for event log\\n        emit GainsWithdrawn(msg.sender, gainAssets, gainAmounts, loss);\\n\\n        // send any collateral gains accrued to the depositor\\n        _sendGainsToDepositor(msg.sender, gainAssets, gainAmounts);\\n    }\\n\\n    /**\\n     * @param _amount amount of debtToken to withdraw\\n     * @param _assets an array of collaterals to be claimed.\\n     */\\n    function withdrawFromSP(uint256 _amount, address[] calldata _assets) external nonReentrant {\\n        (address[] memory assets, uint256[] memory amounts) = _withdrawFromSP(_amount, _assets);\\n        _sendGainsToDepositor(msg.sender, assets, amounts);\\n    }\\n\\n    /**\\n     * @notice withdraw from the stability pool\\n     * @param _amount debtToken amount to withdraw\\n     * @param _assets an array of collaterals to be claimed.\\n     * @return assets address of assets withdrawn, amount of asset withdrawn\\n     */\\n    function _withdrawFromSP(\\n        uint256 _amount,\\n        address[] calldata _assets\\n    )\\n        internal\\n        returns (address[] memory assets, uint256[] memory amounts)\\n    {\\n        uint256 initialDeposit = deposits[msg.sender];\\n        _requireUserHasDeposit(initialDeposit);\\n\\n        _triggerTRENIssuance();\\n\\n        (assets, amounts) = getDepositorGains(msg.sender, _assets);\\n\\n        uint256 compoundedDeposit = getCompoundedDebtTokenDeposits(msg.sender);\\n\\n        uint256 debtTokensToWithdraw = TrenMath._min(_amount, compoundedDeposit);\\n        uint256 loss = initialDeposit - compoundedDeposit; // Needed only for event log\\n\\n        // First pay out any TREN gains\\n        _payOutTRENGains(msg.sender);\\n        _sendToDepositor(msg.sender, debtTokensToWithdraw);\\n\\n        // Update deposit\\n        uint256 newDeposit = compoundedDeposit - debtTokensToWithdraw;\\n        _updateDepositAndSnapshots(msg.sender, newDeposit);\\n        emit UserDepositChanged(msg.sender, newDeposit);\\n\\n        emit GainsWithdrawn(msg.sender, assets, amounts, loss); // loss required for event log\\n    }\\n\\n    // --- TREN issuance functions ---\\n\\n    function _triggerTRENIssuance() internal {\\n        if (communityIssuance != address(0)) {\\n            uint256 TRENIssuance = ICommunityIssuance(communityIssuance).issueTREN();\\n            _updateG(TRENIssuance);\\n        }\\n    }\\n\\n    function _updateG(uint256 _TRENIssuance) internal {\\n        uint256 cachedTotalDebtTokenDeposits = totalDebtTokenDeposits; // cached to save an SLOAD\\n        /*\\n        * When total deposits is 0, G is not updated. In this case, the TREN issued can not be\\n        obtained by later\\n        * depositors - it is missed out on, and remains in the balanceof the CommunityIssuance\\n        contract.\\n         *\\n         */\\n        if (cachedTotalDebtTokenDeposits == 0 || _TRENIssuance == 0) {\\n            return;\\n        }\\n        uint256 TRENPerUnitStaked =\\n            _computeTRENPerUnitStaked(_TRENIssuance, cachedTotalDebtTokenDeposits);\\n        uint256 marginalTRENGain = TRENPerUnitStaked * P;\\n        uint256 newEpochToScaleToG = epochToScaleToG[currentEpoch][currentScale];\\n        newEpochToScaleToG += marginalTRENGain;\\n        epochToScaleToG[currentEpoch][currentScale] = newEpochToScaleToG;\\n        emit GainsUpdated(newEpochToScaleToG, currentEpoch, currentScale);\\n    }\\n\\n    function _computeTRENPerUnitStaked(\\n        uint256 _TRENIssuance,\\n        uint256 _totalDeposits\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        /*\\n        * Calculate the TREN-per-unit staked.  Division uses a \\\"feedback\\\" error correction, to keep\\n        the\\n         * cumulative error low in the running total G:\\n         *\\n        * 1) Form a numerator which compensates for the floor division error that occurred the last\\n        time this\\n         * function was called.\\n         * 2) Calculate \\\"per-unit-staked\\\" ratio.\\n        * 3) Multiply the ratio back by its denominator, to reveal the current floor division error.\\n         * 4) Store this error for use in the next correction when this function is called.\\n        * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\",\\n        however, it is intended.\\n         */\\n        uint256 TRENNumerator = (_TRENIssuance * DECIMAL_PRECISION) + lastTRENError;\\n        uint256 TRENPerUnitStaked = TRENNumerator / _totalDeposits;\\n        lastTRENError = TRENNumerator - (TRENPerUnitStaked * _totalDeposits);\\n        return TRENPerUnitStaked;\\n    }\\n\\n    // --- Liquidation functions ---\\n\\n    /**\\n     * @notice sets the offset for liquidation\\n     * @dev Cancels out the specified debt against the debtTokens contained in the Stability Pool\\n     * (as far as possible)\\n     * and transfers the TrenBox's collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TrenBoxManager.\\n     * @param _debtToOffset how much debt to offset\\n     * @param _asset token address\\n     * @param _amountAdded token amount as uint256\\n     */\\n    function offset(\\n        uint256 _debtToOffset,\\n        address _asset,\\n        uint256 _amountAdded\\n    )\\n        external\\n        onlyTrenBoxManager\\n    {\\n        uint256 cachedTotalDebtTokenDeposits = totalDebtTokenDeposits; // cached to save an SLOAD\\n        if (cachedTotalDebtTokenDeposits == 0 || _debtToOffset == 0) {\\n            return;\\n        }\\n        _triggerTRENIssuance();\\n        (uint256 collGainPerUnitStaked, uint256 debtLossPerUnitStaked) =\\n        _computeRewardsPerUnitStaked(\\n            _asset, _amountAdded, _debtToOffset, cachedTotalDebtTokenDeposits\\n        );\\n\\n        _updateRewardSumAndProduct(_asset, collGainPerUnitStaked, debtLossPerUnitStaked); // updates\\n            // S and P\\n        _moveOffsetCollAndDebt(_asset, _amountAdded, _debtToOffset);\\n    }\\n\\n    // --- Offset helper functions ---\\n\\n    /**\\n     * @notice Compute the debtToken and Collateral amount rewards. Uses a \\\"feedback\\\" error\\n     * correction, to keep\\n     * the cumulative error in the P and S state variables low:\\n     *\\n     * @dev 1) Form numerators which compensate for the floor division errors that occurred the last\\n     * time this\\n     * function was called.\\n     * 2) Calculate \\\"per-unit-staked\\\" ratios.\\n     * 3) Multiply each ratio back by its denominator, to reveal the current floor division error.\\n     * 4) Store these errors for use in the next correction when this function is called.\\n     * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however,\\n     * it is intended.\\n     * @param _asset Address of token\\n     * @param _amountAdded amount as uint256\\n     * @param _debtToOffset amount of debt to offset\\n     * @param _totalDeposits How much user has deposited\\n     */\\n    function _computeRewardsPerUnitStaked(\\n        address _asset,\\n        uint256 _amountAdded,\\n        uint256 _debtToOffset,\\n        uint256 _totalDeposits\\n    )\\n        internal\\n        returns (uint256 collGainPerUnitStaked, uint256 debtLossPerUnitStaked)\\n    {\\n        uint256 assetIndex = IAdminContract(adminContract).getIndex(_asset);\\n        uint256 collateralNumerator =\\n            (_amountAdded * DECIMAL_PRECISION) + lastAssetError_Offset[assetIndex];\\n        if (_debtToOffset > _totalDeposits) {\\n            revert StabilityPool__DebtLargerThanTotalDeposits();\\n        }\\n\\n        if (_debtToOffset == _totalDeposits) {\\n            debtLossPerUnitStaked = DECIMAL_PRECISION; // When the Pool depletes to 0, so does each\\n                // deposit\\n            lastDebtTokenLossError_Offset = 0;\\n        } else {\\n            uint256 lossNumerator =\\n                (_debtToOffset * DECIMAL_PRECISION) - lastDebtTokenLossError_Offset;\\n            /*\\n            * Add 1 to make error in quotient positive. We want \\\"slightly too much\\\" loss,\\n            * which ensures the error in any given compoundedDeposit favors the Stability Pool.\\n             */\\n            debtLossPerUnitStaked = (lossNumerator / _totalDeposits) + 1;\\n            lastDebtTokenLossError_Offset = (debtLossPerUnitStaked * _totalDeposits) - lossNumerator;\\n        }\\n        collGainPerUnitStaked = collateralNumerator / _totalDeposits;\\n        lastAssetError_Offset[assetIndex] =\\n            collateralNumerator - (collGainPerUnitStaked * _totalDeposits);\\n    }\\n\\n    function _updateRewardSumAndProduct(\\n        address _asset,\\n        uint256 _collGainPerUnitStaked,\\n        uint256 _debtLossPerUnitStaked\\n    )\\n        internal\\n    {\\n        if (_debtLossPerUnitStaked > DECIMAL_PRECISION) {\\n            revert StabilityPool__DebtLossBelowOne(_debtLossPerUnitStaked);\\n        }\\n\\n        uint256 currentP = P;\\n        uint256 newP;\\n\\n        /*\\n        * The newProductFactor is the factor by which to change all deposits, due to the depletion\\n        of Stability Pool debt tokens in the liquidation.\\n        * We make the product factor 0 if there was a pool-emptying. Otherwise, it is (1 -\\n        _debtLossPerUnitStaked)\\n         */\\n        uint256 newProductFactor = DECIMAL_PRECISION - _debtLossPerUnitStaked;\\n        uint128 currentScaleCached = currentScale;\\n        uint128 currentEpochCached = currentEpoch;\\n        uint256 currentS = epochToScaleToSum[_asset][currentEpochCached][currentScaleCached];\\n\\n        /*\\n         * Calculate the new S first, before we update P.\\n        * The asset gain for any given depositor from a liquidation depends on the value of their\\n        deposit\\n        * (and the value of totalDeposits) prior to the Stability being depleted by the debt in the\\n        liquidation.\\n         *\\n         * Since S corresponds to asset gain, and P to deposit loss, we update S first.\\n         */\\n        uint256 marginalAssetGain = _collGainPerUnitStaked * currentP;\\n        uint256 newS = currentS + marginalAssetGain;\\n        epochToScaleToSum[_asset][currentEpochCached][currentScaleCached] = newS;\\n        emit SumUpdated(_asset, newS, currentEpochCached, currentScaleCached);\\n\\n        // If the Stability Pool was emptied, increment the epoch, and reset the scale and product P\\n        if (newProductFactor == 0) {\\n            currentEpochCached += 1;\\n            currentEpoch = currentEpochCached;\\n            emit EpochUpdated(currentEpochCached);\\n            currentScale = 0;\\n            emit ScaleUpdated(0);\\n            newP = DECIMAL_PRECISION;\\n\\n            // If multiplying P by a non-zero product factor would reduce P below the scale\\n            // boundary, increment the scale\\n        } else {\\n            uint256 mulCached = currentP * newProductFactor;\\n            uint256 mulDivCached = mulCached / DECIMAL_PRECISION;\\n\\n            if (mulDivCached < SCALE_FACTOR) {\\n                newP = (mulCached * SCALE_FACTOR) / DECIMAL_PRECISION;\\n                currentScaleCached += 1;\\n                currentScale = currentScaleCached;\\n                emit ScaleUpdated(currentScaleCached);\\n            } else {\\n                newP = mulDivCached;\\n            }\\n        }\\n\\n        if (newP == 0) {\\n            revert StabilityPool__ProductZero();\\n        }\\n\\n        P = newP;\\n        emit ProductUpdated(newP);\\n    }\\n\\n    /**\\n     * @notice Internal function to move offset collateral and debt between pools.\\n     * @dev Cancel the liquidated debtToken debt with the debtTokens in the stability pool,\\n     * Burn the debt that was successfully offset. Collateral is moved from\\n     * the ActivePool to this contract.\\n     * @param _asset collateral address\\n     * @param _amount amount as uint256\\n     * @param _debtToOffset uint256\\n     */\\n    function _moveOffsetCollAndDebt(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _debtToOffset\\n    )\\n        internal\\n    {\\n        IActivePool(activePool).decreaseDebt(_asset, _debtToOffset);\\n        _decreaseDebtTokens(_debtToOffset);\\n        IDebtToken(debtToken).burn(address(this), _debtToOffset);\\n        IActivePool(activePool).sendAsset(_asset, address(this), _amount);\\n    }\\n\\n    function _decreaseDebtTokens(uint256 _amount) internal {\\n        uint256 newTotalDeposits = totalDebtTokenDeposits - _amount;\\n        totalDebtTokenDeposits = newTotalDeposits;\\n        emit StabilityPoolDebtTokenBalanceUpdated(newTotalDeposits);\\n    }\\n\\n    // --- Reward calculator functions for depositor ---\\n\\n    /**\\n     * @notice Calculates the gains earned by the deposit since its last snapshots were taken for\\n     * selected assets.\\n     * @dev Given by the formula:  E = d0 * (S - S(0))/P(0)\\n     * where S(0) and P(0) are the depositor's snapshots of the sum S and product P, respectively.\\n     * d0 is the last recorded deposit value.\\n     * @param _depositor address of depositor in question\\n     * @param _assets array of assets to check gains for\\n     * @return assets, amounts\\n     */\\n    function getDepositorGains(\\n        address _depositor,\\n        address[] memory _assets\\n    )\\n        public\\n        view\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        uint256 initialDeposit = deposits[_depositor];\\n\\n        if (initialDeposit == 0) {\\n            address[] memory emptyAddress = new address[](0);\\n            uint256[] memory emptyUint = new uint256[](0);\\n            return (emptyAddress, emptyUint);\\n        }\\n\\n        Snapshots storage snapshots = depositSnapshots[_depositor];\\n\\n        uint256[] memory amountsFromNewGains =\\n            _calculateNewGains(initialDeposit, snapshots, _assets);\\n        return (_assets, amountsFromNewGains);\\n    }\\n\\n    /**\\n     * @notice get gains on each possible asset by looping through\\n     * @dev assets with _getGainFromSnapshots function\\n     * @param initialDeposit Amount of initial deposit\\n     * @param snapshots struct snapshots\\n     * @param _assets ascending ordered array of assets to calculate and claim gains\\n     */\\n    function _calculateNewGains(\\n        uint256 initialDeposit,\\n        Snapshots storage snapshots,\\n        address[] memory _assets\\n    )\\n        internal\\n        view\\n        returns (uint256[] memory amounts)\\n    {\\n        uint256 assetsLen = _assets.length;\\n        // asset list must be on ascending order - used to avoid any repeated elements\\n        unchecked {\\n            for (uint256 i = 1; i < assetsLen; i++) {\\n                if (_assets[i] <= _assets[i - 1]) {\\n                    revert StabilityPool__ArrayNotInAscendingOrder();\\n                }\\n            }\\n        }\\n        amounts = new uint256[](assetsLen);\\n        for (uint256 i = 0; i < assetsLen;) {\\n            amounts[i] = _getGainFromSnapshots(initialDeposit, snapshots, _assets[i]);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice gets the gain in S for a given asset\\n     * @dev for a user who deposited initialDeposit\\n     * @param initialDeposit Amount of initialDeposit\\n     * @param snapshots struct snapshots\\n     * @param asset asset to gain snapshot\\n     * @return uint256 the gain\\n     */\\n    function _getGainFromSnapshots(\\n        uint256 initialDeposit,\\n        Snapshots storage snapshots,\\n        address asset\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        /*\\n        * Grab the sum 'S' from the epoch at which the stake was made. The Collateral amount gain\\n        may span up to one scale change.\\n         * If it does, the second portion of the Collateral amount gain is scaled by 1e9.\\n         * If the gain spans no scale change, the second portion will be 0.\\n         */\\n        uint256 S_Snapshot = snapshots.S[asset];\\n        uint256 P_Snapshot = snapshots.P;\\n\\n        mapping(uint128 => uint256) storage scaleToSum = epochToScaleToSum[asset][snapshots.epoch];\\n        uint256 firstPortion = scaleToSum[snapshots.scale] - S_Snapshot;\\n        uint256 secondPortion = scaleToSum[snapshots.scale + 1] / SCALE_FACTOR;\\n\\n        uint256 assetGain =\\n            (initialDeposit * (firstPortion + secondPortion)) / P_Snapshot / DECIMAL_PRECISION;\\n\\n        return assetGain;\\n    }\\n\\n    /*\\n     * Calculate the TREN gain earned by a deposit since its last snapshots were taken.\\n     * Given by the formula:  TREN = d0 * (G - G(0))/P(0)\\n    * where G(0) and P(0) are the depositor's snapshots of the sum G and product P, respectively.\\n     * d0 is the last recorded deposit value.\\n     */\\n    function getDepositorTRENGain(address _depositor) public view override returns (uint256) {\\n        uint256 initialDeposit = deposits[_depositor];\\n        if (initialDeposit == 0) {\\n            return 0;\\n        }\\n\\n        Snapshots storage snapshots = depositSnapshots[_depositor];\\n        return _getTRENGainFromSnapshots(initialDeposit, snapshots);\\n    }\\n\\n    function _getTRENGainFromSnapshots(\\n        uint256 initialStake,\\n        Snapshots storage snapshots\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        /*\\n        * Grab the sum 'G' from the epoch at which the stake was made. The TREN gain may span up to\\n        one scale change.\\n         * If it does, the second portion of the TREN gain is scaled by 1e9.\\n         * If the gain spans no scale change, the second portion will be 0.\\n         */\\n        uint128 epochSnapshot = snapshots.epoch;\\n        uint128 scaleSnapshot = snapshots.scale;\\n        uint256 G_Snapshot = snapshots.G;\\n        uint256 P_Snapshot = snapshots.P;\\n\\n        uint256 firstPortion = epochToScaleToG[epochSnapshot][scaleSnapshot] - G_Snapshot;\\n        uint256 secondPortion = epochToScaleToG[epochSnapshot][scaleSnapshot + 1] / SCALE_FACTOR;\\n\\n        uint256 TRENGain =\\n            (initialStake * (firstPortion + secondPortion)) / P_Snapshot / DECIMAL_PRECISION;\\n\\n        return TRENGain;\\n    }\\n\\n    // --- Compounded deposit and compounded System stake ---\\n\\n    /*\\n     * Return the user's compounded deposit. Given by the formula:  d = d0 * P/P(0)\\n    * where P(0) is the depositor's snapshot of the product P, taken when they last updated their\\n    deposit.\\n     */\\n    function getCompoundedDebtTokenDeposits(address _depositor)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 initialDeposit = deposits[_depositor];\\n        if (initialDeposit == 0) {\\n            return 0;\\n        }\\n\\n        return _getCompoundedStakeFromSnapshots(initialDeposit, depositSnapshots[_depositor]);\\n    }\\n\\n    // Internal function, used to calculate compounded deposits and compounded stakes.\\n    function _getCompoundedStakeFromSnapshots(\\n        uint256 initialStake,\\n        Snapshots storage snapshots\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 snapshot_P = snapshots.P;\\n        uint128 scaleSnapshot = snapshots.scale;\\n        uint128 epochSnapshot = snapshots.epoch;\\n\\n        // If stake was made before a pool-emptying event, then it has been fully cancelled with\\n        // debt -- so, return 0\\n        if (epochSnapshot < currentEpoch) {\\n            return 0;\\n        }\\n\\n        uint256 compoundedStake;\\n        uint128 scaleDiff = currentScale - scaleSnapshot;\\n\\n        /* Compute the compounded stake. If a scale change in P was made during the stake's\\n        lifetime,\\n        * account for it. If more than one scale change was made, then the stake has decreased by a\\n        factor of\\n         * at least 1e-9 -- so return 0.\\n         */\\n        if (scaleDiff == 0) {\\n            compoundedStake = (initialStake * P) / snapshot_P;\\n        } else if (scaleDiff == 1) {\\n            compoundedStake = (initialStake * P) / snapshot_P / SCALE_FACTOR;\\n        } else {\\n            compoundedStake = 0;\\n        }\\n\\n        /*\\n         * If compounded deposit is less than a billionth of the initial deposit, return 0.\\n         *\\n        * NOTE: originally, this line was in place to stop rounding errors making the deposit too\\n        large. However, the error\\n        * corrections should ensure the error in P \\\"favors the Pool\\\", i.e. any given compounded\\n        deposit should slightly less\\n         * than it's theoretical value.\\n         *\\n         * Thus it's unclear whether this line is still really needed.\\n         */\\n        if (compoundedStake < initialStake / 1e9) {\\n            return 0;\\n        }\\n\\n        return compoundedStake;\\n    }\\n\\n    // --- Sender functions for debtToken deposits\\n\\n    // Transfer the tokens from the user to the Stability Pool's address, and update its recorded\\n    // deposits\\n    function _sendToStabilityPool(address _address, uint256 _amount) internal {\\n        IDebtToken(debtToken).sendToPool(_address, address(this), _amount);\\n        uint256 newTotalDeposits = totalDebtTokenDeposits + _amount;\\n        totalDebtTokenDeposits = newTotalDeposits;\\n        emit StabilityPoolDebtTokenBalanceUpdated(newTotalDeposits);\\n    }\\n\\n    /**\\n     * @notice transfer collateral gains to the depositor\\n     * @dev this function also unwraps wrapped assets\\n     * before sending to depositor\\n     * @param _to address\\n     * @param assets array of address\\n     * @param amounts array of uint256. Includes pending collaterals since that was added in\\n     * previous steps\\n     */\\n    function _sendGainsToDepositor(\\n        address _to,\\n        address[] memory assets,\\n        uint256[] memory amounts\\n    )\\n        internal\\n    {\\n        uint256 assetsLen = assets.length;\\n\\n        if (assetsLen != amounts.length) {\\n            revert StabilityPool__AssetsAndAmountsLengthMismatch();\\n        }\\n\\n        for (uint256 i = 0; i < assetsLen;) {\\n            uint256 amount = amounts[i];\\n            if (amount == 0) {\\n                unchecked {\\n                    i++;\\n                }\\n                continue;\\n            }\\n            address asset = assets[i];\\n            // Assumes we're internally working only with the wrapped version of ERC20 tokens\\n            IERC20(asset).safeTransfer(_to, amount);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        totalColl.amounts = _leftSubColls(totalColl, assets, amounts);\\n    }\\n\\n    // Send debt tokens to user and decrease deposits in Pool\\n    function _sendToDepositor(address _depositor, uint256 debtTokenWithdrawal) internal {\\n        if (debtTokenWithdrawal == 0) {\\n            return;\\n        }\\n        IDebtToken(debtToken).returnFromPool(address(this), _depositor, debtTokenWithdrawal);\\n        _decreaseDebtTokens(debtTokenWithdrawal);\\n    }\\n\\n    // --- Stability Pool Deposit Functionality ---\\n\\n    /**\\n     * @notice updates deposit and snapshots internally\\n     * @dev if _newValue is zero, delete snapshot for given _depositor and emit event\\n     * otherwise, add an entry or update existing entry for _depositor in the depositSnapshots\\n     * with current values for P, S, G, scale and epoch and then emit event.\\n     * @param _depositor address\\n     * @param _newValue uint256\\n     */\\n    function _updateDepositAndSnapshots(address _depositor, uint256 _newValue) internal {\\n        deposits[_depositor] = _newValue;\\n        address[] memory colls = IAdminContract(adminContract).getValidCollateral();\\n        uint256 collsLen = colls.length;\\n\\n        Snapshots storage depositorSnapshots = depositSnapshots[_depositor];\\n        if (_newValue == 0) {\\n            for (uint256 i = 0; i < collsLen;) {\\n                depositSnapshots[_depositor].S[colls[i]] = 0;\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n            depositorSnapshots.P = 0;\\n            depositorSnapshots.G = 0;\\n            depositorSnapshots.epoch = 0;\\n            depositorSnapshots.scale = 0;\\n            emit DepositSnapshotUpdated(_depositor, 0, 0);\\n            return;\\n        }\\n        uint128 currentScaleCached = currentScale;\\n        uint128 currentEpochCached = currentEpoch;\\n        uint256 currentP = P;\\n\\n        for (uint256 i = 0; i < collsLen;) {\\n            address asset = colls[i];\\n            uint256 currentS = epochToScaleToSum[asset][currentEpochCached][currentScaleCached];\\n            depositSnapshots[_depositor].S[asset] = currentS;\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        uint256 currentG = epochToScaleToG[currentEpochCached][currentScaleCached];\\n        depositorSnapshots.P = currentP;\\n        depositorSnapshots.G = currentG;\\n        depositorSnapshots.scale = currentScaleCached;\\n        depositorSnapshots.epoch = currentEpochCached;\\n\\n        emit DepositSnapshotUpdated(_depositor, currentP, currentG);\\n    }\\n\\n    function S(address _depositor, address _asset) external view returns (uint256) {\\n        return depositSnapshots[_depositor].S[_asset];\\n    }\\n\\n    function _payOutTRENGains(address _depositor) internal {\\n        if (address(communityIssuance) != address(0)) {\\n            uint256 depositorTRENGain = getDepositorTRENGain(_depositor);\\n            ICommunityIssuance(communityIssuance).sendTREN(_depositor, depositorTRENGain);\\n            emit TRENPaidToDepositor(_depositor, depositorTRENGain);\\n        }\\n    }\\n\\n    function _leftSubColls(\\n        Colls memory _coll1,\\n        address[] memory _tokens,\\n        uint256[] memory _amounts\\n    )\\n        internal\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256 coll1Len = _coll1.amounts.length;\\n        uint256 tokensLen = _tokens.length;\\n\\n        for (uint256 i = 0; i < coll1Len;) {\\n            for (uint256 j = 0; j < tokensLen;) {\\n                if (_coll1.tokens[i] == _tokens[j]) {\\n                    _coll1.amounts[i] -= _amounts[j];\\n                }\\n                unchecked {\\n                    j++;\\n                }\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        return _coll1.amounts;\\n    }\\n\\n    function _requireUserHasDeposit(uint256 _initialDeposit) internal pure {\\n        if (_initialDeposit == 0) {\\n            revert StabilityPool__UserHasNoDeposit();\\n        }\\n    }\\n\\n    function _requireNonZeroAmount(uint256 _amount) internal pure {\\n        if (_amount == 0) {\\n            revert StabilityPool__AmountMustBeNonZero();\\n        }\\n    }\\n\\n    // --- Modifiers ---\\n\\n    modifier onlyAdminContract() {\\n        if (msg.sender != adminContract) {\\n            revert StabilityPool__AdminContractOnly(msg.sender, adminContract);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyActivePool() {\\n        if (msg.sender != activePool) {\\n            revert StabilityPool__ActivePoolOnly(msg.sender, activePool);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyTrenBoxManager() {\\n        if (msg.sender != trenBoxManager) {\\n            revert StabilityPool__TrenBoxManagerOnly(msg.sender, trenBoxManager);\\n        }\\n        _;\\n    }\\n\\n    // --- Fallback function ---\\n\\n    function receivedERC20(address _asset, uint256 _amount) external override onlyActivePool {\\n        uint256 collateralIndex = IAdminContract(adminContract).getIndex(_asset);\\n        uint256 newAssetBalance = totalColl.amounts[collateralIndex] + _amount;\\n        totalColl.amounts[collateralIndex] = newAssetBalance;\\n        emit StabilityPoolAssetBalanceUpdated(_asset, newAssetBalance);\\n    }\\n\\n    function authorizeUpgrade(address newImplementation) public {\\n        _authorizeUpgrade(newImplementation);\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner { }\\n}\\n\",\"keccak256\":\"0xf2aafdb4cd84600e0d21ac9a948ce0ebd5a16f787341fffdf1a557ee63af080b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061036b5760003560e01c80638e9171b0116101c6578063c5f956af116100f7578063ec0d5e0c11610095578063f8d898981161006f578063f8d8989814610ad9578063fc7e286d14610af9578063fe06073314610b26578063fe9d032314610b4657600080fd5b8063ec0d5e0c14610a79578063f1c05a7e14610a99578063f2fde38b14610ab957600080fd5b8063cc8b21e4116100d1578063cc8b21e414610a01578063cda775f914610a21578063ce4b5bbe14610a41578063eb16f00414610a5957600080fd5b8063c5f956af1461099b578063c6ba0936146109bb578063c8564c62146109d057600080fd5b8063ad3018f011610164578063b95717211161013e578063b95717211461091b578063be35d3bd1461093b578063c05c5e941461095b578063c415b95c1461097b57600080fd5b8063ad3018f0146108a6578063ad3cb1cc146108d4578063b5d0c4c71461090557600080fd5b80639e86d0c4116101a05780639e86d0c41461080a578063a3f4df7e1461082a578063a4e59ac814610870578063a7a488841461089057600080fd5b80638e9171b0146107aa57806395fb16bb146107ca5780639b56d6c9146107ea57600080fd5b806355dafa46116102a05780637ee4196b1161023e57806382e0a5741161021857806382e0a5741461069d57806386da0824146106d55780638b8fbd92146107575780638da5cb5b1461076d57600080fd5b80637ee4196b1461062a5780637f7dde4a146106685780638129fc1c1461068857600080fd5b8063715018a61161027a578063715018a614610596578063741bef1a146105ab57806376671808146105cb57806377553ad41461060a57600080fd5b806355dafa46146105365780636a85d67d146105565780636aebb1ab1461057657600080fd5b80633cc742251161030d5780634e8338eb116102e75780634e8338eb146104ce5780634f1ef286146104ee57806352ce82721461050157806352d1902d1461052157600080fd5b80633cc742251461046e5780634169467d1461048e5780634bc66f32146104ae57600080fd5b80630d9a6b35116103495780630d9a6b35146103ef5780631091da891461040e578063121f2b261461042e57806327d04b351461044e57600080fd5b806301c9310014610370578063048c661d146103925780630a34d4d6146103cf575b600080fd5b34801561037c57600080fd5b5061039061038b366004613784565b610b66565b005b34801561039e57600080fd5b50600d546103b2906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156103db57600080fd5b506011546103b2906001600160a01b031681565b3480156103fb57600080fd5b506033545b6040519081526020016103c6565b34801561041a57600080fd5b506103906104293660046137a1565b610bb7565b34801561043a57600080fd5b50610400610449366004613784565b610c4f565b34801561045a57600080fd5b50610400610469366004613784565b610ca2565b34801561047a57600080fd5b506006546103b2906001600160a01b031681565b34801561049a57600080fd5b506008546103b2906001600160a01b031681565b3480156104ba57600080fd5b50600e546103b2906001600160a01b031681565b3480156104da57600080fd5b506104006104e93660046137d9565b610d9a565b6103906104fc366004613859565b610dc7565b34801561050d57600080fd5b5061040061051c366004613784565b610de6565b34801561052d57600080fd5b50610400610e31565b34801561054257600080fd5b50600a546103b2906001600160a01b031681565b34801561056257600080fd5b50610390610571366004613784565b610e4e565b34801561058257600080fd5b50610390610591366004613946565b610e9f565b3480156105a257600080fd5b50610390610ff4565b3480156105b757600080fd5b50600b546103b2906001600160a01b031681565b3480156105d757600080fd5b506039546105f290600160801b90046001600160801b031681565b6040516001600160801b0390911681526020016103c6565b34801561061657600080fd5b506002546103b2906001600160a01b031681565b34801561063657600080fd5b506104006106453660046139ae565b603a60209081526000938452604080852082529284528284209052825290205481565b34801561067457600080fd5b506000546103b2906001600160a01b031681565b34801561069457600080fd5b50610390611008565b3480156106a957600080fd5b506104006106b83660046139f3565b603b60209081526000928352604080842090915290825290205481565b3480156106e157600080fd5b506107286106f0366004613784565b6037602052600090815260409020600181015460028201546003909201549091906001600160801b0380821691600160801b90041684565b6040805194855260208501939093526001600160801b03918216928401929092521660608201526080016103c6565b34801561076357600080fd5b5061040060385481565b34801561077957600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166103b2565b3480156107b657600080fd5b506103906107c5366004613946565b611136565b3480156107d657600080fd5b506004546103b2906001600160a01b031681565b3480156107f657600080fd5b50610400610805366004613784565b611174565b34801561081657600080fd5b50610400610825366004613784565b611211565b34801561083657600080fd5b506108636040518060400160405280600d81526020016c14dd18589a5b1a5d1e541bdbdb609a1b81525081565b6040516103c69190613a4a565b34801561087c57600080fd5b506039546105f2906001600160801b031681565b34801561089c57600080fd5b50610400603e5481565b3480156108b257600080fd5b506108c66108c1366004613aa1565b6112b8565b6040516103c6929190613bcb565b3480156108e057600080fd5b50610863604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561091157600080fd5b50610400603c5481565b34801561092757600080fd5b50610390610936366004613bf0565b611331565b34801561094757600080fd5b50610400610956366004613c32565b6118ad565b34801561096757600080fd5b506001546103b2906001600160a01b031681565b34801561098757600080fd5b506007546103b2906001600160a01b031681565b3480156109a757600080fd5b50600f546103b2906001600160a01b031681565b3480156109c757600080fd5b506108c66118ce565b3480156109dc57600080fd5b506011546109f190600160a01b900460ff1681565b60405190151581526020016103c6565b348015610a0d57600080fd5b50600c546103b2906001600160a01b031681565b348015610a2d57600080fd5b506003546103b2906001600160a01b031681565b348015610a4d57600080fd5b50610400633b9aca0081565b348015610a6557600080fd5b50610390610a74366004613c4b565b611991565b348015610a8557600080fd5b50610390610a94366004613784565b611ae0565b348015610aa557600080fd5b506010546103b2906001600160a01b031681565b348015610ac557600080fd5b50610390610ad4366004613784565b611bd0565b348015610ae557600080fd5b506005546103b2906001600160a01b031681565b348015610b0557600080fd5b50610400610b14366004613784565b60366020526000908152604090205481565b348015610b3257600080fd5b50610390610b41366004613784565b611c0e565b348015610b5257600080fd5b506009546103b2906001600160a01b031681565b610b6e611c17565b6001600160a01b038116610b95576040516385d3330760e01b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6010546001600160a01b03163314610bfc576010546040516339bf765b60e01b81523360048201526001600160a01b0390911660248201526044015b60405180910390fd5b603354801580610c0a575083155b15610c155750505050565b610c1d611c72565b600080610c2c85858886611d09565b91509150610c3b858383611e9e565b610c468585886121a5565b5050505b505050565b6001600160a01b038116600090815260366020526040812054808203610c785750600092915050565b6001600160a01b0383166000908152603760205260409020610c9b9082906122e9565b9392505050565b6000805460405163c5739d0b60e01b81526001600160a01b0384811660048301528392169063c5739d0b90602401602060405180830381865afa158015610ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d119190613c77565b60065460405163c5739d0b60e01b81526001600160a01b0386811660048301529293506000929091169063c5739d0b906024015b602060405180830381865afa158015610d62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d869190613c77565b9050610d928183613ca6565b949350505050565b6001600160a01b038083166000908152603760209081526040808320938516835292905220545b92915050565b610dcf6123d9565b610dd88261247e565b610de28282612486565b5050565b6001600160a01b038116600090815260366020526040812054808203610e0f5750600092915050565b6001600160a01b0383166000908152603760205260409020610d928282612543565b6000610e3b612631565b50600080516020613e7183398151915290565b610e56611c17565b6001600160a01b038116610e7d5760405163706ebc6560e11b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610ea761267a565b610eb0836126b2565b33600090815260366020526040902054610ec8611c72565b600080610f08338686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506112b892505050565b915091506000610f1733610c4f565b90506000610f258286613cb9565b9050610f30336126d3565b610f3a33896127a0565b6000610f468984613ca6565b9050610f52338261285c565b60405181815233907fbce78369dccab09eec1986f4d409ab09ffbb47d65423e5148fcf98411c5111c99060200160405180910390a2336001600160a01b03167ff20651f7c9cd4e1c112f77cbf2a13a44f79d4165dd781c41b52052bfc888174a868685604051610fc493929190613ccc565b60405180910390a2610fd7338686612b04565b505050505050610c4a6001600080516020613e9183398151915255565b610ffc611c17565b6110066000612c93565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff1660008115801561104e5750825b905060008267ffffffffffffffff16600114801561106b5750303b155b905081158015611079575080155b156110975760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156110c157845460ff60401b1916600160401b1785555b336110cb81612d04565b6110d3612d15565b6110db612d25565b50670de0b6b3a7640000603855831561112f57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2906020015b60405180910390a15b5050505050565b61113e61267a565b60008061114c858585612d2d565b9150915061115b338383612b04565b5050610c4a6001600080516020613e9183398151915255565b60015460405163b31610db60e01b81526001600160a01b038381166004830152600092839291169063b31610db90602401602060405180830381865afa1580156111c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e69190613c77565b9050603460010181815481106111fe576111fe613d02565b9060005260206000200154915050919050565b60008054604051635373433f60e01b81526001600160a01b03848116600483015283921690635373433f90602401602060405180830381865afa15801561125c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112809190613c77565b600654604051635373433f60e01b81526001600160a01b03868116600483015292935060009290911690635373433f90602401610d45565b6001600160a01b0382166000908152603660205260408120546060918291908190036112fd57505060408051600080825260208201908152818301909252915061132a565b6001600160a01b038516600090815260376020526040812090611321838388612e70565b86955093505050505b9250929050565b611339611c17565b601154600160a01b900460ff161561136357604051625f22e960e41b815260040160405180910390fd5b6010811461138457604051633f5a111d60e21b815260040160405180910390fd5b60005b60108110156114225760008383838181106113a4576113a4613d02565b90506020020160208101906113b99190613784565b6001600160a01b03160361141a57808383838181106113da576113da613d02565b90506020020160208101906113ef9190613784565b604051630d9d339f60e01b815260048101929092526001600160a01b03166024820152604401610bf3565b600101611387565b508181600081811061143657611436613d02565b905060200201602081019061144b9190613784565b600080546001600160a01b0319166001600160a01b03929092169190911790558181600181811061147e5761147e613d02565b90506020020160208101906114939190613784565b600180546001600160a01b0319166001600160a01b0392909216919091179055818160028181106114c6576114c6613d02565b90506020020160208101906114db9190613784565b600280546001600160a01b0319166001600160a01b03929092169190911790558181600381811061150e5761150e613d02565b90506020020160208101906115239190613784565b600380546001600160a01b0319166001600160a01b03929092169190911790558181600481811061155657611556613d02565b905060200201602081019061156b9190613784565b600580546001600160a01b0319166001600160a01b03929092169190911781558290829081811061159e5761159e613d02565b90506020020160208101906115b39190613784565b600680546001600160a01b0319166001600160a01b0392909216919091178155829082908181106115e6576115e6613d02565b90506020020160208101906115fb9190613784565b600780546001600160a01b0319166001600160a01b03929092169190911781558290829081811061162e5761162e613d02565b90506020020160208101906116439190613784565b600880546001600160a01b0319166001600160a01b03929092169190911781558290829081811061167657611676613d02565b905060200201602081019061168b9190613784565b600980546001600160a01b0319166001600160a01b0392909216919091178155829082908181106116be576116be613d02565b90506020020160208101906116d39190613784565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a81811061170657611706613d02565b905060200201602081019061171b9190613784565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b81811061174e5761174e613d02565b90506020020160208101906117639190613784565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c81811061179657611796613d02565b90506020020160208101906117ab9190613784565b600e80546001600160a01b0319166001600160a01b03929092169190911790558181600d8181106117de576117de613d02565b90506020020160208101906117f39190613784565b600f80546001600160a01b0319166001600160a01b03929092169190911790558181600e81811061182657611826613d02565b905060200201602081019061183b9190613784565b601080546001600160a01b0319166001600160a01b03929092169190911790558181600f81811061186e5761186e613d02565b90506020020160208101906118839190613784565b601180546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b603d81815481106118bd57600080fd5b600091825260209091200154905081565b606080603460000160346001018180548060200260200160405190810160405280929190818152602001828054801561193057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611912575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561198257602002820191906000526020600020905b81548152602001906001019080831161196e575b50505050509050915091509091565b6000546001600160a01b031633146119d157600054604051633eafff5160e11b81523360048201526001600160a01b039091166024820152604401610bf3565b60015460405163b31610db60e01b81526001600160a01b038481166004830152600092169063b31610db90602401602060405180830381865afa158015611a1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a409190613c77565b905060008260346001018381548110611a5b57611a5b613d02565b9060005260206000200154611a709190613ca6565b90508060346001018381548110611a8957611a89613d02565b60009182526020918290200191909155604080516001600160a01b03871681529182018390527fb36e395f001a695c24ce43be3fb7c2338a2e794c691d5665d2f7847cc231a4b5910160405180910390a150505050565b6001546001600160a01b03163314611b2057600154604051632abcdbcb60e21b81523360048201526001600160a01b039091166024820152604401610bf3565b603d8054600180820190925560007fece66cfdbd22e3f37d348a3d8e19074452862cd65fd4b9a11f0336d1ac6d1dc3909101819055603480548084019091557f46bddb1178e94d7f2892ff5f366840eb658911794f2c3a44c450aa2c505186c10180546001600160a01b0319166001600160a01b03949094169390931790925560358054918201815582527fcfa4bec1d3298408bb5afcfcd9c430549c5b31f8aa5c5848151c0a55f473c34d0155565b611bd8611c17565b6001600160a01b038116611c0257604051631e4fbdf760e01b815260006004820152602401610bf3565b611c0b81612c93565b50565b611c0b8161247e565b33611c497f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146110065760405163118cdaa760e01b8152336004820152602401610bf3565b6004546001600160a01b031615611006576000600460009054906101000a90046001600160a01b03166001600160a01b031663234209eb6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfe9190613c77565b9050611c0b81612f92565b60015460405163b31610db60e01b81526001600160a01b038681166004830152600092839283929091169063b31610db90602401602060405180830381865afa158015611d5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7e9190613c77565b90506000603d8281548110611d9557611d95613d02565b9060005260206000200154670de0b6b3a764000088611db49190613d18565b611dbe9190613ca6565b905084861115611de1576040516337b66be560e11b815260040160405180910390fd5b848603611dfd576000603e55670de0b6b3a76400009250611e52565b603e54600090611e15670de0b6b3a764000089613d18565b611e1f9190613cb9565b9050611e2b8682613d2f565b611e36906001613ca6565b935080611e438786613d18565b611e4d9190613cb9565b603e55505b611e5c8582613d2f565b9350611e688585613d18565b611e729082613cb9565b603d8381548110611e8557611e85613d02565b9060005260206000200181905550505094509492505050565b670de0b6b3a7640000811115611eca57604051632c98807d60e21b815260048101829052602401610bf3565b603854600080611ee284670de0b6b3a7640000613cb9565b6039546001600160a01b0388166000908152603a602090815260408083206001600160801b03600160801b86048116808652918452828520951680855294909252822054939450919290611f36878a613d18565b90506000611f448284613ca6565b6001600160a01b038c166000818152603a602090815260408083206001600160801b038a8116808652918452828520908c1680865290845293829020869055815194855291840185905283015260608201529091507ff7ef5e6b61b78633f24d0f3fc1cbca526433ca9053a2930b5f19711abee487de9060800160405180910390a18560000361208157611fd9600185613d51565b603980546001600160801b03908116600160801b918416918202179091556040519081529094507fb50f0f59e7cb5b421dc77581c3a9919e3806e076e5fa78a874c3f120cb7d874d9060200160405180910390a1603980546001600160801b0319169055604051600081527f1f9dfc70cd666adb18a39d60a797518f7b4febf4b6e24ef37d44f6e1e7219fbe9060200160405180910390a1670de0b6b3a7640000965061213f565b600061208d878a613d18565b905060006120a3670de0b6b3a764000083613d2f565b9050633b9aca0081101561213857670de0b6b3a76400006120c8633b9aca0084613d18565b6120d29190613d2f565b98506120df600188613d51565b603980546001600160801b0319166001600160801b0383169081179091556040519081529097507f1f9dfc70cd666adb18a39d60a797518f7b4febf4b6e24ef37d44f6e1e7219fbe9060200160405180910390a161213c565b8098505b50505b866000036121605760405163059cf7a960e41b815260040160405180910390fd5b60388790556040518781527feca6714fcf568fb34cf9db4a414cb0cc48e93c5d4e1ba0582a46ea3704cf24d59060200160405180910390a15050505050505050505050565b600054604051632fb9ba3160e01b81526001600160a01b0385811660048301526024820184905290911690632fb9ba3190604401600060405180830381600087803b1580156121f357600080fd5b505af1158015612207573d6000803e3d6000fd5b5050505061221481613081565b600554604051632770a7eb60e21b8152306004820152602481018390526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b15801561226057600080fd5b505af1158015612274573d6000803e3d6000fd5b50506000546040516347878f1560e01b81526001600160a01b0387811660048301523060248301526044820187905290911692506347878f159150606401600060405180830381600087803b1580156122cc57600080fd5b505af11580156122e0573d6000803e3d6000fd5b50505050505050565b60018101546003820154603954600092916001600160801b0380821692600160801b928390048216929004168110156123285760009350505050610dc1565b60395460009081906123449085906001600160801b0316613d78565b9050806001600160801b03166000036123775784603854896123669190613d18565b6123709190613d2f565b91506123ab565b806001600160801b03166001036123a657633b9aca00856038548a61239c9190613d18565b6123669190613d2f565b600091505b6123b9633b9aca0089613d2f565b8210156123ce57600095505050505050610dc1565b509695505050505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061246057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612454600080516020613e71833981519152546001600160a01b031690565b6001600160a01b031614155b156110065760405163703e46dd60e11b815260040160405180910390fd5b611c0b611c17565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156124e0575060408051601f3d908101601f191682019092526124dd91810190613c77565b60015b61250857604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610bf3565b600080516020613e71833981519152811461253957604051632a87526960e21b815260048101829052602401610bf3565b610c4a83836130d0565b6003810154600282015460018301546001600160801b03600160801b840481166000818152603b60209081526040808320949097168083529390529485205490939192908590612594908490613cb9565b6001600160801b0386166000908152603b6020526040812091925090633b9aca0090826125c2886001613d51565b6001600160801b03166001600160801b03168152602001908152602001600020546125ed9190613d2f565b90506000670de0b6b3a7640000846126058486613ca6565b61260f908d613d18565b6126199190613d2f565b6126239190613d2f565b9a9950505050505050505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110065760405163703e46dd60e11b815260040160405180910390fd5b600080516020613e918339815191528054600119016126ac57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b80600003611c0b576040516347870b6160e11b815260040160405180910390fd5b6004546001600160a01b031615611c0b5760006126ef82610de6565b60048054604051630227f7bb60e61b81526001600160a01b03868116938201939093526024810184905292935016906389fdeec090604401600060405180830381600087803b15801561274157600080fd5b505af1158015612755573d6000803e3d6000fd5b50505050816001600160a01b03167f60243fd2e9882f8d26aa92149ed8254e5ebfd16b84a891bb88168b1adebda9568260405161279491815260200190565b60405180910390a25050565b600554604051632ee65eeb60e21b81526001600160a01b038481166004830152306024830152604482018490529091169063bb997bac90606401600060405180830381600087803b1580156127f457600080fd5b505af1158015612808573d6000803e3d6000fd5b5050505060008160335461281c9190613ca6565b60338190556040518181529091507f8c9268469ff6265448f46f8119962e815f393b25b87bb55bda5e709a412b85d79060200160405180910390a1505050565b6001600160a01b038083166000908152603660205260408082208490556001548151634eb5750560e11b8152915192931691639d6aea0a9160048082019286929091908290030181865afa1580156128b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128e09190810190613d98565b80516001600160a01b03851660009081526037602052604081209293509091908490036129d05760005b8281101561296c576001600160a01b03861660009081526037602052604081208551829087908590811061294057612940613d02565b6020908102919091018101516001600160a01b031682528101919091526040016000205560010161290a565b5060006001820181905560028201819055600382018190556040805182815260208101929092526001600160a01b038716917fc48943df4095f4f20d171fd2872eafdc0eed4d9014ac3672f3bde7fd425449d5910160405180910390a25050505050565b6039546038546001600160801b0380831692600160801b9004169060005b85811015612a6d576000878281518110612a0a57612a0a613d02565b6020908102919091018101516001600160a01b039081166000818152603a845260408082206001600160801b03808b168452908652818320908b168352855280822054938f168252603785528082209282529190935290912055506001016129ee565b506001600160801b038281166000818152603b6020908152604080832094881680845294825291829020546001890186905560028901819055600160801b9093029093176003880155805184815292830182905290916001600160a01b038b16917fc48943df4095f4f20d171fd2872eafdc0eed4d9014ac3672f3bde7fd425449d5910160405180910390a2505050505050505050565b815181518114612b2757604051637d26926b60e01b815260040160405180910390fd5b60005b81811015612ba7576000838281518110612b4657612b46613d02565b6020026020010151905080600003612b615750600101612b2a565b6000858381518110612b7557612b75613d02565b60200260200101519050612b9d8783836001600160a01b03166131269092919063ffffffff16565b5050600101612b2a565b506040805160348054606060208202840181018552938301818152612c6b9484928491840182828015612c0357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612be5575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015612c5b57602002820191906000526020600020905b815481526020019060010190808311612c47575b5050505050815250508484613178565b805161112f9160359160209091019061370f565b6001600080516020613e9183398151915255565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b612d0c613252565b611c0b8161329b565b612d1d613252565b6110066132a3565b611006613252565b336000908152603660205260409020546060908190612d4b816132ab565b612d53611c72565b612d90338686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506112b892505050565b90935091506000612da033610c4f565b90506000612dae88836132cc565b90506000612dbc8385613cb9565b9050612dc7336126d3565b612dd133836132e2565b6000612ddd8385613cb9565b9050612de9338261285c565b60405181815233907fbce78369dccab09eec1986f4d409ab09ffbb47d65423e5148fcf98411c5111c99060200160405180910390a2336001600160a01b03167ff20651f7c9cd4e1c112f77cbf2a13a44f79d4165dd781c41b52052bfc888174a888885604051612e5b93929190613ccc565b60405180910390a25050505050935093915050565b805160609060015b81811015612eef57836001820381518110612e9557612e95613d02565b60200260200101516001600160a01b0316848281518110612eb857612eb8613d02565b60200260200101516001600160a01b031611612ee757604051637243bc1760e11b815260040160405180910390fd5b600101612e78565b508067ffffffffffffffff811115612f0957612f09613812565b604051908082528060200260200182016040528015612f32578160200160208202803683370190505b50915060005b81811015612f8957612f648686868481518110612f5757612f57613d02565b6020026020010151613363565b838281518110612f7657612f76613d02565b6020908102919091010152600101612f38565b50509392505050565b603354801580612fa0575081155b15612fa9575050565b6000612fb5838361342f565b9050600060385482612fc79190613d18565b6039546001600160801b03600160801b820481166000908152603b602090815260408083209390941682529190915220549091506130058282613ca6565b603980546001600160801b03600160801b80830482166000908152603b60209081526040808320958516835294815290849020869055935483518681529181048316948201949094529216908201529091507f73dc7d579b909e77bc95647062d2cc3598ed92c10e34772672294cb0c149cc0090606001611126565b6000816033546130919190613cb9565b60338190556040518181529091507f8c9268469ff6265448f46f8119962e815f393b25b87bb55bda5e709a412b85d79060200160405180910390a15050565b6130d982613482565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561311e57610c4a82826134e7565b610de261355d565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610c4a90849061357c565b60208301515182516060919060005b828110156132425760005b82811015613239578681815181106131ac576131ac613d02565b60200260200101516001600160a01b0316886000015183815181106131d3576131d3613d02565b60200260200101516001600160a01b031603613231578581815181106131fb576131fb613d02565b60200260200101518860200151838151811061321957613219613d02565b6020026020010181815161322d9190613cb9565b9052505b600101613192565b50600101613187565b5050506020909301519392505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661100657604051631afcd79f60e31b815260040160405180910390fd5b611bd8613252565b612c7f613252565b80600003611c0b5760405163fb1f8a4d60e01b815260040160405180910390fd5b60008183106132db5781610c9b565b5090919050565b806000036132ee575050565b600554604051631062c15f60e11b81523060048201526001600160a01b03848116602483015260448201849052909116906320c582be90606401600060405180830381600087803b15801561334257600080fd5b505af1158015613356573d6000803e3d6000fd5b50505050610de281613081565b6001600160a01b038116600090815260208381526040808320546001860154603a845282852060038801546001600160801b03600160801b82048116885291865284872091168652938490529184205490929084906133c3908590613cb9565b6003880154909150600090633b9aca0090849083906133ec906001600160801b03166001613d51565b6001600160801b03166001600160801b03168152602001908152602001600020546134179190613d2f565b90506000670de0b6b3a7640000856126058486613ca6565b600080603c54670de0b6b3a7640000856134499190613d18565b6134539190613ca6565b905060006134618483613d2f565b905061346d8482613d18565b6134779083613cb9565b603c55949350505050565b806001600160a01b03163b6000036134b857604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610bf3565b600080516020613e7183398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516135049190613e32565b600060405180830381855af49150503d806000811461353f576040519150601f19603f3d011682016040523d82523d6000602084013e613544565b606091505b50915091506135548583836135df565b95945050505050565b34156110065760405163b398979f60e01b815260040160405180910390fd5b60006135916001600160a01b0384168361363b565b905080516000141580156135b65750808060200190518101906135b49190613e4e565b155b15610c4a57604051635274afe760e01b81526001600160a01b0384166004820152602401610bf3565b6060826135f4576135ef82613649565b610c9b565b815115801561360b57506001600160a01b0384163b155b1561363457604051639996b31560e01b81526001600160a01b0385166004820152602401610bf3565b5080610c9b565b6060610c9b83836000613672565b8051156136595780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6060814710156136975760405163cd78605960e01b8152306004820152602401610bf3565b600080856001600160a01b031684866040516136b39190613e32565b60006040518083038185875af1925050503d80600081146136f0576040519150601f19603f3d011682016040523d82523d6000602084013e6136f5565b606091505b50915091506137058683836135df565b9695505050505050565b82805482825590600052602060002090810192821561374a579160200282015b8281111561374a57825182559160200191906001019061372f565b5061375692915061375a565b5090565b5b80821115613756576000815560010161375b565b6001600160a01b0381168114611c0b57600080fd5b60006020828403121561379657600080fd5b8135610c9b8161376f565b6000806000606084860312156137b657600080fd5b8335925060208401356137c88161376f565b929592945050506040919091013590565b600080604083850312156137ec57600080fd5b82356137f78161376f565b915060208301356138078161376f565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561385157613851613812565b604052919050565b6000806040838503121561386c57600080fd5b82356138778161376f565b915060208381013567ffffffffffffffff8082111561389557600080fd5b818601915086601f8301126138a957600080fd5b8135818111156138bb576138bb613812565b6138cd601f8201601f19168501613828565b915080825287848285010111156138e357600080fd5b80848401858401376000848284010152508093505050509250929050565b60008083601f84011261391357600080fd5b50813567ffffffffffffffff81111561392b57600080fd5b6020830191508360208260051b850101111561132a57600080fd5b60008060006040848603121561395b57600080fd5b83359250602084013567ffffffffffffffff81111561397957600080fd5b61398586828701613901565b9497909650939450505050565b80356001600160801b03811681146139a957600080fd5b919050565b6000806000606084860312156139c357600080fd5b83356139ce8161376f565b92506139dc60208501613992565b91506139ea60408501613992565b90509250925092565b60008060408385031215613a0657600080fd5b613a0f83613992565b9150613a1d60208401613992565b90509250929050565b60005b83811015613a41578181015183820152602001613a29565b50506000910152565b6020815260008251806020840152613a69816040850160208701613a26565b601f01601f19169190910160400192915050565b600067ffffffffffffffff821115613a9757613a97613812565b5060051b60200190565b60008060408385031215613ab457600080fd5b8235613abf8161376f565b915060208381013567ffffffffffffffff811115613adc57600080fd5b8401601f81018613613aed57600080fd5b8035613b00613afb82613a7d565b613828565b81815260059190911b82018301908381019088831115613b1f57600080fd5b928401925b82841015613b46578335613b378161376f565b82529284019290840190613b24565b80955050505050509250929050565b60008151808452602080850194506020840160005b83811015613b8f5781516001600160a01b031687529582019590820190600101613b6a565b509495945050505050565b60008151808452602080850194506020840160005b83811015613b8f57815187529582019590820190600101613baf565b604081526000613bde6040830185613b55565b82810360208401526135548185613b9a565b60008060208385031215613c0357600080fd5b823567ffffffffffffffff811115613c1a57600080fd5b613c2685828601613901565b90969095509350505050565b600060208284031215613c4457600080fd5b5035919050565b60008060408385031215613c5e57600080fd5b8235613c698161376f565b946020939093013593505050565b600060208284031215613c8957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610dc157610dc1613c90565b81810381811115610dc157610dc1613c90565b606081526000613cdf6060830186613b55565b8281036020840152613cf18186613b9a565b915050826040830152949350505050565b634e487b7160e01b600052603260045260246000fd5b8082028115828204841417610dc157610dc1613c90565b600082613d4c57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160801b03818116838216019080821115613d7157613d71613c90565b5092915050565b6001600160801b03828116828216039080821115613d7157613d71613c90565b60006020808385031215613dab57600080fd5b825167ffffffffffffffff811115613dc257600080fd5b8301601f81018513613dd357600080fd5b8051613de1613afb82613a7d565b81815260059190911b82018301908381019087831115613e0057600080fd5b928401925b82841015613e27578351613e188161376f565b82529284019290840190613e05565b979650505050505050565b60008251613e44818460208701613a26565b9190910192915050565b600060208284031215613e6057600080fd5b81518015158114610c9b57600080fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a164736f6c6343000817000a",
  "devdoc": {
    "details": "When a trenBox is liquidated, then depending on system conditions, some of its debt tokens debt gets offset with debt tokens in the Stability Pool: that is, the offset debt evaporates, and an equal amount of debt tokens tokens in the Stability Pool is burned. Thus, a liquidation causes each depositor to receive a debt tokens loss, in proportion to their deposit as a share of total deposits. They also receive an Collateral gain, as the amount of collateral of the liquidated trenBox is distributed among Stability depositors, in the same proportion. When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40% of the total debt tokens in the Stability Pool, depletes 40% of each deposit. A deposit that has experienced a series of liquidations is termed a \"compounded deposit\": each liquidation depletes the deposit, multiplying it by some factor in range ]0,1[ --- IMPLEMENTATION --- We use a highly scalable method of tracking deposits and Collateral gains that has O(1) complexity. When a liquidation occurs, rather than updating each depositor's deposit and Collateral gain, we simply update two state variables: a product P, and a sum S. These are kept track for each type of collateral. A mathematical manipulation allows us to factor out the initial deposit, and accurately track all depositors' compounded deposits and accumulated Collateral amount gains over time, as liquidations occur, using just these two variables P and S. When depositors join the Stability Pool, they get a snapshot of the latest P and S: P_t and S_t, respectively. The formula for a depositor's accumulated Collateral amount gain is derived here: https://github.com/liquity/dev/blob/main/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf For a given deposit d_t, the ratio P/P_t tells us the factor by which a deposit has decreased since it joined the Stability Pool, and the term d_t * (S - S_t)/P_t gives us the deposit's total accumulated Collateral amount gain. Each liquidation updates the product P and sum S. After a series of liquidations, a compounded deposit and corresponding Collateral amount gain can be calculated using the initial deposit, the depositor’s snapshots of P and S, and the latest values of P and S. Any time a depositor updates their deposit (withdrawal, top-up) their accumulated Collateral amount gain is paid out, their new deposit is recorded (based on their latest compounded deposit and modified by the withdrawal/top-up), and they receive new snapshots of the latest P and S. Essentially, they make a fresh deposit that overwrites the old one. --- SCALE FACTOR --- Since P is a running product in range ]0,1] that is always-decreasing, it should never reach 0 when multiplied by a number in range ]0,1[. Unfortunately, Solidity floor division always reaches 0, sooner or later. A series of liquidations that nearly empty the Pool (and thus each multiply P by a very small number in range ]0,1[ ) may push P to its 18 digit decimal limit, and round it to 0, when in fact the Pool hasn't been emptied: this would break deposit tracking. So, to track P accurately, we use a scale factor: if a liquidation would cause P to decrease to <1e-9 (and be rounded to 0 by Solidity), we first multiply P by 1e9, and increment a currentScale factor by 1. The added benefit of using 1e9 for the scale factor (rather than 1e18) is that it ensures negligible precision loss close to the scale boundary: when P is at its minimum value of 1e9, the relative precision loss in P due to floor division is only on the order of 1e-9. --- EPOCHS --- Whenever a liquidation fully empties the Stability Pool, all deposits should become 0. However, setting P to 0 would make P be 0 forever, and break all future reward calculations. So, every time the Stability Pool is emptied by a liquidation, we reset P = 1 and currentScale = 0, and increment the currentEpoch by 1. --- TRACKING DEPOSIT OVER SCALE CHANGES AND EPOCHS --- When a deposit is made, it gets snapshots of the currentEpoch and the currentScale. When calculating a compounded deposit, we compare the current epoch to the deposit's epoch snapshot. If the current epoch is newer, then the deposit was present during a pool-emptying liquidation, and necessarily has been depleted to 0. Otherwise, we then compare the current scale to the deposit's scale snapshot. If they're equal, the compounded deposit is given by d_t * P/P_t. If it spans one scale change, it is given by d_t * P/(P_t * 1e9). If it spans more than one scale change, we define the compounded deposit as 0, since it is now less than 1e-9'th of its initial value (e.g. a deposit of 1 billion debt tokens has depleted to < 1 debt token).  --- TRACKING DEPOSITOR'S COLLATERAL AMOUNT GAIN OVER SCALE CHANGES AND EPOCHS --- In the current epoch, the latest value of S is stored upon each scale change, and the mapping (scale -> S) is stored for each epoch. This allows us to calculate a deposit's accumulated Collateral amount gain, during the epoch in which the deposit was non-zero and earned Collateral amount. We calculate the depositor's accumulated Collateral amount gain for the scale at which they made the deposit, using the Collateral amount gain formula: e_1 = d_t * (S - S_t) / P_t and also for scale after, taking care to divide the latter by a factor of 1e9: e_2 = d_t * S / (P_t * 1e9) The gain in the second scale will be full, as the starting point was in the previous scale, thus no need to subtract anything. The deposit therefore was present for reward events from the beginning of that second scale.        S_i-S_t + S_{i+1}      .<--------.------------>      .         .      . S_i     .   S_{i+1}   <--.-------->.<----------->   S_t.         .   <->.         .      t         .  |---+---------|-------------|-----...         i            i+1 The sum of (e_1 + e_2) captures the depositor's total accumulated Collateral amount gain, handling the case where their deposit spanned one scale change. We only care about gains across one scale change, since the compounded deposit is defined as being 0 once it has spanned more than one scale change. --- UPDATING P WHEN A LIQUIDATION OCCURS --- Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / Collateral amount gain derivations: https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf --- Gravita ISSUANCE TO STABILITY POOL DEPOSITORS --- An Gravita issuance event occurs at every deposit operation, and every liquidation. All deposits earn a share of the issued Gravita in proportion to the deposit as a share of total deposits. Please see the system Readme for an overview: https://github.com/liquity/dev/blob/main/README.md#lqty-issuance-to-stability-providers We use the same mathematical product-sum approach to track Gravita gains for depositors, where 'G' is the sum corresponding to Gravita gains. The product P (and snapshot P_t) is re-used, as the ratio P/P_t tracks a deposit's depletion due to liquidations.",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "addCollateralType(address)": {
        "details": "should be called anytime a collateral is added to controller keeps all arrays the correct length",
        "params": {
          "_collateral": "address of collateral to add"
        }
      },
      "getAllCollateral()": {
        "details": "gets collateral from totalColl This is not necessarily the contract's actual collateral balance; just what is stored in state",
        "returns": {
          "_0": "tokens and amounts"
        }
      },
      "getCollateral(address)": {
        "details": "Not necessarily this contract's actual collateral balance; just what is stored in state",
        "params": {
          "_collateral": "address of the collateral to get amount of"
        },
        "returns": {
          "_0": "amount of this specific collateral"
        }
      },
      "getDepositorGains(address,address[])": {
        "details": "Given by the formula:  E = d0 * (S - S(0))/P(0) where S(0) and P(0) are the depositor's snapshots of the sum S and product P, respectively. d0 is the last recorded deposit value.",
        "params": {
          "_assets": "array of assets to check gains for",
          "_depositor": "address of depositor in question"
        },
        "returns": {
          "_0": "assets, amounts"
        }
      },
      "getTotalDebtTokenDeposits()": {
        "details": "gets total debtToken from deposits",
        "returns": {
          "_0": "totalDebtTokenDeposits"
        }
      },
      "offset(uint256,address,uint256)": {
        "details": "Cancels out the specified debt against the debtTokens contained in the Stability Pool (as far as possible) and transfers the TrenBox's collateral from ActivePool to StabilityPool. Only called by liquidation functions in the TrenBoxManager.",
        "params": {
          "_amountAdded": "token amount as uint256",
          "_asset": "token address",
          "_debtToOffset": "how much debt to offset"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "provideToSP(uint256,address[])": {
        "details": "Triggers a TREN issuance, based on time passed since the last issuance. The TREN issuance is shared between *all* depositors - Sends depositor's accumulated gains (TREN, collateral assets) to depositor - Increases deposit stake, and takes new snapshots for each.",
        "params": {
          "_amount": "amount of debtToken provided",
          "_assets": "an array of collaterals to be claimed. Skipping a collateral forfeits the available rewards (can be useful for gas optimizations)"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdrawFromSP(uint256,address[])": {
        "params": {
          "_amount": "amount of debtToken to withdraw",
          "_assets": "an array of collaterals to be claimed."
        }
      }
    },
    "title": "The Stability Pool holds debt tokens deposited by Stability Pool depositors.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addCollateralType(address)": {
        "notice": "add a collateral"
      },
      "getAllCollateral()": {
        "notice": "getter function"
      },
      "getCollateral(address)": {
        "notice": "get collateral balance in the SP for a given collateral type"
      },
      "getDepositorGains(address,address[])": {
        "notice": "Calculates the gains earned by the deposit since its last snapshots were taken for selected assets."
      },
      "getTotalDebtTokenDeposits()": {
        "notice": "getter function"
      },
      "offset(uint256,address,uint256)": {
        "notice": "sets the offset for liquidation"
      },
      "provideToSP(uint256,address[])": {
        "notice": "Used to provide debt tokens to the stability Pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10031,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "activePool",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10033,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "adminContract",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10035,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "borrowerOperations",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10037,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "collSurplusPool",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10039,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "communityIssuance",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 10041,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "debtToken",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 10043,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "defaultPool",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 10045,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "feeCollector",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 10047,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "flashLoanAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 10049,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "gasPoolAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 10051,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "trenStaking",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 10053,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "priceFeed",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 10055,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "sortedTrenBoxes",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 10057,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 10059,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "timelockAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 10061,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 10063,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "trenBoxManager",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 10065,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "trenBoxManagerOperations",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 10067,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "isAddressSetupInitialized",
        "offset": 20,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 10072,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "__gap",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_uint256)33_storage"
      },
      {
        "astId": 17398,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "totalDebtTokenDeposits",
        "offset": 0,
        "slot": "51",
        "type": "t_uint256"
      },
      {
        "astId": 17401,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "totalColl",
        "offset": 0,
        "slot": "52",
        "type": "t_struct(Colls)10408_storage"
      },
      {
        "astId": 17405,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "deposits",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17410,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "depositSnapshots",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_struct(Snapshots)13814_storage)"
      },
      {
        "astId": 17412,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "P",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 17417,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "currentScale",
        "offset": 0,
        "slot": "57",
        "type": "t_uint128"
      },
      {
        "astId": 17419,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "currentEpoch",
        "offset": 16,
        "slot": "57",
        "type": "t_uint128"
      },
      {
        "astId": 17427,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "epochToScaleToSum",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_mapping(t_uint128,t_mapping(t_uint128,t_uint256)))"
      },
      {
        "astId": 17433,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "epochToScaleToG",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_uint128,t_mapping(t_uint128,t_uint256))"
      },
      {
        "astId": 17435,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "lastTRENError",
        "offset": 0,
        "slot": "60",
        "type": "t_uint256"
      },
      {
        "astId": 17438,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "lastAssetError_Offset",
        "offset": 0,
        "slot": "61",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 17440,
        "contract": "contracts/StabilityPool.sol:StabilityPool",
        "label": "lastDebtTokenLossError_Offset",
        "offset": 0,
        "slot": "62",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)33_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[33]",
        "numberOfBytes": "1056"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint128,t_mapping(t_uint128,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint128 => mapping(uint128 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint128,t_mapping(t_uint128,t_uint256))"
      },
      "t_mapping(t_address,t_struct(Snapshots)13814_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStabilityPool.Snapshots)",
        "numberOfBytes": "32",
        "value": "t_struct(Snapshots)13814_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint128,t_mapping(t_uint128,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => mapping(uint128 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint128,t_uint256)"
      },
      "t_mapping(t_uint128,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Colls)10408_storage": {
        "encoding": "inplace",
        "label": "struct TrenBase.Colls",
        "members": [
          {
            "astId": 10404,
            "contract": "contracts/StabilityPool.sol:StabilityPool",
            "label": "tokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 10407,
            "contract": "contracts/StabilityPool.sol:StabilityPool",
            "label": "amounts",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Snapshots)13814_storage": {
        "encoding": "inplace",
        "label": "struct IStabilityPool.Snapshots",
        "members": [
          {
            "astId": 13805,
            "contract": "contracts/StabilityPool.sol:StabilityPool",
            "label": "S",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 13807,
            "contract": "contracts/StabilityPool.sol:StabilityPool",
            "label": "P",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13809,
            "contract": "contracts/StabilityPool.sol:StabilityPool",
            "label": "G",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13811,
            "contract": "contracts/StabilityPool.sol:StabilityPool",
            "label": "scale",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 13813,
            "contract": "contracts/StabilityPool.sol:StabilityPool",
            "label": "epoch",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}