{
  "address": "0x6557630204c61E37558fB7008366D8f903e632ce",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AdminContract__CollateralDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AdminContract__CollateralExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AdminContract__CollateralNotConfigured",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AdminContract__OnlyOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AdminContract__OnlyTimelock",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__CommunityIssuanceZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__LengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__SetupIsInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__TRENStakingZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "address_",
          "type": "address"
        }
      ],
      "name": "ConfigurableAddresses__ZeroAddresses",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_parameter",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_valueEntered",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxValue",
          "type": "uint256"
        }
      ],
      "name": "SafeCheckError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldBorrowingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBorrowingFee",
          "type": "uint256"
        }
      ],
      "name": "BorrowingFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldCCR",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newCCR",
          "type": "uint256"
        }
      ],
      "name": "CCRChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "CollateralAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "FlashLoanFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldMaxDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newMaxDebt",
          "type": "uint256"
        }
      ],
      "name": "FlashLoanMaxDebtChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldMinDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newMinDebt",
          "type": "uint256"
        }
      ],
      "name": "FlashLoanMinDebtChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldMCR",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newMCR",
          "type": "uint256"
        }
      ],
      "name": "MCRChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldMinNet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newMinNet",
          "type": "uint256"
        }
      ],
      "name": "MinNetDebtChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldMintCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newMintCap",
          "type": "uint256"
        }
      ],
      "name": "MintCapChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldPercentDiv",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newPercentDiv",
          "type": "uint256"
        }
      ],
      "name": "PercentDivisorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "RedemptionBlockTimestampChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldRedemptionFeeFloor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newRedemptionFeeFloor",
          "type": "uint256"
        }
      ],
      "name": "RedemptionFeeFloorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_DEFAULT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR_DEFAULT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR_DEFAULT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_CAP_DEFAULT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_NET_DEBT_DEFAULT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR_DEFAULT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEMPTION_BLOCK_TIMESTAMP_DEFAULT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEMPTION_FEE_FLOOR_DEFAULT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_100pct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtTokenGasCompensation",
          "type": "uint256"
        }
      ],
      "name": "addNewCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "authorizeUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityIssuance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "flashLoanFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "flashLoanMinDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "flashLoanMaxDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "getBorrowingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "getCcr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "getDebtTokenGasCompensation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFlashLoanFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFlashLoanMaxNetDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFlashLoanMinNetDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "getIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_colls",
          "type": "address[]"
        }
      ],
      "name": "getIndices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "getIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "getMcr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "getMinNetDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "getMintCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "getPercentDivisor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "getRedemptionBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "getRedemptionFeeFloor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRouteToTRENStaking",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getTotalAssetDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidCollateral",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAddressSetupInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSetupInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "routeToTRENStaking",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_borrowingFee",
          "type": "uint256"
        }
      ],
      "name": "setBorrowingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newCCR",
          "type": "uint256"
        }
      ],
      "name": "setCCR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_borrowingFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ccr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mcr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minNetDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_percentDivisor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_redemptionFeeFloor",
          "type": "uint256"
        }
      ],
      "name": "setCollateralParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_communityIssuance",
          "type": "address"
        }
      ],
      "name": "setCommunityIssuance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_flashLoanFee",
          "type": "uint256"
        }
      ],
      "name": "setFeeForFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "setIsActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newMCR",
          "type": "uint256"
        }
      ],
      "name": "setMCR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_flashLoanMaxDebt",
          "type": "uint256"
        }
      ],
      "name": "setMaxDebtForFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_flashLoanMinDebt",
          "type": "uint256"
        }
      ],
      "name": "setMinDebtForFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minNetDebt",
          "type": "uint256"
        }
      ],
      "name": "setMinNetDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mintCap",
          "type": "uint256"
        }
      ],
      "name": "setMintCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_percentDivisor",
          "type": "uint256"
        }
      ],
      "name": "setPercentDivisor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "setRedemptionBlockTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_redemptionFeeFloor",
          "type": "uint256"
        }
      ],
      "name": "setRedemptionFeeFloor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setSetupIsInitialized",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trenStaking",
          "type": "address"
        }
      ],
      "name": "setTRENStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTrenBoxes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "switchRouteToTRENStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManagerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxStorage",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "validCollateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a7f7c188236ff897d7313c3fc2b44a12",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdminContract__CollateralDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdminContract__CollateralExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdminContract__CollateralNotConfigured\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdminContract__OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdminContract__OnlyTimelock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__CommunityIssuanceZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__SetupIsInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__TRENStakingZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"ConfigurableAddresses__ZeroAddresses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_parameter\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_valueEntered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxValue\",\"type\":\"uint256\"}],\"name\":\"SafeCheckError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldBorrowingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBorrowingFee\",\"type\":\"uint256\"}],\"name\":\"BorrowingFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldCCR\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newCCR\",\"type\":\"uint256\"}],\"name\":\"CCRChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"CollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"FlashLoanFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMaxDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMaxDebt\",\"type\":\"uint256\"}],\"name\":\"FlashLoanMaxDebtChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMinDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMinDebt\",\"type\":\"uint256\"}],\"name\":\"FlashLoanMinDebtChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMCR\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMCR\",\"type\":\"uint256\"}],\"name\":\"MCRChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMinNet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMinNet\",\"type\":\"uint256\"}],\"name\":\"MinNetDebtChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMintCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMintCap\",\"type\":\"uint256\"}],\"name\":\"MintCapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldPercentDiv\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPercentDiv\",\"type\":\"uint256\"}],\"name\":\"PercentDivisorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"RedemptionBlockTimestampChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldRedemptionFeeFloor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newRedemptionFeeFloor\",\"type\":\"uint256\"}],\"name\":\"RedemptionFeeFloorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_DEFAULT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR_DEFAULT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR_DEFAULT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_CAP_DEFAULT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_NET_DEBT_DEFAULT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR_DEFAULT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_BLOCK_TIMESTAMP_DEFAULT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_FEE_FLOOR_DEFAULT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtTokenGasCompensation\",\"type\":\"uint256\"}],\"name\":\"addNewCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"authorizeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityIssuance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"flashLoanFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flashLoanMinDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flashLoanMaxDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getBorrowingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getCcr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getDebtTokenGasCompensation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlashLoanFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlashLoanMaxNetDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlashLoanMinNetDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_colls\",\"type\":\"address[]\"}],\"name\":\"getIndices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getMcr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getMinNetDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getMintCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getPercentDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getRedemptionBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getRedemptionFeeFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouteToTRENStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getTotalAssetDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidCollateral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAddressSetupInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSetupInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routeToTRENStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_borrowingFee\",\"type\":\"uint256\"}],\"name\":\"setBorrowingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newCCR\",\"type\":\"uint256\"}],\"name\":\"setCCR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_borrowingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ccr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mcr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minNetDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redemptionFeeFloor\",\"type\":\"uint256\"}],\"name\":\"setCollateralParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityIssuance\",\"type\":\"address\"}],\"name\":\"setCommunityIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_flashLoanFee\",\"type\":\"uint256\"}],\"name\":\"setFeeForFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newMCR\",\"type\":\"uint256\"}],\"name\":\"setMCR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_flashLoanMaxDebt\",\"type\":\"uint256\"}],\"name\":\"setMaxDebtForFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_flashLoanMinDebt\",\"type\":\"uint256\"}],\"name\":\"setMinDebtForFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minNetDebt\",\"type\":\"uint256\"}],\"name\":\"setMinNetDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintCap\",\"type\":\"uint256\"}],\"name\":\"setMintCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentDivisor\",\"type\":\"uint256\"}],\"name\":\"setPercentDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"setRedemptionBlockTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_redemptionFeeFloor\",\"type\":\"uint256\"}],\"name\":\"setRedemptionFeeFloor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setSetupIsInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trenStaking\",\"type\":\"address\"}],\"name\":\"setTRENStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTrenBoxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchRouteToTRENStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManagerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validCollateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AdminContract__CollateralDoesNotExist()\":[{\"details\":\"Error emitted when the collateral asset does not exist.\"}],\"AdminContract__CollateralExists()\":[{\"details\":\"Error emitted when the collateral asset already exists.\"}],\"AdminContract__CollateralNotConfigured()\":[{\"details\":\"Error emitted when the collateral asset is not active.\"}],\"AdminContract__OnlyOwner()\":[{\"details\":\"Error emitted when the caller is not owner.\"}],\"AdminContract__OnlyTimelock()\":[{\"details\":\"Error emitted when the caller is not timelock contract.\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeCheckError(string,uint256,uint256,uint256)\":[{\"details\":\"Error emitted when the input value is not between min and max values.\",\"params\":{\"_maxValue\":\"The maximum value.\",\"_minValue\":\"The minimum value.\",\"_parameter\":\"The label of input parameter.\",\"_valueEntered\":\"The input value.\"}}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"BorrowingFeeChanged(uint256,uint256)\":{\"details\":\"Emitted when the borrowing fee is updated.\",\"params\":{\"_newBorrowingFee\":\"The new borrowing fee.\",\"_oldBorrowingFee\":\"The old borrowing fee.\"}},\"CCRChanged(uint256,uint256)\":{\"details\":\"Emitted when the critical collateral ratio is updated.\",\"params\":{\"_newCCR\":\"The new critical collateral ratio.\",\"_oldCCR\":\"The old critical collateral ratio.\"}},\"CollateralAdded(address)\":{\"details\":\"Emitted when the collateral asset is added.\",\"params\":{\"_collateral\":\"The address of collateral asset.\"}},\"FlashLoanFeeChanged(uint256,uint256)\":{\"details\":\"Emitted when the flash loan fee is updated.\",\"params\":{\"_newFee\":\"The new flash loan fee.\",\"_oldFee\":\"The old flash loan fee.\"}},\"FlashLoanMaxDebtChanged(uint256,uint256)\":{\"details\":\"Emitted when the maximum amount of debt token for flash loan is updated.\",\"params\":{\"_newMaxDebt\":\"The new minimum amount of debt token.\",\"_oldMaxDebt\":\"The old minimum amount of debt token.\"}},\"FlashLoanMinDebtChanged(uint256,uint256)\":{\"details\":\"Emitted when the minimum amount of debt token for flash loan is updated.\",\"params\":{\"_newMinDebt\":\"The new minimum amount of debt token.\",\"_oldMinDebt\":\"The old minimum amount of debt token.\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MCRChanged(uint256,uint256)\":{\"details\":\"Emitted when the minimum collateral ratio is updated.\",\"params\":{\"_newMCR\":\"The new minimum collateral ratio.\",\"_oldMCR\":\"The old minimum collateral ratio.\"}},\"MinNetDebtChanged(uint256,uint256)\":{\"details\":\"Emitted when the minimum amount of debt token is updated.\",\"params\":{\"_newMinNet\":\"The new minimum amount of debt token.\",\"_oldMinNet\":\"The old minimum amount of debt token.\"}},\"MintCapChanged(uint256,uint256)\":{\"details\":\"Emitted when the mint cap is updated.\",\"params\":{\"_newMintCap\":\"The new mint cap.\",\"_oldMintCap\":\"The old mint cap.\"}},\"PercentDivisorChanged(uint256,uint256)\":{\"details\":\"Emitted when the liquidation fee is updated.\",\"params\":{\"_newPercentDiv\":\"The new liquidation fee.\",\"_oldPercentDiv\":\"The old liquidation fee.\"}},\"RedemptionBlockTimestampChanged(address,uint256)\":{\"details\":\"Emitted when the redemption timestamp of specific collateral is updated.\",\"params\":{\"_blockTimestamp\":\"The new redemption timestamp.\",\"_collateral\":\"The address of collateral asset.\"}},\"RedemptionFeeFloorChanged(uint256,uint256)\":{\"details\":\"Emitted when the floor of redemption fee is updated.\",\"params\":{\"_newRedemptionFeeFloor\":\"The new floor of redemption fee.\",\"_oldRedemptionFeeFloor\":\"The old floor of redemption fee.\"}},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"addNewCollateral(address,uint256)\":{\"params\":{\"_collateral\":\"The address of collateral asset.\",\"_debtTokenGasCompensation\":\"The amount of debtToken to be locked on opening TrenBoxes as liquidation reserve.\"}},\"getBorrowingFee(address)\":{\"params\":{\"_collateral\":\"The address of collateral asset.\"}},\"getCcr(address)\":{\"params\":{\"_collateral\":\"The address of collateral asset.\"}},\"getDebtTokenGasCompensation(address)\":{\"params\":{\"_collateral\":\"The address of collateral asset.\"}},\"getIndex(address)\":{\"params\":{\"_collateral\":\"The address of collateral asset.\"}},\"getIndices(address[])\":{\"params\":{\"_colls\":\"The arrays of collateral assets.\"}},\"getIsActive(address)\":{\"params\":{\"_collateral\":\"The address of collateral asset.\"}},\"getMcr(address)\":{\"params\":{\"_collateral\":\"The address of collateral asset.\"}},\"getMinNetDebt(address)\":{\"params\":{\"_collateral\":\"The address of collateral asset.\"}},\"getMintCap(address)\":{\"params\":{\"_collateral\":\"The address of collateral asset.\"}},\"getPercentDivisor(address)\":{\"params\":{\"_collateral\":\"The address of collateral asset.\"}},\"getRedemptionBlockTimestamp(address)\":{\"params\":{\"_collateral\":\"The address of collateral asset.\"}},\"getRedemptionFeeFloor(address)\":{\"params\":{\"_collateral\":\"The address of collateral asset.\"}},\"getTotalAssetDebt(address)\":{\"params\":{\"_asset\":\"The address of collateral asset.\"}},\"initialize(address)\":{\"details\":\"Runs all the setup logic only once.\",\"params\":{\"initialOwner\":\"The address of initial owner.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setBorrowingFee(address,uint256)\":{\"params\":{\"_borrowingFee\":\"The one-time fee charged on the loan amount.\",\"_collateral\":\"The address of collateral asset.\"}},\"setCCR(address,uint256)\":{\"params\":{\"_collateral\":\"The address of collateral asset.\",\"_newCCR\":\"The new critical collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\"}},\"setCollateralParameters(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_borrowingFee\":\"The one-time fee charged on the loan amount.\",\"_ccr\":\"The critical collateral ratio to trigger recovery mode.\",\"_collateral\":\"The address of collateral asset.\",\"_mcr\":\"The minimum collateral ratio to avoid liquidation under normal mode.\",\"_minNetDebt\":\"The minimum amount of debtToken a TrenBox must have.\",\"_mintCap\":\"The total amount of debt tokens to be allocated.\",\"_percentDivisor\":\"The liquidation fee.\",\"_redemptionFeeFloor\":\"The floor of redemption fee.\"}},\"setFeeForFlashLoan(uint256)\":{\"params\":{\"_flashLoanFee\":\"The new flash loan fee.\"}},\"setIsActive(address,bool)\":{\"params\":{\"_active\":\"The status of collateral; true or false.\",\"_collateral\":\"The address of collateral asset.\"}},\"setMCR(address,uint256)\":{\"params\":{\"_collateral\":\"The address of collateral asset.\",\"_newMCR\":\"The minimum collateral ratio to avoid liquidations under normal mode.\"}},\"setMaxDebtForFlashLoan(uint256)\":{\"params\":{\"_flashLoanMaxDebt\":\"The new maximum amount of debt token.\"}},\"setMinDebtForFlashLoan(uint256)\":{\"params\":{\"_flashLoanMinDebt\":\"The new minimum amount of debt token.\"}},\"setMinNetDebt(address,uint256)\":{\"params\":{\"_collateral\":\"The address of collateral asset.\",\"_minNetDebt\":\"The minimum amount of debt token a TrenBox must have.\"}},\"setMintCap(address,uint256)\":{\"params\":{\"_collateral\":\"The address of collateral asset.\",\"_mintCap\":\"The mint cap.\"}},\"setPercentDivisor(address,uint256)\":{\"params\":{\"_collateral\":\"The address of collateral asset.\",\"_percentDivisor\":\"The new :(min 2, max 200).\"}},\"setRedemptionBlockTimestamp(address,uint256)\":{\"params\":{\"_blockTimestamp\":\"The timestamp which redemption can be started from.\",\"_collateral\":\"The address of collateral asset.\"}},\"setRedemptionFeeFloor(address,uint256)\":{\"params\":{\"_collateral\":\"The address of collateral asset.\",\"_redemptionFeeFloor\":\"The floor of redemption fee charged on the redeemed amount(scaled by 1e18); min 0.001(0.1%), max 0.1(10%).\"}},\"setSetupIsInitialized()\":{\"details\":\"The deployment script will call this function when all initial collaterals have been configured; after this is set to true, all subsequent config/setters will need to go through the timelocks.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"collateralParams\":{\"details\":\"The mapping from collateral asset to its parameters. Cannot be public as struct has too many variables for the stack. Create special view structs/getters instead.\"}},\"title\":\"AdminContract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BORROWING_FEE_DEFAULT()\":{\"notice\":\"The default borrowing fee, 0.5%.\"},\"CCR_DEFAULT()\":{\"notice\":\"The default critical collateral ratio, 150%.\"},\"DECIMAL_PRECISION()\":{\"notice\":\"Returns decimal precision, 1 ether.\"},\"MCR_DEFAULT()\":{\"notice\":\"The default minimum collateral ratio, 110%.\"},\"MINT_CAP_DEFAULT()\":{\"notice\":\"The default mint cap, 1 million trenUSD.\"},\"MIN_NET_DEBT_DEFAULT()\":{\"notice\":\"The default minimum amount of debt token to mint.\"},\"NAME()\":{\"notice\":\"The contract name.\"},\"PERCENT_DIVISOR_DEFAULT()\":{\"notice\":\"The default liquidation fee, dividing by 200 yields 0.5%.\"},\"REDEMPTION_BLOCK_TIMESTAMP_DEFAULT()\":{\"notice\":\"The default block timestamp for redemption.\"},\"REDEMPTION_FEE_FLOOR_DEFAULT()\":{\"notice\":\"The default floor of redemption fee, 0.5%.\"},\"_100pct()\":{\"notice\":\"The scaled number which means 100 percent, 1e18 == 100%.\"},\"addNewCollateral(address,uint256)\":{\"notice\":\"Adds new collateral asset.\"},\"flashLoanParams()\":{\"notice\":\"The storage struct variable to store flash loan parameters.\"},\"getBorrowingFee(address)\":{\"notice\":\"Returns the one-time fee charged on the loan amount.\"},\"getCcr(address)\":{\"notice\":\"Returns the critical collateral ratio of a specific collateral asset.\"},\"getDebtTokenGasCompensation(address)\":{\"notice\":\"Returns the amount of debt token to be locked on opening TrenBoxes as liquidation reserve.\"},\"getFlashLoanFee()\":{\"notice\":\"Returns the flash loan fee.\"},\"getFlashLoanMaxNetDebt()\":{\"notice\":\"Returns the maximum amount of debt token to mint for flash loan.\"},\"getFlashLoanMinNetDebt()\":{\"notice\":\"Returns the minimum amount of debt token to mint for flash loan.\"},\"getIndex(address)\":{\"notice\":\"Returns the index of a specific collateral which maps to asset address in collateral array.\"},\"getIndices(address[])\":{\"notice\":\"Returns the list of index matched with collateral arrays.\"},\"getIsActive(address)\":{\"notice\":\"Returns if a specific collateral is active or not.\"},\"getMcr(address)\":{\"notice\":\"Returns the minimum collateral ratio of a specific collateral asset.\"},\"getMinNetDebt(address)\":{\"notice\":\"Returns the minimum amount of debt token a TrenBox must have.\"},\"getMintCap(address)\":{\"notice\":\"Returns the total allocated amount of debt token for the specific collateral.\"},\"getPercentDivisor(address)\":{\"notice\":\"Returns the liquidation fee; min 2, max 200.\"},\"getRedemptionBlockTimestamp(address)\":{\"notice\":\"Returns the redemption timestamp for the specific collateral.\"},\"getRedemptionFeeFloor(address)\":{\"notice\":\"Returns the floor of redemption fee for the specific collateral.\"},\"getRouteToTRENStaking()\":{\"notice\":\"Returns if the collected fees go to stakers or treasury. if true, collected fees go to stakers; if false, to the treasury\"},\"getTotalAssetDebt(address)\":{\"notice\":\"Returns the current total amount of debt token for the specific collateral.\"},\"getValidCollateral()\":{\"notice\":\"Returns list of all collateral types in collateral params.\"},\"isSetupInitialized()\":{\"notice\":\"Checks if all initial collaterals have been configured or not.\"},\"routeToTRENStaking()\":{\"notice\":\"If true, collected fees go to stakers; if false, to the treasury.\"},\"setBorrowingFee(address,uint256)\":{\"notice\":\"Sets the borrowing fee.\"},\"setCCR(address,uint256)\":{\"notice\":\"Sets the critical collateral ratio.\"},\"setCollateralParameters(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Sets collateral parameters.\"},\"setFeeForFlashLoan(uint256)\":{\"notice\":\"Sets the flash loan fee.\"},\"setIsActive(address,bool)\":{\"notice\":\"Set the status for the specific collateral asset.\"},\"setMCR(address,uint256)\":{\"notice\":\"Sets the minimum collateral ratio.\"},\"setMaxDebtForFlashLoan(uint256)\":{\"notice\":\"Sets the maximum amount of debt token to mint for flash loan.\"},\"setMinDebtForFlashLoan(uint256)\":{\"notice\":\"Sets the minimum amount of debt token to mint for flash loan.\"},\"setMinNetDebt(address,uint256)\":{\"notice\":\"Sets the minimum amount of debt token to mint when opening a TrenBox.\"},\"setMintCap(address,uint256)\":{\"notice\":\"Sets the total amount of debt tokens that can be allocated.\"},\"setPercentDivisor(address,uint256)\":{\"notice\":\"Sets the liquidation fee.\"},\"setRedemptionBlockTimestamp(address,uint256)\":{\"notice\":\"Sets the redemption timestamp.\"},\"setRedemptionFeeFloor(address,uint256)\":{\"notice\":\"Sets the floor of redemption fee.\"},\"switchRouteToTRENStaking()\":{\"notice\":\"Changes the destination where the collected fees go.\"},\"validCollateral(uint256)\":{\"notice\":\"list of all collateral types in collateralParams (active and deprecated).\"}},\"notice\":\"Contains all the functions to create a new collateral or modify its parameters. It is called by other contracts to check if a collateral is valid and what are their parameters.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AdminContract.sol\":\"AdminContract\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"contracts/AdminContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { UUPSUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport { ConfigurableAddresses } from \\\"./Dependencies/ConfigurableAddresses.sol\\\";\\nimport { DECIMAL_PRECISION as _DECIMAL_PRECISION } from \\\"./Dependencies/TrenMath.sol\\\";\\n\\nimport { IAdminContract } from \\\"./Interfaces/IAdminContract.sol\\\";\\nimport { IStabilityPool } from \\\"./Interfaces/IStabilityPool.sol\\\";\\nimport { ITrenBoxStorage } from \\\"./Interfaces/ITrenBoxStorage.sol\\\";\\n\\n/**\\n * @title AdminContract\\n * @notice Contains all the functions to create a new collateral or modify its parameters.\\n * It is called by other contracts to check if a collateral is valid and what are their parameters.\\n */\\ncontract AdminContract is\\n    IAdminContract,\\n    UUPSUpgradeable,\\n    OwnableUpgradeable,\\n    ConfigurableAddresses\\n{\\n    // Constants\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    /// @notice The contract name.\\n    string public constant NAME = \\\"AdminContract\\\";\\n\\n    /// @notice The scaled number which means 100 percent, 1e18 == 100%.\\n    uint256 public constant _100pct = 1 ether;\\n\\n    /// @notice The default borrowing fee, 0.5%.\\n    uint256 public constant BORROWING_FEE_DEFAULT = 0.005 ether;\\n\\n    /// @notice The default critical collateral ratio, 150%.\\n    uint256 public constant CCR_DEFAULT = 1.5 ether;\\n\\n    /// @notice The default minimum collateral ratio, 110%.\\n    uint256 public constant MCR_DEFAULT = 1.1 ether;\\n\\n    /// @notice The default minimum amount of debt token to mint.\\n    uint256 public constant MIN_NET_DEBT_DEFAULT = 2000 ether;\\n\\n    /// @notice The default mint cap, 1 million trenUSD.\\n    uint256 public constant MINT_CAP_DEFAULT = 1_000_000 ether;\\n\\n    /// @notice The default liquidation fee, dividing by 200 yields 0.5%.\\n    uint256 public constant PERCENT_DIVISOR_DEFAULT = 200;\\n\\n    /// @notice The default floor of redemption fee, 0.5%.\\n    uint256 public constant REDEMPTION_FEE_FLOOR_DEFAULT = 0.005 ether;\\n\\n    /// @notice The default block timestamp for redemption.\\n    uint256 public constant REDEMPTION_BLOCK_TIMESTAMP_DEFAULT = type(uint256).max;\\n\\n    // State\\n    // ------------------------------------------------------------------------------------------------------------\\n\\n    /**\\n     * @dev The mapping from collateral asset to its parameters.\\n     * Cannot be public as struct has too many variables for the stack.\\n     * Create special view structs/getters instead.\\n     */\\n    mapping(address collateral => CollateralParams params) internal collateralParams;\\n\\n    /// @notice The storage struct variable to store flash loan parameters.\\n    FlashLoanParams public flashLoanParams;\\n\\n    /// @notice list of all collateral types in collateralParams (active and deprecated).\\n    address[] public validCollateral;\\n\\n    /// @notice Checks if all initial collaterals have been configured or not.\\n    bool public isSetupInitialized;\\n\\n    /// @notice If true, collected fees go to stakers; if false, to the treasury.\\n    bool public routeToTRENStaking = false;\\n\\n    // Modifiers\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Require that the collateral exists in the controller. If it is not the 0th index, and\\n     * the index is still 0 then it does not exist in the mapping.\\n     * no require here for valid collateral 0 index because that means it exists.\\n     */\\n    modifier exists(address _collateral) {\\n        _exists(_collateral);\\n        _;\\n    }\\n\\n    /// @dev Modifier to check that the caller is timelock contract.\\n    modifier onlyTimelock() {\\n        if (isSetupInitialized) {\\n            if (msg.sender != timelockAddress) {\\n                revert AdminContract__OnlyTimelock();\\n            }\\n        } else {\\n            if (msg.sender != owner()) {\\n                revert AdminContract__OnlyOwner();\\n            }\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to check that the specific collateral is active and the input value is valid.\\n    modifier safeCheck(\\n        string memory parameter,\\n        address _collateral,\\n        uint256 enteredValue,\\n        uint256 min,\\n        uint256 max\\n    ) {\\n        if (!collateralParams[_collateral].active) {\\n            revert AdminContract__CollateralNotConfigured();\\n        }\\n\\n        if (enteredValue < min || enteredValue > max) {\\n            revert SafeCheckError(parameter, enteredValue, min, max);\\n        }\\n        _;\\n    }\\n\\n    // Initializers\\n    // -----------------------------------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Runs all the setup logic only once.\\n     * @param initialOwner The address of initial owner.\\n     */\\n    function initialize(address initialOwner) external initializer {\\n        __Ownable_init(initialOwner);\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /**\\n     * @dev The deployment script will call this function when all initial collaterals\\n     * have been configured; after this is set to true,\\n     * all subsequent config/setters will need to go through the timelocks.\\n     */\\n    function setSetupIsInitialized() external onlyTimelock {\\n        isSetupInitialized = true;\\n    }\\n\\n    // External Functions\\n    // -----------------------------------------------------------------------------------------------\\n\\n    /// @inheritdoc IAdminContract\\n    function addNewCollateral(\\n        address _collateral,\\n        uint256 _debtTokenGasCompensation\\n    )\\n        external\\n        override\\n        onlyTimelock\\n    {\\n        if (collateralParams[_collateral].mcr != 0) {\\n            revert AdminContract__CollateralExists();\\n        }\\n\\n        // require(_decimals == DEFAULT_DECIMALS, \\\"collaterals must have the default decimals\\\");\\n        validCollateral.push(_collateral);\\n        collateralParams[_collateral] = CollateralParams({\\n            index: validCollateral.length - 1,\\n            active: false,\\n            borrowingFee: BORROWING_FEE_DEFAULT,\\n            ccr: CCR_DEFAULT,\\n            mcr: MCR_DEFAULT,\\n            debtTokenGasCompensation: _debtTokenGasCompensation,\\n            minNetDebt: MIN_NET_DEBT_DEFAULT,\\n            mintCap: MINT_CAP_DEFAULT,\\n            percentDivisor: PERCENT_DIVISOR_DEFAULT,\\n            redemptionFeeFloor: REDEMPTION_FEE_FLOOR_DEFAULT,\\n            redemptionBlockTimestamp: REDEMPTION_BLOCK_TIMESTAMP_DEFAULT\\n        });\\n\\n        emit CollateralAdded(_collateral);\\n\\n        IStabilityPool(stabilityPool).addCollateralType(_collateral);\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function setCollateralParameters(\\n        address _collateral,\\n        uint256 _borrowingFee,\\n        uint256 _ccr,\\n        uint256 _mcr,\\n        uint256 _minNetDebt,\\n        uint256 _mintCap,\\n        uint256 _percentDivisor,\\n        uint256 _redemptionFeeFloor\\n    )\\n        external\\n        override\\n        onlyTimelock\\n    {\\n        collateralParams[_collateral].active = true;\\n        setBorrowingFee(_collateral, _borrowingFee);\\n        setCCR(_collateral, _ccr);\\n        setMCR(_collateral, _mcr);\\n        setMinNetDebt(_collateral, _minNetDebt);\\n        setMintCap(_collateral, _mintCap);\\n        setPercentDivisor(_collateral, _percentDivisor);\\n        setRedemptionFeeFloor(_collateral, _redemptionFeeFloor);\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function setIsActive(address _collateral, bool _active) external onlyTimelock {\\n        CollateralParams storage collParams = collateralParams[_collateral];\\n        collParams.active = _active;\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function setBorrowingFee(\\n        address _collateral,\\n        uint256 _borrowingFee\\n    )\\n        public\\n        override\\n        onlyTimelock\\n        safeCheck(\\\"Borrowing Fee\\\", _collateral, _borrowingFee, 0, 0.1 ether) // 0% - 10%\\n    {\\n        CollateralParams storage collParams = collateralParams[_collateral];\\n        uint256 oldBorrowing = collParams.borrowingFee;\\n        collParams.borrowingFee = _borrowingFee;\\n        emit BorrowingFeeChanged(oldBorrowing, _borrowingFee);\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function setCCR(\\n        address _collateral,\\n        uint256 _newCCR\\n    )\\n        public\\n        override\\n        onlyTimelock\\n        safeCheck(\\\"CCR\\\", _collateral, _newCCR, 1 ether, 10 ether) // 100% - 1,000%\\n    {\\n        CollateralParams storage collParams = collateralParams[_collateral];\\n        uint256 oldCCR = collParams.ccr;\\n        collParams.ccr = _newCCR;\\n        emit CCRChanged(oldCCR, _newCCR);\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function setMCR(\\n        address _collateral,\\n        uint256 _newMCR\\n    )\\n        public\\n        override\\n        onlyTimelock\\n        safeCheck(\\\"MCR\\\", _collateral, _newMCR, 1.01 ether, 10 ether) // 101% - 1,000%\\n    {\\n        CollateralParams storage collParams = collateralParams[_collateral];\\n        uint256 oldMCR = collParams.mcr;\\n        collParams.mcr = _newMCR;\\n        emit MCRChanged(oldMCR, _newMCR);\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function setMinNetDebt(\\n        address _collateral,\\n        uint256 _minNetDebt\\n    )\\n        public\\n        override\\n        onlyTimelock\\n        safeCheck(\\\"Min Net Debt\\\", _collateral, _minNetDebt, 0, 2000 ether)\\n    {\\n        CollateralParams storage collParams = collateralParams[_collateral];\\n        uint256 oldMinNet = collParams.minNetDebt;\\n        collParams.minNetDebt = _minNetDebt;\\n        emit MinNetDebtChanged(oldMinNet, _minNetDebt);\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function setMintCap(address _collateral, uint256 _mintCap) public override onlyTimelock {\\n        CollateralParams storage collParams = collateralParams[_collateral];\\n        uint256 oldMintCap = collParams.mintCap;\\n        collParams.mintCap = _mintCap;\\n        emit MintCapChanged(oldMintCap, _mintCap);\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function setPercentDivisor(\\n        address _collateral,\\n        uint256 _percentDivisor\\n    )\\n        public\\n        override\\n        onlyTimelock\\n        safeCheck(\\\"Percent Divisor\\\", _collateral, _percentDivisor, 2, 200)\\n    {\\n        CollateralParams storage collParams = collateralParams[_collateral];\\n        uint256 oldPercent = collParams.percentDivisor;\\n        collParams.percentDivisor = _percentDivisor;\\n        emit PercentDivisorChanged(oldPercent, _percentDivisor);\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function setRedemptionFeeFloor(\\n        address _collateral,\\n        uint256 _redemptionFeeFloor\\n    )\\n        public\\n        override\\n        onlyTimelock\\n        safeCheck(\\\"Redemption Fee Floor\\\", _collateral, _redemptionFeeFloor, 0.001 ether, 0.1 ether)\\n    {\\n        CollateralParams storage collParams = collateralParams[_collateral];\\n        uint256 oldRedemptionFeeFloor = collParams.redemptionFeeFloor;\\n        collParams.redemptionFeeFloor = _redemptionFeeFloor;\\n        emit RedemptionFeeFloorChanged(oldRedemptionFeeFloor, _redemptionFeeFloor);\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function setRedemptionBlockTimestamp(\\n        address _collateral,\\n        uint256 _blockTimestamp\\n    )\\n        external\\n        override\\n        onlyTimelock\\n    {\\n        collateralParams[_collateral].redemptionBlockTimestamp = _blockTimestamp;\\n        emit RedemptionBlockTimestampChanged(_collateral, _blockTimestamp);\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function setFeeForFlashLoan(uint256 _flashLoanFee) external onlyTimelock {\\n        uint256 oldFlashLoanFee = flashLoanParams.flashLoanFee;\\n        flashLoanParams.flashLoanFee = _flashLoanFee;\\n\\n        emit FlashLoanFeeChanged(oldFlashLoanFee, _flashLoanFee);\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function setMinDebtForFlashLoan(uint256 _flashLoanMinDebt) external onlyTimelock {\\n        uint256 oldFlashLoanMinDebt = flashLoanParams.flashLoanMinDebt;\\n        flashLoanParams.flashLoanMinDebt = _flashLoanMinDebt;\\n\\n        emit FlashLoanMinDebtChanged(oldFlashLoanMinDebt, _flashLoanMinDebt);\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function setMaxDebtForFlashLoan(uint256 _flashLoanMaxDebt) external onlyTimelock {\\n        uint256 oldFlashLoanMaxDebt = flashLoanParams.flashLoanMaxDebt;\\n        flashLoanParams.flashLoanMaxDebt = _flashLoanMaxDebt;\\n\\n        emit FlashLoanMaxDebtChanged(oldFlashLoanMaxDebt, _flashLoanMaxDebt);\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function switchRouteToTRENStaking() external onlyTimelock {\\n        if (routeToTRENStaking) {\\n            routeToTRENStaking = false;\\n        } else {\\n            routeToTRENStaking = true;\\n        }\\n    }\\n\\n    // View functions\\n    // ---------------------------------------------------------------------------------------------------\\n\\n    /// @inheritdoc IAdminContract\\n    function DECIMAL_PRECISION() external pure returns (uint256) {\\n        return _DECIMAL_PRECISION;\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function getValidCollateral() external view override returns (address[] memory) {\\n        return validCollateral;\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function getIsActive(address _collateral)\\n        external\\n        view\\n        override\\n        exists(_collateral)\\n        returns (bool)\\n    {\\n        return collateralParams[_collateral].active;\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function getIndex(address _collateral)\\n        external\\n        view\\n        override\\n        exists(_collateral)\\n        returns (uint256)\\n    {\\n        return (collateralParams[_collateral].index);\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function getIndices(address[] memory _colls) external view returns (uint256[] memory indices) {\\n        uint256 len = _colls.length;\\n        indices = new uint256[](len);\\n\\n        for (uint256 i; i < len;) {\\n            _exists(_colls[i]);\\n            indices[i] = collateralParams[_colls[i]].index;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function getMcr(address _collateral) external view override returns (uint256) {\\n        return collateralParams[_collateral].mcr;\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function getCcr(address _collateral) external view override returns (uint256) {\\n        return collateralParams[_collateral].ccr;\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function getDebtTokenGasCompensation(address _collateral)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return collateralParams[_collateral].debtTokenGasCompensation;\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function getMinNetDebt(address _collateral) external view override returns (uint256) {\\n        return collateralParams[_collateral].minNetDebt;\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function getPercentDivisor(address _collateral) external view override returns (uint256) {\\n        return collateralParams[_collateral].percentDivisor;\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function getBorrowingFee(address _collateral) external view override returns (uint256) {\\n        return collateralParams[_collateral].borrowingFee;\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function getRedemptionFeeFloor(address _collateral) external view override returns (uint256) {\\n        return collateralParams[_collateral].redemptionFeeFloor;\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function getRedemptionBlockTimestamp(address _collateral)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return collateralParams[_collateral].redemptionBlockTimestamp;\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function getMintCap(address _collateral) external view override returns (uint256) {\\n        return collateralParams[_collateral].mintCap;\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function getTotalAssetDebt(address _asset) external view override returns (uint256) {\\n        return ITrenBoxStorage(trenBoxStorage).getTotalDebtBalance(_asset);\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function getFlashLoanFee() external view override returns (uint256) {\\n        return flashLoanParams.flashLoanFee;\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function getFlashLoanMinNetDebt() external view override returns (uint256) {\\n        return flashLoanParams.flashLoanMinDebt;\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function getFlashLoanMaxNetDebt() external view override returns (uint256) {\\n        return flashLoanParams.flashLoanMaxDebt;\\n    }\\n\\n    /// @inheritdoc IAdminContract\\n    function getRouteToTRENStaking() external view override returns (bool) {\\n        return routeToTRENStaking;\\n    }\\n\\n    // Internal Functions\\n    // -----------------------------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Checks if the specific collateral asset exists or not.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function _exists(address _collateral) private view {\\n        if (collateralParams[_collateral].mcr == 0) {\\n            revert AdminContract__CollateralDoesNotExist();\\n        }\\n    }\\n\\n    function authorizeUpgrade(address newImplementation) external {\\n        _authorizeUpgrade(newImplementation);\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner { }\\n}\\n\",\"keccak256\":\"0xcf9e50693985f58b46189511889936283f7eb422655376358fb1e37166492e3f\",\"license\":\"MIT\"},\"contracts/Dependencies/ConfigurableAddresses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract ConfigurableAddresses is OwnableUpgradeable {\\n    address public adminContract;\\n    address public borrowerOperations;\\n    address public communityIssuance;\\n    address public debtToken;\\n    address public feeCollector;\\n    address public flashLoanAddress;\\n    address public trenStaking;\\n    address public priceFeed;\\n    address public sortedTrenBoxes;\\n    address public stabilityPool;\\n    address public timelockAddress;\\n    address public treasuryAddress;\\n    address public trenBoxManager;\\n    address public trenBoxManagerOperations;\\n    address public trenBoxStorage;\\n\\n    bool public isAddressSetupInitialized;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[33] private __gap; // Goerli uses 47; Arbitrum uses 33\\n\\n    error ConfigurableAddresses__SetupIsInitialized();\\n    error ConfigurableAddresses__ZeroAddresses(uint256 position, address address_);\\n    error ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n    error ConfigurableAddresses__TRENStakingZeroAddress();\\n    error ConfigurableAddresses__LengthMismatch();\\n\\n    // Dependency setters\\n    // -----------------------------------------------------------------------------------------------\\n\\n    function setAddresses(address[] calldata _addresses) external onlyOwner {\\n        if (isAddressSetupInitialized) {\\n            revert ConfigurableAddresses__SetupIsInitialized();\\n        }\\n        if (_addresses.length != 13) {\\n            revert ConfigurableAddresses__LengthMismatch();\\n        }\\n\\n        for (uint256 i = 0; i < 13;) {\\n            if (_addresses[i] == address(0)) {\\n                revert ConfigurableAddresses__ZeroAddresses(i, _addresses[i]);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        adminContract = _addresses[0];\\n        borrowerOperations = _addresses[1];\\n        debtToken = _addresses[2];\\n        feeCollector = _addresses[3];\\n        flashLoanAddress = _addresses[4];\\n        priceFeed = _addresses[5];\\n        sortedTrenBoxes = _addresses[6];\\n        stabilityPool = _addresses[7];\\n        timelockAddress = _addresses[8];\\n        treasuryAddress = _addresses[9];\\n        trenBoxManager = _addresses[10];\\n        trenBoxManagerOperations = _addresses[11];\\n        trenBoxStorage = _addresses[12];\\n\\n        isAddressSetupInitialized = true;\\n    }\\n\\n    function setCommunityIssuance(address _communityIssuance) public onlyOwner {\\n        if (_communityIssuance == address(0)) {\\n            revert ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n        }\\n        communityIssuance = _communityIssuance;\\n    }\\n\\n    function setTRENStaking(address _trenStaking) public onlyOwner {\\n        if (_trenStaking == address(0)) {\\n            revert ConfigurableAddresses__TRENStakingZeroAddress();\\n        }\\n        trenStaking = _trenStaking;\\n    }\\n}\\n\",\"keccak256\":\"0x20983a5ba6e289bbbb95aeba34057989e87c0818237897c712af27aa8f2c24a4\",\"license\":\"MIT\"},\"contracts/Dependencies/TrenMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nuint256 constant DECIMAL_PRECISION = 1 ether;\\n\\nlibrary TrenMath {\\n    uint256 internal constant EXPONENT_CAP = 525_600_000;\\n\\n    /**\\n     * @dev The precision for Nominal ICR (independent of price).\\n     * Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n     * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity\\n     * floor division.\\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39\\n     * ETH, and will only truncate to 0 if the denominator is at least 1e20 times greater than\\n     * the numerator.\\n     */\\n    uint256 internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /**\\n     * @dev Multiply two decimal numbers and use normal rounding rules:\\n     * -round product up if 19'th mantissa digit >= 5\\n     * -round product down if 19'th mantissa digit < 5\\n     *\\n     * Used only inside the exponentiation, _decPow().\\n     */\\n    function decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\n        uint256 prod_xy = x * y;\\n\\n        decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\n    }\\n\\n    /**\\n     * @dev Exponentiation function for 18-digit decimal base, and integer exponent n.\\n     *\\n     * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n     *\\n     * Called by two functions that represent time in units of minutes:\\n     * 1) TrenBoxManager._calcDecayedBaseRate\\n     * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n     *\\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n     * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n     *\\n     * If a period of > 1000 years is ever used as an exponent in either of the above functions,\\n     * the result will be negligibly different from just passing the cap, since:\\n     *\\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n     * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years,\\n     * will be negligible.\\n     */\\n    function _decPow(uint256 _base, uint256 _minutes) internal pure returns (uint256) {\\n        if (_minutes > EXPONENT_CAP) {\\n            _minutes = EXPONENT_CAP;\\n        } // cap to avoid overflow\\n\\n        if (_minutes == 0) {\\n            return DECIMAL_PRECISION;\\n        }\\n\\n        uint256 y = DECIMAL_PRECISION;\\n        uint256 x = _base;\\n        uint256 n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n / 2;\\n            } else {\\n                // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n - 1) / 2;\\n            }\\n        }\\n\\n        return decMul(x, y);\\n    }\\n\\n    function _getAbsoluteDifference(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a >= _b) ? _a - _b : _b - _a;\\n    }\\n\\n    function _computeNominalCR(uint256 _coll, uint256 _debt) internal pure returns (uint256) {\\n        if (_debt != 0) {\\n            return (_coll * NICR_PRECISION) / _debt;\\n        }\\n        // Return the maximal value for uint256 if the TrenBox has a debt of 0. Represents\\n        // \\\"infinite\\\"\\n        // CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n\\n    function _computeCR(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _price\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_debt != 0) {\\n            uint256 newCollRatio = (_coll * _price) / _debt;\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the TrenBox has a debt of 0. Represents\\n        // \\\"infinite\\\"\\n        // CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf07130dc585481b3bc73a691f723bc422a1778070cf483bb3a0f501a2aa53af8\",\"license\":\"MIT\"},\"contracts/Interfaces/IAdminContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\n/**\\n * @title IAdminContract\\n * @notice Defines the basic interface for AdminContract.\\n */\\ninterface IAdminContract {\\n    /**\\n     * @dev Struct for storing parameters of a specific collateral asset.\\n     * @param index The index to map to token address in collateral arrays.\\n     * @param active The status of collateral asset.\\n     * @param borrowingFee The one-time fee charged on the loan amount.\\n     * @param ccr Critical collateral ratio to trigger recovery mode.\\n     * @param mcr Minimum collateral ratio.\\n     * @param debtTokenGasCompensation The amount of debt token to be locked\\n     * on opening TrenBoxes as liquidation reserve.\\n     * @param minNetDebt Minimum amount of debtToken a TrenBox must have.\\n     * @param mintCap The total amount of debt token that can be minted.\\n     * @param percentDivisor The liquidation fee.\\n     * @param redemptionFeeFloor The floor of redemption fee.\\n     * @param redemptionBlockTimestamp The timestamp which the redemption can be started from.\\n     */\\n    struct CollateralParams {\\n        uint256 index;\\n        bool active;\\n        uint256 borrowingFee;\\n        uint256 ccr;\\n        uint256 mcr;\\n        uint256 debtTokenGasCompensation;\\n        uint256 minNetDebt;\\n        uint256 mintCap;\\n        uint256 percentDivisor;\\n        uint256 redemptionFeeFloor;\\n        uint256 redemptionBlockTimestamp;\\n    }\\n\\n    /**\\n     * @dev Struct for storing flash loan parameters.\\n     * @param flashLoanFee The flash loan fee. (10 = 0,1%, 100 = 10%)\\n     * @param flashLoanMinDebt The minimum amount of debt token to mint for flash loan.\\n     * @param flashLoanMaxDebt The maximum amount of debt token to mint for flash loan.\\n     */\\n    struct FlashLoanParams {\\n        uint256 flashLoanFee;\\n        uint256 flashLoanMinDebt;\\n        uint256 flashLoanMaxDebt;\\n    }\\n\\n    /**\\n     * @dev Error emitted when the input value is not between min and max values.\\n     * @param _parameter The label of input parameter.\\n     * @param _valueEntered The input value.\\n     * @param _minValue The minimum value.\\n     * @param _maxValue The maximum value.\\n     */\\n    error SafeCheckError(\\n        string _parameter, uint256 _valueEntered, uint256 _minValue, uint256 _maxValue\\n    );\\n\\n    /**\\n     * @dev Error emitted when the caller is not owner.\\n     */\\n    error AdminContract__OnlyOwner();\\n\\n    /**\\n     * @dev Error emitted when the caller is not timelock contract.\\n     */\\n    error AdminContract__OnlyTimelock();\\n\\n    /**\\n     * @dev Error emitted when the collateral asset already exists.\\n     */\\n    error AdminContract__CollateralExists();\\n\\n    /**\\n     * @dev Error emitted when the collateral asset does not exist.\\n     */\\n    error AdminContract__CollateralDoesNotExist();\\n\\n    /**\\n     * @dev Error emitted when the collateral asset is not active.\\n     */\\n    error AdminContract__CollateralNotConfigured();\\n\\n    /**\\n     * @dev Emitted when the collateral asset is added.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    event CollateralAdded(address _collateral);\\n\\n    /**\\n     * @dev Emitted when the minimum collateral ratio is updated.\\n     * @param _oldMCR The old minimum collateral ratio.\\n     * @param _newMCR The new minimum collateral ratio.\\n     */\\n    event MCRChanged(uint256 _oldMCR, uint256 _newMCR);\\n\\n    /**\\n     * @dev Emitted when the critical collateral ratio is updated.\\n     * @param _oldCCR The old critical collateral ratio.\\n     * @param _newCCR The new critical collateral ratio.\\n     */\\n    event CCRChanged(uint256 _oldCCR, uint256 _newCCR);\\n\\n    /**\\n     * @dev Emitted when the minimum amount of debt token is updated.\\n     * @param _oldMinNet The old minimum amount of debt token.\\n     * @param _newMinNet The new minimum amount of debt token.\\n     */\\n    event MinNetDebtChanged(uint256 _oldMinNet, uint256 _newMinNet);\\n\\n    /**\\n     * @dev Emitted when the liquidation fee is updated.\\n     * @param _oldPercentDiv The old liquidation fee.\\n     * @param _newPercentDiv The new liquidation fee.\\n     */\\n    event PercentDivisorChanged(uint256 _oldPercentDiv, uint256 _newPercentDiv);\\n\\n    /**\\n     * @dev Emitted when the borrowing fee is updated.\\n     * @param _oldBorrowingFee The old borrowing fee.\\n     * @param _newBorrowingFee The new borrowing fee.\\n     */\\n    event BorrowingFeeChanged(uint256 _oldBorrowingFee, uint256 _newBorrowingFee);\\n\\n    /**\\n     * @dev Emitted when the floor of redemption fee is updated.\\n     * @param _oldRedemptionFeeFloor The old floor of redemption fee.\\n     * @param _newRedemptionFeeFloor The new floor of redemption fee.\\n     */\\n    event RedemptionFeeFloorChanged(uint256 _oldRedemptionFeeFloor, uint256 _newRedemptionFeeFloor);\\n\\n    /**\\n     * @dev Emitted when the mint cap is updated.\\n     * @param _oldMintCap The old mint cap.\\n     * @param _newMintCap The new mint cap.\\n     */\\n    event MintCapChanged(uint256 _oldMintCap, uint256 _newMintCap);\\n\\n    /**\\n     * @dev Emitted when the redemption timestamp of specific collateral is updated.\\n     * @param _collateral The address of collateral asset.\\n     * @param _blockTimestamp The new redemption timestamp.\\n     */\\n    event RedemptionBlockTimestampChanged(address _collateral, uint256 _blockTimestamp);\\n\\n    /**\\n     * @dev Emitted when the flash loan fee is updated.\\n     * @param _oldFee The old flash loan fee.\\n     * @param _newFee The new flash loan fee.\\n     */\\n    event FlashLoanFeeChanged(uint256 _oldFee, uint256 _newFee);\\n\\n    /**\\n     * @dev Emitted when the minimum amount of debt token for flash loan is updated.\\n     * @param _oldMinDebt The old minimum amount of debt token.\\n     * @param _newMinDebt The new minimum amount of debt token.\\n     */\\n    event FlashLoanMinDebtChanged(uint256 _oldMinDebt, uint256 _newMinDebt);\\n\\n    /**\\n     * @dev Emitted when the maximum amount of debt token for flash loan is updated.\\n     * @param _oldMaxDebt The old minimum amount of debt token.\\n     * @param _newMaxDebt The new minimum amount of debt token.\\n     */\\n    event FlashLoanMaxDebtChanged(uint256 _oldMaxDebt, uint256 _newMaxDebt);\\n\\n    /// @notice Returns decimal precision, 1 ether.\\n    function DECIMAL_PRECISION() external pure returns (uint256);\\n\\n    /// @notice Returns the scaled number which means 100 percent, 1 ether.\\n    function _100pct() external view returns (uint256);\\n\\n    /**\\n     * @notice Adds new collateral asset.\\n     * @param _collateral The address of collateral asset.\\n     * @param _debtTokenGasCompensation The amount of debtToken to be locked on opening\\n     * TrenBoxes as liquidation reserve.\\n     */\\n    function addNewCollateral(address _collateral, uint256 _debtTokenGasCompensation) external;\\n\\n    /**\\n     * @notice Sets collateral parameters.\\n     * @param _collateral The address of collateral asset.\\n     * @param _borrowingFee The one-time fee charged on the loan amount.\\n     * @param _ccr The critical collateral ratio to trigger recovery mode.\\n     * @param _mcr The minimum collateral ratio to avoid liquidation under normal mode.\\n     * @param _minNetDebt The minimum amount of debtToken a TrenBox must have.\\n     * @param _mintCap The total amount of debt tokens to be allocated.\\n     * @param _percentDivisor The liquidation fee.\\n     * @param _redemptionFeeFloor The floor of redemption fee.\\n     */\\n    function setCollateralParameters(\\n        address _collateral,\\n        uint256 _borrowingFee,\\n        uint256 _ccr,\\n        uint256 _mcr,\\n        uint256 _minNetDebt,\\n        uint256 _mintCap,\\n        uint256 _percentDivisor,\\n        uint256 _redemptionFeeFloor\\n    )\\n        external;\\n\\n    /**\\n     * @notice Set the status for the specific collateral asset.\\n     * @param _collateral The address of collateral asset.\\n     * @param _active The status of collateral; true or false.\\n     */\\n    function setIsActive(address _collateral, bool _active) external;\\n    /**\\n     * @notice Sets the minimum collateral ratio.\\n     * @param _collateral The address of collateral asset.\\n     * @param _newMCR The minimum collateral ratio to avoid liquidations under normal mode.\\n     */\\n    function setMCR(address _collateral, uint256 _newMCR) external;\\n\\n    /**\\n     * @notice Sets the critical collateral ratio.\\n     * @param _collateral The address of collateral asset.\\n     * @param _newCCR The new critical collateral ratio. If the system's total collateral ratio\\n     * (TCR) falls below the CCR, Recovery Mode is triggered.\\n     */\\n    function setCCR(address _collateral, uint256 _newCCR) external;\\n\\n    /**\\n     * @notice Sets the minimum amount of debt token to mint when opening a TrenBox.\\n     * @param _collateral The address of collateral asset.\\n     * @param _minNetDebt The minimum amount of debt token a TrenBox must have.\\n     */\\n    function setMinNetDebt(address _collateral, uint256 _minNetDebt) external;\\n\\n    /**\\n     * @notice Sets the liquidation fee.\\n     * @param _collateral The address of collateral asset.\\n     * @param _percentDivisor The new :(min 2, max 200).\\n     */\\n    function setPercentDivisor(address _collateral, uint256 _percentDivisor) external;\\n\\n    /**\\n     * @notice Sets the borrowing fee.\\n     * @param _collateral The address of collateral asset.\\n     * @param _borrowingFee The one-time fee charged on the loan amount.\\n     */\\n    function setBorrowingFee(address _collateral, uint256 _borrowingFee) external;\\n\\n    /**\\n     * @notice Sets the floor of redemption fee.\\n     * @param _collateral The address of collateral asset.\\n     * @param _redemptionFeeFloor The floor of redemption fee charged on the redeemed\\n     * amount(scaled by 1e18); min 0.001(0.1%), max 0.1(10%).\\n     */\\n    function setRedemptionFeeFloor(address _collateral, uint256 _redemptionFeeFloor) external;\\n\\n    /**\\n     * @notice Sets the total amount of debt tokens that can be allocated.\\n     * @param _collateral The address of collateral asset.\\n     * @param _mintCap The mint cap.\\n     */\\n    function setMintCap(address _collateral, uint256 _mintCap) external;\\n\\n    /**\\n     * @notice Sets the redemption timestamp.\\n     * @param _collateral The address of collateral asset.\\n     * @param _blockTimestamp The timestamp which redemption can be started from.\\n     */\\n    function setRedemptionBlockTimestamp(address _collateral, uint256 _blockTimestamp) external;\\n\\n    /**\\n     * @notice Sets the flash loan fee.\\n     * @param _flashLoanFee The new flash loan fee.\\n     */\\n    function setFeeForFlashLoan(uint256 _flashLoanFee) external;\\n\\n    /**\\n     * @notice Sets the minimum amount of debt token to mint for flash loan.\\n     * @param _flashLoanMinDebt The new minimum amount of debt token.\\n     */\\n    function setMinDebtForFlashLoan(uint256 _flashLoanMinDebt) external;\\n\\n    /**\\n     * @notice Sets the maximum amount of debt token to mint for flash loan.\\n     * @param _flashLoanMaxDebt The new maximum amount of debt token.\\n     */\\n    function setMaxDebtForFlashLoan(uint256 _flashLoanMaxDebt) external;\\n\\n    /// @notice Changes the destination where the collected fees go.\\n    function switchRouteToTRENStaking() external;\\n\\n    /**\\n     * @notice Returns the index of a specific collateral which maps to\\n     * asset address in collateral array.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getIndex(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the list of index matched with collateral arrays.\\n     * @param _colls The arrays of collateral assets.\\n     */\\n    function getIndices(address[] memory _colls) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Returns if a specific collateral is active or not.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getIsActive(address _collateral) external view returns (bool);\\n\\n    /// @notice Returns list of all collateral types in collateral params.\\n    function getValidCollateral() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the minimum collateral ratio of a specific collateral asset.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getMcr(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the critical collateral ratio of a specific collateral asset.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getCcr(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount of debt token to be locked on opening TrenBoxes\\n     * as liquidation reserve.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getDebtTokenGasCompensation(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the minimum amount of debt token a TrenBox must have.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getMinNetDebt(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the liquidation fee; min 2, max 200.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getPercentDivisor(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the one-time fee charged on the loan amount.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getBorrowingFee(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the floor of redemption fee for the specific collateral.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getRedemptionFeeFloor(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the redemption timestamp for the specific collateral.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getRedemptionBlockTimestamp(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the total allocated amount of debt token for the specific collateral.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getMintCap(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the current total amount of debt token for the specific collateral.\\n     * @param _asset The address of collateral asset.\\n     */\\n    function getTotalAssetDebt(address _asset) external view returns (uint256);\\n\\n    /// @notice Returns the flash loan fee.\\n    function getFlashLoanFee() external view returns (uint256);\\n\\n    /// @notice Returns the minimum amount of debt token to mint for flash loan.\\n    function getFlashLoanMinNetDebt() external view returns (uint256);\\n\\n    /// @notice Returns the maximum amount of debt token to mint for flash loan.\\n    function getFlashLoanMaxNetDebt() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns if the collected fees go to stakers or treasury.\\n     * if true, collected fees go to stakers; if false, to the treasury\\n     */\\n    function getRouteToTRENStaking() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd6ed047c9ff47fff091ed7ffaddd9030d828a03a929b2fa8b38a5b6db007363e\",\"license\":\"MIT\"},\"contracts/Interfaces/IDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IDeposit {\\n    function receivedERC20(address _asset, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xedebb2b3e0c98d165db1f1b4a3b5e96f2b327cd7bc2ad1b1c07abdd1f47bce17\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IDeposit } from \\\"./IDeposit.sol\\\";\\n\\n/**\\n * @title IStabilityPool\\n * @notice Defines the basic interface for StabilityPool contract.\\n */\\ninterface IStabilityPool is IDeposit {\\n    // --- Structs ---\\n\\n    /**\\n     * @dev Struct for tracking a depositor's snapshot.\\n     * @param S The sum of collateral gains.\\n     * @param P The product.\\n     * @param G The sum of TREN gains.\\n     * @param scale The current scale.\\n     * @param epoch The current epoch.\\n     */\\n    struct Snapshots {\\n        mapping(address => uint256) S;\\n        uint256 P;\\n        uint256 G;\\n        uint128 scale;\\n        uint128 epoch;\\n    }\\n\\n    // --- Events ---\\n\\n    /**\\n     * @dev Emitted when the snapshot for a specific depositor is updated.\\n     * @param _depositor The caller address.\\n     * @param _P The product.\\n     * @param _G The sum of TREN gains.\\n     */\\n    event DepositSnapshotUpdated(address indexed _depositor, uint256 _P, uint256 _G);\\n\\n    /**\\n     * @dev Emitted when collateral gains are transferred to a depositor.\\n     * @param _depositor The depositor address.\\n     * @param _collaterals The address array of collaterals gained.\\n     * @param _amounts The amount array of collaterals gained.\\n     * @param _debtTokenLoss The loss of debt tokens against initial deposit.\\n     */\\n    event GainsWithdrawn(\\n        address indexed _depositor,\\n        address[] _collaterals,\\n        uint256[] _amounts,\\n        uint256 _debtTokenLoss\\n    );\\n\\n    /**\\n     * @dev Emitted when TREN gains are transferred to a depositor.\\n     * @param _depositor The depositor address.\\n     * @param _TREN The amount of TREN tokens.\\n     */\\n    event TRENPaidToDepositor(address indexed _depositor, uint256 _TREN);\\n\\n    /**\\n     * @dev Emitted when the specific collateral is received from trenBoxStorage contract.\\n     * @param _asset The address of collateral asset.\\n     * @param _newBalance The updated balance of collateral asset.\\n     */\\n    event StabilityPoolAssetBalanceUpdated(address _asset, uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when debt tokens are sent to a user or moved to other pool.\\n     * @param _newBalance The updated balance of debt tokens.\\n     */\\n    event StabilityPoolDebtTokenBalanceUpdated(uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when a user deposits or withdraws debt tokens.\\n     * @param _depositor The depositor address.\\n     * @param _newDeposit The updated user balance.\\n     */\\n    event UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\n\\n    /**\\n     * @dev Emitted when the product is updated.\\n     * @param _P The new product.\\n     */\\n    event ProductUpdated(uint256 _P);\\n\\n    /**\\n     * @dev Emitted when the sum is updated.\\n     * @param _asset The address of collateral asset.\\n     * @param _S The new sum of collateral gains.\\n     * @param _epoch The current epoch.\\n     * @param _scale THe current scale.\\n     */\\n    event SumUpdated(address _asset, uint256 _S, uint128 _epoch, uint128 _scale);\\n\\n    /**\\n     * @dev Emitted when the sum of TREN gains is updated.\\n     * @param _G The new sum of TREN gains.\\n     * @param _epoch The current epoch.\\n     * @param _scale The current scale.\\n     */\\n    event GainsUpdated(uint256 _G, uint128 _epoch, uint128 _scale);\\n\\n    /**\\n     * @dev Emitted when the current epoch is updated.\\n     * @param _currentEpoch The new epoch.\\n     */\\n    event EpochUpdated(uint128 _currentEpoch);\\n\\n    /**\\n     * @dev Emitted when the current scale is updated.\\n     * @param _currentScale The new scale.\\n     */\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    // --- Errors ---\\n\\n    /**\\n     * @dev Error emitted when the caller is not TrenBoxStorage.\\n     * @param _sender The caller address.\\n     * @param _expected The TrenBoxStorage address.\\n     */\\n    error StabilityPool__TrenBoxStorageOnly(address _sender, address _expected);\\n\\n    /**\\n     * @dev Error emitted when the caller is not AdminContract.\\n     * @param _sender The caller address.\\n     * @param _expected The AdminContract address.\\n     */\\n    error StabilityPool__AdminContractOnly(address _sender, address _expected);\\n\\n    /**\\n     * @dev Error emitted when the caller is not TrenBoxManager.\\n     * @param _sender The caller address.\\n     * @param _expected The TrenBoxManager address.\\n     */\\n    error StabilityPool__TrenBoxManagerOnly(address _sender, address _expected);\\n\\n    /// @dev Error emitted when the asset list is not in ascending order.\\n    error StabilityPool__ArrayNotInAscendingOrder();\\n\\n    /**\\n     * @dev Error emitted when the debt loss per unit staked is not less than\\n     * decimal precision.\\n     * @param _debtLoss The debt loss per unit staked.\\n     */\\n    error StabilityPool__DebtLossBelowOne(uint256 _debtLoss);\\n\\n    /// @dev Error emitted when the amount of debt to offset is larger than\\n    /// total deposits.\\n    error StabilityPool__DebtLargerThanTotalDeposits();\\n\\n    /// @dev Error emitted when the new product is zero.\\n    error StabilityPool__ProductZero();\\n\\n    /// @dev Error emitted when the array length is mismatched.\\n    error StabilityPool__AssetsAndAmountsLengthMismatch();\\n\\n    /// @dev Error emitted when the user's initial deposit is zero.\\n    error StabilityPool__UserHasNoDeposit();\\n\\n    /// @dev Error emitted when the amount is zero.\\n    error StabilityPool__AmountMustBeNonZero();\\n\\n    // --- Functions ---\\n\\n    /**\\n     * @notice Gets collateral balance in the Stability Pool for a given collateral type.\\n     * @dev Not necessarily this contract's actual collateral balance;\\n     * just what is stored in state\\n     * @param _collateral The address of collateral asset.\\n     * @return The amount of collateral asset.\\n     */\\n    function getCollateral(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Gets all collateral assets and amounts.\\n     */\\n    function getAllCollateral() external view returns (address[] memory, uint256[] memory);\\n\\n    /**\\n     * @notice Returns total deposits of debt tokens held in the pool.\\n     * Changes when users deposit/withdraw, and when a TrenBox debt is offset.\\n     */\\n    function getTotalDebtTokenDeposits() external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the gains earned by a deposit since its last snapshots were taken for\\n     * selected assets.\\n     * @dev Given by the formula: E = d0 * (S - S(0))/P(0),\\n     * where S(0) and P(0) are the depositor's snapshots of the sum S and product P, respectively.\\n     * d0 is the last recorded deposit value.\\n     * @param _depositor The depositor address.\\n     * @param _assets The array of collateral assets to check gains for.\\n     */\\n    function getDepositorGains(\\n        address _depositor,\\n        address[] calldata _assets\\n    )\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory);\\n\\n    /**\\n     * @notice Calculates the TREN gain earned by a deposit since its last snapshots were taken.\\n     * @dev Given by the formula: TREN = d0 * (G - G(0))/P(0),\\n     * where G(0) and P(0) are the depositor's snapshots of the sum G and product P, respectively.\\n     * d0 is the last recorded deposit value.\\n     * @param _depositor The depositor address.\\n     */\\n    function getDepositorTRENGain(address _depositor) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user's compounded deposit.\\n     * @dev Given by the formula: d = d0 * P/P(0),\\n     * where P(0) is the depositor's snapshot of the product P, taken when they last updated their\\n     * deposit.\\n     * @param _depositor The depositor address.\\n     */\\n    function getCompoundedDebtTokenDeposits(address _depositor) external view returns (uint256);\\n\\n    /**\\n     * @notice Adds new collateral type.\\n     * @param _collateral The address of collateral asset to add.\\n     */\\n    function addCollateralType(address _collateral) external;\\n\\n    /**\\n     * @notice Provides debt tokens to the Stability Pool.\\n     * @dev Triggers a TREN issuance, based on time passed since the last issuance.\\n     * The TREN issuance is shared between all depositors.\\n     * - Sends depositor's accumulated gains (TREN, collateral assets) to depositor.\\n     * - Increases deposit stake, and takes new snapshots for each.\\n     * Skipping a collateral forfeits the available rewards (can be useful for gas optimizations).\\n     * @param _amount The amount of debt tokens provided.\\n     * @param _assets The array of collateral assets to be claimed.\\n     */\\n    function provideToSP(uint256 _amount, address[] calldata _assets) external;\\n\\n    /**\\n     * @notice Withdraws debt tokens from the Stability Pool.\\n     * @dev Triggers a TREN issuance, based on time passed since the last issuance.\\n     * The TREN issuance is shared between all depositors.\\n     * - Sends all depositor's accumulated gains (TREN, assets) to depositor\\n     * - Decreases deposit's stake, and takes new snapshots.\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     * @param _amount The amount of debt tokens to withdraw.\\n     * @param _assets The array of collateral assets to be claimed.\\n     */\\n    function withdrawFromSP(uint256 _amount, address[] calldata _assets) external;\\n\\n    /**\\n     * @notice Sets the offset for liquidation.\\n     * @dev Cancels out the specified debt against the debt tokens contained in the\\n     * Stability Pool (as far as possible)\\n     * and transfers the TrenBox's collateral from TrenBoxStorage to Stability Pool.\\n     * Only called by liquidation functions in the TrenBoxManager.\\n     * @param _debtToOffset The amount of debt tokens to offset.\\n     * @param _asset The address of collateral asset.\\n     * @param _amountAdded The amount of collateral asset to be added.\\n     */\\n    function offset(uint256 _debtToOffset, address _asset, uint256 _amountAdded) external;\\n}\\n\",\"keccak256\":\"0x1d6c031495bb1ca363c71178b9186fcc828589b2e791a00384dd30bc2356fa1a\",\"license\":\"MIT\"},\"contracts/Interfaces/ITrenBoxStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\n/**\\n * @title ITrenBoxStorage\\n * @notice Defines the basic interface for TrenBoxStorage contract.\\n */\\ninterface ITrenBoxStorage {\\n    // ------------------------------------------ Structs -----------------------------------------\\n\\n    /// @dev Struct for storing debt balances of a specific collateral asset.\\n    /// @param active The entire debt of all active TrenBoxes.\\n    /// @param liquidated The entire debt of all liquidated TrenBoxes.\\n    struct DebtBalances {\\n        uint256 active;\\n        uint256 liquidated;\\n    }\\n\\n    /// @dev Struct for storing balances of a specific collateral asset.\\n    /// @param active The entire collateral amount of all active TrenBoxes.\\n    /// @param liquidated The entire collateral amount of all liquidated TrenBoxes.\\n    /// @param claimable The entire collateral amount of all liquidated TrenBoxes that can be\\n    /// claimed by user.\\n    struct CollBalances {\\n        uint256 active;\\n        uint256 liquidated;\\n        uint256 claimable;\\n    }\\n\\n    // ------------------------------------------ Events ------------------------------------------\\n\\n    /**\\n     * @dev Emitted when the active collateral balance is updated.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new active collateral balance.\\n     */\\n    event ActiveCollateralBalanceUpdated(address indexed _collateral, uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when the active debt balance is updated.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new active debt balance.\\n     */\\n    event ActiveDebtBalanceUpdated(address indexed _collateral, uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when the liquidated collateral balance is updated.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new liquidated collateral balance.\\n     */\\n    event LiquidatedCollateralBalanceUpdated(address indexed _collateral, uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when the liquidated debt balance is updated.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new liquidated debt balance.\\n     */\\n    event LiquidatedDebtBalanceUpdated(address indexed _collateral, uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when the claimable collateral balance is updated.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new claimable collateral balance.\\n     */\\n    event ClaimableCollateralBalanceUpdated(address indexed _collateral, uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when collateral is sent.\\n     * @param _to The address of the user which get collateral amount.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount of collateral sent.\\n     */\\n    event CollateralSent(address indexed _to, address indexed _collateral, uint256 _amount);\\n\\n    /**\\n     * @dev Emitted when the user claimable collateral balance is updated.\\n     * @param _account The address of the user.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new user claimable collateral balance.\\n     */\\n    event UserClaimableCollateralBalanceUpdated(\\n        address indexed _account, address indexed _collateral, uint256 _newBalance\\n    );\\n\\n    // ------------------------------------------ Custom Errors -----------------------------------\\n\\n    /**\\n     * @dev Thrown when contract is not authorized.\\n     */\\n    error TrenBoxStorage__NotAuthorizedContract();\\n\\n    /**\\n     * @dev Thrown when caller is not TrenBoxManager contract.\\n     */\\n    error TrenBoxStorage__TrenBoxManagerOnly();\\n\\n    /**\\n     * @dev Thrown when caller is not BorrowerOperations contract.\\n     */\\n    error TrenBoxStorage__BorrowerOperationsOnly();\\n\\n    /**\\n     * @dev Thrown when caller is not BorrowerOperations nor TrenBoxManager contract.\\n     */\\n    error TrenBoxStorage__BorrowerOperationsOrTrenBoxManagerOnly();\\n\\n    /**\\n     * @dev Thrown when caller is not TrenBoxManagerOperations contract.\\n     */\\n    error TrenBoxStorage__TrenBoxManagerOperationsOnly();\\n\\n    /**\\n     * @dev Thrown when there is no claimable collateral available.\\n     */\\n    error TrenBoxStorage__NoClaimableCollateral();\\n\\n    // ------------------------------------------ Functions ---------------------------------------\\n\\n    /**\\n     * @notice Returns the active collateral balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getActiveCollateralBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the active debt balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getActiveDebtBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the liquidated collateral balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getLiquidatedCollateralBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the liquidated debt balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getLiquidatedDebtBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns sum of active and liquidated debt for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getTotalDebtBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns sum of active and liquidated amount of a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getTotalCollateralBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the claimable collateral balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getClaimableCollateralBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the claimable collateral balance for a specific user.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _account The address of the user.\\n     */\\n    function getUserClaimableCollateralBalance(\\n        address _collateral,\\n        address _account\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Increases the active debt balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount to increase the debt balance.\\n     */\\n    function increaseActiveDebt(address _collateral, uint256 _amount) external;\\n\\n    /**\\n     * @notice Decreases the active debt balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount to decrease the debt balance.\\n     */\\n    function decreaseActiveDebt(address _collateral, uint256 _amount) external;\\n\\n    /**\\n     * @notice Decreases the active balances of debt and collateral for a specific collateral after\\n     * redemption exists.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _debtAmount The amount to decrease the debt balance.\\n     * @param _collAmount The amount to decrease the collateral balance.\\n     */\\n    function decreaseActiveBalancesAfterRedemption(\\n        address _collateral,\\n        uint256 _debtAmount,\\n        uint256 _collAmount\\n    )\\n        external;\\n\\n    /**\\n     * @notice Increases the active balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount to increase the debt balance.\\n     */\\n    function increaseActiveCollateral(address _collateral, uint256 _amount) external;\\n\\n    /**\\n     * @notice Decreases the active balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount to decrease the collateral balance.\\n     */\\n    function decreaseActiveCollateral(address _collateral, uint256 _amount) external;\\n\\n    /**\\n     * @notice Updates the active and liquidated debt and collateral balances.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _debtAmount The amount to decrease the debt balance.\\n     * @param _collAmount The amount to decrease the collateral balance.\\n     * @param _isActiveIncrease The indicator that shows increasing or decreasing of active\\n     * balances.\\n     */\\n    function updateDebtAndCollateralBalances(\\n        address _collateral,\\n        uint256 _debtAmount,\\n        uint256 _collAmount,\\n        bool _isActiveIncrease\\n    )\\n        external;\\n\\n    /**\\n     * @notice Updates the entire and user claimable balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _account The address of the user.\\n     * @param _amount The amount to update the claimable balance.\\n     */\\n    function updateUserAndEntireClaimableBalance(\\n        address _collateral,\\n        address _account,\\n        uint256 _amount\\n    )\\n        external;\\n\\n    /**\\n     * @notice Increases the claimable collateral balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount to increase the claimable collateral balance.\\n     */\\n    function increaseClaimableCollateral(address _collateral, uint256 _amount) external;\\n\\n    /**\\n     * @notice Updates the claimable collateral balance of the user for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _account The address of the user.\\n     * @param _amount The amount to update the claimable balance.\\n     */\\n    function updateUserClaimableBalance(\\n        address _collateral,\\n        address _account,\\n        uint256 _amount\\n    )\\n        external;\\n\\n    /**\\n     * @notice Sends amount of active collateral from contract to user.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _account The address of the user to send.\\n     * @param _amount The amount of the collateral to send.\\n     */\\n    function sendCollateral(address _collateral, address _account, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sends amount of claimable collateral from contract to user.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _account The address of the user to send.\\n     */\\n    function claimCollateral(address _collateral, address _account) external;\\n}\\n\",\"keccak256\":\"0xff9d836c2a6a15e3b97ebef67cd702f3822478d2be9a8f38738ff008129fea66\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080526035805461ff001916905534801561001f57600080fd5b506080516133d261004960003960008181612aa101528181612aca0152612c1001526133d26000f3fe6080604052600436106104475760003560e01c806390b988c611610234578063c08261db1161012e578063d1c11bc5116100b6578063f45424941161007a578063f454249414610de2578063f7e37b8d14610e1b578063f8d8989814610e37578063fd90c2be14610e57578063fe06073314610e6c57600080fd5b8063d1c11bc514610d50578063e8ff898614610d70578063f1c05a7e14610d85578063f2ecdcae14610da5578063f2fde38b14610dc257600080fd5b8063c5f956af116100fd578063c5f956af14610ca0578063c629812014610cc0578063c8564c6214610cfa578063cc8b21e414610d1b578063cddba7e614610d3b57600080fd5b8063c08261db14610c07578063c0c067a414610c40578063c415b95c14610c60578063c4d66de814610c8057600080fd5b8063a3f4df7e116101bc578063af7047d811610180578063af7047d814610b4e578063b31610db14610b87578063b957172114610ba7578063c05c5e9414610bc7578063c06abe7714610be757600080fd5b8063a3f4df7e14610a81578063a72bd4e814610ac7578063a80f9aee14610add578063ad3cb1cc14610afd578063aebe1ccb14610b2e57600080fd5b80639d6aea0a116102035780639d6aea0a14610a155780639d8d5a1714610a37578063a142f35a14610a4c578063a17e64cc14610981578063a20baee614610a6657600080fd5b806390b988c61461098157806391bbfd0d1461099c57806395fb16bb146109d557806399bd6dda146109f557600080fd5b80634f1ef28611610345578063741bef1a116102cd5780637c120312116102915780637c120312146108d857806386d10e8c146108f457806388ecb0db1461092d5780638da5cb5b1461094d5780638dfac87a1461096257600080fd5b8063741bef1a1461082157806375e1c3d81461084157806377553ad41461086157806378aaf4de146108815780637a305122146108ba57600080fd5b806362d460da1161031457806362d460da1461077a578063650aabe2146107b35780636a85d67d146107d0578063715018a6146107f057806372fe25aa1461080557600080fd5b80634f1ef2861461071257806352d1902d1461072557806355dafa461461073a5780635b3724511461075a57600080fd5b80632416b72d116103d35780633f84a44d116103975780633f84a44d146106595780633f8f5f42146106795780634169467d14610699578063443c4fcb146106b95780634bc66f32146106f257600080fd5b80632416b72d146105a95780632a6e7603146105be5780632d79b8eb146105de578063300581d91461060b5780633e18935c1461064457600080fd5b80630e8dfa811161041a5780630e8dfa81146104eb5780630fe66cdd1461050b57806311a40d871461052b57806317ae1fc51461054b57806318a151131461057b57600080fd5b806301c931001461044c578063048c661d1461046e5780630a34d4d6146104ab5780630bc028c2146104cb575b600080fd5b34801561045857600080fd5b5061046c610467366004612f1d565b610e8c565b005b34801561047a57600080fd5b5060095461048e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156104b757600080fd5b50600d5461048e906001600160a01b031681565b3480156104d757600080fd5b5061046c6104e6366004612f38565b610edd565b3480156104f757600080fd5b5061046c610506366004612f38565b61106c565b34801561051757600080fd5b5061046c610526366004612f62565b6111f1565b34801561053757600080fd5b5061046c610546366004612f9e565b611293565b34801561055757600080fd5b5061056b610566366004612f1d565b61134d565b60405190151581526020016104a2565b34801561058757600080fd5b5061059b610596366004612f1d565b61137c565b6040519081526020016104a2565b3480156105b557600080fd5b5060325461059b565b3480156105ca57600080fd5b5061048e6105d9366004612f9e565b6113f1565b3480156105ea57600080fd5b506105fe6105f9366004612ffe565b61141b565b6040516104a291906130ab565b34801561061757600080fd5b5061059b610626366004612f1d565b6001600160a01b031660009081526030602052604090206002015490565b34801561065057600080fd5b5060335461059b565b34801561066557600080fd5b50600e5461048e906001600160a01b031681565b34801561068557600080fd5b5061046c610694366004612f38565b611500565b3480156106a557600080fd5b5060055461048e906001600160a01b031681565b3480156106c557600080fd5b5061059b6106d4366004612f1d565b6001600160a01b031660009081526030602052604090206009015490565b3480156106fe57600080fd5b50600a5461048e906001600160a01b031681565b61046c6107203660046130ef565b611675565b34801561073157600080fd5b5061059b611694565b34801561074657600080fd5b5060065461048e906001600160a01b031681565b34801561076657600080fd5b5061046c610775366004612f38565b6116b1565b34801561078657600080fd5b5061059b610795366004612f1d565b6001600160a01b031660009081526030602052604090206003015490565b3480156107bf57600080fd5b50603554610100900460ff1661056b565b3480156107dc57600080fd5b5061046c6107eb366004612f1d565b611993565b3480156107fc57600080fd5b5061046c6119e4565b34801561081157600080fd5b5061059b670de0b6b3a764000081565b34801561082d57600080fd5b5060075461048e906001600160a01b031681565b34801561084d57600080fd5b5061046c61085c366004612f38565b6119f8565b34801561086d57600080fd5b5060015461048e906001600160a01b031681565b34801561088d57600080fd5b5061059b61089c366004612f1d565b6001600160a01b031660009081526030602052604090206004015490565b3480156108c657600080fd5b5061059b69d3c21bcecceda100000081565b3480156108e457600080fd5b5061059b670f43fc2c04ee000081565b34801561090057600080fd5b5061059b61090f366004612f1d565b6001600160a01b031660009081526030602052604090206006015490565b34801561093957600080fd5b5061046c610948366004612f38565b611b6b565b34801561095957600080fd5b5061048e611ce0565b34801561096e57600080fd5b5060355461056b90610100900460ff1681565b34801561098d57600080fd5b5061059b6611c37937e0800081565b3480156109a857600080fd5b5061059b6109b7366004612f1d565b6001600160a01b031660009081526030602052604090206007015490565b3480156109e157600080fd5b5060025461048e906001600160a01b031681565b348015610a0157600080fd5b5061046c610a10366004612f9e565b611d0e565b348015610a2157600080fd5b50610a2a611dc0565b6040516104a29190613195565b348015610a4357600080fd5b5061059b60c881565b348015610a5857600080fd5b5060355461056b9060ff1681565b348015610a7257600080fd5b50670de0b6b3a764000061059b565b348015610a8d57600080fd5b50610aba6040518060400160405280600d81526020016c10591b5a5b90dbdb9d1c9858dd609a1b81525081565b6040516104a29190613226565b348015610ad357600080fd5b5061059b60001981565b348015610ae957600080fd5b5061046c610af8366004612f38565b611e22565b348015610b0957600080fd5b50610aba604051806040016040528060058152602001640352e302e360dc1b81525081565b348015610b3a57600080fd5b5061046c610b49366004612f38565b611f99565b348015610b5a57600080fd5b5061059b610b69366004612f1d565b6001600160a01b031660009081526030602052604090206008015490565b348015610b9357600080fd5b5061059b610ba2366004612f1d565b612061565b348015610bb357600080fd5b5061046c610bc2366004613239565b61208a565b348015610bd357600080fd5b5060005461048e906001600160a01b031681565b348015610bf357600080fd5b5061046c610c02366004612f38565b61252e565b348015610c1357600080fd5b5061059b610c22366004612f1d565b6001600160a01b031660009081526030602052604090206005015490565b348015610c4c57600080fd5b5061046c610c5b3660046132ae565b612608565b348015610c6c57600080fd5b5060045461048e906001600160a01b031681565b348015610c8c57600080fd5b5061046c610c9b366004612f1d565b6126f4565b348015610cac57600080fd5b50600b5461048e906001600160a01b031681565b348015610ccc57600080fd5b50603154603254603354610cdf92919083565b604080519384526020840192909252908201526060016104a2565b348015610d0657600080fd5b50600e5461056b90600160a01b900460ff1681565b348015610d2757600080fd5b5060085461048e906001600160a01b031681565b348015610d4757600080fd5b5061046c61280b565b348015610d5c57600080fd5b5061046c610d6b366004612f9e565b6128ad565b348015610d7c57600080fd5b5061046c61295f565b348015610d9157600080fd5b50600c5461048e906001600160a01b031681565b348015610db157600080fd5b5061059b686c6b935b8bbd40000081565b348015610dce57600080fd5b5061046c610ddd366004612f1d565b6129e2565b348015610dee57600080fd5b5061059b610dfd366004612f1d565b6001600160a01b03166000908152603060205260409020600a015490565b348015610e2757600080fd5b5061059b6714d1120d7b16000081565b348015610e4357600080fd5b5060035461048e906001600160a01b031681565b348015610e6357600080fd5b5060315461059b565b348015610e7857600080fd5b5061046c610e87366004612f1d565b612a20565b610e94612a29565b6001600160a01b038116610ebb576040516385d3330760e01b815260040160405180910390fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b60355460ff1615610f1857600a546001600160a01b03163314610f1357604051631dc5ba9560e01b815260040160405180910390fd5b610f51565b610f20611ce0565b6001600160a01b0316336001600160a01b031614610f515760405163ec4adddf60e01b815260040160405180910390fd5b604080518082018252600c81526b135a5b8813995d081119589d60a21b6020808301919091526001600160a01b038516600090815260309091529182206001015490918491849190686c6b935b8bbd4000009060ff16610fc4576040516316c1362560e21b815260040160405180910390fd5b81831080610fd157508083115b156110005784838383604051630714ded760e31b8152600401610ff7949392919061330a565b60405180910390fd5b6001600160a01b038716600090815260306020908152604091829020600681018054908a905583518181529283018a9052909290917f794abdbe21b3b4556467be6af2b2d5e75ae16613bd128dbd47c3727bd52b4b5591015b60405180910390a1505050505050505050565b60355460ff16156110a757600a546001600160a01b031633146110a257604051631dc5ba9560e01b815260040160405180910390fd5b6110e0565b6110af611ce0565b6001600160a01b0316336001600160a01b0316146110e05760405163ec4adddf60e01b815260040160405180910390fd5b60408051808201825260148152732932b232b6b83a34b7b7102332b290233637b7b960611b6020808301919091526001600160a01b0385166000908152603090915291909120600101548390839066038d7ea4c680009067016345785d8a00009060ff16611161576040516316c1362560e21b815260040160405180910390fd5b8183108061116e57508083115b156111945784838383604051630714ded760e31b8152600401610ff7949392919061330a565b6001600160a01b038716600090815260306020908152604091829020600981018054908a905583518181529283018a9052909290917fbb07ced1b1536afc600a5d97cba6e4b294731026286cddc33b98cb2d18569ab79101611059565b60355460ff161561122c57600a546001600160a01b0316331461122757604051631dc5ba9560e01b815260040160405180910390fd5b611265565b611234611ce0565b6001600160a01b0316336001600160a01b0316146112655760405163ec4adddf60e01b815260040160405180910390fd5b6001600160a01b03919091166000908152603060205260409020600101805460ff1916911515919091179055565b60355460ff16156112ce57600a546001600160a01b031633146112c957604051631dc5ba9560e01b815260040160405180910390fd5b611307565b6112d6611ce0565b6001600160a01b0316336001600160a01b0316146113075760405163ec4adddf60e01b815260040160405180910390fd5b603180549082905560408051828152602081018490527fe3b4f88e1a9792e4c88056012d3c2d95f88686e9f0422d216ddde64913868a3091015b60405180910390a15050565b60008161135981612a5b565b50506001600160a01b031660009081526030602052604090206001015460ff1690565b600e5460405163b429464160e01b81526001600160a01b038381166004830152600092169063b429464190602401602060405180830381865afa1580156113c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113eb9190613339565b92915050565b6034818154811061140157600080fd5b6000918252602090912001546001600160a01b0316905081565b80516060908067ffffffffffffffff81111561143957611439612fb7565b604051908082528060200260200182016040528015611462578160200160208202803683370190505b50915060005b818110156114f95761149284828151811061148557611485613352565b6020026020010151612a5b565b603060008583815181106114a8576114a8613352565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600001548382815181106114e6576114e6613352565b6020908102919091010152600101611468565b5050919050565b60355460ff161561153b57600a546001600160a01b0316331461153657604051631dc5ba9560e01b815260040160405180910390fd5b611574565b611543611ce0565b6001600160a01b0316336001600160a01b0316146115745760405163ec4adddf60e01b815260040160405180910390fd5b604080518082018252600381526221a1a960e91b6020808301919091526001600160a01b03851660009081526030909152919091206001015483908390670de0b6b3a764000090678ac7230489e800009060ff166115e5576040516316c1362560e21b815260040160405180910390fd5b818310806115f257508083115b156116185784838383604051630714ded760e31b8152600401610ff7949392919061330a565b6001600160a01b038716600090815260306020908152604091829020600381018054908a905583518181529283018a9052909290917f8fef8cb3d376ea764ea9e41cc4380bb23ed262ed1883cfd0ee00f4b08a288b699101611059565b61167d612a96565b61168682612b3b565b6116908282612b43565b5050565b600061169e612c05565b506000805160206133a683398151915290565b60355460ff16156116ec57600a546001600160a01b031633146116e757604051631dc5ba9560e01b815260040160405180910390fd5b611725565b6116f4611ce0565b6001600160a01b0316336001600160a01b0316146117255760405163ec4adddf60e01b815260040160405180910390fd5b6001600160a01b0382166000908152603060205260409020600401541561175f57604051634dc81d2760e01b815260040160405180910390fd5b603480546001808201835560008390527f46bddb1178e94d7f2892ff5f366840eb658911794f2c3a44c450aa2c505186c190910180546001600160a01b0319166001600160a01b038616179055604080516101608101909152915482916117c591613368565b81526020016000151581526020016611c37937e0800081526020016714d1120d7b1600008152602001670f43fc2c04ee00008152602001828152602001686c6b935b8bbd400000815260200169d3c21bcecceda1000000815260200160c881526020016611c37937e08000815260200160001981525060306000846001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a01559050507f7db05e63d635a68c62fd7fd8f3107ae8ab584a383e102d1bd8a40f4c977e465f8260405161192891906001600160a01b0391909116815260200190565b60405180910390a1600954604051633b03578360e21b81526001600160a01b0384811660048301529091169063ec0d5e0c90602401600060405180830381600087803b15801561197757600080fd5b505af115801561198b573d6000803e3d6000fd5b505050505050565b61199b612a29565b6001600160a01b0381166119c25760405163706ebc6560e11b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6119ec612a29565b6119f66000612c4e565b565b60355460ff1615611a3357600a546001600160a01b03163314611a2e57604051631dc5ba9560e01b815260040160405180910390fd5b611a6c565b611a3b611ce0565b6001600160a01b0316336001600160a01b031614611a6c5760405163ec4adddf60e01b815260040160405180910390fd5b604080518082018252600f81526e2832b931b2b73a102234bb34b9b7b960891b6020808301919091526001600160a01b0385166000908152603090915291909120600101548390839060029060c89060ff16611adb576040516316c1362560e21b815260040160405180910390fd5b81831080611ae857508083115b15611b0e5784838383604051630714ded760e31b8152600401610ff7949392919061330a565b6001600160a01b038716600090815260306020908152604091829020600881018054908a905583518181529283018a9052909290917fdfb04317e088794badba78956b7c092fac7986add660c0fc3d01569808c32b369101611059565b60355460ff1615611ba657600a546001600160a01b03163314611ba157604051631dc5ba9560e01b815260040160405180910390fd5b611bdf565b611bae611ce0565b6001600160a01b0316336001600160a01b031614611bdf5760405163ec4adddf60e01b815260040160405180910390fd5b604080518082018252600381526226a1a960e91b6020808301919091526001600160a01b03851660009081526030909152919091206001015483908390670e043da61725000090678ac7230489e800009060ff16611c50576040516316c1362560e21b815260040160405180910390fd5b81831080611c5d57508083115b15611c835784838383604051630714ded760e31b8152600401610ff7949392919061330a565b6001600160a01b038716600090815260306020908152604091829020600481018054908a905583518181529283018a9052909290917fefeb589e088ecf2bc2a0b6d364f91a4fee37ee6b9c6f089c71169e86f03dc9449101611059565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b60355460ff1615611d4957600a546001600160a01b03163314611d4457604051631dc5ba9560e01b815260040160405180910390fd5b611d82565b611d51611ce0565b6001600160a01b0316336001600160a01b031614611d825760405163ec4adddf60e01b815260040160405180910390fd5b603280549082905560408051828152602081018490527f841b8d7786ab206e084452d4121e409254159a21459476b3875af811e81ddece9101611341565b60606034805480602002602001604051908101604052809291908181526020018280548015611e1857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611dfa575b5050505050905090565b60355460ff1615611e5d57600a546001600160a01b03163314611e5857604051631dc5ba9560e01b815260040160405180910390fd5b611e96565b611e65611ce0565b6001600160a01b0316336001600160a01b031614611e965760405163ec4adddf60e01b815260040160405180910390fd5b604080518082018252600d81526c426f72726f77696e672046656560981b6020808301919091526001600160a01b03851660009081526030909152918220600101549091849184919067016345785d8a00009060ff16611f09576040516316c1362560e21b815260040160405180910390fd5b81831080611f1657508083115b15611f3c5784838383604051630714ded760e31b8152600401610ff7949392919061330a565b6001600160a01b038716600090815260306020908152604091829020600281018054908a905583518181529283018a9052909290917fa7beab75e7a7d89dcacb5a82b33606192c31b8bbc1868c5240f95abcd95bbeee9101611059565b60355460ff1615611fd457600a546001600160a01b03163314611fcf57604051631dc5ba9560e01b815260040160405180910390fd5b61200d565b611fdc611ce0565b6001600160a01b0316336001600160a01b03161461200d5760405163ec4adddf60e01b815260040160405180910390fd5b6001600160a01b038216600081815260306020908152604091829020600a01849055815192835282018390527f2f92337ec07da93d49659c3dbafa91599df53c9c9147edcff44eabc99d9459509101611341565b60008161206d81612a5b565b50506001600160a01b031660009081526030602052604090205490565b612092612a29565b600e54600160a01b900460ff16156120bc57604051625f22e960e41b815260040160405180910390fd5b600d81146120dd57604051633f5a111d60e21b815260040160405180910390fd5b60005b600d81101561217b5760008383838181106120fd576120fd613352565b90506020020160208101906121129190612f1d565b6001600160a01b031603612173578083838381811061213357612133613352565b90506020020160208101906121489190612f1d565b604051630d9d339f60e01b815260048101929092526001600160a01b03166024820152604401610ff7565b6001016120e0565b508181600081811061218f5761218f613352565b90506020020160208101906121a49190612f1d565b600080546001600160a01b0319166001600160a01b0392909216919091179055818160018181106121d7576121d7613352565b90506020020160208101906121ec9190612f1d565b600180546001600160a01b0319166001600160a01b03929092169190911790558181600281811061221f5761221f613352565b90506020020160208101906122349190612f1d565b600380546001600160a01b0319166001600160a01b03929092169190911781558290829081811061226757612267613352565b905060200201602081019061227c9190612f1d565b600480546001600160a01b0319166001600160a01b0392909216919091178155829082908181106122af576122af613352565b90506020020160208101906122c49190612f1d565b600580546001600160a01b0319166001600160a01b0392909216919091178155829082908181106122f7576122f7613352565b905060200201602081019061230c9190612f1d565b600780546001600160a01b0319166001600160a01b03929092169190911790558181600681811061233f5761233f613352565b90506020020160208101906123549190612f1d565b600880546001600160a01b0319166001600160a01b03929092169190911790558181600781811061238757612387613352565b905060200201602081019061239c9190612f1d565b600980546001600160a01b0319166001600160a01b0392909216919091179055818160088181106123cf576123cf613352565b90506020020160208101906123e49190612f1d565b600a80546001600160a01b0319166001600160a01b03929092169190911790558181600981811061241757612417613352565b905060200201602081019061242c9190612f1d565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a81811061245f5761245f613352565b90506020020160208101906124749190612f1d565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b8181106124a7576124a7613352565b90506020020160208101906124bc9190612f1d565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c8181106124ef576124ef613352565b90506020020160208101906125049190612f1d565b600e80546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b60355460ff161561256957600a546001600160a01b0316331461256457604051631dc5ba9560e01b815260040160405180910390fd5b6125a2565b612571611ce0565b6001600160a01b0316336001600160a01b0316146125a25760405163ec4adddf60e01b815260040160405180910390fd5b6001600160a01b038216600090815260306020908152604091829020600781018054908590558351818152928301859052909290917f903452cfae6c90575a1e7327283877d56dda9ed43a4711f44bf796e103e4e120910160405180910390a150505050565b60355460ff161561264357600a546001600160a01b0316331461263e57604051631dc5ba9560e01b815260040160405180910390fd5b61267c565b61264b611ce0565b6001600160a01b0316336001600160a01b03161461267c5760405163ec4adddf60e01b815260040160405180910390fd5b6001600160a01b03881660009081526030602052604090206001908101805460ff191690911790556126ae8888611e22565b6126b88887611500565b6126c28886611b6b565b6126cc8885610edd565b6126d6888461252e565b6126e088836119f8565b6126ea888261106c565b5050505050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff1660008115801561273a5750825b905060008267ffffffffffffffff1660011480156127575750303b155b905081158015612765575080155b156127835760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156127ad57845460ff60401b1916600160401b1785555b6127b686612cbf565b6127be612cd0565b831561198b57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a1505050505050565b60355460ff161561284657600a546001600160a01b0316331461284157604051631dc5ba9560e01b815260040160405180910390fd5b61287f565b61284e611ce0565b6001600160a01b0316336001600160a01b03161461287f5760405163ec4adddf60e01b815260040160405180910390fd5b603554610100900460ff161561289c576035805461ff0019169055565b6035805461ff001916610100179055565b60355460ff16156128e857600a546001600160a01b031633146128e357604051631dc5ba9560e01b815260040160405180910390fd5b612921565b6128f0611ce0565b6001600160a01b0316336001600160a01b0316146129215760405163ec4adddf60e01b815260040160405180910390fd5b603380549082905560408051828152602081018490527f7196cc0c7a60a899fecba676605ed35cd076078c7823305611d2e11fe269ae359101611341565b60355460ff161561299a57600a546001600160a01b0316331461299557604051631dc5ba9560e01b815260040160405180910390fd5b6129d3565b6129a2611ce0565b6001600160a01b0316336001600160a01b0316146129d35760405163ec4adddf60e01b815260040160405180910390fd5b6035805460ff19166001179055565b6129ea612a29565b6001600160a01b038116612a1457604051631e4fbdf760e01b815260006004820152602401610ff7565b612a1d81612c4e565b50565b612a1d81612b3b565b33612a32611ce0565b6001600160a01b0316146119f65760405163118cdaa760e01b8152336004820152602401610ff7565b6001600160a01b0381166000908152603060205260408120600401549003612a1d5760405163e2d0e9ed60e01b815260040160405180910390fd5b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480612b1d57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612b116000805160206133a6833981519152546001600160a01b031690565b6001600160a01b031614155b156119f65760405163703e46dd60e11b815260040160405180910390fd5b612a1d612a29565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612b9d575060408051601f3d908101601f19168201909252612b9a91810190613339565b60015b612bc557604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610ff7565b6000805160206133a68339815191528114612bf657604051632a87526960e21b815260048101829052602401610ff7565b612c008383612cd8565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146119f65760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b612cc7612d2e565b612a1d81612d77565b6119f6612d2e565b612ce182612d7f565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115612d2657612c008282612de4565b611690612e5a565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166119f657604051631afcd79f60e31b815260040160405180910390fd5b6129ea612d2e565b806001600160a01b03163b600003612db557604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610ff7565b6000805160206133a683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051612e019190613389565b600060405180830381855af49150503d8060008114612e3c576040519150601f19603f3d011682016040523d82523d6000602084013e612e41565b606091505b5091509150612e51858383612e79565b95945050505050565b34156119f65760405163b398979f60e01b815260040160405180910390fd5b606082612e8e57612e8982612ed8565b612ed1565b8151158015612ea557506001600160a01b0384163b155b15612ece57604051639996b31560e01b81526001600160a01b0385166004820152602401610ff7565b50805b9392505050565b805115612ee85780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b0381168114612f1857600080fd5b919050565b600060208284031215612f2f57600080fd5b612ed182612f01565b60008060408385031215612f4b57600080fd5b612f5483612f01565b946020939093013593505050565b60008060408385031215612f7557600080fd5b612f7e83612f01565b915060208301358015158114612f9357600080fd5b809150509250929050565b600060208284031215612fb057600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612ff657612ff6612fb7565b604052919050565b6000602080838503121561301157600080fd5b823567ffffffffffffffff8082111561302957600080fd5b818501915085601f83011261303d57600080fd5b81358181111561304f5761304f612fb7565b8060051b9150613060848301612fcd565b818152918301840191848101908884111561307a57600080fd5b938501935b8385101561309f5761309085612f01565b8252938501939085019061307f565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156130e3578351835292840192918401916001016130c7565b50909695505050505050565b6000806040838503121561310257600080fd5b61310b83612f01565b915060208084013567ffffffffffffffff8082111561312957600080fd5b818601915086601f83011261313d57600080fd5b81358181111561314f5761314f612fb7565b613161601f8201601f19168501612fcd565b9150808252878482850101111561317757600080fd5b80848401858401376000848284010152508093505050509250929050565b6020808252825182820181905260009190848201906040850190845b818110156130e35783516001600160a01b0316835292840192918401916001016131b1565b60005b838110156131f15781810151838201526020016131d9565b50506000910152565b600081518084526132128160208601602086016131d6565b601f01601f19169290920160200192915050565b602081526000612ed160208301846131fa565b6000806020838503121561324c57600080fd5b823567ffffffffffffffff8082111561326457600080fd5b818501915085601f83011261327857600080fd5b81358181111561328757600080fd5b8660208260051b850101111561329c57600080fd5b60209290920196919550909350505050565b600080600080600080600080610100898b0312156132cb57600080fd5b6132d489612f01565b9a60208a01359a5060408a013599606081013599506080810135985060a0810135975060c0810135965060e00135945092505050565b60808152600061331d60808301876131fa565b6020830195909552506040810192909252606090910152919050565b60006020828403121561334b57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b818103818111156113eb57634e487b7160e01b600052601160045260246000fd5b6000825161339b8184602087016131d6565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca164736f6c6343000817000a",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AdminContract__CollateralDoesNotExist()": [
        {
          "details": "Error emitted when the collateral asset does not exist."
        }
      ],
      "AdminContract__CollateralExists()": [
        {
          "details": "Error emitted when the collateral asset already exists."
        }
      ],
      "AdminContract__CollateralNotConfigured()": [
        {
          "details": "Error emitted when the collateral asset is not active."
        }
      ],
      "AdminContract__OnlyOwner()": [
        {
          "details": "Error emitted when the caller is not owner."
        }
      ],
      "AdminContract__OnlyTimelock()": [
        {
          "details": "Error emitted when the caller is not timelock contract."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeCheckError(string,uint256,uint256,uint256)": [
        {
          "details": "Error emitted when the input value is not between min and max values.",
          "params": {
            "_maxValue": "The maximum value.",
            "_minValue": "The minimum value.",
            "_parameter": "The label of input parameter.",
            "_valueEntered": "The input value."
          }
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "BorrowingFeeChanged(uint256,uint256)": {
        "details": "Emitted when the borrowing fee is updated.",
        "params": {
          "_newBorrowingFee": "The new borrowing fee.",
          "_oldBorrowingFee": "The old borrowing fee."
        }
      },
      "CCRChanged(uint256,uint256)": {
        "details": "Emitted when the critical collateral ratio is updated.",
        "params": {
          "_newCCR": "The new critical collateral ratio.",
          "_oldCCR": "The old critical collateral ratio."
        }
      },
      "CollateralAdded(address)": {
        "details": "Emitted when the collateral asset is added.",
        "params": {
          "_collateral": "The address of collateral asset."
        }
      },
      "FlashLoanFeeChanged(uint256,uint256)": {
        "details": "Emitted when the flash loan fee is updated.",
        "params": {
          "_newFee": "The new flash loan fee.",
          "_oldFee": "The old flash loan fee."
        }
      },
      "FlashLoanMaxDebtChanged(uint256,uint256)": {
        "details": "Emitted when the maximum amount of debt token for flash loan is updated.",
        "params": {
          "_newMaxDebt": "The new minimum amount of debt token.",
          "_oldMaxDebt": "The old minimum amount of debt token."
        }
      },
      "FlashLoanMinDebtChanged(uint256,uint256)": {
        "details": "Emitted when the minimum amount of debt token for flash loan is updated.",
        "params": {
          "_newMinDebt": "The new minimum amount of debt token.",
          "_oldMinDebt": "The old minimum amount of debt token."
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MCRChanged(uint256,uint256)": {
        "details": "Emitted when the minimum collateral ratio is updated.",
        "params": {
          "_newMCR": "The new minimum collateral ratio.",
          "_oldMCR": "The old minimum collateral ratio."
        }
      },
      "MinNetDebtChanged(uint256,uint256)": {
        "details": "Emitted when the minimum amount of debt token is updated.",
        "params": {
          "_newMinNet": "The new minimum amount of debt token.",
          "_oldMinNet": "The old minimum amount of debt token."
        }
      },
      "MintCapChanged(uint256,uint256)": {
        "details": "Emitted when the mint cap is updated.",
        "params": {
          "_newMintCap": "The new mint cap.",
          "_oldMintCap": "The old mint cap."
        }
      },
      "PercentDivisorChanged(uint256,uint256)": {
        "details": "Emitted when the liquidation fee is updated.",
        "params": {
          "_newPercentDiv": "The new liquidation fee.",
          "_oldPercentDiv": "The old liquidation fee."
        }
      },
      "RedemptionBlockTimestampChanged(address,uint256)": {
        "details": "Emitted when the redemption timestamp of specific collateral is updated.",
        "params": {
          "_blockTimestamp": "The new redemption timestamp.",
          "_collateral": "The address of collateral asset."
        }
      },
      "RedemptionFeeFloorChanged(uint256,uint256)": {
        "details": "Emitted when the floor of redemption fee is updated.",
        "params": {
          "_newRedemptionFeeFloor": "The new floor of redemption fee.",
          "_oldRedemptionFeeFloor": "The old floor of redemption fee."
        }
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "addNewCollateral(address,uint256)": {
        "params": {
          "_collateral": "The address of collateral asset.",
          "_debtTokenGasCompensation": "The amount of debtToken to be locked on opening TrenBoxes as liquidation reserve."
        }
      },
      "getBorrowingFee(address)": {
        "params": {
          "_collateral": "The address of collateral asset."
        }
      },
      "getCcr(address)": {
        "params": {
          "_collateral": "The address of collateral asset."
        }
      },
      "getDebtTokenGasCompensation(address)": {
        "params": {
          "_collateral": "The address of collateral asset."
        }
      },
      "getIndex(address)": {
        "params": {
          "_collateral": "The address of collateral asset."
        }
      },
      "getIndices(address[])": {
        "params": {
          "_colls": "The arrays of collateral assets."
        }
      },
      "getIsActive(address)": {
        "params": {
          "_collateral": "The address of collateral asset."
        }
      },
      "getMcr(address)": {
        "params": {
          "_collateral": "The address of collateral asset."
        }
      },
      "getMinNetDebt(address)": {
        "params": {
          "_collateral": "The address of collateral asset."
        }
      },
      "getMintCap(address)": {
        "params": {
          "_collateral": "The address of collateral asset."
        }
      },
      "getPercentDivisor(address)": {
        "params": {
          "_collateral": "The address of collateral asset."
        }
      },
      "getRedemptionBlockTimestamp(address)": {
        "params": {
          "_collateral": "The address of collateral asset."
        }
      },
      "getRedemptionFeeFloor(address)": {
        "params": {
          "_collateral": "The address of collateral asset."
        }
      },
      "getTotalAssetDebt(address)": {
        "params": {
          "_asset": "The address of collateral asset."
        }
      },
      "initialize(address)": {
        "details": "Runs all the setup logic only once.",
        "params": {
          "initialOwner": "The address of initial owner."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setBorrowingFee(address,uint256)": {
        "params": {
          "_borrowingFee": "The one-time fee charged on the loan amount.",
          "_collateral": "The address of collateral asset."
        }
      },
      "setCCR(address,uint256)": {
        "params": {
          "_collateral": "The address of collateral asset.",
          "_newCCR": "The new critical collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered."
        }
      },
      "setCollateralParameters(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_borrowingFee": "The one-time fee charged on the loan amount.",
          "_ccr": "The critical collateral ratio to trigger recovery mode.",
          "_collateral": "The address of collateral asset.",
          "_mcr": "The minimum collateral ratio to avoid liquidation under normal mode.",
          "_minNetDebt": "The minimum amount of debtToken a TrenBox must have.",
          "_mintCap": "The total amount of debt tokens to be allocated.",
          "_percentDivisor": "The liquidation fee.",
          "_redemptionFeeFloor": "The floor of redemption fee."
        }
      },
      "setFeeForFlashLoan(uint256)": {
        "params": {
          "_flashLoanFee": "The new flash loan fee."
        }
      },
      "setIsActive(address,bool)": {
        "params": {
          "_active": "The status of collateral; true or false.",
          "_collateral": "The address of collateral asset."
        }
      },
      "setMCR(address,uint256)": {
        "params": {
          "_collateral": "The address of collateral asset.",
          "_newMCR": "The minimum collateral ratio to avoid liquidations under normal mode."
        }
      },
      "setMaxDebtForFlashLoan(uint256)": {
        "params": {
          "_flashLoanMaxDebt": "The new maximum amount of debt token."
        }
      },
      "setMinDebtForFlashLoan(uint256)": {
        "params": {
          "_flashLoanMinDebt": "The new minimum amount of debt token."
        }
      },
      "setMinNetDebt(address,uint256)": {
        "params": {
          "_collateral": "The address of collateral asset.",
          "_minNetDebt": "The minimum amount of debt token a TrenBox must have."
        }
      },
      "setMintCap(address,uint256)": {
        "params": {
          "_collateral": "The address of collateral asset.",
          "_mintCap": "The mint cap."
        }
      },
      "setPercentDivisor(address,uint256)": {
        "params": {
          "_collateral": "The address of collateral asset.",
          "_percentDivisor": "The new :(min 2, max 200)."
        }
      },
      "setRedemptionBlockTimestamp(address,uint256)": {
        "params": {
          "_blockTimestamp": "The timestamp which redemption can be started from.",
          "_collateral": "The address of collateral asset."
        }
      },
      "setRedemptionFeeFloor(address,uint256)": {
        "params": {
          "_collateral": "The address of collateral asset.",
          "_redemptionFeeFloor": "The floor of redemption fee charged on the redeemed amount(scaled by 1e18); min 0.001(0.1%), max 0.1(10%)."
        }
      },
      "setSetupIsInitialized()": {
        "details": "The deployment script will call this function when all initial collaterals have been configured; after this is set to true, all subsequent config/setters will need to go through the timelocks."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "collateralParams": {
        "details": "The mapping from collateral asset to its parameters. Cannot be public as struct has too many variables for the stack. Create special view structs/getters instead."
      }
    },
    "title": "AdminContract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BORROWING_FEE_DEFAULT()": {
        "notice": "The default borrowing fee, 0.5%."
      },
      "CCR_DEFAULT()": {
        "notice": "The default critical collateral ratio, 150%."
      },
      "DECIMAL_PRECISION()": {
        "notice": "Returns decimal precision, 1 ether."
      },
      "MCR_DEFAULT()": {
        "notice": "The default minimum collateral ratio, 110%."
      },
      "MINT_CAP_DEFAULT()": {
        "notice": "The default mint cap, 1 million trenUSD."
      },
      "MIN_NET_DEBT_DEFAULT()": {
        "notice": "The default minimum amount of debt token to mint."
      },
      "NAME()": {
        "notice": "The contract name."
      },
      "PERCENT_DIVISOR_DEFAULT()": {
        "notice": "The default liquidation fee, dividing by 200 yields 0.5%."
      },
      "REDEMPTION_BLOCK_TIMESTAMP_DEFAULT()": {
        "notice": "The default block timestamp for redemption."
      },
      "REDEMPTION_FEE_FLOOR_DEFAULT()": {
        "notice": "The default floor of redemption fee, 0.5%."
      },
      "_100pct()": {
        "notice": "The scaled number which means 100 percent, 1e18 == 100%."
      },
      "addNewCollateral(address,uint256)": {
        "notice": "Adds new collateral asset."
      },
      "flashLoanParams()": {
        "notice": "The storage struct variable to store flash loan parameters."
      },
      "getBorrowingFee(address)": {
        "notice": "Returns the one-time fee charged on the loan amount."
      },
      "getCcr(address)": {
        "notice": "Returns the critical collateral ratio of a specific collateral asset."
      },
      "getDebtTokenGasCompensation(address)": {
        "notice": "Returns the amount of debt token to be locked on opening TrenBoxes as liquidation reserve."
      },
      "getFlashLoanFee()": {
        "notice": "Returns the flash loan fee."
      },
      "getFlashLoanMaxNetDebt()": {
        "notice": "Returns the maximum amount of debt token to mint for flash loan."
      },
      "getFlashLoanMinNetDebt()": {
        "notice": "Returns the minimum amount of debt token to mint for flash loan."
      },
      "getIndex(address)": {
        "notice": "Returns the index of a specific collateral which maps to asset address in collateral array."
      },
      "getIndices(address[])": {
        "notice": "Returns the list of index matched with collateral arrays."
      },
      "getIsActive(address)": {
        "notice": "Returns if a specific collateral is active or not."
      },
      "getMcr(address)": {
        "notice": "Returns the minimum collateral ratio of a specific collateral asset."
      },
      "getMinNetDebt(address)": {
        "notice": "Returns the minimum amount of debt token a TrenBox must have."
      },
      "getMintCap(address)": {
        "notice": "Returns the total allocated amount of debt token for the specific collateral."
      },
      "getPercentDivisor(address)": {
        "notice": "Returns the liquidation fee; min 2, max 200."
      },
      "getRedemptionBlockTimestamp(address)": {
        "notice": "Returns the redemption timestamp for the specific collateral."
      },
      "getRedemptionFeeFloor(address)": {
        "notice": "Returns the floor of redemption fee for the specific collateral."
      },
      "getRouteToTRENStaking()": {
        "notice": "Returns if the collected fees go to stakers or treasury. if true, collected fees go to stakers; if false, to the treasury"
      },
      "getTotalAssetDebt(address)": {
        "notice": "Returns the current total amount of debt token for the specific collateral."
      },
      "getValidCollateral()": {
        "notice": "Returns list of all collateral types in collateral params."
      },
      "isSetupInitialized()": {
        "notice": "Checks if all initial collaterals have been configured or not."
      },
      "routeToTRENStaking()": {
        "notice": "If true, collected fees go to stakers; if false, to the treasury."
      },
      "setBorrowingFee(address,uint256)": {
        "notice": "Sets the borrowing fee."
      },
      "setCCR(address,uint256)": {
        "notice": "Sets the critical collateral ratio."
      },
      "setCollateralParameters(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Sets collateral parameters."
      },
      "setFeeForFlashLoan(uint256)": {
        "notice": "Sets the flash loan fee."
      },
      "setIsActive(address,bool)": {
        "notice": "Set the status for the specific collateral asset."
      },
      "setMCR(address,uint256)": {
        "notice": "Sets the minimum collateral ratio."
      },
      "setMaxDebtForFlashLoan(uint256)": {
        "notice": "Sets the maximum amount of debt token to mint for flash loan."
      },
      "setMinDebtForFlashLoan(uint256)": {
        "notice": "Sets the minimum amount of debt token to mint for flash loan."
      },
      "setMinNetDebt(address,uint256)": {
        "notice": "Sets the minimum amount of debt token to mint when opening a TrenBox."
      },
      "setMintCap(address,uint256)": {
        "notice": "Sets the total amount of debt tokens that can be allocated."
      },
      "setPercentDivisor(address,uint256)": {
        "notice": "Sets the liquidation fee."
      },
      "setRedemptionBlockTimestamp(address,uint256)": {
        "notice": "Sets the redemption timestamp."
      },
      "setRedemptionFeeFloor(address,uint256)": {
        "notice": "Sets the floor of redemption fee."
      },
      "switchRouteToTRENStaking()": {
        "notice": "Changes the destination where the collected fees go."
      },
      "validCollateral(uint256)": {
        "notice": "list of all collateral types in collateralParams (active and deprecated)."
      }
    },
    "notice": "Contains all the functions to create a new collateral or modify its parameters. It is called by other contracts to check if a collateral is valid and what are their parameters.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10105,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "adminContract",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10107,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "borrowerOperations",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10109,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "communityIssuance",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10111,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "debtToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10113,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "feeCollector",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 10115,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "flashLoanAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 10117,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "trenStaking",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 10119,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "priceFeed",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 10121,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "sortedTrenBoxes",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 10123,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 10125,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "timelockAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 10127,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 10129,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "trenBoxManager",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 10131,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "trenBoxManagerOperations",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 10133,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "trenBoxStorage",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 10135,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "isAddressSetupInitialized",
        "offset": 20,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 10140,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "__gap",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_uint256)33_storage"
      },
      {
        "astId": 6640,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "collateralParams",
        "offset": 0,
        "slot": "48",
        "type": "t_mapping(t_address,t_struct(CollateralParams)12653_storage)"
      },
      {
        "astId": 6644,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "flashLoanParams",
        "offset": 0,
        "slot": "49",
        "type": "t_struct(FlashLoanParams)12661_storage"
      },
      {
        "astId": 6648,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "validCollateral",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6651,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "isSetupInitialized",
        "offset": 0,
        "slot": "53",
        "type": "t_bool"
      },
      {
        "astId": 6655,
        "contract": "contracts/AdminContract.sol:AdminContract",
        "label": "routeToTRENStaking",
        "offset": 1,
        "slot": "53",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)33_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[33]",
        "numberOfBytes": "1056"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(CollateralParams)12653_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IAdminContract.CollateralParams)",
        "numberOfBytes": "32",
        "value": "t_struct(CollateralParams)12653_storage"
      },
      "t_struct(CollateralParams)12653_storage": {
        "encoding": "inplace",
        "label": "struct IAdminContract.CollateralParams",
        "members": [
          {
            "astId": 12632,
            "contract": "contracts/AdminContract.sol:AdminContract",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12634,
            "contract": "contracts/AdminContract.sol:AdminContract",
            "label": "active",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 12636,
            "contract": "contracts/AdminContract.sol:AdminContract",
            "label": "borrowingFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12638,
            "contract": "contracts/AdminContract.sol:AdminContract",
            "label": "ccr",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12640,
            "contract": "contracts/AdminContract.sol:AdminContract",
            "label": "mcr",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 12642,
            "contract": "contracts/AdminContract.sol:AdminContract",
            "label": "debtTokenGasCompensation",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 12644,
            "contract": "contracts/AdminContract.sol:AdminContract",
            "label": "minNetDebt",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 12646,
            "contract": "contracts/AdminContract.sol:AdminContract",
            "label": "mintCap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 12648,
            "contract": "contracts/AdminContract.sol:AdminContract",
            "label": "percentDivisor",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 12650,
            "contract": "contracts/AdminContract.sol:AdminContract",
            "label": "redemptionFeeFloor",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 12652,
            "contract": "contracts/AdminContract.sol:AdminContract",
            "label": "redemptionBlockTimestamp",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(FlashLoanParams)12661_storage": {
        "encoding": "inplace",
        "label": "struct IAdminContract.FlashLoanParams",
        "members": [
          {
            "astId": 12656,
            "contract": "contracts/AdminContract.sol:AdminContract",
            "label": "flashLoanFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12658,
            "contract": "contracts/AdminContract.sol:AdminContract",
            "label": "flashLoanMinDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12660,
            "contract": "contracts/AdminContract.sol:AdminContract",
            "label": "flashLoanMaxDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}