{
  "address": "0x5dA6F400bD28193288A718509C444e958AF1f2B9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__CommunityIssuanceZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__LengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__SetupIsInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__TRENStakingZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "address_",
          "type": "address"
        }
      ],
      "name": "ConfigurableAddresses__ZeroAddresses",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SortedTrenBoxes__CallerMustBeBorrowerOperationsOrTrenBoxManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SortedTrenBoxes__CallerMustBeTrenBoxManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SortedTrenBoxes__IdCannotBeZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SortedTrenBoxes__ListAlreadyContainsNode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SortedTrenBoxes__ListDoesNotContainNode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SortedTrenBoxes__NICRMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_id",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_NICR",
          "type": "uint256"
        }
      ],
      "name": "NodeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_id",
          "type": "address"
        }
      ],
      "name": "NodeRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "authorizeUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityIssuance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_id",
          "type": "address"
        }
      ],
      "name": "contains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_NICR",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_prevId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nextId",
          "type": "address"
        }
      ],
      "name": "findInsertPosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getFirst",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getLast",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_id",
          "type": "address"
        }
      ],
      "name": "getNext",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_id",
          "type": "address"
        }
      ],
      "name": "getPrev",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_id",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_NICR",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_prevId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nextId",
          "type": "address"
        }
      ],
      "name": "insert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAddressSetupInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "isEmpty",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_id",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newNICR",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_prevId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nextId",
          "type": "address"
        }
      ],
      "name": "reInsert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_id",
          "type": "address"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_communityIssuance",
          "type": "address"
        }
      ],
      "name": "setCommunityIssuance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trenStaking",
          "type": "address"
        }
      ],
      "name": "setTRENStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTrenBoxes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManagerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxStorage",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "trenBoxes",
      "outputs": [
        {
          "internalType": "address",
          "name": "head",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tail",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_NICR",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_prevId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nextId",
          "type": "address"
        }
      ],
      "name": "validInsertPosition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x03a14f146e7b5ae0f04eb42782c42aa4642491eda3449fe82beb27ba52909a63",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x19E733F20aAdaB8996f7895ACBD04f746BF4Aac1",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "2185672",
    "logsBloom": "0x
    "blockHash": "0x790ad4a1c1a1d3ace874aefb3fa668cc7b49b4b38e73cb9bbec0e3742ec5e058",
    "transactionHash": "0x03a14f146e7b5ae0f04eb42782c42aa4642491eda3449fe82beb27ba52909a63",
    "logs": [],
    "blockNumber": 8317917,
    "cumulativeGasUsed": "2185672",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ce0a60c92cd27ba5a217c9a57823311c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__CommunityIssuanceZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__SetupIsInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__TRENStakingZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"ConfigurableAddresses__ZeroAddresses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SortedTrenBoxes__CallerMustBeBorrowerOperationsOrTrenBoxManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SortedTrenBoxes__CallerMustBeTrenBoxManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SortedTrenBoxes__IdCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SortedTrenBoxes__ListAlreadyContainsNode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SortedTrenBoxes__ListDoesNotContainNode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SortedTrenBoxes__NICRMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_NICR\",\"type\":\"uint256\"}],\"name\":\"NodeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"NodeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"authorizeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityIssuance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"contains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_NICR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_prevId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nextId\",\"type\":\"address\"}],\"name\":\"findInsertPosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getFirst\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getLast\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"getNext\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"getPrev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_NICR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_prevId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nextId\",\"type\":\"address\"}],\"name\":\"insert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAddressSetupInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"isEmpty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newNICR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_prevId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nextId\",\"type\":\"address\"}],\"name\":\"reInsert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityIssuance\",\"type\":\"address\"}],\"name\":\"setCommunityIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trenStaking\",\"type\":\"address\"}],\"name\":\"setTRENStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTrenBoxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManagerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"trenBoxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"head\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tail\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_NICR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_prevId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nextId\",\"type\":\"address\"}],\"name\":\"validInsertPosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"NICRs are computed dynamically at runtime, and not stored on the Node. This is because NICRs of active TrenBoxes change dynamically as liquidation events occur. The list relies on the fact that liquidation events preserve ordering: a liquidation decreases the NICRs of all active TrenBoxes, but maintains their order. A node inserted based on current NICR will maintain the correct position, relative to it's peers, as rewards accumulate, as long as it's raw collateral and debt have not changed. Thus, Nodes remain sorted by current NICR. Nodes need only be re-inserted upon a TrenBox operation - when the owner adds or removes collateral or debt to their position. The list is a modification of the following audited SortedDoublyLinkedList: https://github.com/livepeer/protocol/blob/master/contracts/libraries/SortedDoublyLL.sol Changes made in the Gravita implementation: - Keys have been removed from nodes - Ordering checks for insertion are performed by comparing an NICR argument to the current NICR, calculated at runtime.   The list relies on the property that ordering by ICR is maintained as the ETH:USD price varies. - Public functions with parameters have been made internal to save gas, and given an external wrapper function for external access\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SortedTrenBoxes__CallerMustBeBorrowerOperationsOrTrenBoxManager()\":[{\"details\":\"Error emitted when the caller is neither BorrowerOperations nor TrenBoxManager contract.\"}],\"SortedTrenBoxes__CallerMustBeTrenBoxManager()\":[{\"details\":\"Error emitted when the caller is not TrenBoxManager contract.\"}],\"SortedTrenBoxes__IdCannotBeZeroAddress()\":[{\"details\":\"Error emitted when the specific Node's id is zero.\"}],\"SortedTrenBoxes__ListAlreadyContainsNode()\":[{\"details\":\"Error emitted when the list already contains the specific Node.\"}],\"SortedTrenBoxes__ListDoesNotContainNode()\":[{\"details\":\"Error emitted when the list does not contain the specific Node.\"}],\"SortedTrenBoxes__NICRMustBeGreaterThanZero()\":[{\"details\":\"Error emitted when the specific Node's NICR is zero.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"NodeAdded(address,address,uint256)\":{\"details\":\"Emitted when the new Node is added to the list.\",\"params\":{\"_NICR\":\"The new Node's NICR.\",\"_asset\":\"The address of collateral asset.\",\"_id\":\"The new Node's id.\"}},\"NodeRemoved(address,address)\":{\"details\":\"Emitted when a Node is removed from the list.\",\"params\":{\"_asset\":\"The address of collateral asset.\",\"_id\":\"The Node's id.\"}},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"contains(address,address)\":{\"params\":{\"_asset\":\"The address of collateral asset.\",\"_id\":\"The Node's id.\"}},\"findInsertPosition(address,uint256,address,address)\":{\"params\":{\"_NICR\":\"The Node's NICR.\",\"_asset\":\"The address of collateral asset.\",\"_nextId\":\"The Id of next node for the insert position.\",\"_prevId\":\"The Id of previous node for the insert position.\"}},\"getFirst(address)\":{\"params\":{\"_asset\":\"The address of collateral asset.\"}},\"getLast(address)\":{\"params\":{\"_asset\":\"The address of collateral asset.\"}},\"getNext(address,address)\":{\"params\":{\"_asset\":\"The address of collateral asset.\",\"_id\":\"The Node's id.\"}},\"getPrev(address,address)\":{\"params\":{\"_asset\":\"The address of collateral asset.\",\"_id\":\"The Node's id.\"}},\"getSize(address)\":{\"params\":{\"_asset\":\"The address of collateral asset.\"}},\"initialize(address)\":{\"details\":\"Runs all the setup logic only once.\",\"params\":{\"initialOwner\":\"The address of initial owner.\"}},\"insert(address,address,uint256,address,address)\":{\"params\":{\"_NICR\":\"The Node's NICR.\",\"_asset\":\"The address of collateral asset.\",\"_id\":\"The Node's id.\",\"_nextId\":\"The Id of next node for the insert position.\",\"_prevId\":\"The Id of previous node for the insert position.\"}},\"isEmpty(address)\":{\"params\":{\"_asset\":\"The address of collateral asset.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"reInsert(address,address,uint256,address,address)\":{\"params\":{\"_asset\":\"The address of collateral asset.\",\"_id\":\"The Node's id.\",\"_newNICR\":\"The Node's new NICR.\",\"_nextId\":\"The Id of next Node for the new insert position.\",\"_prevId\":\"The Id of previous Node for the new insert position.\"}},\"remove(address,address)\":{\"params\":{\"_asset\":\"The address of collateral asset.\",\"_id\":\"The Node's id.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"validInsertPosition(address,uint256,address,address)\":{\"params\":{\"_NICR\":\"The Node's NICR.\",\"_asset\":\"The address of collateral asset.\",\"_nextId\":\"The Id of next Node for the insert position.\",\"_prevId\":\"The Id of previous Node for the insert position.\"}}},\"title\":\"SortedTrenBoxes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"NAME()\":{\"notice\":\"The contract name.\"},\"contains(address,address)\":{\"notice\":\"Checks if the list contains a Node.\"},\"findInsertPosition(address,uint256,address,address)\":{\"notice\":\"Finds the insert position for a new Node with the given NICR.\"},\"getFirst(address)\":{\"notice\":\"Returns the first Node (with the largest NICR) in the list.\"},\"getLast(address)\":{\"notice\":\"Returns the last Node (with the smallest NICR) in the list.\"},\"getNext(address,address)\":{\"notice\":\"Returns the next Node (with a smaller NICR) in the list for a given Node.\"},\"getPrev(address,address)\":{\"notice\":\"Returns the previous Node (with a larger NICR) in the list for a given Node.\"},\"getSize(address)\":{\"notice\":\"Returns the current size of the list.\"},\"insert(address,address,uint256,address,address)\":{\"notice\":\"Adds a new Node to the list.\"},\"isEmpty(address)\":{\"notice\":\"Checks if the list is empty.\"},\"reInsert(address,address,uint256,address,address)\":{\"notice\":\"Reinserts the Node at a new position based on its new NICR.\"},\"remove(address,address)\":{\"notice\":\"Removes a Node from the list.\"},\"trenBoxes(address)\":{\"notice\":\"The mapping from collateral asset to its Node list.\"},\"validInsertPosition(address,uint256,address,address)\":{\"notice\":\"Checks if a pair of Nodes is a valid insertion point for a new Node with the given NICR.\"}},\"notice\":\"A sorted doubly linked list with nodes sorted in descending order. Nodes map to active TrenBoxes in the system - the ID property is the address of a TrenBox owner. Nodes are ordered according to their current nominal individual collateral ratio (NICR), which is like the ICR but without the price, i.e., just collateral / debt. The list optionally accepts insert position hints.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SortedTrenBoxes.sol\":\"SortedTrenBoxes\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"contracts/Dependencies/ConfigurableAddresses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract ConfigurableAddresses is OwnableUpgradeable {\\n    address public adminContract;\\n    address public borrowerOperations;\\n    address public communityIssuance;\\n    address public debtToken;\\n    address public feeCollector;\\n    address public flashLoanAddress;\\n    address public trenStaking;\\n    address public priceFeed;\\n    address public sortedTrenBoxes;\\n    address public stabilityPool;\\n    address public timelockAddress;\\n    address public treasuryAddress;\\n    address public trenBoxManager;\\n    address public trenBoxManagerOperations;\\n    address public trenBoxStorage;\\n\\n    bool public isAddressSetupInitialized;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[33] private __gap; // Goerli uses 47; Arbitrum uses 33\\n\\n    error ConfigurableAddresses__SetupIsInitialized();\\n    error ConfigurableAddresses__ZeroAddresses(uint256 position, address address_);\\n    error ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n    error ConfigurableAddresses__TRENStakingZeroAddress();\\n    error ConfigurableAddresses__LengthMismatch();\\n\\n    // Dependency setters\\n    // -----------------------------------------------------------------------------------------------\\n\\n    function setAddresses(address[] calldata _addresses) external onlyOwner {\\n        if (isAddressSetupInitialized) {\\n            revert ConfigurableAddresses__SetupIsInitialized();\\n        }\\n        if (_addresses.length != 13) {\\n            revert ConfigurableAddresses__LengthMismatch();\\n        }\\n\\n        for (uint256 i = 0; i < 13;) {\\n            if (_addresses[i] == address(0)) {\\n                revert ConfigurableAddresses__ZeroAddresses(i, _addresses[i]);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        adminContract = _addresses[0];\\n        borrowerOperations = _addresses[1];\\n        debtToken = _addresses[2];\\n        feeCollector = _addresses[3];\\n        flashLoanAddress = _addresses[4];\\n        priceFeed = _addresses[5];\\n        sortedTrenBoxes = _addresses[6];\\n        stabilityPool = _addresses[7];\\n        timelockAddress = _addresses[8];\\n        treasuryAddress = _addresses[9];\\n        trenBoxManager = _addresses[10];\\n        trenBoxManagerOperations = _addresses[11];\\n        trenBoxStorage = _addresses[12];\\n\\n        isAddressSetupInitialized = true;\\n    }\\n\\n    function setCommunityIssuance(address _communityIssuance) public onlyOwner {\\n        if (_communityIssuance == address(0)) {\\n            revert ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n        }\\n        communityIssuance = _communityIssuance;\\n    }\\n\\n    function setTRENStaking(address _trenStaking) public onlyOwner {\\n        if (_trenStaking == address(0)) {\\n            revert ConfigurableAddresses__TRENStakingZeroAddress();\\n        }\\n        trenStaking = _trenStaking;\\n    }\\n}\\n\",\"keccak256\":\"0x20983a5ba6e289bbbb95aeba34057989e87c0818237897c712af27aa8f2c24a4\",\"license\":\"MIT\"},\"contracts/Interfaces/ISortedTrenBoxes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\n/**\\n * @title ISortedTrenBoxes\\n * @notice Defines the basic interface for SortedTrenBoxes contract.\\n */\\ninterface ISortedTrenBoxes {\\n    // --- Structs ---\\n\\n    /**\\n     * @dev Struct for storing Node information.\\n     * @param exists The existence indicator.\\n     * @param nextId The Id of next Node (smaller NICR) in the list.\\n     * @param prevId The Id of previous Node (larger NICR) in the list.\\n     */\\n    struct Node {\\n        bool exists;\\n        address nextId;\\n        address prevId;\\n    }\\n\\n    /**\\n     * @dev Struct for storing Node list.\\n     * @param head The head of the list. Also the Node in the list with the largest NICR.\\n     * @param tail The tail of the list. Also the Node in the list with the smallest NICR.\\n     * @param size The current size of the list.\\n     * @param nodes The mapping from depositor address to its Node in the list.\\n     */\\n    struct TrenBoxesList {\\n        address head;\\n        address tail;\\n        uint256 size;\\n        mapping(address depositor => Node node) nodes;\\n    }\\n\\n    // --- Events ---\\n\\n    /**\\n     * @dev Emitted when the new Node is added to the list.\\n     * @param _asset The address of collateral asset.\\n     * @param _id The new Node's id.\\n     * @param _NICR The new Node's NICR.\\n     */\\n    event NodeAdded(address indexed _asset, address _id, uint256 _NICR);\\n\\n    /**\\n     * @dev Emitted when a Node is removed from the list.\\n     * @param _asset The address of collateral asset.\\n     * @param _id The Node's id.\\n     */\\n    event NodeRemoved(address indexed _asset, address _id);\\n\\n    // --- Errors ---\\n\\n    /// @dev Error emitted when the list does not contain the specific Node.\\n    error SortedTrenBoxes__ListDoesNotContainNode();\\n\\n    /// @dev Error emitted when the list already contains the specific Node.\\n    error SortedTrenBoxes__ListAlreadyContainsNode();\\n\\n    /// @dev Error emitted when the specific Node's id is zero.\\n    error SortedTrenBoxes__IdCannotBeZeroAddress();\\n\\n    /// @dev Error emitted when the specific Node's NICR is zero.\\n    error SortedTrenBoxes__NICRMustBeGreaterThanZero();\\n\\n    /// @dev Error emitted when the caller is not TrenBoxManager contract.\\n    error SortedTrenBoxes__CallerMustBeTrenBoxManager();\\n\\n    /// @dev Error emitted when the caller is neither BorrowerOperations nor\\n    /// TrenBoxManager contract.\\n    error SortedTrenBoxes__CallerMustBeBorrowerOperationsOrTrenBoxManager();\\n\\n    // --- Functions ---\\n\\n    /**\\n     * @notice Adds a new Node to the list.\\n     * @param _asset The address of collateral asset.\\n     * @param _id The Node's id.\\n     * @param _NICR The Node's NICR.\\n     * @param _prevId The Id of previous node for the insert position.\\n     * @param _nextId The Id of next node for the insert position.\\n     */\\n    function insert(\\n        address _asset,\\n        address _id,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external;\\n\\n    /**\\n     * @notice Removes a Node from the list.\\n     * @param _asset The address of collateral asset.\\n     * @param _id The Node's id.\\n     */\\n    function remove(address _asset, address _id) external;\\n\\n    /**\\n     * @notice Reinserts the Node at a new position based on its new NICR.\\n     * @param _asset The address of collateral asset.\\n     * @param _id The Node's id.\\n     * @param _newNICR The Node's new NICR.\\n     * @param _prevId The Id of previous Node for the new insert position.\\n     * @param _nextId The Id of next Node for the new insert position.\\n     */\\n    function reInsert(\\n        address _asset,\\n        address _id,\\n        uint256 _newNICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external;\\n\\n    /**\\n     * @notice Checks if the list contains a Node.\\n     * @param _asset The address of collateral asset.\\n     * @param _id The Node's id.\\n     */\\n    function contains(address _asset, address _id) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if the list is empty.\\n     * @param _asset The address of collateral asset.\\n     */\\n    function isEmpty(address _asset) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the current size of the list.\\n     * @param _asset The address of collateral asset.\\n     */\\n    function getSize(address _asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the first Node (with the largest NICR) in the list.\\n     * @param _asset The address of collateral asset.\\n     */\\n    function getFirst(address _asset) external view returns (address);\\n\\n    /**\\n     * @notice Returns the last Node (with the smallest NICR) in the list.\\n     * @param _asset The address of collateral asset.\\n     */\\n    function getLast(address _asset) external view returns (address);\\n\\n    /**\\n     * @notice Returns the next Node (with a smaller NICR) in the list for\\n     * a given Node.\\n     * @param _asset The address of collateral asset.\\n     * @param _id The Node's id.\\n     */\\n    function getNext(address _asset, address _id) external view returns (address);\\n\\n    /**\\n     * @notice Returns the previous Node (with a larger NICR) in the list for\\n     * a given Node.\\n     * @param _asset The address of collateral asset.\\n     * @param _id The Node's id.\\n     */\\n    function getPrev(address _asset, address _id) external view returns (address);\\n\\n    /**\\n     * @notice Checks if a pair of Nodes is a valid insertion point for\\n     * a new Node with the given NICR.\\n     * @param _asset The address of collateral asset.\\n     * @param _NICR The Node's NICR.\\n     * @param _prevId The Id of previous Node for the insert position.\\n     * @param _nextId The Id of next Node for the insert position.\\n     */\\n    function validInsertPosition(\\n        address _asset,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Finds the insert position for a new Node with the given NICR.\\n     * @param _asset The address of collateral asset.\\n     * @param _NICR The Node's NICR.\\n     * @param _prevId The Id of previous node for the insert position.\\n     * @param _nextId The Id of next node for the insert position.\\n     */\\n    function findInsertPosition(\\n        address _asset,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external\\n        view\\n        returns (address, address);\\n}\\n\",\"keccak256\":\"0xcc9aeb5711a072e98613e2431de91b5b8efdd30ee33603d0fd9fdfe790cbc67c\",\"license\":\"MIT\"},\"contracts/Interfaces/ITrenBoxManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\n/**\\n * @title ITrenBoxManager\\n * @notice Defines the basic interface for TrenBoxManager contract.\\n */\\ninterface ITrenBoxManager {\\n    // Enums\\n    // ------------------------------------------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Enum for storing TrenBox status.\\n     * @param nonExistent The non-existence status .\\n     * @param active The active status.\\n     * @param closedByOwner The closed status by owner.\\n     * @param closedByLiquidation The closed status by liquidation.\\n     * @param closedByRedemption The closed status by redemption.\\n     * @param closedByRedistribution The closed status by redistribution.\\n     */\\n    enum Status {\\n        nonExistent,\\n        active,\\n        closedByOwner,\\n        closedByLiquidation,\\n        closedByRedemption,\\n        closedByRedistribution\\n    }\\n\\n    /**\\n     * @dev Enum for storing operation type by TrenBoxManagerOperations contract.\\n     * @param applyPendingRewards The operation that adds pending rewards to the TrenBox.\\n     * @param liquidateInNormalMode The operation that closes the TrenBox by liquidation\\n     * under normal mode.\\n     * @param liquidateInRecoveryMode The operation that closes the TrenBox by liquidation\\n     * under recovery mode.\\n     * @param redeemCollateral The operation that redeems the collateral by redemption.\\n     * @param redistributeCollateral The operation that closes the TrenBox by redistribution.\\n     */\\n    enum TrenBoxManagerOperation {\\n        applyPendingRewards,\\n        liquidateInNormalMode,\\n        liquidateInRecoveryMode,\\n        redeemCollateral,\\n        redistributeCollateral\\n    }\\n\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Struct for storing TrenBox information.\\n     * @param debt The debt token amount.\\n     * @param coll The collateral amount.\\n     * @param stake The stake amount.\\n     * @param status The current status.\\n     * @param arrayIndex The index in the owner array.\\n     */\\n    struct TrenBox {\\n        uint256 debt;\\n        uint256 coll;\\n        uint256 stake;\\n        Status status;\\n        uint128 arrayIndex;\\n    }\\n\\n    /**\\n     * @dev Struct for storing the collateral and debt token snapshots for a given active TrenBox.\\n     * @param asset The snapshot of collateral asset.\\n     * @param debt The snapshot of debt token.\\n     */\\n    struct RewardSnapshot {\\n        uint256 asset;\\n        uint256 debt;\\n    }\\n\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Emitted when the base rate is updated by redemption.\\n     * @param _asset The address of collateral asset.\\n     * @param _baseRate The new base rate.\\n     */\\n    event BaseRateUpdated(address indexed _asset, uint256 _baseRate);\\n\\n    /**\\n     * @dev Emitted when the timestamp of last fee operation is updated.\\n     * @param _asset The address of collateral asset.\\n     * @param _lastFeeOpTime The timestamp of latest fee operation.\\n     */\\n    event LastFeeOpTimeUpdated(address indexed _asset, uint256 _lastFeeOpTime);\\n\\n    /**\\n     * @dev Emitted when the total staked amount for a specific collateral is updated.\\n     * @param _asset The address of collateral asset.\\n     * @param _newTotalStakes The new total staked amount.\\n     */\\n    event TotalStakesUpdated(address indexed _asset, uint256 _newTotalStakes);\\n\\n    /**\\n     * @dev Emitted when the system snapshot is updated.\\n     * @param _asset The address of collateral asset.\\n     * @param _totalStakesSnapshot The total stakes snapshot.\\n     * @param _totalCollateralSnapshot The total collateral snapshot.\\n     */\\n    event SystemSnapshotsUpdated(\\n        address indexed _asset, uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot\\n    );\\n\\n    /**\\n     * @dev Emitted when the accumulated liquidation rewards per unit staked are updated.\\n     * @param _asset The address of collateral asset.\\n     * @param _L_Coll The liquidated collateral.\\n     * @param _L_Debt The liquidated debt.\\n     */\\n    event LTermsUpdated(address indexed _asset, uint256 _L_Coll, uint256 _L_Debt);\\n\\n    /**\\n     * @dev Emitted when the reward snapshot is updated.\\n     * @param _asset The address of collateral asset.\\n     * @param _L_Coll The liquidated collateral.\\n     * @param _L_Debt The liquidated debt.\\n     */\\n    event TrenBoxSnapshotsUpdated(address indexed _asset, uint256 _L_Coll, uint256 _L_Debt);\\n\\n    /**\\n     * @dev Emitted when the owner of TrenBox is removed in owners array.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     * @param _newIndex The new array index.\\n     */\\n    event TrenBoxIndexUpdated(address indexed _asset, address _borrower, uint256 _newIndex);\\n\\n    /**\\n     * @dev Emitted when the specific TrenBox is updated.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     * @param _debt The new debt amount.\\n     * @param _coll The new collateral amount.\\n     * @param _stake The new stake amount.\\n     * @param _operation The operation type.\\n     */\\n    event TrenBoxUpdated(\\n        address indexed _asset,\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 _stake,\\n        TrenBoxManagerOperation _operation\\n    );\\n\\n    // Custom Errors\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    /// @dev Error emitted when the redemption fee is bigger than the drawn amount.\\n    error TrenBoxManager__FeeBiggerThanAssetDraw();\\n\\n    /// @dev Error emitted when there is only one or zero TrenBox.\\n    error TrenBoxManager__OnlyOneTrenBox();\\n\\n    /// @dev Error emitted when the caller is not TrenBoxManagerOperations contract.\\n    error TrenBoxManager__OnlyTrenBoxManagerOperations();\\n\\n    /// @dev Error emitted when the caller is not BorrowerOperations contract.\\n    error TrenBoxManager__OnlyBorrowerOperations();\\n\\n    /// @dev Error emitted when the caller is neither TrenBoxManagerOperations\\n    /// nor BorrowerOperations.\\n    error TrenBoxManager__OnlyTrenBoxManagerOperationsOrBorrowerOperations();\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    /**\\n     * @notice Returns whether it is the first redemption for a specific borrower.\\n     * @param _asset The address of collateral asset.\\n     * @param _firstRedemptionHint The borrower address to check.\\n     * @param _price The price of collateral asset.\\n     */\\n    function isValidFirstRedemptionHint(\\n        address _asset,\\n        address _firstRedemptionHint,\\n        uint256 _price\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Returns the nominal collateral ratio (ICR) of a given TrenBox without the price.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     */\\n    function getNominalICR(address _asset, address _borrower) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the current collateral ratio (ICR) of a given TrenBox.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     * @param _price The price of collateral asset.\\n     */\\n    function getCurrentICR(\\n        address _asset,\\n        address _borrower,\\n        uint256 _price\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the borrower's pending accumulated collateral reward\\n     * earned by their stake.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     */\\n    function getPendingAssetReward(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the borrower's pending accumulated debt token reward\\n     * earned by their stake.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     */\\n    function getPendingDebtTokenReward(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns whether the borrower has pending rewards.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     */\\n    function hasPendingRewards(address _asset, address _borrower) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the borrower's entire debt and collateral balances\\n     * with pending rewards.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     */\\n    function getEntireDebtAndColl(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (uint256 debt, uint256 coll, uint256 pendingDebtReward, uint256 pendingCollReward);\\n\\n    /**\\n     * @notice Returns whether the specific TrenBox is active or not.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     */\\n    function isTrenBoxActive(address _asset, address _borrower) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the total collateral ratio for a specific collaterl asset.\\n     * @param _asset The address of collateral asset.\\n     * @param _price The price of collateral asset.\\n     */\\n    function getTCR(address _asset, uint256 _price) external view returns (uint256);\\n\\n    /**\\n     * @notice Checks whether the current mode is Recovery Mode or not.\\n     * @param _asset The address of collateral asset.\\n     * @param _price The price of collateral asset.\\n     */\\n    function checkRecoveryMode(address _asset, uint256 _price) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the borrowing fee rate for a specific collateral asset.\\n     * @param _asset The address of collateral asset.\\n     */\\n    function getBorrowingRate(address _asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the borrowing fee amount for a given debt amount.\\n     * @param _asset The address of collateral asset.\\n     * @param _debtTokenAmount The amount of debt tokens to borrow.\\n     */\\n    function getBorrowingFee(\\n        address _asset,\\n        uint256 _debtTokenAmount\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the redemption fee amount for a given collateral amount.\\n     * @param _asset The address of collateral asset.\\n     * @param _assetDraw The amount of collateral asset to draw.\\n     */\\n    function getRedemptionFee(address _asset, uint256 _assetDraw) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the redemption fee amount with decay for a given collateral amount.\\n     * @param _asset The address of collateral asset.\\n     * @param _assetDraw The amount of collateral asset to draw.\\n     */\\n    function getRedemptionFeeWithDecay(\\n        address _asset,\\n        uint256 _assetDraw\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the redemption rate for a specific collateral asset.\\n     * @param _asset The address of collateral asset.\\n     */\\n    function getRedemptionRate(address _asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the redemption rate with decay for a specific collateral asset.\\n     * @param _asset The address of collateral asset.\\n     */\\n    function getRedemptionRateWithDecay(address _asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the TrenBox owner based on array index.\\n     * @param _asset The address of collateral asset.\\n     * @param _index The array index.\\n     */\\n    function getTrenBoxFromTrenBoxOwnersArray(\\n        address _asset,\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Returns the net debt amount excluded gas compensation.\\n     * @param _asset The address of collateral asset.\\n     * @param _debt The amount of debt tokens.\\n     */\\n    function getNetDebt(address _asset, uint256 _debt) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the number of TrenBox owners for a specific collateral asset.\\n     * @param _asset The address of collateral asset.\\n     */\\n    function getTrenBoxOwnersCount(address _asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the TrenBox status for a specific borrower.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     */\\n    function getTrenBoxStatus(address _asset, address _borrower) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the TrenBox stake for a specific borrower.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     */\\n    function getTrenBoxStake(address _asset, address _borrower) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the TrenBox debt balance for a specific borrower.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     */\\n    function getTrenBoxDebt(address _asset, address _borrower) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the TrenBox collateral balance for a specific borrower.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     */\\n    function getTrenBoxColl(address _asset, address _borrower) external view returns (uint256);\\n\\n    /**\\n     * @notice Adds a specific borrower to the owner array.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     */\\n    function addTrenBoxOwnerToArray(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        returns (uint256 index);\\n\\n    /**\\n     * @notice Executes full redemption for a specific TrenBox.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     * @param _newColl The new collateral balance to update.\\n     */\\n    function executeFullRedemption(address _asset, address _borrower, uint256 _newColl) external;\\n\\n    /**\\n     * @notice Executes partial redemption for a specific TrenBox.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     * @param _newDebt The new debt balance to update.\\n     * @param _newColl The new collateral balance to update.\\n     * @param _newNICR The new nominal collateral ratio.\\n     * @param _upperPartialRedemptionHint Id of previous node for the new insert position.\\n     * @param _lowerPartialRedemptionHint Id of next node for the new insert position.\\n     */\\n    function executePartialRedemption(\\n        address _asset,\\n        address _borrower,\\n        uint256 _newDebt,\\n        uint256 _newColl,\\n        uint256 _newNICR,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint\\n    )\\n        external;\\n\\n    /**\\n     * @notice Finalizes redemption for a specific TrenBox.\\n     * @param _asset The address of collateral asset.\\n     * @param _receiver The redeemer address.\\n     * @param _debtToRedeem The amount of debt tokens to redeem.\\n     * @param _assetFeeAmount The amount of redemption fee.\\n     * @param _assetRedeemedAmount The amount of redeemed collateral.\\n     */\\n    function finalizeRedemption(\\n        address _asset,\\n        address _receiver,\\n        uint256 _debtToRedeem,\\n        uint256 _assetFeeAmount,\\n        uint256 _assetRedeemedAmount\\n    )\\n        external;\\n\\n    /**\\n     * @notice Updates redemption base rate.\\n     * @param _asset The address of collateral asset.\\n     * @param _assetDrawn The amount of collateral asset to draw.\\n     * @param _price The price of collateral asset.\\n     * @param _totalDebtTokenSupply The total supply of debt tokens.\\n     */\\n    function updateBaseRateFromRedemption(\\n        address _asset,\\n        uint256 _assetDrawn,\\n        uint256 _price,\\n        uint256 _totalDebtTokenSupply\\n    )\\n        external;\\n\\n    /**\\n     * @notice Adds the pending debt and collateral rewards to the TrenBox.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     */\\n    function applyPendingRewards(address _asset, address _borrower) external;\\n\\n    /**\\n     * @notice Moves the TrenBox's pending debt and collateral rewards to active TrenBoxStorage.\\n     * @param _asset The address of collateral asset.\\n     * @param _debtTokenAmount The amount of debt tokens to move.\\n     * @param _assetAmount The amount of collateral asset to move.\\n     */\\n    function movePendingTrenBoxRewardsFromLiquidatedToActive(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        uint256 _assetAmount\\n    )\\n        external;\\n\\n    /**\\n     * @notice Updates the borrower's rewards snapshot.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     */\\n    function updateTrenBoxRewardSnapshots(address _asset, address _borrower) external;\\n\\n    /**\\n     * @notice Updates the borrower's stake based on their latest collateral.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     */\\n    function updateStakeAndTotalStakes(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Removes the borrower's stake amount from total staked amount.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     */\\n    function removeStake(address _asset, address _borrower) external;\\n\\n    /**\\n     * @notice Adds distributed collateral and debt rewards to the running totals.\\n     * @param _asset The address of collateral asset.\\n     * @param _debt The debt amount to redistribute.\\n     * @param _coll The collateral amount to redistribute.\\n     * @param _debtToOffset The debt amount to offset.\\n     * @param _collToSendToStabilityPool The collateral amount to send to the Stability Pool.\\n     */\\n    function redistributeDebtAndColl(\\n        address _asset,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 _debtToOffset,\\n        uint256 _collToSendToStabilityPool\\n    )\\n        external;\\n\\n    /**\\n     * @notice Updates system snapshot excluding collateral remainder.\\n     * @param _asset The address of collateral asset.\\n     * @param _collRemainder The collateral remainder.\\n     */\\n    function updateSystemSnapshots_excludeCollRemainder(\\n        address _asset,\\n        uint256 _collRemainder\\n    )\\n        external;\\n\\n    /**\\n     * @notice Closes a specific borrower's TrenBox.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     */\\n    function closeTrenBox(address _asset, address _borrower) external;\\n\\n    /**\\n     * @notice Closes a specific borrower's TrenBox by liquidation.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     */\\n    function closeTrenBoxLiquidation(address _asset, address _borrower) external;\\n\\n    /**\\n     * @notice Closes a specific borrower's TrenBox by redistribution.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     * @param _debtTokenGasCompensationToBurn The gas compensation to burn.\\n     */\\n    function closeTrenBoxRedistribution(\\n        address _asset,\\n        address _borrower,\\n        uint256 _debtTokenGasCompensationToBurn\\n    )\\n        external;\\n\\n    /**\\n     * @notice Sends gas compensation to the liquidator.\\n     * @param _asset The address of collateral asset.\\n     * @param _liquidator The liquidator address.\\n     * @param _debtTokenAmount The debt token amount of gas compensation.\\n     * @param _assetAmount The collateral amount of gas compensation.\\n     */\\n    function sendGasCompensation(\\n        address _asset,\\n        address _liquidator,\\n        uint256 _debtTokenAmount,\\n        uint256 _assetAmount\\n    )\\n        external;\\n\\n    /**\\n     * @notice Sets the TrenBox's status.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     * @param _num The enum status to set.\\n     */\\n    function setTrenBoxStatus(address _asset, address _borrower, uint256 _num) external;\\n\\n    /**\\n     * @notice Increases the TrenBox's collateral balance.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     * @param _collIncrease The collateral amount to increase.\\n     */\\n    function increaseTrenBoxColl(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collIncrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Decreases the TrenBox's collateral balance.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     * @param _collDecrease The collateral amount to decrease.\\n     */\\n    function decreaseTrenBoxColl(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collDecrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Increases the TrenBox's debt token balance.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     * @param _debtIncrease The debt token amount to increase.\\n     */\\n    function increaseTrenBoxDebt(\\n        address _asset,\\n        address _borrower,\\n        uint256 _debtIncrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Decreases the TrenBox's debt token balance.\\n     * @param _asset The address of collateral asset.\\n     * @param _borrower The borrower address.\\n     * @param _debtDecrease The deb token amount to decrease.\\n     */\\n    function decreaseTrenBoxDebt(\\n        address _asset,\\n        address _borrower,\\n        uint256 _debtDecrease\\n    )\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xe67079784ecef8e4da599833f39c9be7d39bc072ee0b227e2f1e45d6590b2fc5\",\"license\":\"MIT\"},\"contracts/SortedTrenBoxes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { UUPSUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport { ConfigurableAddresses } from \\\"./Dependencies/ConfigurableAddresses.sol\\\";\\n\\nimport { ISortedTrenBoxes } from \\\"./Interfaces/ISortedTrenBoxes.sol\\\";\\nimport { ITrenBoxManager } from \\\"./Interfaces/ITrenBoxManager.sol\\\";\\n\\n/**\\n * @title SortedTrenBoxes\\n * @notice A sorted doubly linked list with nodes sorted in descending order.\\n *\\n * Nodes map to active TrenBoxes in the system - the ID property is the address of a TrenBox owner.\\n * Nodes are ordered according to their current nominal individual collateral ratio (NICR),\\n * which is like the ICR but without the price, i.e., just collateral / debt.\\n *\\n * The list optionally accepts insert position hints.\\n *\\n * @dev NICRs are computed dynamically at runtime, and not stored on the Node. This is because\\n * NICRs of active TrenBoxes change dynamically as liquidation events occur.\\n *\\n * The list relies on the fact that liquidation events preserve ordering: a liquidation decreases\\n * the NICRs of all active TrenBoxes, but maintains their order.\\n * A node inserted based on current NICR will maintain the correct position,\\n * relative to it's peers, as rewards accumulate, as long as it's raw collateral and debt have not\\n * changed.\\n * Thus, Nodes remain sorted by current NICR.\\n *\\n * Nodes need only be re-inserted upon a TrenBox operation - when the owner adds or removes\\n * collateral or debt to their position.\\n *\\n * The list is a modification of the following audited SortedDoublyLinkedList:\\n * https://github.com/livepeer/protocol/blob/master/contracts/libraries/SortedDoublyLL.sol\\n *\\n * Changes made in the Gravita implementation:\\n *\\n * - Keys have been removed from nodes\\n *\\n * - Ordering checks for insertion are performed by comparing an NICR argument to the current NICR,\\n * calculated at runtime.\\n *   The list relies on the property that ordering by ICR is maintained as the ETH:USD price varies.\\n *\\n * - Public functions with parameters have been made internal to save gas, and given an external\\n * wrapper function for external access\\n */\\ncontract SortedTrenBoxes is\\n    OwnableUpgradeable,\\n    UUPSUpgradeable,\\n    ISortedTrenBoxes,\\n    ConfigurableAddresses\\n{\\n    /// @notice The contract name.\\n    string public constant NAME = \\\"SortedTrenBoxes\\\";\\n    /// @notice The mapping from collateral asset to its Node list.\\n    mapping(address collateral => TrenBoxesList orderedList) public trenBoxes;\\n\\n    // Modifiers\\n    // ------------------------------------------------------------------------------------------------------\\n\\n    modifier onlyTrenBoxManager() {\\n        if (msg.sender != trenBoxManager) {\\n            revert SortedTrenBoxes__CallerMustBeTrenBoxManager();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyBorrowerOperationsOrTrenBoxManager() {\\n        if (msg.sender != borrowerOperations && msg.sender != trenBoxManager) {\\n            revert SortedTrenBoxes__CallerMustBeBorrowerOperationsOrTrenBoxManager();\\n        }\\n        _;\\n    }\\n\\n    modifier hasNonZeroId(address _id) {\\n        if (_id == address(0)) {\\n            revert SortedTrenBoxes__IdCannotBeZeroAddress();\\n        }\\n        _;\\n    }\\n\\n    modifier hasPositiveNICR(uint256 _NICR) {\\n        if (_NICR == 0) {\\n            revert SortedTrenBoxes__NICRMustBeGreaterThanZero();\\n        }\\n        _;\\n    }\\n\\n    // Initializer\\n    // ------------------------------------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Runs all the setup logic only once.\\n     * @param initialOwner The address of initial owner.\\n     */\\n    function initialize(address initialOwner) external initializer {\\n        __Ownable_init(initialOwner);\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    // External/public functions\\n    // --------------------------------------------------------------------------------------\\n\\n    /// @inheritdoc ISortedTrenBoxes\\n    function insert(\\n        address _asset,\\n        address _id,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external\\n        override\\n        onlyBorrowerOperationsOrTrenBoxManager\\n    {\\n        _insert(_asset, _id, _NICR, _prevId, _nextId);\\n    }\\n\\n    /// @inheritdoc ISortedTrenBoxes\\n    function remove(address _asset, address _id) external override onlyTrenBoxManager {\\n        _remove(_asset, _id);\\n    }\\n\\n    /// @inheritdoc ISortedTrenBoxes\\n    function reInsert(\\n        address _asset,\\n        address _id,\\n        uint256 _newNICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external\\n        override\\n        onlyBorrowerOperationsOrTrenBoxManager\\n    {\\n        if (!contains(_asset, _id)) {\\n            revert SortedTrenBoxes__ListDoesNotContainNode();\\n        }\\n\\n        if (_newNICR == 0) {\\n            revert SortedTrenBoxes__NICRMustBeGreaterThanZero();\\n        }\\n\\n        _remove(_asset, _id);\\n        _insert(_asset, _id, _newNICR, _prevId, _nextId);\\n    }\\n\\n    /// @inheritdoc ISortedTrenBoxes\\n    function contains(address _asset, address _id) public view override returns (bool) {\\n        return trenBoxes[_asset].nodes[_id].exists;\\n    }\\n\\n    /// @inheritdoc ISortedTrenBoxes\\n    function isEmpty(address _asset) public view override returns (bool) {\\n        return trenBoxes[_asset].size == 0;\\n    }\\n\\n    /// @inheritdoc ISortedTrenBoxes\\n    function getSize(address _asset) external view override returns (uint256) {\\n        return trenBoxes[_asset].size;\\n    }\\n\\n    /// @inheritdoc ISortedTrenBoxes\\n    function getFirst(address _asset) external view override returns (address) {\\n        return trenBoxes[_asset].head;\\n    }\\n\\n    /// @inheritdoc ISortedTrenBoxes\\n    function getLast(address _asset) external view override returns (address) {\\n        return trenBoxes[_asset].tail;\\n    }\\n\\n    /// @inheritdoc ISortedTrenBoxes\\n    function getNext(address _asset, address _id) external view override returns (address) {\\n        return trenBoxes[_asset].nodes[_id].nextId;\\n    }\\n\\n    /// @inheritdoc ISortedTrenBoxes\\n    function getPrev(address _asset, address _id) external view override returns (address) {\\n        return trenBoxes[_asset].nodes[_id].prevId;\\n    }\\n\\n    /// @inheritdoc ISortedTrenBoxes\\n    function validInsertPosition(\\n        address _asset,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _validInsertPosition(_asset, _NICR, _prevId, _nextId);\\n    }\\n\\n    /// @inheritdoc ISortedTrenBoxes\\n    function findInsertPosition(\\n        address _asset,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external\\n        view\\n        override\\n        returns (address, address)\\n    {\\n        return _findInsertPosition(_asset, _NICR, _prevId, _nextId);\\n    }\\n\\n    // Internal functions\\n    // ---------------------------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Adds a new Node to the list.\\n     * @param _asset The address of collateral asset.\\n     * @param _id The Node's id.\\n     * @param _NICR The Node's NICR.\\n     * @param _prevId The Id of previous node for the insert position.\\n     * @param _nextId The Id of next node for the insert position.\\n     */\\n    function _insert(\\n        address _asset,\\n        address _id,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        internal\\n        hasNonZeroId(_id)\\n        hasPositiveNICR(_NICR)\\n    {\\n        TrenBoxesList storage assetData = trenBoxes[_asset];\\n\\n        if (_contains(assetData, _id)) {\\n            revert SortedTrenBoxes__ListAlreadyContainsNode();\\n        }\\n\\n        address prevId = _prevId;\\n        address nextId = _nextId;\\n\\n        if (!_validInsertPosition(_asset, _NICR, prevId, nextId)) {\\n            // Sender's hint was not a valid insert position\\n            // Use sender's hint to find a valid insert position\\n            (prevId, nextId) = _findInsertPosition(_asset, _NICR, prevId, nextId);\\n        }\\n\\n        Node storage node = assetData.nodes[_id];\\n        node.exists = true;\\n\\n        if (prevId == address(0) && nextId == address(0)) {\\n            // Insert as head and tail\\n            assetData.head = _id;\\n            assetData.tail = _id;\\n        } else if (prevId == address(0)) {\\n            // Insert before `prevId` as the head\\n            node.nextId = assetData.head;\\n            assetData.nodes[assetData.head].prevId = _id;\\n            assetData.head = _id;\\n        } else if (nextId == address(0)) {\\n            // Insert after `nextId` as the tail\\n            node.prevId = assetData.tail;\\n            assetData.nodes[assetData.tail].nextId = _id;\\n            assetData.tail = _id;\\n        } else {\\n            // Insert at insert position between `prevId` and `nextId`\\n            node.nextId = nextId;\\n            node.prevId = prevId;\\n            assetData.nodes[prevId].nextId = _id;\\n            assetData.nodes[nextId].prevId = _id;\\n        }\\n\\n        assetData.size = assetData.size + 1;\\n        emit NodeAdded(_asset, _id, _NICR);\\n    }\\n\\n    /**\\n     * @dev Removes a Node from the list.\\n     * @param _asset The address of collateral asset.\\n     * @param _id The Node's id.\\n     */\\n    function _remove(address _asset, address _id) internal {\\n        TrenBoxesList storage assetData = trenBoxes[_asset];\\n\\n        if (!_contains(assetData, _id)) {\\n            revert SortedTrenBoxes__ListDoesNotContainNode();\\n        }\\n\\n        Node storage node = assetData.nodes[_id];\\n        if (assetData.size > 1) {\\n            // List contains more than a single node\\n            if (_id == assetData.head) {\\n                // The removed node is the head\\n                // Set head to next node\\n                assetData.head = node.nextId;\\n                // Set prev pointer of new head to null\\n                assetData.nodes[assetData.head].prevId = address(0);\\n            } else if (_id == assetData.tail) {\\n                // The removed node is the tail\\n                // Set tail to previous node\\n                assetData.tail = node.prevId;\\n                // Set next pointer of new tail to null\\n                assetData.nodes[assetData.tail].nextId = address(0);\\n            } else {\\n                // The removed node is neither the head nor the tail\\n                // Set next pointer of previous node to the next node\\n                assetData.nodes[node.prevId].nextId = node.nextId;\\n                // Set prev pointer of next node to the previous node\\n                assetData.nodes[node.nextId].prevId = node.prevId;\\n            }\\n        } else {\\n            // List contains a single node\\n            // Set the head and tail to null\\n            assetData.head = address(0);\\n            assetData.tail = address(0);\\n        }\\n\\n        delete assetData.nodes[_id];\\n        assetData.size = assetData.size - 1;\\n        emit NodeRemoved(_asset, _id);\\n    }\\n\\n    /**\\n     * @dev Checks if the list contains a Node.\\n     * @param _dataAsset The Node list.\\n     * @param _id The Node's id.\\n     */\\n    function _contains(\\n        TrenBoxesList storage _dataAsset,\\n        address _id\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _dataAsset.nodes[_id].exists;\\n    }\\n\\n    /**\\n     * @dev Checks if a pair of Nodes is a valid insertion point for\\n     * a new Node with the given NICR.\\n     * @param _asset The address of collateral asset.\\n     * @param _NICR The Node's NICR.\\n     * @param _prevId The Id of previous Node for the insert position.\\n     * @param _nextId The Id of next Node for the insert position.\\n     */\\n    function _validInsertPosition(\\n        address _asset,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (_prevId == address(0) && _nextId == address(0)) {\\n            // `(null, null)` is a valid insert position if the list is empty\\n            return isEmpty(_asset);\\n        } else if (_prevId == address(0)) {\\n            // `(null, _nextId)` is a valid insert position if `_nextId` is the head of the list\\n            return trenBoxes[_asset].head == _nextId\\n                && _NICR >= ITrenBoxManager(trenBoxManager).getNominalICR(_asset, _nextId);\\n        } else if (_nextId == address(0)) {\\n            // `(_prevId, null)` is a valid insert position if `_prevId` is the tail of the list\\n            return trenBoxes[_asset].tail == _prevId\\n                && _NICR <= ITrenBoxManager(trenBoxManager).getNominalICR(_asset, _prevId);\\n        } else {\\n            // `(_prevId, _nextId)` is a valid insert position if they are adjacent nodes and\\n            // `_NICR` falls between the two nodes' NICRs\\n            return trenBoxes[_asset].nodes[_prevId].nextId == _nextId\\n                && ITrenBoxManager(trenBoxManager).getNominalICR(_asset, _prevId) >= _NICR\\n                && _NICR >= ITrenBoxManager(trenBoxManager).getNominalICR(_asset, _nextId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Descends the list (larger NICRs to smaller NICRs) to find a valid insert position.\\n     * @param _asset The address of collateral asset.\\n     * @param _NICR The Node's NICR.\\n     * @param _startId The Id of Node to start descending the list from.\\n     */\\n    function _descendList(\\n        address _asset,\\n        uint256 _NICR,\\n        address _startId\\n    )\\n        internal\\n        view\\n        returns (address, address)\\n    {\\n        TrenBoxesList storage assetData = trenBoxes[_asset];\\n\\n        // If `_startId` is the head, check if the insert position is before the head\\n        if (\\n            assetData.head == _startId\\n                && _NICR >= ITrenBoxManager(trenBoxManager).getNominalICR(_asset, _startId)\\n        ) {\\n            return (address(0), _startId);\\n        }\\n\\n        address prevId = _startId;\\n        address nextId = assetData.nodes[prevId].nextId;\\n\\n        // Descend the list until we reach the end or until we find a valid insert position\\n        while (prevId != address(0) && !_validInsertPosition(_asset, _NICR, prevId, nextId)) {\\n            prevId = assetData.nodes[prevId].nextId;\\n            nextId = assetData.nodes[prevId].nextId;\\n        }\\n\\n        return (prevId, nextId);\\n    }\\n\\n    /**\\n     * @dev Ascends the list (smaller NICRs to larger NICRs) to find a valid insert position\\n     * @param _asset The address of collateral asset.\\n     * @param _NICR The Node's NICR.\\n     * @param _startId The Id of Node to start ascending the list from.\\n     */\\n    function _ascendList(\\n        address _asset,\\n        uint256 _NICR,\\n        address _startId\\n    )\\n        internal\\n        view\\n        returns (address, address)\\n    {\\n        TrenBoxesList storage assetData = trenBoxes[_asset];\\n\\n        // If `_startId` is the tail, check if the insert position is after the tail\\n        if (\\n            assetData.tail == _startId\\n                && _NICR <= ITrenBoxManager(trenBoxManager).getNominalICR(_asset, _startId)\\n        ) {\\n            return (_startId, address(0));\\n        }\\n\\n        address nextId = _startId;\\n        address prevId = assetData.nodes[nextId].prevId;\\n\\n        // Ascend the list until we reach the end or until we find a valid insertion point\\n        while (nextId != address(0) && !_validInsertPosition(_asset, _NICR, prevId, nextId)) {\\n            nextId = assetData.nodes[nextId].prevId;\\n            prevId = assetData.nodes[nextId].prevId;\\n        }\\n\\n        return (prevId, nextId);\\n    }\\n\\n    /**\\n     * @dev Finds the insert position for a new Node with the given NICR.\\n     * @param _asset The address of collateral asset.\\n     * @param _NICR The Node's NICR.\\n     * @param _prevId The Id of previous node for the insert position.\\n     * @param _nextId The Id of next node for the insert position.\\n     */\\n    function _findInsertPosition(\\n        address _asset,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        internal\\n        view\\n        returns (address, address)\\n    {\\n        address prevId = _prevId;\\n        address nextId = _nextId;\\n\\n        if (prevId != address(0)) {\\n            if (\\n                !contains(_asset, prevId)\\n                    || _NICR > ITrenBoxManager(trenBoxManager).getNominalICR(_asset, prevId)\\n            ) {\\n                // `prevId` does not exist anymore or now has a smaller NICR than the given NICR\\n                prevId = address(0);\\n            }\\n        }\\n\\n        if (nextId != address(0)) {\\n            if (\\n                !contains(_asset, nextId)\\n                    || _NICR < ITrenBoxManager(trenBoxManager).getNominalICR(_asset, nextId)\\n            ) {\\n                // `nextId` does not exist anymore or now has a larger NICR than the given NICR\\n                nextId = address(0);\\n            }\\n        }\\n\\n        if (prevId == address(0) && nextId == address(0)) {\\n            // No hint - descend list starting from head\\n            return _descendList(_asset, _NICR, trenBoxes[_asset].head);\\n        } else if (prevId == address(0)) {\\n            // No `prevId` for hint - ascend list starting from `nextId`\\n            return _ascendList(_asset, _NICR, nextId);\\n        } else if (nextId == address(0)) {\\n            // No `nextId` for hint - descend list starting from `prevId`\\n            return _descendList(_asset, _NICR, prevId);\\n        } else {\\n            // Descend list starting from `prevId`\\n            return _descendList(_asset, _NICR, prevId);\\n        }\\n    }\\n\\n    function authorizeUpgrade(address newImplementation) public {\\n        _authorizeUpgrade(newImplementation);\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner { }\\n}\\n\",\"keccak256\":\"0xadd18df134a91fe368949fda72f9ad19de69e59418e8f9118890c05b4d4f3aaa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5060805161267c61003e600039600081816111ef01528181611218015261135e015261267c6000f3fe6080604052600436106102465760003560e01c80637f7c149111610139578063c4d66de8116100b6578063eceea2fb1161007a578063eceea2fb1461080d578063ed26cae81461082d578063f1c05a7e1461084d578063f2fde38b1461086d578063f8d898981461088d578063fe060733146108ad57600080fd5b8063c4d66de814610740578063c5f956af14610760578063c8564c6214610780578063cc8b21e4146107a1578063e71b8400146107c157600080fd5b8063b9571721116100fd578063b957172114610692578063bc9b5bd5146106b2578063bff365c4146106d2578063c05c5e9414610700578063c415b95c1461072057600080fd5b80637f7c14911461059c5780638da5cb5b146105bc57806395fb16bb146105f9578063a3f4df7e14610619578063ad3cb1cc1461066157600080fd5b80634f1ef286116101c7578063715018a61161018b578063715018a6146104eb578063741bef1a14610500578063760827151461052057806377553ad41461055c5780637c933c0a1461057c57600080fd5b80634f1ef2861461043c578063504f16711461044f57806352d1902d1461049657806355dafa46146104ab5780636a85d67d146104cb57600080fd5b806339ed25cd1161020e57806339ed25cd146103725780633b725b23146103925780633f84a44d146103dc5780634169467d146103fc5780634bc66f321461041c57600080fd5b806301c931001461024b578063048c661d1461026d5780630a34d4d6146102aa5780630a4314c6146102ca5780631bdb4c8d14610339575b600080fd5b34801561025757600080fd5b5061026b610266366004612311565b6108cd565b005b34801561027957600080fd5b5060095461028d906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102b657600080fd5b50600d5461028d906001600160a01b031681565b3480156102d657600080fd5b506103136102e5366004612311565b6030602052600090815260409020805460018201546002909201546001600160a01b03918216929091169083565b604080516001600160a01b039485168152939092166020840152908201526060016102a1565b34801561034557600080fd5b5061028d610354366004612311565b6001600160a01b039081166000908152603060205260409020541690565b34801561037e57600080fd5b5061028d61038d36600461232c565b61091e565b34801561039e57600080fd5b506103cc6103ad366004612311565b6001600160a01b03166000908152603060205260409020600201541590565b60405190151581526020016102a1565b3480156103e857600080fd5b50600e5461028d906001600160a01b031681565b34801561040857600080fd5b5060055461028d906001600160a01b031681565b34801561042857600080fd5b50600a5461028d906001600160a01b031681565b61026b61044a366004612375565b610955565b34801561045b57600080fd5b5061048861046a366004612311565b6001600160a01b031660009081526030602052604090206002015490565b6040519081526020016102a1565b3480156104a257600080fd5b50610488610974565b3480156104b757600080fd5b5060065461028d906001600160a01b031681565b3480156104d757600080fd5b5061026b6104e6366004612311565b610991565b3480156104f757600080fd5b5061026b6109e2565b34801561050c57600080fd5b5060075461028d906001600160a01b031681565b34801561052c57600080fd5b5061028d61053b366004612311565b6001600160a01b039081166000908152603060205260409020600101541690565b34801561056857600080fd5b5060015461028d906001600160a01b031681565b34801561058857600080fd5b5061026b610597366004612437565b6109f6565b3480156105a857600080fd5b5061026b6105b736600461232c565b610a4e565b3480156105c857600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031661028d565b34801561060557600080fd5b5060025461028d906001600160a01b031681565b34801561062557600080fd5b506106546040518060400160405280600f81526020016e536f727465645472656e426f78657360881b81525081565b6040516102a191906124b9565b34801561066d57600080fd5b50610654604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561069e57600080fd5b5061026b6106ad3660046124ec565b610a83565b3480156106be57600080fd5b5061026b6106cd366004612437565b610f2c565b3480156106de57600080fd5b506106f26106ed366004612561565b610fc2565b6040516102a19291906125ae565b34801561070c57600080fd5b5060005461028d906001600160a01b031681565b34801561072c57600080fd5b5060045461028d906001600160a01b031681565b34801561074c57600080fd5b5061026b61075b366004612311565b610fdf565b34801561076c57600080fd5b50600b5461028d906001600160a01b031681565b34801561078c57600080fd5b50600e546103cc90600160a01b900460ff1681565b3480156107ad57600080fd5b5060085461028d906001600160a01b031681565b3480156107cd57600080fd5b5061028d6107dc36600461232c565b6001600160a01b03918216600090815260306020908152604080832093851683526003909301905220600101541690565b34801561081957600080fd5b506103cc610828366004612561565b6110f7565b34801561083957600080fd5b506103cc61084836600461232c565b611110565b34801561085957600080fd5b50600c5461028d906001600160a01b031681565b34801561087957600080fd5b5061026b610888366004612311565b611142565b34801561089957600080fd5b5060035461028d906001600160a01b031681565b3480156108b957600080fd5b5061026b6108c8366004612311565b611180565b6108d5611189565b6001600160a01b0381166108fc576040516385d3330760e01b815260040160405180910390fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03808316600090815260306020908152604080832085851684526003019091529020546101009004165b92915050565b61095d6111e4565b61096682611289565b6109708282611291565b5050565b600061097e611353565b5060008051602061265083398151915290565b610999611189565b6001600160a01b0381166109c05760405163706ebc6560e11b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6109ea611189565b6109f4600061139c565b565b6001546001600160a01b03163314801590610a1c5750600c546001600160a01b03163314155b15610a3a57604051631028aee160e31b815260040160405180910390fd5b610a47858585858561140d565b5050505050565b600c546001600160a01b03163314610a7957604051631613adff60e21b815260040160405180910390fd5b6109708282611766565b610a8b611189565b600e54600160a01b900460ff1615610ab557604051625f22e960e41b815260040160405180910390fd5b600d8114610ad657604051633f5a111d60e21b815260040160405180910390fd5b60005b600d811015610b79576000838383818110610af657610af66125c8565b9050602002016020810190610b0b9190612311565b6001600160a01b031603610b715780838383818110610b2c57610b2c6125c8565b9050602002016020810190610b419190612311565b604051630d9d339f60e01b815260048101929092526001600160a01b031660248201526044015b60405180910390fd5b600101610ad9565b5081816000818110610b8d57610b8d6125c8565b9050602002016020810190610ba29190612311565b600080546001600160a01b0319166001600160a01b039290921691909117905581816001818110610bd557610bd56125c8565b9050602002016020810190610bea9190612311565b600180546001600160a01b0319166001600160a01b039290921691909117905581816002818110610c1d57610c1d6125c8565b9050602002016020810190610c329190612311565b600380546001600160a01b0319166001600160a01b039290921691909117815582908290818110610c6557610c656125c8565b9050602002016020810190610c7a9190612311565b600480546001600160a01b0319166001600160a01b039290921691909117815582908290818110610cad57610cad6125c8565b9050602002016020810190610cc29190612311565b600580546001600160a01b0319166001600160a01b039290921691909117815582908290818110610cf557610cf56125c8565b9050602002016020810190610d0a9190612311565b600780546001600160a01b0319166001600160a01b039290921691909117905581816006818110610d3d57610d3d6125c8565b9050602002016020810190610d529190612311565b600880546001600160a01b0319166001600160a01b039290921691909117905581816007818110610d8557610d856125c8565b9050602002016020810190610d9a9190612311565b600980546001600160a01b0319166001600160a01b039290921691909117905581816008818110610dcd57610dcd6125c8565b9050602002016020810190610de29190612311565b600a80546001600160a01b0319166001600160a01b039290921691909117905581816009818110610e1557610e156125c8565b9050602002016020810190610e2a9190612311565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a818110610e5d57610e5d6125c8565b9050602002016020810190610e729190612311565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b818110610ea557610ea56125c8565b9050602002016020810190610eba9190612311565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c818110610eed57610eed6125c8565b9050602002016020810190610f029190612311565b600e80546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b6001546001600160a01b03163314801590610f525750600c546001600160a01b03163314155b15610f7057604051631028aee160e31b815260040160405180910390fd5b610f7a8585611110565b610f975760405163149f8b6360e31b815260040160405180910390fd5b82600003610fb85760405163d58a878560e01b815260040160405180910390fd5b610a3a8585611766565b600080610fd1868686866119b1565b915091505b94509492505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156110255750825b905060008267ffffffffffffffff1660011480156110425750303b155b905081158015611050575080155b1561106e5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561109857845460ff60401b1916600160401b1785555b6110a186611b88565b6110a9611b99565b83156110ef57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b600061110585858585611ba1565b90505b949350505050565b6001600160a01b0391821660009081526030602090815260408083209390941682526003909201909152205460ff1690565b61114a611189565b6001600160a01b03811661117457604051631e4fbdf760e01b815260006004820152602401610b68565b61117d8161139c565b50565b61117d81611289565b336111bb7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146109f45760405163118cdaa760e01b8152336004820152602401610b68565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061126b57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661125f600080516020612650833981519152546001600160a01b031690565b6001600160a01b031614155b156109f45760405163703e46dd60e11b815260040160405180910390fd5b61117d611189565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156112eb575060408051601f3d908101601f191682019092526112e8918101906125de565b60015b61131357604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610b68565b600080516020612650833981519152811461134457604051632a87526960e21b815260048101829052602401610b68565b61134e8383611e3d565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109f45760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b836001600160a01b03811661143557604051632b1156d160e21b815260040160405180910390fd5b83806000036114575760405163d58a878560e01b815260040160405180910390fd5b6001600160a01b038781166000908152603060209081526040808320938a1683526003840190915290205460ff16156114a357604051633f87282f60e01b815260040160405180910390fd5b84846114b18a898484611ba1565b6114c7576114c18a8984846119b1565b90925090505b6001600160a01b03808a1660009081526003850160205260409020805460ff1916600117815590831615801561150457506001600160a01b038216155b156115365783546001600160a01b038b166001600160a01b0319918216811786556001860180549092161790556116fe565b6001600160a01b03831661159e5783548154610100600160a81b0319166101006001600160a01b0392831602178255845481166000908152600386016020526040902060010180546001600160a01b0319908116928d169283179091558554161784556116fe565b6001600160a01b03821661160d576001848101805491830180546001600160a01b039384166001600160a01b03199182161790915581548316600090815260038801602052604090208054610100600160a81b031916610100948f1694850217905581541690911790556116fe565b818160000160016101000a8154816001600160a01b0302191690836001600160a01b03160217905550828160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555089846003016000856001600160a01b03166001600160a01b0316815260200190815260200160002060000160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555089846003016000846001600160a01b03166001600160a01b0316815260200190815260200160002060010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b600284015461170e90600161260d565b6002850155604080516001600160a01b038c81168252602082018c90528d16917fa74a9cd584cc27d44e7f746f6715fae75b600cc5eb8f85a95752788d6b4547a5910160405180910390a25050505050505050505050565b6001600160a01b03828116600090815260306020908152604080832093851683526003840190915290205460ff166117b15760405163149f8b6360e31b815260040160405180910390fd5b6001600160a01b038216600090815260038201602052604090206002820154600110156119005781546001600160a01b039081169084160361182f57805482546101009091046001600160a01b03166001600160a01b031991821681178455600090815260038401602052604090206001018054909116905561191c565b60018201546001600160a01b03908116908416036118905760018082015490830180546001600160a01b0319166001600160a01b039092169182179055600090815260038301602052604090208054610100600160a81b031916905561191c565b8054600180830180546001600160a01b03908116600090815260038701602052604080822080546101009788900485168802610100600160a81b03199091161790559254865495909504821681529190912090910180546001600160a01b0319169290911691909117905561191c565b81546001600160a01b0319908116835560018301805490911690555b6001600160a01b0383166000908152600383016020526040902080546001600160a81b0319168155600190810180546001600160a01b031916905560028301546119669190612620565b60028301556040516001600160a01b0384811682528516907f202321eaea3aa2b5e1e2ef1dfd98a9d6ba8c90e293f5dc2755b32eb921a477979060200160405180910390a250505050565b60008083836001600160a01b03821615611a56576119cf8883611110565b1580611a4c5750600c546040516390ec230160e01b81526001600160a01b03909116906390ec230190611a08908b9086906004016125ae565b602060405180830381865afa158015611a25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4991906125de565b87115b15611a5657600091505b6001600160a01b03811615611af557611a6f8882611110565b1580611aec5750600c546040516390ec230160e01b81526001600160a01b03909116906390ec230190611aa8908b9085906004016125ae565b602060405180830381865afa158015611ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae991906125de565b87105b15611af5575060005b6001600160a01b038216158015611b1357506001600160a01b038116155b15611b4b576001600160a01b03808916600090815260306020526040902054611b40918a918a9116611e93565b935093505050610fd6565b6001600160a01b038216611b6457611b40888883611fdd565b6001600160a01b038116611b7d57611b40888884611e93565b611b40888884611e93565b611b90612122565b61117d8161216b565b6109f4612122565b60006001600160a01b038316158015611bc157506001600160a01b038216155b15611beb576001600160a01b038516600090815260306020526040902060020154155b9050611108565b6001600160a01b038316611c9d576001600160a01b038581166000908152603060205260409020548116908316148015611be45750600c546040516390ec230160e01b81526001600160a01b03909116906390ec230190611c5290889086906004016125ae565b602060405180830381865afa158015611c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9391906125de565b8410159050611108565b6001600160a01b038216611d52576001600160a01b038581166000908152603060205260409020600101548116908416148015611be45750600c546040516390ec230160e01b81526001600160a01b03909116906390ec230190611d0790889087906004016125ae565b602060405180830381865afa158015611d24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4891906125de565b8411159050611108565b6001600160a01b038581166000908152603060209081526040808320878516845260030190915290205461010090048116908316148015611e045750600c546040516390ec230160e01b815285916001600160a01b0316906390ec230190611dc090899088906004016125ae565b602060405180830381865afa158015611ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0191906125de565b10155b8015611be45750600c546040516390ec230160e01b81526001600160a01b03909116906390ec230190611c5290889086906004016125ae565b611e4682612173565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611e8b5761134e82826121d8565b61097061224e565b6001600160a01b0380841660009081526030602052604081208054919283928116908516148015611f365750600c546040516390ec230160e01b81526001600160a01b03909116906390ec230190611ef190899088906004016125ae565b602060405180830381865afa158015611f0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3291906125de565b8510155b15611f48576000849250925050611fd5565b6001600160a01b0380851660009081526003830160205260409020548591610100909104165b6001600160a01b03821615801590611f8f5750611f8d88888484611ba1565b155b15611fce57506001600160a01b039081166000908152600383016020526040808220546101009081900484168084529190922054909291900416611f6e565b9093509150505b935093915050565b6001600160a01b03808416600090815260306020526040812060018101549192839281169085161480156120835750600c546040516390ec230160e01b81526001600160a01b03909116906390ec23019061203e90899088906004016125ae565b602060405180830381865afa15801561205b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207f91906125de565b8511155b15612095578360009250925050611fd5565b6001600160a01b0380851660009081526003830160205260409020600101548591165b6001600160a01b038216158015906120d957506120d788888385611ba1565b155b1561211657506001600160a01b039081166000908152600383016020526040808220600190810154841680845291909220909101549091166120b8565b97909650945050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166109f457604051631afcd79f60e31b815260040160405180910390fd5b61114a612122565b806001600160a01b03163b6000036121a957604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610b68565b60008051602061265083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516121f59190612633565b600060405180830381855af49150503d8060008114612230576040519150601f19603f3d011682016040523d82523d6000602084013e612235565b606091505b509150915061224585838361226d565b95945050505050565b34156109f45760405163b398979f60e01b815260040160405180910390fd5b6060826122825761227d826122cc565b6122c5565b815115801561229957506001600160a01b0384163b155b156122c257604051639996b31560e01b81526001600160a01b0385166004820152602401610b68565b50805b9392505050565b8051156122dc5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b038116811461230c57600080fd5b919050565b60006020828403121561232357600080fd5b6122c5826122f5565b6000806040838503121561233f57600080fd5b612348836122f5565b9150612356602084016122f5565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561238857600080fd5b612391836122f5565b9150602083013567ffffffffffffffff808211156123ae57600080fd5b818501915085601f8301126123c257600080fd5b8135818111156123d4576123d461235f565b604051601f8201601f19908116603f011681019083821181831017156123fc576123fc61235f565b8160405282815288602084870101111561241557600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080600080600060a0868803121561244f57600080fd5b612458866122f5565b9450612466602087016122f5565b93506040860135925061247b606087016122f5565b9150612489608087016122f5565b90509295509295909350565b60005b838110156124b0578181015183820152602001612498565b50506000910152565b60208152600082518060208401526124d8816040850160208701612495565b601f01601f19169190910160400192915050565b600080602083850312156124ff57600080fd5b823567ffffffffffffffff8082111561251757600080fd5b818501915085601f83011261252b57600080fd5b81358181111561253a57600080fd5b8660208260051b850101111561254f57600080fd5b60209290920196919550909350505050565b6000806000806080858703121561257757600080fd5b612580856122f5565b935060208501359250612595604086016122f5565b91506125a3606086016122f5565b905092959194509250565b6001600160a01b0392831681529116602082015260400190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156125f057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561094f5761094f6125f7565b8181038181111561094f5761094f6125f7565b60008251612645818460208701612495565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca164736f6c6343000817000a",
  "deployedBytecode": "",
  "devdoc": {
    "details": "NICRs are computed dynamically at runtime, and not stored on the Node. This is because NICRs of active TrenBoxes change dynamically as liquidation events occur. The list relies on the fact that liquidation events preserve ordering: a liquidation decreases the NICRs of all active TrenBoxes, but maintains their order. A node inserted based on current NICR will maintain the correct position, relative to it's peers, as rewards accumulate, as long as it's raw collateral and debt have not changed. Thus, Nodes remain sorted by current NICR. Nodes need only be re-inserted upon a TrenBox operation - when the owner adds or removes collateral or debt to their position. The list is a modification of the following audited SortedDoublyLinkedList: https://github.com/livepeer/protocol/blob/master/contracts/libraries/SortedDoublyLL.sol Changes made in the Gravita implementation: - Keys have been removed from nodes - Ordering checks for insertion are performed by comparing an NICR argument to the current NICR, calculated at runtime.   The list relies on the property that ordering by ICR is maintained as the ETH:USD price varies. - Public functions with parameters have been made internal to save gas, and given an external wrapper function for external access",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SortedTrenBoxes__CallerMustBeBorrowerOperationsOrTrenBoxManager()": [
        {
          "details": "Error emitted when the caller is neither BorrowerOperations nor TrenBoxManager contract."
        }
      ],
      "SortedTrenBoxes__CallerMustBeTrenBoxManager()": [
        {
          "details": "Error emitted when the caller is not TrenBoxManager contract."
        }
      ],
      "SortedTrenBoxes__IdCannotBeZeroAddress()": [
        {
          "details": "Error emitted when the specific Node's id is zero."
        }
      ],
      "SortedTrenBoxes__ListAlreadyContainsNode()": [
        {
          "details": "Error emitted when the list already contains the specific Node."
        }
      ],
      "SortedTrenBoxes__ListDoesNotContainNode()": [
        {
          "details": "Error emitted when the list does not contain the specific Node."
        }
      ],
      "SortedTrenBoxes__NICRMustBeGreaterThanZero()": [
        {
          "details": "Error emitted when the specific Node's NICR is zero."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "NodeAdded(address,address,uint256)": {
        "details": "Emitted when the new Node is added to the list.",
        "params": {
          "_NICR": "The new Node's NICR.",
          "_asset": "The address of collateral asset.",
          "_id": "The new Node's id."
        }
      },
      "NodeRemoved(address,address)": {
        "details": "Emitted when a Node is removed from the list.",
        "params": {
          "_asset": "The address of collateral asset.",
          "_id": "The Node's id."
        }
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "contains(address,address)": {
        "params": {
          "_asset": "The address of collateral asset.",
          "_id": "The Node's id."
        }
      },
      "findInsertPosition(address,uint256,address,address)": {
        "params": {
          "_NICR": "The Node's NICR.",
          "_asset": "The address of collateral asset.",
          "_nextId": "The Id of next node for the insert position.",
          "_prevId": "The Id of previous node for the insert position."
        }
      },
      "getFirst(address)": {
        "params": {
          "_asset": "The address of collateral asset."
        }
      },
      "getLast(address)": {
        "params": {
          "_asset": "The address of collateral asset."
        }
      },
      "getNext(address,address)": {
        "params": {
          "_asset": "The address of collateral asset.",
          "_id": "The Node's id."
        }
      },
      "getPrev(address,address)": {
        "params": {
          "_asset": "The address of collateral asset.",
          "_id": "The Node's id."
        }
      },
      "getSize(address)": {
        "params": {
          "_asset": "The address of collateral asset."
        }
      },
      "initialize(address)": {
        "details": "Runs all the setup logic only once.",
        "params": {
          "initialOwner": "The address of initial owner."
        }
      },
      "insert(address,address,uint256,address,address)": {
        "params": {
          "_NICR": "The Node's NICR.",
          "_asset": "The address of collateral asset.",
          "_id": "The Node's id.",
          "_nextId": "The Id of next node for the insert position.",
          "_prevId": "The Id of previous node for the insert position."
        }
      },
      "isEmpty(address)": {
        "params": {
          "_asset": "The address of collateral asset."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "reInsert(address,address,uint256,address,address)": {
        "params": {
          "_asset": "The address of collateral asset.",
          "_id": "The Node's id.",
          "_newNICR": "The Node's new NICR.",
          "_nextId": "The Id of next Node for the new insert position.",
          "_prevId": "The Id of previous Node for the new insert position."
        }
      },
      "remove(address,address)": {
        "params": {
          "_asset": "The address of collateral asset.",
          "_id": "The Node's id."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "validInsertPosition(address,uint256,address,address)": {
        "params": {
          "_NICR": "The Node's NICR.",
          "_asset": "The address of collateral asset.",
          "_nextId": "The Id of next Node for the insert position.",
          "_prevId": "The Id of previous Node for the insert position."
        }
      }
    },
    "title": "SortedTrenBoxes",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "NAME()": {
        "notice": "The contract name."
      },
      "contains(address,address)": {
        "notice": "Checks if the list contains a Node."
      },
      "findInsertPosition(address,uint256,address,address)": {
        "notice": "Finds the insert position for a new Node with the given NICR."
      },
      "getFirst(address)": {
        "notice": "Returns the first Node (with the largest NICR) in the list."
      },
      "getLast(address)": {
        "notice": "Returns the last Node (with the smallest NICR) in the list."
      },
      "getNext(address,address)": {
        "notice": "Returns the next Node (with a smaller NICR) in the list for a given Node."
      },
      "getPrev(address,address)": {
        "notice": "Returns the previous Node (with a larger NICR) in the list for a given Node."
      },
      "getSize(address)": {
        "notice": "Returns the current size of the list."
      },
      "insert(address,address,uint256,address,address)": {
        "notice": "Adds a new Node to the list."
      },
      "isEmpty(address)": {
        "notice": "Checks if the list is empty."
      },
      "reInsert(address,address,uint256,address,address)": {
        "notice": "Reinserts the Node at a new position based on its new NICR."
      },
      "remove(address,address)": {
        "notice": "Removes a Node from the list."
      },
      "trenBoxes(address)": {
        "notice": "The mapping from collateral asset to its Node list."
      },
      "validInsertPosition(address,uint256,address,address)": {
        "notice": "Checks if a pair of Nodes is a valid insertion point for a new Node with the given NICR."
      }
    },
    "notice": "A sorted doubly linked list with nodes sorted in descending order. Nodes map to active TrenBoxes in the system - the ID property is the address of a TrenBox owner. Nodes are ordered according to their current nominal individual collateral ratio (NICR), which is like the ICR but without the price, i.e., just collateral / debt. The list optionally accepts insert position hints.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10105,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "adminContract",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10107,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "borrowerOperations",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10109,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "communityIssuance",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10111,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "debtToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10113,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "feeCollector",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 10115,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "flashLoanAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 10117,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "trenStaking",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 10119,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "priceFeed",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 10121,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "sortedTrenBoxes",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 10123,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 10125,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "timelockAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 10127,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 10129,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "trenBoxManager",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 10131,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "trenBoxManagerOperations",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 10133,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "trenBoxStorage",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 10135,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "isAddressSetupInitialized",
        "offset": 20,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 10140,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "__gap",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_uint256)33_storage"
      },
      {
        "astId": 16921,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "trenBoxes",
        "offset": 0,
        "slot": "48",
        "type": "t_mapping(t_address,t_struct(TrenBoxesList)13860_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)33_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[33]",
        "numberOfBytes": "1056"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Node)13847_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ISortedTrenBoxes.Node)",
        "numberOfBytes": "32",
        "value": "t_struct(Node)13847_storage"
      },
      "t_mapping(t_address,t_struct(TrenBoxesList)13860_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ISortedTrenBoxes.TrenBoxesList)",
        "numberOfBytes": "32",
        "value": "t_struct(TrenBoxesList)13860_storage"
      },
      "t_struct(Node)13847_storage": {
        "encoding": "inplace",
        "label": "struct ISortedTrenBoxes.Node",
        "members": [
          {
            "astId": 13842,
            "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13844,
            "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
            "label": "nextId",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13846,
            "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
            "label": "prevId",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TrenBoxesList)13860_storage": {
        "encoding": "inplace",
        "label": "struct ISortedTrenBoxes.TrenBoxesList",
        "members": [
          {
            "astId": 13850,
            "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
            "label": "head",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13852,
            "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
            "label": "tail",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 13854,
            "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
            "label": "size",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13859,
            "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
            "label": "nodes",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Node)13847_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}