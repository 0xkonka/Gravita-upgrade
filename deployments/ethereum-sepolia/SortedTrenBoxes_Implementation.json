{
  "address": "0x6F118BCE9cE98B2Fd7442C6Fa9945A5856D47B4D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__CommunityIssuanceZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__LengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__SetupIsInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__TRENStakingZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "address_",
          "type": "address"
        }
      ],
      "name": "ConfigurableAddresses__ZeroAddresses",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SortedTrenBoxer__ListDoesNotContainNode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SortedTrenBoxes__CallerMustBeBorrowerOperationsOrTrenBoxManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SortedTrenBoxes__CallerMustBeTrenBoxManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SortedTrenBoxes__IdCannotBeZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SortedTrenBoxes__ListAlreadyContainsNode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SortedTrenBoxes__NICRMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_id",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_NICR",
          "type": "uint256"
        }
      ],
      "name": "NodeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_id",
          "type": "address"
        }
      ],
      "name": "NodeRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "authorizeUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collSurplusPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityIssuance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_id",
          "type": "address"
        }
      ],
      "name": "contains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_NICR",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_prevId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nextId",
          "type": "address"
        }
      ],
      "name": "findInsertPosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getFirst",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getLast",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_id",
          "type": "address"
        }
      ],
      "name": "getNext",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_id",
          "type": "address"
        }
      ],
      "name": "getPrev",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_id",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_NICR",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_prevId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nextId",
          "type": "address"
        }
      ],
      "name": "insert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAddressSetupInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "isEmpty",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_id",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newNICR",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_prevId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nextId",
          "type": "address"
        }
      ],
      "name": "reInsert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_id",
          "type": "address"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_communityIssuance",
          "type": "address"
        }
      ],
      "name": "setCommunityIssuance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trenStaking",
          "type": "address"
        }
      ],
      "name": "setTRENStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTrenBoxes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManagerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "trenBoxes",
      "outputs": [
        {
          "internalType": "address",
          "name": "head",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tail",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_NICR",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_prevId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nextId",
          "type": "address"
        }
      ],
      "name": "validInsertPosition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9c9a26e0c043ad39687e71ea8f3a99798a850cccc229d2302c795444aa26d1e0",
  "receipt": {
    "to": null,
    "from": "0xf812844A1f3187F6e31336d3684FAd2dD31219E3",
    "contractAddress": "0x6F118BCE9cE98B2Fd7442C6Fa9945A5856D47B4D",
    "transactionIndex": 65,
    "gasUsed": "2253417",
    "logsBloom": "0x
    "blockHash": "0x7e6309981d9bd00ddedbede524b15c442718fd208c0ab9ad54f744708e8a8ae5",
    "transactionHash": "0x9c9a26e0c043ad39687e71ea8f3a99798a850cccc229d2302c795444aa26d1e0",
    "logs": [],
    "blockNumber": 5716924,
    "cumulativeGasUsed": "12059856",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "76f2ac0d2a40f527e6541dfc9894b953",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__CommunityIssuanceZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__SetupIsInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__TRENStakingZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"ConfigurableAddresses__ZeroAddresses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SortedTrenBoxer__ListDoesNotContainNode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SortedTrenBoxes__CallerMustBeBorrowerOperationsOrTrenBoxManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SortedTrenBoxes__CallerMustBeTrenBoxManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SortedTrenBoxes__IdCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SortedTrenBoxes__ListAlreadyContainsNode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SortedTrenBoxes__NICRMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_NICR\",\"type\":\"uint256\"}],\"name\":\"NodeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"NodeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"authorizeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collSurplusPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityIssuance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"contains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_NICR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_prevId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nextId\",\"type\":\"address\"}],\"name\":\"findInsertPosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getFirst\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getLast\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"getNext\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"getPrev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_NICR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_prevId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nextId\",\"type\":\"address\"}],\"name\":\"insert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAddressSetupInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"isEmpty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newNICR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_prevId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nextId\",\"type\":\"address\"}],\"name\":\"reInsert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityIssuance\",\"type\":\"address\"}],\"name\":\"setCommunityIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trenStaking\",\"type\":\"address\"}],\"name\":\"setTRENStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTrenBoxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManagerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"trenBoxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"head\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tail\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_NICR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_prevId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nextId\",\"type\":\"address\"}],\"name\":\"validInsertPosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SortedTrenBoxes.sol\":\"SortedTrenBoxes\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"contracts/Dependencies/ConfigurableAddresses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract ConfigurableAddresses is OwnableUpgradeable {\\n    address public activePool;\\n    address public adminContract;\\n    address public borrowerOperations;\\n    address public collSurplusPool;\\n    address public communityIssuance;\\n    address public debtToken;\\n    address public defaultPool;\\n    address public feeCollector;\\n    address public flashLoanAddress;\\n    address public gasPoolAddress;\\n    address public trenStaking;\\n    address public priceFeed;\\n    address public sortedTrenBoxes;\\n    address public stabilityPool;\\n    address public timelockAddress;\\n    address public treasuryAddress;\\n    address public trenBoxManager;\\n    address public trenBoxManagerOperations;\\n\\n    bool public isAddressSetupInitialized;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[33] private __gap; // Goerli uses 47; Arbitrum uses 33\\n\\n    error ConfigurableAddresses__SetupIsInitialized();\\n    error ConfigurableAddresses__ZeroAddresses(uint256 position, address address_);\\n    error ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n    error ConfigurableAddresses__TRENStakingZeroAddress();\\n    error ConfigurableAddresses__LengthMismatch();\\n\\n    // Dependency setters\\n    // -----------------------------------------------------------------------------------------------\\n\\n    function setAddresses(address[] calldata _addresses) external onlyOwner {\\n        if (isAddressSetupInitialized) {\\n            revert ConfigurableAddresses__SetupIsInitialized();\\n        }\\n        if (_addresses.length != 16) {\\n            revert ConfigurableAddresses__LengthMismatch();\\n        }\\n\\n        for (uint256 i = 0; i < 16; i++) {\\n            if (_addresses[i] == address(0)) {\\n                revert ConfigurableAddresses__ZeroAddresses(i, _addresses[i]);\\n            }\\n        }\\n        activePool = _addresses[0];\\n        adminContract = _addresses[1];\\n        borrowerOperations = _addresses[2];\\n        collSurplusPool = _addresses[3];\\n        debtToken = _addresses[4];\\n        defaultPool = _addresses[5];\\n        feeCollector = _addresses[6];\\n        flashLoanAddress = _addresses[7];\\n        gasPoolAddress = _addresses[8];\\n        priceFeed = _addresses[9];\\n        sortedTrenBoxes = _addresses[10];\\n        stabilityPool = _addresses[11];\\n        timelockAddress = _addresses[12];\\n        treasuryAddress = _addresses[13];\\n        trenBoxManager = _addresses[14];\\n        trenBoxManagerOperations = _addresses[15];\\n\\n        isAddressSetupInitialized = true;\\n    }\\n\\n    function setCommunityIssuance(address _communityIssuance) public onlyOwner {\\n        if (_communityIssuance == address(0)) {\\n            revert ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n        }\\n        communityIssuance = _communityIssuance;\\n    }\\n\\n    function setTRENStaking(address _trenStaking) public onlyOwner {\\n        if (_trenStaking == address(0)) {\\n            revert ConfigurableAddresses__TRENStakingZeroAddress();\\n        }\\n        trenStaking = _trenStaking;\\n    }\\n}\\n\",\"keccak256\":\"0xaf7c303784379bebf2e43e41c33c27c1309a639d360b5823240b1a8f5935b064\",\"license\":\"MIT\"},\"contracts/Interfaces/ISortedTrenBoxes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface ISortedTrenBoxes {\\n    // --- Events ---\\n\\n    event NodeAdded(address indexed _asset, address _id, uint256 _NICR);\\n    event NodeRemoved(address indexed _asset, address _id);\\n\\n    error SortedTrenBoxer__ListDoesNotContainNode();\\n    error SortedTrenBoxes__ListAlreadyContainsNode();\\n    error SortedTrenBoxes__IdCannotBeZeroAddress();\\n    error SortedTrenBoxes__NICRMustBeGreaterThanZero();\\n    error SortedTrenBoxes__CallerMustBeTrenBoxManager();\\n    error SortedTrenBoxes__CallerMustBeBorrowerOperationsOrTrenBoxManager();\\n\\n    // --- Functions ---\\n\\n    function insert(\\n        address _asset,\\n        address _id,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external;\\n\\n    function remove(address _asset, address _id) external;\\n\\n    function reInsert(\\n        address _asset,\\n        address _id,\\n        uint256 _newICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external;\\n\\n    function contains(address _asset, address _id) external view returns (bool);\\n\\n    function isEmpty(address _asset) external view returns (bool);\\n\\n    function getSize(address _asset) external view returns (uint256);\\n\\n    function getFirst(address _asset) external view returns (address);\\n\\n    function getLast(address _asset) external view returns (address);\\n\\n    function getNext(address _asset, address _id) external view returns (address);\\n\\n    function getPrev(address _asset, address _id) external view returns (address);\\n\\n    function validInsertPosition(\\n        address _asset,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    function findInsertPosition(\\n        address _asset,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external\\n        view\\n        returns (address, address);\\n}\\n\",\"keccak256\":\"0x89ac6c5c4e5e22e0a056c76168cff32ab96695bd1bca98b1cc10c7ddea7d4ffb\",\"license\":\"MIT\"},\"contracts/Interfaces/ITrenBoxManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface ITrenBoxManager {\\n    // Enums\\n    // ------------------------------------------------------------------------------------------------------------\\n\\n    enum Status {\\n        nonExistent,\\n        active,\\n        closedByOwner,\\n        closedByLiquidation,\\n        closedByRedemption\\n    }\\n\\n    enum TrenBoxManagerOperation {\\n        applyPendingRewards,\\n        liquidateInNormalMode,\\n        liquidateInRecoveryMode,\\n        redeemCollateral\\n    }\\n\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    event BaseRateUpdated(address indexed _asset, uint256 _baseRate);\\n    event LastFeeOpTimeUpdated(address indexed _asset, uint256 _lastFeeOpTime);\\n    event TotalStakesUpdated(address indexed _asset, uint256 _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        address indexed _asset, uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(address indexed _asset, uint256 _L_Coll, uint256 _L_Debt);\\n    event TrenBoxSnapshotsUpdated(address indexed _asset, uint256 _L_Coll, uint256 _L_Debt);\\n    event TrenBoxIndexUpdated(address indexed _asset, address _borrower, uint256 _newIndex);\\n\\n    event TrenBoxUpdated(\\n        address indexed _asset,\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 _stake,\\n        TrenBoxManagerOperation _operation\\n    );\\n\\n    // Custom Errors\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    error TrenBoxManager__FeeBiggerThanAssetDraw();\\n    error TrenBoxManager__OnlyOneTrenBox();\\n\\n    error TrenBoxManager__OnlyTrenBoxManagerOperations();\\n    error TrenBoxManager__OnlyBorrowerOperations();\\n    error TrenBoxManager__OnlyTrenBoxManagerOperationsOrBorrowerOperations();\\n\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    struct TrenBox {\\n        uint256 debt;\\n        uint256 coll;\\n        uint256 stake;\\n        Status status;\\n        uint128 arrayIndex;\\n    }\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    function executeFullRedemption(address _asset, address _borrower, uint256 _newColl) external;\\n\\n    function executePartialRedemption(\\n        address _asset,\\n        address _borrower,\\n        uint256 _newDebt,\\n        uint256 _newColl,\\n        uint256 _newNICR,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint\\n    )\\n        external;\\n\\n    function getTrenBoxOwnersCount(address _asset) external view returns (uint256);\\n\\n    function getTrenBoxFromTrenBoxOwnersArray(\\n        address _asset,\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (address);\\n\\n    function getNominalICR(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getCurrentICR(\\n        address _asset,\\n        address _borrower,\\n        uint256 _price\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function updateStakeAndTotalStakes(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        returns (uint256);\\n\\n    function updateTrenBoxRewardSnapshots(address _asset, address _borrower) external;\\n\\n    function addTrenBoxOwnerToArray(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        returns (uint256 index);\\n\\n    function applyPendingRewards(address _asset, address _borrower) external;\\n\\n    function getPendingAssetReward(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPendingDebtTokenReward(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function hasPendingRewards(address _asset, address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 debt,\\n            uint256 coll,\\n            uint256 pendingDebtTokenReward,\\n            uint256 pendingAssetReward\\n        );\\n\\n    function closeTrenBox(address _asset, address _borrower) external;\\n\\n    function closeTrenBoxLiquidation(address _asset, address _borrower) external;\\n\\n    function removeStake(address _asset, address _borrower) external;\\n\\n    function getRedemptionRate(address _asset) external view returns (uint256);\\n\\n    function getRedemptionRateWithDecay(address _asset) external view returns (uint256);\\n\\n    function getRedemptionFeeWithDecay(\\n        address _asset,\\n        uint256 _assetDraw\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getBorrowingRate(address _asset) external view returns (uint256);\\n\\n    function getBorrowingFee(\\n        address _asset,\\n        uint256 _debtTokenAmount\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTrenBoxStatus(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getTrenBoxStake(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getTrenBoxDebt(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getTrenBoxColl(address _asset, address _borrower) external view returns (uint256);\\n\\n    function setTrenBoxStatus(address _asset, address _borrower, uint256 num) external;\\n\\n    function increaseTrenBoxColl(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collIncrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function decreaseTrenBoxColl(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collDecrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function increaseTrenBoxDebt(\\n        address _asset,\\n        address _borrower,\\n        uint256 _debtIncrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function decreaseTrenBoxDebt(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collDecrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function getTCR(address _asset, uint256 _price) external view returns (uint256);\\n\\n    function checkRecoveryMode(address _asset, uint256 _price) external returns (bool);\\n\\n    function isValidFirstRedemptionHint(\\n        address _asset,\\n        address _firstRedemptionHint,\\n        uint256 _price\\n    )\\n        external\\n        returns (bool);\\n\\n    function updateBaseRateFromRedemption(\\n        address _asset,\\n        uint256 _assetDrawn,\\n        uint256 _price,\\n        uint256 _totalDebtTokenSupply\\n    )\\n        external;\\n\\n    function getRedemptionFee(address _asset, uint256 _assetDraw) external view returns (uint256);\\n\\n    function finalizeRedemption(\\n        address _asset,\\n        address _receiver,\\n        uint256 _debtToRedeem,\\n        uint256 _fee,\\n        uint256 _totalRedemptionRewards\\n    )\\n        external;\\n\\n    function redistributeDebtAndColl(\\n        address _asset,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 _debtToOffset,\\n        uint256 _collToSendToStabilityPool\\n    )\\n        external;\\n\\n    function updateSystemSnapshots_excludeCollRemainder(\\n        address _asset,\\n        uint256 _collRemainder\\n    )\\n        external;\\n\\n    function movePendingTrenBoxRewardsToActivePool(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        uint256 _assetAmount\\n    )\\n        external;\\n\\n    function isTrenBoxActive(address _asset, address _borrower) external view returns (bool);\\n\\n    function sendGasCompensation(\\n        address _asset,\\n        address _liquidator,\\n        uint256 _debtTokenAmount,\\n        uint256 _assetAmount\\n    )\\n        external;\\n\\n    function getNetDebt(address _asset, uint256 _debt) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x183a49a4fefc8f74c19327281dfaa9c88745695efad43225fb8d1411e4c47377\",\"license\":\"MIT\"},\"contracts/SortedTrenBoxes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { UUPSUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport { ConfigurableAddresses } from \\\"./Dependencies/ConfigurableAddresses.sol\\\";\\n\\nimport { ISortedTrenBoxes } from \\\"./Interfaces/ISortedTrenBoxes.sol\\\";\\nimport { ITrenBoxManager } from \\\"./Interfaces/ITrenBoxManager.sol\\\";\\n\\n/*\\n* A sorted doubly linked list with nodes sorted in descending order.\\n*\\n* Nodes map to active TrenBoxes in the system - the ID property is the address of a TrenBox owner.\\n* Nodes are ordered according to their current nominal individual collateral ratio (NICR),\\n* which is like the ICR but without the price, i.e., just collateral / debt.\\n*\\n* The list optionally accepts insert position hints.\\n*\\n* NICRs are computed dynamically at runtime, and not stored on the Node. This is because NICRs of\\nactive TrenBoxes\\n* change dynamically as liquidation events occur.\\n*\\n* The list relies on the fact that liquidation events preserve ordering: a liquidation decreases the\\nNICRs of all active TrenBoxes,\\n* but maintains their order. A node inserted based on current NICR will maintain the correct\\nposition,\\n* relative to it's peers, as rewards accumulate, as long as it's raw collateral and debt have not\\n* changed.\\n* Thus, Nodes remain sorted by current NICR.\\n*\\n* Nodes need only be re-inserted upon a TrenBox operation - when the owner adds or removes\\ncollateral\\nor debt\\n* to their position.\\n*\\n* The list is a modification of the following audited SortedDoublyLinkedList:\\n* https://github.com/livepeer/protocol/blob/master/contracts/libraries/SortedDoublyLL.sol\\n*\\n*\\n* Changes made in the Gravita implementation:\\n*\\n* - Keys have been removed from nodes\\n*\\n* - Ordering checks for insertion are performed by comparing an NICR argument to the current NICR,\\ncalculated at runtime.\\n*   The list relies on the property that ordering by ICR is maintained as the ETH:USD price varies.\\n*\\n* - Public functions with parameters have been made internal to save gas, and given an external\\nwrapper function for external access\\n*/\\ncontract SortedTrenBoxes is\\n    OwnableUpgradeable,\\n    UUPSUpgradeable,\\n    ISortedTrenBoxes,\\n    ConfigurableAddresses\\n{\\n    string public constant NAME = \\\"SortedTrenBoxes\\\";\\n\\n    struct Node {\\n        bool exists;\\n        address nextId; // Id of next node (smaller NICR) in the list\\n        address prevId; // Id of previous node (larger NICR) in the list\\n    }\\n\\n    struct TrenBoxesList {\\n        address head; // Head of the list. Also the node in the list with the largest NICR\\n        address tail; // Tail of the list. Also the node in the list with the smallest NICR\\n        uint256 size; // Current size of the list\\n        mapping(address depositor => Node node) nodes; // Track the corresponding ids for each node\\n            // in the list\\n    }\\n\\n    mapping(address collateral => TrenBoxesList orderedList) public trenBoxes;\\n\\n    modifier onlyTrenBoxManager() {\\n        if (msg.sender != trenBoxManager) {\\n            revert SortedTrenBoxes__CallerMustBeTrenBoxManager();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyBorrowerOperationsOrTrenBoxManager() {\\n        if (msg.sender != borrowerOperations && msg.sender != trenBoxManager) {\\n            revert SortedTrenBoxes__CallerMustBeBorrowerOperationsOrTrenBoxManager();\\n        }\\n        _;\\n    }\\n\\n    modifier hasNonZeroId(address _id) {\\n        if (_id == address(0)) {\\n            revert SortedTrenBoxes__IdCannotBeZeroAddress();\\n        }\\n        _;\\n    }\\n\\n    modifier hasPositiveNICR(uint256 _NICR) {\\n        if (_NICR == 0) {\\n            revert SortedTrenBoxes__NICRMustBeGreaterThanZero();\\n        }\\n        _;\\n    }\\n\\n    // --- Initializer ---\\n    function initialize() public initializer {\\n        address initialOwner = _msgSender();\\n\\n        __Ownable_init(initialOwner);\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /*\\n     * @dev Add a node to the list\\n     * @param _id Node's id\\n     * @param _NICR Node's NICR\\n     * @param _prevId Id of previous node for the insert position\\n     * @param _nextId Id of next node for the insert position\\n     */\\n\\n    function insert(\\n        address _asset,\\n        address _id,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external\\n        override\\n        onlyBorrowerOperationsOrTrenBoxManager\\n    {\\n        _insert(_asset, _id, _NICR, _prevId, _nextId);\\n    }\\n\\n    function _insert(\\n        address _asset,\\n        address _id,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        internal\\n        hasNonZeroId(_id)\\n        hasPositiveNICR(_NICR)\\n    {\\n        TrenBoxesList storage assetData = trenBoxes[_asset];\\n\\n        if (_contains(assetData, _id)) {\\n            revert SortedTrenBoxes__ListAlreadyContainsNode();\\n        }\\n\\n        address prevId = _prevId;\\n        address nextId = _nextId;\\n\\n        if (!_validInsertPosition(_asset, _NICR, prevId, nextId)) {\\n            // Sender's hint was not a valid insert position\\n            // Use sender's hint to find a valid insert position\\n            (prevId, nextId) = _findInsertPosition(_asset, _NICR, prevId, nextId);\\n        }\\n\\n        Node storage node = assetData.nodes[_id];\\n        node.exists = true;\\n\\n        if (prevId == address(0) && nextId == address(0)) {\\n            // Insert as head and tail\\n            assetData.head = _id;\\n            assetData.tail = _id;\\n        } else if (prevId == address(0)) {\\n            // Insert before `prevId` as the head\\n            node.nextId = assetData.head;\\n            assetData.nodes[assetData.head].prevId = _id;\\n            assetData.head = _id;\\n        } else if (nextId == address(0)) {\\n            // Insert after `nextId` as the tail\\n            node.prevId = assetData.tail;\\n            assetData.nodes[assetData.tail].nextId = _id;\\n            assetData.tail = _id;\\n        } else {\\n            // Insert at insert position between `prevId` and `nextId`\\n            node.nextId = nextId;\\n            node.prevId = prevId;\\n            assetData.nodes[prevId].nextId = _id;\\n            assetData.nodes[nextId].prevId = _id;\\n        }\\n\\n        assetData.size = assetData.size + 1;\\n        emit NodeAdded(_asset, _id, _NICR);\\n    }\\n\\n    function remove(address _asset, address _id) external override onlyTrenBoxManager {\\n        _remove(_asset, _id);\\n    }\\n\\n    /*\\n     * @dev Remove a node from the list\\n     * @param _id Node's id\\n     */\\n    function _remove(address _asset, address _id) internal {\\n        TrenBoxesList storage assetData = trenBoxes[_asset];\\n\\n        if (!_contains(assetData, _id)) {\\n            revert SortedTrenBoxer__ListDoesNotContainNode();\\n        }\\n\\n        Node storage node = assetData.nodes[_id];\\n        if (assetData.size > 1) {\\n            // List contains more than a single node\\n            if (_id == assetData.head) {\\n                // The removed node is the head\\n                // Set head to next node\\n                assetData.head = node.nextId;\\n                // Set prev pointer of new head to null\\n                assetData.nodes[assetData.head].prevId = address(0);\\n            } else if (_id == assetData.tail) {\\n                // The removed node is the tail\\n                // Set tail to previous node\\n                assetData.tail = node.prevId;\\n                // Set next pointer of new tail to null\\n                assetData.nodes[assetData.tail].nextId = address(0);\\n            } else {\\n                // The removed node is neither the head nor the tail\\n                // Set next pointer of previous node to the next node\\n                assetData.nodes[node.prevId].nextId = node.nextId;\\n                // Set prev pointer of next node to the previous node\\n                assetData.nodes[node.nextId].prevId = node.prevId;\\n            }\\n        } else {\\n            // List contains a single node\\n            // Set the head and tail to null\\n            assetData.head = address(0);\\n            assetData.tail = address(0);\\n        }\\n\\n        delete assetData.nodes[_id];\\n        assetData.size = assetData.size - 1;\\n        emit NodeRemoved(_asset, _id);\\n    }\\n\\n    /*\\n     * @dev Re-insert the node at a new position, based on its new NICR\\n     * @param _id Node's id\\n     * @param _newNICR Node's new NICR\\n     * @param _prevId Id of previous node for the new insert position\\n     * @param _nextId Id of next node for the new insert position\\n     */\\n    function reInsert(\\n        address _asset,\\n        address _id,\\n        uint256 _newNICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external\\n        override\\n        onlyBorrowerOperationsOrTrenBoxManager\\n    {\\n        if (!contains(_asset, _id)) {\\n            revert SortedTrenBoxer__ListDoesNotContainNode();\\n        }\\n\\n        if (_newNICR == 0) {\\n            revert SortedTrenBoxes__NICRMustBeGreaterThanZero();\\n        }\\n\\n        _remove(_asset, _id);\\n        _insert(_asset, _id, _newNICR, _prevId, _nextId);\\n    }\\n\\n    /*\\n     * @dev Checks if the list contains a node\\n     */\\n    function contains(address _asset, address _id) public view override returns (bool) {\\n        return trenBoxes[_asset].nodes[_id].exists;\\n    }\\n\\n    function _contains(\\n        TrenBoxesList storage _dataAsset,\\n        address _id\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _dataAsset.nodes[_id].exists;\\n    }\\n\\n    /*\\n     * @dev Checks if the list is empty\\n     */\\n    function isEmpty(address _asset) public view override returns (bool) {\\n        return trenBoxes[_asset].size == 0;\\n    }\\n\\n    /*\\n     * @dev Returns the current size of the list\\n     */\\n    function getSize(address _asset) external view override returns (uint256) {\\n        return trenBoxes[_asset].size;\\n    }\\n\\n    /*\\n     * @dev Returns the first node in the list (node with the largest NICR)\\n     */\\n    function getFirst(address _asset) external view override returns (address) {\\n        return trenBoxes[_asset].head;\\n    }\\n\\n    /*\\n     * @dev Returns the last node in the list (node with the smallest NICR)\\n     */\\n    function getLast(address _asset) external view override returns (address) {\\n        return trenBoxes[_asset].tail;\\n    }\\n\\n    /*\\n     * @dev Returns the next node (with a smaller NICR) in the list for a given node\\n     * @param _id Node's id\\n     */\\n    function getNext(address _asset, address _id) external view override returns (address) {\\n        return trenBoxes[_asset].nodes[_id].nextId;\\n    }\\n\\n    /*\\n     * @dev Returns the previous node (with a larger NICR) in the list for a given node\\n     * @param _id Node's id\\n     */\\n    function getPrev(address _asset, address _id) external view override returns (address) {\\n        return trenBoxes[_asset].nodes[_id].prevId;\\n    }\\n\\n    /*\\n    * @dev Check if a pair of nodes is a valid insertion point for a new node with the given NICR\\n     * @param _NICR Node's NICR\\n     * @param _prevId Id of previous node for the insert position\\n     * @param _nextId Id of next node for the insert position\\n     */\\n    function validInsertPosition(\\n        address _asset,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _validInsertPosition(_asset, _NICR, _prevId, _nextId);\\n    }\\n\\n    function _validInsertPosition(\\n        address _asset,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (_prevId == address(0) && _nextId == address(0)) {\\n            // `(null, null)` is a valid insert position if the list is empty\\n            return isEmpty(_asset);\\n        } else if (_prevId == address(0)) {\\n            // `(null, _nextId)` is a valid insert position if `_nextId` is the head of the list\\n            return trenBoxes[_asset].head == _nextId\\n                && _NICR >= ITrenBoxManager(trenBoxManager).getNominalICR(_asset, _nextId);\\n        } else if (_nextId == address(0)) {\\n            // `(_prevId, null)` is a valid insert position if `_prevId` is the tail of the list\\n            return trenBoxes[_asset].tail == _prevId\\n                && _NICR <= ITrenBoxManager(trenBoxManager).getNominalICR(_asset, _prevId);\\n        } else {\\n            // `(_prevId, _nextId)` is a valid insert position if they are adjacent nodes and\\n            // `_NICR` falls between the two nodes' NICRs\\n            return trenBoxes[_asset].nodes[_prevId].nextId == _nextId\\n                && ITrenBoxManager(trenBoxManager).getNominalICR(_asset, _prevId) >= _NICR\\n                && _NICR >= ITrenBoxManager(trenBoxManager).getNominalICR(_asset, _nextId);\\n        }\\n    }\\n\\n    /*\\n     * @dev Descend the list (larger NICRs to smaller NICRs) to find a valid insert position\\n     * @param _trenBoxManager TrenBoxManager contract, passed in as param to save SLOAD\\u2019s\\n     * @param _NICR Node's NICR\\n     * @param _startId Id of node to start descending the list from\\n     */\\n    function _descendList(\\n        address _asset,\\n        uint256 _NICR,\\n        address _startId\\n    )\\n        internal\\n        view\\n        returns (address, address)\\n    {\\n        TrenBoxesList storage assetData = trenBoxes[_asset];\\n\\n        // If `_startId` is the head, check if the insert position is before the head\\n        if (\\n            assetData.head == _startId\\n                && _NICR >= ITrenBoxManager(trenBoxManager).getNominalICR(_asset, _startId)\\n        ) {\\n            return (address(0), _startId);\\n        }\\n\\n        address prevId = _startId;\\n        address nextId = assetData.nodes[prevId].nextId;\\n\\n        // Descend the list until we reach the end or until we find a valid insert position\\n        while (prevId != address(0) && !_validInsertPosition(_asset, _NICR, prevId, nextId)) {\\n            prevId = assetData.nodes[prevId].nextId;\\n            nextId = assetData.nodes[prevId].nextId;\\n        }\\n\\n        return (prevId, nextId);\\n    }\\n\\n    /*\\n     * @dev Ascend the list (smaller NICRs to larger NICRs) to find a valid insert position\\n     * @param _trenBoxManager TrenBoxManager contract, passed in as param to save SLOAD\\u2019s\\n     * @param _NICR Node's NICR\\n     * @param _startId Id of node to start ascending the list from\\n     */\\n    function _ascendList(\\n        address _asset,\\n        uint256 _NICR,\\n        address _startId\\n    )\\n        internal\\n        view\\n        returns (address, address)\\n    {\\n        TrenBoxesList storage assetData = trenBoxes[_asset];\\n\\n        // If `_startId` is the tail, check if the insert position is after the tail\\n        if (\\n            assetData.tail == _startId\\n                && _NICR <= ITrenBoxManager(trenBoxManager).getNominalICR(_asset, _startId)\\n        ) {\\n            return (_startId, address(0));\\n        }\\n\\n        address nextId = _startId;\\n        address prevId = assetData.nodes[nextId].prevId;\\n\\n        // Ascend the list until we reach the end or until we find a valid insertion point\\n        while (nextId != address(0) && !_validInsertPosition(_asset, _NICR, prevId, nextId)) {\\n            nextId = assetData.nodes[nextId].prevId;\\n            prevId = assetData.nodes[nextId].prevId;\\n        }\\n\\n        return (prevId, nextId);\\n    }\\n\\n    /*\\n     * @dev Find the insert position for a new node with the given NICR\\n     * @param _NICR Node's NICR\\n     * @param _prevId Id of previous node for the insert position\\n     * @param _nextId Id of next node for the insert position\\n     */\\n    function findInsertPosition(\\n        address _asset,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external\\n        view\\n        override\\n        returns (address, address)\\n    {\\n        return _findInsertPosition(_asset, _NICR, _prevId, _nextId);\\n    }\\n\\n    function _findInsertPosition(\\n        address _asset,\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        internal\\n        view\\n        returns (address, address)\\n    {\\n        address prevId = _prevId;\\n        address nextId = _nextId;\\n\\n        if (prevId != address(0)) {\\n            if (\\n                !contains(_asset, prevId)\\n                    || _NICR > ITrenBoxManager(trenBoxManager).getNominalICR(_asset, prevId)\\n            ) {\\n                // `prevId` does not exist anymore or now has a smaller NICR than the given NICR\\n                prevId = address(0);\\n            }\\n        }\\n\\n        if (nextId != address(0)) {\\n            if (\\n                !contains(_asset, nextId)\\n                    || _NICR < ITrenBoxManager(trenBoxManager).getNominalICR(_asset, nextId)\\n            ) {\\n                // `nextId` does not exist anymore or now has a larger NICR than the given NICR\\n                nextId = address(0);\\n            }\\n        }\\n\\n        if (prevId == address(0) && nextId == address(0)) {\\n            // No hint - descend list starting from head\\n            return _descendList(_asset, _NICR, trenBoxes[_asset].head);\\n        } else if (prevId == address(0)) {\\n            // No `prevId` for hint - ascend list starting from `nextId`\\n            return _ascendList(_asset, _NICR, nextId);\\n        } else if (nextId == address(0)) {\\n            // No `nextId` for hint - descend list starting from `prevId`\\n            return _descendList(_asset, _NICR, prevId);\\n        } else {\\n            // Descend list starting from `prevId`\\n            return _descendList(_asset, _NICR, prevId);\\n        }\\n    }\\n\\n    function authorizeUpgrade(address newImplementation) public {\\n        _authorizeUpgrade(newImplementation);\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner { }\\n}\\n\",\"keccak256\":\"0x8978e0eaac7b6c5901ab2b90ad99eed18ae6dc7a5aaae7698c41388f505b48eb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b506080516127ca61003e6000396000818161133d0152818161136601526114ac01526127ca6000f3fe6080604052600436106102675760003560e01c80638129fc1c11610144578063c8564c62116100b6578063ed26cae81161007a578063ed26cae814610883578063f1c05a7e146108a3578063f2fde38b146108c3578063f8d89898146108e3578063fe06073314610903578063fe9d03231461092357600080fd5b8063c8564c62146107b6578063cc8b21e4146107d7578063cda775f9146107f7578063e71b840014610817578063eceea2fb1461086357600080fd5b8063b957172111610108578063b9571721146106e8578063bc9b5bd514610708578063bff365c414610728578063c05c5e9414610756578063c415b95c14610776578063c5f956af1461079657600080fd5b80638129fc1c146105fd5780638da5cb5b1461061257806395fb16bb1461064f578063a3f4df7e1461066f578063ad3cb1cc146106b757600080fd5b8063504f1671116101dd578063741bef1a116101a1578063741bef1a14610521578063760827151461054157806377553ad41461057d5780637c933c0a1461059d5780637f7c1491146105bd5780637f7dde4a146105dd57600080fd5b8063504f16711461047057806352d1902d146104b757806355dafa46146104cc5780636a85d67d146104ec578063715018a61461050c57600080fd5b806339ed25cd1161022f57806339ed25cd146103935780633b725b23146103b35780633cc74225146103fd5780634169467d1461041d5780634bc66f321461043d5780634f1ef2861461045d57600080fd5b806301c931001461026c578063048c661d1461028e5780630a34d4d6146102cb5780630a4314c6146102eb5780631bdb4c8d1461035a575b600080fd5b34801561027857600080fd5b5061028c61028736600461245f565b610943565b005b34801561029a57600080fd5b50600d546102ae906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102d757600080fd5b506011546102ae906001600160a01b031681565b3480156102f757600080fd5b5061033461030636600461245f565b6033602052600090815260409020805460018201546002909201546001600160a01b03918216929091169083565b604080516001600160a01b039485168152939092166020840152908201526060016102c2565b34801561036657600080fd5b506102ae61037536600461245f565b6001600160a01b039081166000908152603360205260409020541690565b34801561039f57600080fd5b506102ae6103ae36600461247a565b610994565b3480156103bf57600080fd5b506103ed6103ce36600461245f565b6001600160a01b03166000908152603360205260409020600201541590565b60405190151581526020016102c2565b34801561040957600080fd5b506006546102ae906001600160a01b031681565b34801561042957600080fd5b506008546102ae906001600160a01b031681565b34801561044957600080fd5b50600e546102ae906001600160a01b031681565b61028c61046b3660046124c3565b6109cb565b34801561047c57600080fd5b506104a961048b36600461245f565b6001600160a01b031660009081526033602052604090206002015490565b6040519081526020016102c2565b3480156104c357600080fd5b506104a96109ea565b3480156104d857600080fd5b50600a546102ae906001600160a01b031681565b3480156104f857600080fd5b5061028c61050736600461245f565b610a07565b34801561051857600080fd5b5061028c610a58565b34801561052d57600080fd5b50600b546102ae906001600160a01b031681565b34801561054d57600080fd5b506102ae61055c36600461245f565b6001600160a01b039081166000908152603360205260409020600101541690565b34801561058957600080fd5b506002546102ae906001600160a01b031681565b3480156105a957600080fd5b5061028c6105b8366004612585565b610a6c565b3480156105c957600080fd5b5061028c6105d836600461247a565b610ac4565b3480156105e957600080fd5b506000546102ae906001600160a01b031681565b34801561060957600080fd5b5061028c610af9565b34801561061e57600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166102ae565b34801561065b57600080fd5b506004546102ae906001600160a01b031681565b34801561067b57600080fd5b506106aa6040518060400160405280600f81526020016e536f727465645472656e426f78657360881b81525081565b6040516102c29190612607565b3480156106c357600080fd5b506106aa604051806040016040528060058152602001640352e302e360dc1b81525081565b3480156106f457600080fd5b5061028c61070336600461263a565b610c11565b34801561071457600080fd5b5061028c610723366004612585565b611192565b34801561073457600080fd5b506107486107433660046126af565b611228565b6040516102c29291906126fc565b34801561076257600080fd5b506001546102ae906001600160a01b031681565b34801561078257600080fd5b506007546102ae906001600160a01b031681565b3480156107a257600080fd5b50600f546102ae906001600160a01b031681565b3480156107c257600080fd5b506011546103ed90600160a01b900460ff1681565b3480156107e357600080fd5b50600c546102ae906001600160a01b031681565b34801561080357600080fd5b506003546102ae906001600160a01b031681565b34801561082357600080fd5b506102ae61083236600461247a565b6001600160a01b03918216600090815260336020908152604080832093851683526003909301905220600101541690565b34801561086f57600080fd5b506103ed61087e3660046126af565b611245565b34801561088f57600080fd5b506103ed61089e36600461247a565b61125e565b3480156108af57600080fd5b506010546102ae906001600160a01b031681565b3480156108cf57600080fd5b5061028c6108de36600461245f565b611290565b3480156108ef57600080fd5b506005546102ae906001600160a01b031681565b34801561090f57600080fd5b5061028c61091e36600461245f565b6112ce565b34801561092f57600080fd5b506009546102ae906001600160a01b031681565b61094b6112d7565b6001600160a01b038116610972576040516385d3330760e01b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03808316600090815260336020908152604080832085851684526003019091529020546101009004165b92915050565b6109d3611332565b6109dc826113d7565b6109e682826113df565b5050565b60006109f46114a1565b5060008051602061279e83398151915290565b610a0f6112d7565b6001600160a01b038116610a365760405163706ebc6560e11b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610a606112d7565b610a6a60006114ea565b565b6002546001600160a01b03163314801590610a9257506010546001600160a01b03163314155b15610ab057604051631028aee160e31b815260040160405180910390fd5b610abd858585858561155b565b5050505050565b6010546001600160a01b03163314610aef57604051631613adff60e21b815260040160405180910390fd5b6109e682826118b4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610b3f5750825b905060008267ffffffffffffffff166001148015610b5c5750303b155b905081158015610b6a575080155b15610b885760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610bb257845460ff60401b1916600160401b1785555b33610bbc81611aff565b610bc4611b10565b508315610abd57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15050505050565b610c196112d7565b601154600160a01b900460ff1615610c4357604051625f22e960e41b815260040160405180910390fd5b60108114610c6457604051633f5a111d60e21b815260040160405180910390fd5b60005b6010811015610d07576000838383818110610c8457610c84612716565b9050602002016020810190610c99919061245f565b6001600160a01b031603610cff5780838383818110610cba57610cba612716565b9050602002016020810190610ccf919061245f565b604051630d9d339f60e01b815260048101929092526001600160a01b031660248201526044015b60405180910390fd5b600101610c67565b5081816000818110610d1b57610d1b612716565b9050602002016020810190610d30919061245f565b600080546001600160a01b0319166001600160a01b039290921691909117905581816001818110610d6357610d63612716565b9050602002016020810190610d78919061245f565b600180546001600160a01b0319166001600160a01b039290921691909117905581816002818110610dab57610dab612716565b9050602002016020810190610dc0919061245f565b600280546001600160a01b0319166001600160a01b039290921691909117905581816003818110610df357610df3612716565b9050602002016020810190610e08919061245f565b600380546001600160a01b0319166001600160a01b039290921691909117905581816004818110610e3b57610e3b612716565b9050602002016020810190610e50919061245f565b600580546001600160a01b0319166001600160a01b039290921691909117815582908290818110610e8357610e83612716565b9050602002016020810190610e98919061245f565b600680546001600160a01b0319166001600160a01b039290921691909117815582908290818110610ecb57610ecb612716565b9050602002016020810190610ee0919061245f565b600780546001600160a01b0319166001600160a01b039290921691909117815582908290818110610f1357610f13612716565b9050602002016020810190610f28919061245f565b600880546001600160a01b0319166001600160a01b039290921691909117815582908290818110610f5b57610f5b612716565b9050602002016020810190610f70919061245f565b600980546001600160a01b0319166001600160a01b039290921691909117815582908290818110610fa357610fa3612716565b9050602002016020810190610fb8919061245f565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a818110610feb57610feb612716565b9050602002016020810190611000919061245f565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b81811061103357611033612716565b9050602002016020810190611048919061245f565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c81811061107b5761107b612716565b9050602002016020810190611090919061245f565b600e80546001600160a01b0319166001600160a01b03929092169190911790558181600d8181106110c3576110c3612716565b90506020020160208101906110d8919061245f565b600f80546001600160a01b0319166001600160a01b03929092169190911790558181600e81811061110b5761110b612716565b9050602002016020810190611120919061245f565b601080546001600160a01b0319166001600160a01b03929092169190911790558181600f81811061115357611153612716565b9050602002016020810190611168919061245f565b601180546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b6002546001600160a01b031633148015906111b857506010546001600160a01b03163314155b156111d657604051631028aee160e31b815260040160405180910390fd5b6111e0858561125e565b6111fd57604051634598fabb60e01b815260040160405180910390fd5b8260000361121e5760405163d58a878560e01b815260040160405180910390fd5b610ab085856118b4565b60008061123786868686611b18565b915091505b94509492505050565b600061125385858585611cef565b90505b949350505050565b6001600160a01b0391821660009081526033602090815260408083209390941682526003909201909152205460ff1690565b6112986112d7565b6001600160a01b0381166112c257604051631e4fbdf760e01b815260006004820152602401610cf6565b6112cb816114ea565b50565b6112cb816113d7565b336113097f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610a6a5760405163118cdaa760e01b8152336004820152602401610cf6565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806113b957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166113ad60008051602061279e833981519152546001600160a01b031690565b6001600160a01b031614155b15610a6a5760405163703e46dd60e11b815260040160405180910390fd5b6112cb6112d7565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611439575060408051601f3d908101601f191682019092526114369181019061272c565b60015b61146157604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610cf6565b60008051602061279e833981519152811461149257604051632a87526960e21b815260048101829052602401610cf6565b61149c8383611f8b565b505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a6a5760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b836001600160a01b03811661158357604051632b1156d160e21b815260040160405180910390fd5b83806000036115a55760405163d58a878560e01b815260040160405180910390fd5b6001600160a01b038781166000908152603360209081526040808320938a1683526003840190915290205460ff16156115f157604051633f87282f60e01b815260040160405180910390fd5b84846115ff8a898484611cef565b6116155761160f8a898484611b18565b90925090505b6001600160a01b03808a1660009081526003850160205260409020805460ff1916600117815590831615801561165257506001600160a01b038216155b156116845783546001600160a01b038b166001600160a01b03199182168117865560018601805490921617905561184c565b6001600160a01b0383166116ec5783548154610100600160a81b0319166101006001600160a01b0392831602178255845481166000908152600386016020526040902060010180546001600160a01b0319908116928d1692831790915585541617845561184c565b6001600160a01b03821661175b576001848101805491830180546001600160a01b039384166001600160a01b03199182161790915581548316600090815260038801602052604090208054610100600160a81b031916610100948f16948502179055815416909117905561184c565b818160000160016101000a8154816001600160a01b0302191690836001600160a01b03160217905550828160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555089846003016000856001600160a01b03166001600160a01b0316815260200190815260200160002060000160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555089846003016000846001600160a01b03166001600160a01b0316815260200190815260200160002060010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b600284015461185c90600161275b565b6002850155604080516001600160a01b038c81168252602082018c90528d16917fa74a9cd584cc27d44e7f746f6715fae75b600cc5eb8f85a95752788d6b4547a5910160405180910390a25050505050505050505050565b6001600160a01b03828116600090815260336020908152604080832093851683526003840190915290205460ff166118ff57604051634598fabb60e01b815260040160405180910390fd5b6001600160a01b03821660009081526003820160205260409020600282015460011015611a4e5781546001600160a01b039081169084160361197d57805482546101009091046001600160a01b03166001600160a01b0319918216811784556000908152600384016020526040902060010180549091169055611a6a565b60018201546001600160a01b03908116908416036119de5760018082015490830180546001600160a01b0319166001600160a01b039092169182179055600090815260038301602052604090208054610100600160a81b0319169055611a6a565b8054600180830180546001600160a01b03908116600090815260038701602052604080822080546101009788900485168802610100600160a81b03199091161790559254865495909504821681529190912090910180546001600160a01b03191692909116919091179055611a6a565b81546001600160a01b0319908116835560018301805490911690555b6001600160a01b0383166000908152600383016020526040902080546001600160a81b0319168155600190810180546001600160a01b03191690556002830154611ab4919061276e565b60028301556040516001600160a01b0384811682528516907f202321eaea3aa2b5e1e2ef1dfd98a9d6ba8c90e293f5dc2755b32eb921a477979060200160405180910390a250505050565b611b07611fe1565b6112cb8161202a565b610a6a611fe1565b60008083836001600160a01b03821615611bbd57611b36888361125e565b1580611bb357506010546040516390ec230160e01b81526001600160a01b03909116906390ec230190611b6f908b9086906004016126fc565b602060405180830381865afa158015611b8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb0919061272c565b87115b15611bbd57600091505b6001600160a01b03811615611c5c57611bd6888261125e565b1580611c5357506010546040516390ec230160e01b81526001600160a01b03909116906390ec230190611c0f908b9085906004016126fc565b602060405180830381865afa158015611c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c50919061272c565b87105b15611c5c575060005b6001600160a01b038216158015611c7a57506001600160a01b038116155b15611cb2576001600160a01b03808916600090815260336020526040902054611ca7918a918a9116612032565b93509350505061123c565b6001600160a01b038216611ccb57611ca788888361217c565b6001600160a01b038116611ce457611ca7888884612032565b611ca7888884612032565b60006001600160a01b038316158015611d0f57506001600160a01b038216155b15611d39576001600160a01b038516600090815260336020526040902060020154155b9050611256565b6001600160a01b038316611deb576001600160a01b038581166000908152603360205260409020548116908316148015611d3257506010546040516390ec230160e01b81526001600160a01b03909116906390ec230190611da090889086906004016126fc565b602060405180830381865afa158015611dbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de1919061272c565b8410159050611256565b6001600160a01b038216611ea0576001600160a01b038581166000908152603360205260409020600101548116908416148015611d3257506010546040516390ec230160e01b81526001600160a01b03909116906390ec230190611e5590889087906004016126fc565b602060405180830381865afa158015611e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e96919061272c565b8411159050611256565b6001600160a01b038581166000908152603360209081526040808320878516845260030190915290205461010090048116908316148015611f5257506010546040516390ec230160e01b815285916001600160a01b0316906390ec230190611f0e90899088906004016126fc565b602060405180830381865afa158015611f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4f919061272c565b10155b8015611d3257506010546040516390ec230160e01b81526001600160a01b03909116906390ec230190611da090889086906004016126fc565b611f94826122c1565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611fd95761149c8282612326565b6109e661239c565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610a6a57604051631afcd79f60e31b815260040160405180910390fd5b611298611fe1565b6001600160a01b03808416600090815260336020526040812080549192839281169085161480156120d557506010546040516390ec230160e01b81526001600160a01b03909116906390ec23019061209090899088906004016126fc565b602060405180830381865afa1580156120ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d1919061272c565b8510155b156120e7576000849250925050612174565b6001600160a01b0380851660009081526003830160205260409020548591610100909104165b6001600160a01b0382161580159061212e575061212c88888484611cef565b155b1561216d57506001600160a01b03908116600090815260038301602052604080822054610100908190048416808452919092205490929190041661210d565b9093509150505b935093915050565b6001600160a01b038084166000908152603360205260408120600181015491928392811690851614801561222257506010546040516390ec230160e01b81526001600160a01b03909116906390ec2301906121dd90899088906004016126fc565b602060405180830381865afa1580156121fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221e919061272c565b8511155b15612234578360009250925050612174565b6001600160a01b0380851660009081526003830160205260409020600101548591165b6001600160a01b03821615801590612278575061227688888385611cef565b155b156122b557506001600160a01b03908116600090815260038301602052604080822060019081015484168084529190922090910154909116612257565b97909650945050505050565b806001600160a01b03163b6000036122f757604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610cf6565b60008051602061279e83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516123439190612781565b600060405180830381855af49150503d806000811461237e576040519150601f19603f3d011682016040523d82523d6000602084013e612383565b606091505b50915091506123938583836123bb565b95945050505050565b3415610a6a5760405163b398979f60e01b815260040160405180910390fd5b6060826123d0576123cb8261241a565b612413565b81511580156123e757506001600160a01b0384163b155b1561241057604051639996b31560e01b81526001600160a01b0385166004820152602401610cf6565b50805b9392505050565b80511561242a5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b038116811461245a57600080fd5b919050565b60006020828403121561247157600080fd5b61241382612443565b6000806040838503121561248d57600080fd5b61249683612443565b91506124a460208401612443565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156124d657600080fd5b6124df83612443565b9150602083013567ffffffffffffffff808211156124fc57600080fd5b818501915085601f83011261251057600080fd5b813581811115612522576125226124ad565b604051601f8201601f19908116603f0116810190838211818310171561254a5761254a6124ad565b8160405282815288602084870101111561256357600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080600080600060a0868803121561259d57600080fd5b6125a686612443565b94506125b460208701612443565b9350604086013592506125c960608701612443565b91506125d760808701612443565b90509295509295909350565b60005b838110156125fe5781810151838201526020016125e6565b50506000910152565b60208152600082518060208401526126268160408501602087016125e3565b601f01601f19169190910160400192915050565b6000806020838503121561264d57600080fd5b823567ffffffffffffffff8082111561266557600080fd5b818501915085601f83011261267957600080fd5b81358181111561268857600080fd5b8660208260051b850101111561269d57600080fd5b60209290920196919550909350505050565b600080600080608085870312156126c557600080fd5b6126ce85612443565b9350602085013592506126e360408601612443565b91506126f160608601612443565b905092959194509250565b6001600160a01b0392831681529116602082015260400190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561273e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156109c5576109c5612745565b818103818111156109c5576109c5612745565b600082516127938184602087016125e3565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca164736f6c6343000817000a",
  "deployedBytecode": "0x6080604052600436106102675760003560e01c80638129fc1c11610144578063c8564c62116100b6578063ed26cae81161007a578063ed26cae814610883578063f1c05a7e146108a3578063f2fde38b146108c3578063f8d89898146108e3578063fe06073314610903578063fe9d03231461092357600080fd5b8063c8564c62146107b6578063cc8b21e4146107d7578063cda775f9146107f7578063e71b840014610817578063eceea2fb1461086357600080fd5b8063b957172111610108578063b9571721146106e8578063bc9b5bd514610708578063bff365c414610728578063c05c5e9414610756578063c415b95c14610776578063c5f956af1461079657600080fd5b80638129fc1c146105fd5780638da5cb5b1461061257806395fb16bb1461064f578063a3f4df7e1461066f578063ad3cb1cc146106b757600080fd5b8063504f1671116101dd578063741bef1a116101a1578063741bef1a14610521578063760827151461054157806377553ad41461057d5780637c933c0a1461059d5780637f7c1491146105bd5780637f7dde4a146105dd57600080fd5b8063504f16711461047057806352d1902d146104b757806355dafa46146104cc5780636a85d67d146104ec578063715018a61461050c57600080fd5b806339ed25cd1161022f57806339ed25cd146103935780633b725b23146103b35780633cc74225146103fd5780634169467d1461041d5780634bc66f321461043d5780634f1ef2861461045d57600080fd5b806301c931001461026c578063048c661d1461028e5780630a34d4d6146102cb5780630a4314c6146102eb5780631bdb4c8d1461035a575b600080fd5b34801561027857600080fd5b5061028c61028736600461245f565b610943565b005b34801561029a57600080fd5b50600d546102ae906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102d757600080fd5b506011546102ae906001600160a01b031681565b3480156102f757600080fd5b5061033461030636600461245f565b6033602052600090815260409020805460018201546002909201546001600160a01b03918216929091169083565b604080516001600160a01b039485168152939092166020840152908201526060016102c2565b34801561036657600080fd5b506102ae61037536600461245f565b6001600160a01b039081166000908152603360205260409020541690565b34801561039f57600080fd5b506102ae6103ae36600461247a565b610994565b3480156103bf57600080fd5b506103ed6103ce36600461245f565b6001600160a01b03166000908152603360205260409020600201541590565b60405190151581526020016102c2565b34801561040957600080fd5b506006546102ae906001600160a01b031681565b34801561042957600080fd5b506008546102ae906001600160a01b031681565b34801561044957600080fd5b50600e546102ae906001600160a01b031681565b61028c61046b3660046124c3565b6109cb565b34801561047c57600080fd5b506104a961048b36600461245f565b6001600160a01b031660009081526033602052604090206002015490565b6040519081526020016102c2565b3480156104c357600080fd5b506104a96109ea565b3480156104d857600080fd5b50600a546102ae906001600160a01b031681565b3480156104f857600080fd5b5061028c61050736600461245f565b610a07565b34801561051857600080fd5b5061028c610a58565b34801561052d57600080fd5b50600b546102ae906001600160a01b031681565b34801561054d57600080fd5b506102ae61055c36600461245f565b6001600160a01b039081166000908152603360205260409020600101541690565b34801561058957600080fd5b506002546102ae906001600160a01b031681565b3480156105a957600080fd5b5061028c6105b8366004612585565b610a6c565b3480156105c957600080fd5b5061028c6105d836600461247a565b610ac4565b3480156105e957600080fd5b506000546102ae906001600160a01b031681565b34801561060957600080fd5b5061028c610af9565b34801561061e57600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166102ae565b34801561065b57600080fd5b506004546102ae906001600160a01b031681565b34801561067b57600080fd5b506106aa6040518060400160405280600f81526020016e536f727465645472656e426f78657360881b81525081565b6040516102c29190612607565b3480156106c357600080fd5b506106aa604051806040016040528060058152602001640352e302e360dc1b81525081565b3480156106f457600080fd5b5061028c61070336600461263a565b610c11565b34801561071457600080fd5b5061028c610723366004612585565b611192565b34801561073457600080fd5b506107486107433660046126af565b611228565b6040516102c29291906126fc565b34801561076257600080fd5b506001546102ae906001600160a01b031681565b34801561078257600080fd5b506007546102ae906001600160a01b031681565b3480156107a257600080fd5b50600f546102ae906001600160a01b031681565b3480156107c257600080fd5b506011546103ed90600160a01b900460ff1681565b3480156107e357600080fd5b50600c546102ae906001600160a01b031681565b34801561080357600080fd5b506003546102ae906001600160a01b031681565b34801561082357600080fd5b506102ae61083236600461247a565b6001600160a01b03918216600090815260336020908152604080832093851683526003909301905220600101541690565b34801561086f57600080fd5b506103ed61087e3660046126af565b611245565b34801561088f57600080fd5b506103ed61089e36600461247a565b61125e565b3480156108af57600080fd5b506010546102ae906001600160a01b031681565b3480156108cf57600080fd5b5061028c6108de36600461245f565b611290565b3480156108ef57600080fd5b506005546102ae906001600160a01b031681565b34801561090f57600080fd5b5061028c61091e36600461245f565b6112ce565b34801561092f57600080fd5b506009546102ae906001600160a01b031681565b61094b6112d7565b6001600160a01b038116610972576040516385d3330760e01b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03808316600090815260336020908152604080832085851684526003019091529020546101009004165b92915050565b6109d3611332565b6109dc826113d7565b6109e682826113df565b5050565b60006109f46114a1565b5060008051602061279e83398151915290565b610a0f6112d7565b6001600160a01b038116610a365760405163706ebc6560e11b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610a606112d7565b610a6a60006114ea565b565b6002546001600160a01b03163314801590610a9257506010546001600160a01b03163314155b15610ab057604051631028aee160e31b815260040160405180910390fd5b610abd858585858561155b565b5050505050565b6010546001600160a01b03163314610aef57604051631613adff60e21b815260040160405180910390fd5b6109e682826118b4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610b3f5750825b905060008267ffffffffffffffff166001148015610b5c5750303b155b905081158015610b6a575080155b15610b885760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610bb257845460ff60401b1916600160401b1785555b33610bbc81611aff565b610bc4611b10565b508315610abd57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15050505050565b610c196112d7565b601154600160a01b900460ff1615610c4357604051625f22e960e41b815260040160405180910390fd5b60108114610c6457604051633f5a111d60e21b815260040160405180910390fd5b60005b6010811015610d07576000838383818110610c8457610c84612716565b9050602002016020810190610c99919061245f565b6001600160a01b031603610cff5780838383818110610cba57610cba612716565b9050602002016020810190610ccf919061245f565b604051630d9d339f60e01b815260048101929092526001600160a01b031660248201526044015b60405180910390fd5b600101610c67565b5081816000818110610d1b57610d1b612716565b9050602002016020810190610d30919061245f565b600080546001600160a01b0319166001600160a01b039290921691909117905581816001818110610d6357610d63612716565b9050602002016020810190610d78919061245f565b600180546001600160a01b0319166001600160a01b039290921691909117905581816002818110610dab57610dab612716565b9050602002016020810190610dc0919061245f565b600280546001600160a01b0319166001600160a01b039290921691909117905581816003818110610df357610df3612716565b9050602002016020810190610e08919061245f565b600380546001600160a01b0319166001600160a01b039290921691909117905581816004818110610e3b57610e3b612716565b9050602002016020810190610e50919061245f565b600580546001600160a01b0319166001600160a01b039290921691909117815582908290818110610e8357610e83612716565b9050602002016020810190610e98919061245f565b600680546001600160a01b0319166001600160a01b039290921691909117815582908290818110610ecb57610ecb612716565b9050602002016020810190610ee0919061245f565b600780546001600160a01b0319166001600160a01b039290921691909117815582908290818110610f1357610f13612716565b9050602002016020810190610f28919061245f565b600880546001600160a01b0319166001600160a01b039290921691909117815582908290818110610f5b57610f5b612716565b9050602002016020810190610f70919061245f565b600980546001600160a01b0319166001600160a01b039290921691909117815582908290818110610fa357610fa3612716565b9050602002016020810190610fb8919061245f565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a818110610feb57610feb612716565b9050602002016020810190611000919061245f565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b81811061103357611033612716565b9050602002016020810190611048919061245f565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c81811061107b5761107b612716565b9050602002016020810190611090919061245f565b600e80546001600160a01b0319166001600160a01b03929092169190911790558181600d8181106110c3576110c3612716565b90506020020160208101906110d8919061245f565b600f80546001600160a01b0319166001600160a01b03929092169190911790558181600e81811061110b5761110b612716565b9050602002016020810190611120919061245f565b601080546001600160a01b0319166001600160a01b03929092169190911790558181600f81811061115357611153612716565b9050602002016020810190611168919061245f565b601180546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b6002546001600160a01b031633148015906111b857506010546001600160a01b03163314155b156111d657604051631028aee160e31b815260040160405180910390fd5b6111e0858561125e565b6111fd57604051634598fabb60e01b815260040160405180910390fd5b8260000361121e5760405163d58a878560e01b815260040160405180910390fd5b610ab085856118b4565b60008061123786868686611b18565b915091505b94509492505050565b600061125385858585611cef565b90505b949350505050565b6001600160a01b0391821660009081526033602090815260408083209390941682526003909201909152205460ff1690565b6112986112d7565b6001600160a01b0381166112c257604051631e4fbdf760e01b815260006004820152602401610cf6565b6112cb816114ea565b50565b6112cb816113d7565b336113097f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610a6a5760405163118cdaa760e01b8152336004820152602401610cf6565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806113b957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166113ad60008051602061279e833981519152546001600160a01b031690565b6001600160a01b031614155b15610a6a5760405163703e46dd60e11b815260040160405180910390fd5b6112cb6112d7565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611439575060408051601f3d908101601f191682019092526114369181019061272c565b60015b61146157604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610cf6565b60008051602061279e833981519152811461149257604051632a87526960e21b815260048101829052602401610cf6565b61149c8383611f8b565b505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a6a5760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b836001600160a01b03811661158357604051632b1156d160e21b815260040160405180910390fd5b83806000036115a55760405163d58a878560e01b815260040160405180910390fd5b6001600160a01b038781166000908152603360209081526040808320938a1683526003840190915290205460ff16156115f157604051633f87282f60e01b815260040160405180910390fd5b84846115ff8a898484611cef565b6116155761160f8a898484611b18565b90925090505b6001600160a01b03808a1660009081526003850160205260409020805460ff1916600117815590831615801561165257506001600160a01b038216155b156116845783546001600160a01b038b166001600160a01b03199182168117865560018601805490921617905561184c565b6001600160a01b0383166116ec5783548154610100600160a81b0319166101006001600160a01b0392831602178255845481166000908152600386016020526040902060010180546001600160a01b0319908116928d1692831790915585541617845561184c565b6001600160a01b03821661175b576001848101805491830180546001600160a01b039384166001600160a01b03199182161790915581548316600090815260038801602052604090208054610100600160a81b031916610100948f16948502179055815416909117905561184c565b818160000160016101000a8154816001600160a01b0302191690836001600160a01b03160217905550828160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555089846003016000856001600160a01b03166001600160a01b0316815260200190815260200160002060000160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555089846003016000846001600160a01b03166001600160a01b0316815260200190815260200160002060010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b600284015461185c90600161275b565b6002850155604080516001600160a01b038c81168252602082018c90528d16917fa74a9cd584cc27d44e7f746f6715fae75b600cc5eb8f85a95752788d6b4547a5910160405180910390a25050505050505050505050565b6001600160a01b03828116600090815260336020908152604080832093851683526003840190915290205460ff166118ff57604051634598fabb60e01b815260040160405180910390fd5b6001600160a01b03821660009081526003820160205260409020600282015460011015611a4e5781546001600160a01b039081169084160361197d57805482546101009091046001600160a01b03166001600160a01b0319918216811784556000908152600384016020526040902060010180549091169055611a6a565b60018201546001600160a01b03908116908416036119de5760018082015490830180546001600160a01b0319166001600160a01b039092169182179055600090815260038301602052604090208054610100600160a81b0319169055611a6a565b8054600180830180546001600160a01b03908116600090815260038701602052604080822080546101009788900485168802610100600160a81b03199091161790559254865495909504821681529190912090910180546001600160a01b03191692909116919091179055611a6a565b81546001600160a01b0319908116835560018301805490911690555b6001600160a01b0383166000908152600383016020526040902080546001600160a81b0319168155600190810180546001600160a01b03191690556002830154611ab4919061276e565b60028301556040516001600160a01b0384811682528516907f202321eaea3aa2b5e1e2ef1dfd98a9d6ba8c90e293f5dc2755b32eb921a477979060200160405180910390a250505050565b611b07611fe1565b6112cb8161202a565b610a6a611fe1565b60008083836001600160a01b03821615611bbd57611b36888361125e565b1580611bb357506010546040516390ec230160e01b81526001600160a01b03909116906390ec230190611b6f908b9086906004016126fc565b602060405180830381865afa158015611b8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb0919061272c565b87115b15611bbd57600091505b6001600160a01b03811615611c5c57611bd6888261125e565b1580611c5357506010546040516390ec230160e01b81526001600160a01b03909116906390ec230190611c0f908b9085906004016126fc565b602060405180830381865afa158015611c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c50919061272c565b87105b15611c5c575060005b6001600160a01b038216158015611c7a57506001600160a01b038116155b15611cb2576001600160a01b03808916600090815260336020526040902054611ca7918a918a9116612032565b93509350505061123c565b6001600160a01b038216611ccb57611ca788888361217c565b6001600160a01b038116611ce457611ca7888884612032565b611ca7888884612032565b60006001600160a01b038316158015611d0f57506001600160a01b038216155b15611d39576001600160a01b038516600090815260336020526040902060020154155b9050611256565b6001600160a01b038316611deb576001600160a01b038581166000908152603360205260409020548116908316148015611d3257506010546040516390ec230160e01b81526001600160a01b03909116906390ec230190611da090889086906004016126fc565b602060405180830381865afa158015611dbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de1919061272c565b8410159050611256565b6001600160a01b038216611ea0576001600160a01b038581166000908152603360205260409020600101548116908416148015611d3257506010546040516390ec230160e01b81526001600160a01b03909116906390ec230190611e5590889087906004016126fc565b602060405180830381865afa158015611e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e96919061272c565b8411159050611256565b6001600160a01b038581166000908152603360209081526040808320878516845260030190915290205461010090048116908316148015611f5257506010546040516390ec230160e01b815285916001600160a01b0316906390ec230190611f0e90899088906004016126fc565b602060405180830381865afa158015611f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4f919061272c565b10155b8015611d3257506010546040516390ec230160e01b81526001600160a01b03909116906390ec230190611da090889086906004016126fc565b611f94826122c1565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611fd95761149c8282612326565b6109e661239c565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610a6a57604051631afcd79f60e31b815260040160405180910390fd5b611298611fe1565b6001600160a01b03808416600090815260336020526040812080549192839281169085161480156120d557506010546040516390ec230160e01b81526001600160a01b03909116906390ec23019061209090899088906004016126fc565b602060405180830381865afa1580156120ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d1919061272c565b8510155b156120e7576000849250925050612174565b6001600160a01b0380851660009081526003830160205260409020548591610100909104165b6001600160a01b0382161580159061212e575061212c88888484611cef565b155b1561216d57506001600160a01b03908116600090815260038301602052604080822054610100908190048416808452919092205490929190041661210d565b9093509150505b935093915050565b6001600160a01b038084166000908152603360205260408120600181015491928392811690851614801561222257506010546040516390ec230160e01b81526001600160a01b03909116906390ec2301906121dd90899088906004016126fc565b602060405180830381865afa1580156121fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221e919061272c565b8511155b15612234578360009250925050612174565b6001600160a01b0380851660009081526003830160205260409020600101548591165b6001600160a01b03821615801590612278575061227688888385611cef565b155b156122b557506001600160a01b03908116600090815260038301602052604080822060019081015484168084529190922090910154909116612257565b97909650945050505050565b806001600160a01b03163b6000036122f757604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610cf6565b60008051602061279e83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516123439190612781565b600060405180830381855af49150503d806000811461237e576040519150601f19603f3d011682016040523d82523d6000602084013e612383565b606091505b50915091506123938583836123bb565b95945050505050565b3415610a6a5760405163b398979f60e01b815260040160405180910390fd5b6060826123d0576123cb8261241a565b612413565b81511580156123e757506001600160a01b0384163b155b1561241057604051639996b31560e01b81526001600160a01b0385166004820152602401610cf6565b50805b9392505050565b80511561242a5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b038116811461245a57600080fd5b919050565b60006020828403121561247157600080fd5b61241382612443565b6000806040838503121561248d57600080fd5b61249683612443565b91506124a460208401612443565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156124d657600080fd5b6124df83612443565b9150602083013567ffffffffffffffff808211156124fc57600080fd5b818501915085601f83011261251057600080fd5b813581811115612522576125226124ad565b604051601f8201601f19908116603f0116810190838211818310171561254a5761254a6124ad565b8160405282815288602084870101111561256357600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080600080600060a0868803121561259d57600080fd5b6125a686612443565b94506125b460208701612443565b9350604086013592506125c960608701612443565b91506125d760808701612443565b90509295509295909350565b60005b838110156125fe5781810151838201526020016125e6565b50506000910152565b60208152600082518060208401526126268160408501602087016125e3565b601f01601f19169190910160400192915050565b6000806020838503121561264d57600080fd5b823567ffffffffffffffff8082111561266557600080fd5b818501915085601f83011261267957600080fd5b81358181111561268857600080fd5b8660208260051b850101111561269d57600080fd5b60209290920196919550909350505050565b600080600080608085870312156126c557600080fd5b6126ce85612443565b9350602085013592506126e360408601612443565b91506126f160608601612443565b905092959194509250565b6001600160a01b0392831681529116602082015260400190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561273e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156109c5576109c5612745565b818103818111156109c5576109c5612745565b600082516127938184602087016125e3565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca164736f6c6343000817000a",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10031,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "activePool",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10033,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "adminContract",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10035,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "borrowerOperations",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10037,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "collSurplusPool",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10039,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "communityIssuance",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 10041,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "debtToken",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 10043,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "defaultPool",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 10045,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "feeCollector",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 10047,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "flashLoanAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 10049,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "gasPoolAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 10051,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "trenStaking",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 10053,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "priceFeed",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 10055,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "sortedTrenBoxes",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 10057,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 10059,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "timelockAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 10061,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 10063,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "trenBoxManager",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 10065,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "trenBoxManagerOperations",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 10067,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "isAddressSetupInitialized",
        "offset": 20,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 10072,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "__gap",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_uint256)33_storage"
      },
      {
        "astId": 16178,
        "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
        "label": "trenBoxes",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_struct(TrenBoxesList)16173_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)33_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[33]",
        "numberOfBytes": "1056"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Node)16161_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SortedTrenBoxes.Node)",
        "numberOfBytes": "32",
        "value": "t_struct(Node)16161_storage"
      },
      "t_mapping(t_address,t_struct(TrenBoxesList)16173_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SortedTrenBoxes.TrenBoxesList)",
        "numberOfBytes": "32",
        "value": "t_struct(TrenBoxesList)16173_storage"
      },
      "t_struct(Node)16161_storage": {
        "encoding": "inplace",
        "label": "struct SortedTrenBoxes.Node",
        "members": [
          {
            "astId": 16156,
            "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 16158,
            "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
            "label": "nextId",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16160,
            "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
            "label": "prevId",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TrenBoxesList)16173_storage": {
        "encoding": "inplace",
        "label": "struct SortedTrenBoxes.TrenBoxesList",
        "members": [
          {
            "astId": 16163,
            "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
            "label": "head",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16165,
            "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
            "label": "tail",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 16167,
            "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
            "label": "size",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16172,
            "contract": "contracts/SortedTrenBoxes.sol:SortedTrenBoxes",
            "label": "nodes",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Node)16161_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}