{
  "address": "0x471303d6b047A809d40884D4fFe3E9C02af81e45",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowerOperations__CollWithdrawalInRecoveryMode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowerOperations__CompositeDebtZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowerOperations__ExceedMintCap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowerOperations__InsufficientCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowerOperations__InsufficientDebtBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowerOperations__NotActiveColl",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowerOperations__NotSingularChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowerOperations__OperationInRecoveryMode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowerOperations__RepayLargerThanTrenBoxDebt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowerOperations__TrenBoxICRBelowCCR",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowerOperations__TrenBoxICRBelowMCR",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowerOperations__TrenBoxIsActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowerOperations__TrenBoxNetDebtLessThanMin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowerOperations__TrenBoxNewICRBelowOldICR",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowerOperations__TrenBoxNewTCRBelowCCR",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowerOperations__TrenBoxNotExistOrClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowerOperations__ZeroAdjustment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowerOperations__ZeroDebtChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__CommunityIssuanceZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__LengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__SetupIsInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__TRENStakingZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "address_",
          "type": "address"
        }
      ],
      "name": "ConfigurableAddresses__ZeroAddresses",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EthUnsupportedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmountError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "feePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "TrenBase__FeeExceededMax",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "name": "BorrowingFeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "arrayIndex",
          "type": "uint256"
        }
      ],
      "name": "TrenBoxCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IBorrowerOperations.BorrowerOperation",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "TrenBoxUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_assetSent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "addColl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_assetSent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collWithdrawal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debtTokenChange",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isDebtIncrease",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "adjustTrenBox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "authorizeUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "claimCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityIssuance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        }
      ],
      "name": "getCompositeDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getEntireSystemColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemColl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getEntireSystemDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAddressSetupInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debtTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "openTrenBox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "repayDebtTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_communityIssuance",
          "type": "address"
        }
      ],
      "name": "setCommunityIssuance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trenStaking",
          "type": "address"
        }
      ],
      "name": "setTRENStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTrenBoxes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManagerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxStorage",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collWithdrawal",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "withdrawColl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "withdrawDebtTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x58b43d7925536c9cd2205122b4caab4fdf9489d59cdaf4da427bb2e249a8a9de",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x19E733F20aAdaB8996f7895ACBD04f746BF4Aac1",
    "contractAddress": null,
    "transactionIndex": 46,
    "gasUsed": "3676800",
    "logsBloom": "0x
    "blockHash": "0x6a347b996a349e0380a0272fc6d963969cfdc6f2f9a9f53eaa53f886cf0b8814",
    "transactionHash": "0x58b43d7925536c9cd2205122b4caab4fdf9489d59cdaf4da427bb2e249a8a9de",
    "logs": [],
    "blockNumber": 5866753,
    "cumulativeGasUsed": "10715046",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3f36ab4fec5358e2986dfe0e94450c3f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerOperations__CollWithdrawalInRecoveryMode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerOperations__CompositeDebtZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerOperations__ExceedMintCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerOperations__InsufficientCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerOperations__InsufficientDebtBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerOperations__NotActiveColl\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerOperations__NotSingularChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerOperations__OperationInRecoveryMode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerOperations__RepayLargerThanTrenBoxDebt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerOperations__TrenBoxICRBelowCCR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerOperations__TrenBoxICRBelowMCR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerOperations__TrenBoxIsActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerOperations__TrenBoxNetDebtLessThanMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerOperations__TrenBoxNewICRBelowOldICR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerOperations__TrenBoxNewTCRBelowCCR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerOperations__TrenBoxNotExistOrClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerOperations__ZeroAdjustment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerOperations__ZeroDebtChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__CommunityIssuanceZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__SetupIsInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__TRENStakingZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"ConfigurableAddresses__ZeroAddresses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EthUnsupportedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmountError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePercentage\",\"type\":\"uint256\"}],\"name\":\"TrenBase__FeeExceededMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"BorrowingFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arrayIndex\",\"type\":\"uint256\"}],\"name\":\"TrenBoxCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IBorrowerOperations.BorrowerOperation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"TrenBoxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetSent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"addColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetSent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtTokenChange\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isDebtIncrease\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"adjustTrenBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"authorizeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"claimCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityIssuance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"}],\"name\":\"getCompositeDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAddressSetupInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"openTrenBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"repayDebtTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityIssuance\",\"type\":\"address\"}],\"name\":\"setCommunityIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trenStaking\",\"type\":\"address\"}],\"name\":\"setTRENStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTrenBoxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManagerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawDebtTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimCollateral(address)\":{\"notice\":\"Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery Mode\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BorrowerOperations.sol\":\"BorrowerOperations\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"contracts/BorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { UUPSUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport { TrenMath } from \\\"./Dependencies/TrenMath.sol\\\";\\nimport { TrenBase } from \\\"./Dependencies/TrenBase.sol\\\";\\nimport { SafetyTransfer } from \\\"./Dependencies/SafetyTransfer.sol\\\";\\n\\nimport { IPriceFeed } from \\\"./Interfaces/IPriceFeed.sol\\\";\\nimport { ISortedTrenBoxes } from \\\"./Interfaces/ISortedTrenBoxes.sol\\\";\\nimport { IAdminContract } from \\\"./Interfaces/IAdminContract.sol\\\";\\nimport { ITrenBoxManager } from \\\"./Interfaces/ITrenBoxManager.sol\\\";\\nimport { IBorrowerOperations } from \\\"./Interfaces/IBorrowerOperations.sol\\\";\\nimport { IDebtToken } from \\\"./Interfaces/IDebtToken.sol\\\";\\nimport { IFeeCollector } from \\\"./Interfaces/IFeeCollector.sol\\\";\\nimport { ITrenBoxStorage } from \\\"./Interfaces/ITrenBoxStorage.sol\\\";\\n\\ncontract BorrowerOperations is\\n    TrenBase,\\n    ReentrancyGuardUpgradeable,\\n    UUPSUpgradeable,\\n    IBorrowerOperations\\n{\\n    using SafeERC20 for IERC20;\\n\\n    string public constant NAME = \\\"BorrowerOperations\\\";\\n\\n    // --- Initializer ---\\n\\n    function initialize(address initialOwner) public initializer {\\n        __Ownable_init(initialOwner);\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    // --- Borrower TrenBox Operations ---\\n\\n    function openTrenBox(\\n        address _asset,\\n        uint256 _assetAmount,\\n        uint256 _debtTokenAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external\\n        override\\n        nonReentrant\\n    {\\n        if (!IAdminContract(adminContract).getIsActive(_asset)) {\\n            revert BorrowerOperations__NotActiveColl();\\n        }\\n\\n        OpenTrenBox memory vars;\\n        vars.asset = _asset;\\n\\n        vars.price = IPriceFeed(priceFeed).fetchPrice(vars.asset);\\n        bool isRecoveryMode = _checkRecoveryMode(vars.asset, vars.price);\\n\\n        uint256 status = ITrenBoxManager(trenBoxManager).getTrenBoxStatus(vars.asset, msg.sender);\\n        if (status == 1) {\\n            revert BorrowerOperations__TrenBoxIsActive();\\n        }\\n\\n        vars.netDebt = _debtTokenAmount;\\n\\n        if (!isRecoveryMode) {\\n            vars.debtTokenFee = _triggerBorrowingFee(vars.asset, _debtTokenAmount);\\n            vars.netDebt = vars.netDebt + vars.debtTokenFee;\\n        }\\n        _requireAtLeastMinNetDebt(vars.asset, vars.netDebt);\\n\\n        // ICR is based on the composite debt, i.e. the requested debt token amount + borrowing fee\\n        // + gas comp.\\n        uint256 gasCompensation =\\n            IAdminContract(adminContract).getDebtTokenGasCompensation(vars.asset);\\n        vars.compositeDebt = vars.netDebt + gasCompensation;\\n        if (vars.compositeDebt == 0) {\\n            revert BorrowerOperations__CompositeDebtZero();\\n        }\\n\\n        vars.ICR = TrenMath._computeCR(_assetAmount, vars.compositeDebt, vars.price);\\n        vars.NICR = TrenMath._computeNominalCR(_assetAmount, vars.compositeDebt);\\n\\n        if (isRecoveryMode) {\\n            _requireICRisAboveCCR(vars.asset, vars.ICR);\\n        } else {\\n            _requireICRisAboveMCR(vars.asset, vars.ICR);\\n            uint256 newTCR = _getNewTCRFromTrenBoxChange(\\n                vars.asset, _assetAmount, true, vars.compositeDebt, true, vars.price\\n            ); // bools: coll increase, debt increase\\n            _requireNewTCRisAboveCCR(vars.asset, newTCR);\\n        }\\n\\n        // Set the trenBox struct's properties\\n        ITrenBoxManager(trenBoxManager).setTrenBoxStatus(vars.asset, msg.sender, 1);\\n\\n        uint256 collateralAmountAfterIncrease = ITrenBoxManager(trenBoxManager).increaseTrenBoxColl(\\n            vars.asset, msg.sender, _assetAmount\\n        );\\n        uint256 debtAmount_ = ITrenBoxManager(trenBoxManager).increaseTrenBoxDebt(\\n            vars.asset, msg.sender, vars.compositeDebt\\n        );\\n\\n        ITrenBoxManager(trenBoxManager).updateTrenBoxRewardSnapshots(vars.asset, msg.sender);\\n        vars.stake =\\n            ITrenBoxManager(trenBoxManager).updateStakeAndTotalStakes(vars.asset, msg.sender);\\n\\n        ISortedTrenBoxes(sortedTrenBoxes).insert(\\n            vars.asset, msg.sender, vars.NICR, _upperHint, _lowerHint\\n        );\\n        vars.arrayIndex =\\n            ITrenBoxManager(trenBoxManager).addTrenBoxOwnerToArray(vars.asset, msg.sender);\\n        emit TrenBoxCreated(vars.asset, msg.sender, vars.arrayIndex);\\n\\n        // Move the asset to the Active Pool, and mint the debtToken amount to the borrower\\n        _trenBoxStorageAddColl(vars.asset, _assetAmount);\\n        _withdrawDebtTokens(vars.asset, msg.sender, _debtTokenAmount, vars.netDebt);\\n\\n        // Move the debtToken gas compensation to the Gas Pool\\n        if (gasCompensation != 0) {\\n            _withdrawDebtTokens(vars.asset, trenBoxStorage, gasCompensation, gasCompensation);\\n        }\\n\\n        emit TrenBoxUpdated(\\n            vars.asset,\\n            msg.sender,\\n            debtAmount_,\\n            collateralAmountAfterIncrease,\\n            vars.stake,\\n            BorrowerOperation.openTrenBox\\n        );\\n        emit BorrowingFeePaid(vars.asset, msg.sender, vars.debtTokenFee);\\n    }\\n\\n    // Send collateral to a trenBox\\n    function addColl(\\n        address _asset,\\n        uint256 _assetSent,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external\\n        override\\n        nonReentrant\\n    {\\n        _adjustTrenBox(_asset, _assetSent, msg.sender, 0, 0, false, _upperHint, _lowerHint);\\n    }\\n\\n    // Withdraw collateral from a trenBox\\n    function withdrawColl(\\n        address _asset,\\n        uint256 _collWithdrawal,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external\\n        override\\n        nonReentrant\\n    {\\n        _adjustTrenBox(_asset, 0, msg.sender, _collWithdrawal, 0, false, _upperHint, _lowerHint);\\n    }\\n\\n    // Withdraw debt tokens from a trenBox: mint new debt tokens to the owner, and increase the\\n    // trenBox's debt accordingly\\n    function withdrawDebtTokens(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external\\n        override\\n        nonReentrant\\n    {\\n        _adjustTrenBox(_asset, 0, msg.sender, 0, _debtTokenAmount, true, _upperHint, _lowerHint);\\n    }\\n\\n    // Repay debt tokens to a TrenBox: Burn the repaid debt tokens, and reduce the trenBox's debt\\n    // accordingly or Close TrenBox if user has enough tokens at all\\n    function repayDebtTokens(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external\\n        override\\n        nonReentrant\\n    {\\n        if (\\n            _debtTokenAmount\\n                == _getNetDebt(\\n                    _asset, ITrenBoxManager(trenBoxManager).getTrenBoxDebt(_asset, msg.sender)\\n                ) - IAdminContract(adminContract).getDebtTokenGasCompensation(_asset)\\n        ) {\\n            closeTrenBox(_asset);\\n        } else {\\n            _adjustTrenBox(\\n                _asset, 0, msg.sender, 0, _debtTokenAmount, false, _upperHint, _lowerHint\\n            );\\n        }\\n    }\\n\\n    function adjustTrenBox(\\n        address _asset,\\n        uint256 _assetSent,\\n        uint256 _collWithdrawal,\\n        uint256 _debtTokenChange,\\n        bool _isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external\\n        override\\n        nonReentrant\\n    {\\n        _adjustTrenBox(\\n            _asset,\\n            _assetSent,\\n            msg.sender,\\n            _collWithdrawal,\\n            _debtTokenChange,\\n            _isDebtIncrease,\\n            _upperHint,\\n            _lowerHint\\n        );\\n    }\\n\\n    /**\\n     * @dev _adjustTrenBox(): Alongside a debt change, this function can perform either a collateral\\n     * top-up or a collateral withdrawal.\\n     */\\n    function _adjustTrenBox(\\n        address _asset,\\n        uint256 _assetSent,\\n        address _borrower,\\n        uint256 _collWithdrawal,\\n        uint256 _debtTokenChange,\\n        bool _isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        internal\\n    {\\n        AdjustTrenBox memory vars;\\n        vars.asset = _asset;\\n        vars.price = IPriceFeed(priceFeed).fetchPrice(vars.asset);\\n        bool isRecoveryMode = _checkRecoveryMode(vars.asset, vars.price);\\n\\n        if (_isDebtIncrease) {\\n            if (_debtTokenChange == 0) {\\n                revert BorrowerOperations__ZeroDebtChange();\\n            }\\n        }\\n        _requireSingularCollChange(_collWithdrawal, _assetSent);\\n        _requireNonZeroAdjustment(_collWithdrawal, _debtTokenChange, _assetSent);\\n        _requireTrenBoxIsActive(vars.asset, _borrower);\\n\\n        // Confirm the operation is either a borrower adjusting their own trenBox, or a pure asset\\n        // transfer from the Stability Pool to a trenBox\\n        assert(\\n            msg.sender == _borrower\\n                || (stabilityPool == msg.sender && _assetSent != 0 && _debtTokenChange == 0)\\n        );\\n\\n        ITrenBoxManager(trenBoxManager).applyPendingRewards(vars.asset, _borrower);\\n\\n        // Get the collChange based on whether or not asset was sent in the transaction\\n        (vars.collChange, vars.isCollIncrease) = _getCollChange(_assetSent, _collWithdrawal);\\n\\n        vars.netDebtChange = _debtTokenChange;\\n\\n        // If the adjustment incorporates a debt increase and system is in Normal Mode, then trigger\\n        // a borrowing fee\\n        if (_isDebtIncrease && !isRecoveryMode) {\\n            vars.debtTokenFee = _triggerBorrowingFee(vars.asset, _debtTokenChange);\\n            vars.netDebtChange = vars.netDebtChange + vars.debtTokenFee; // The raw debt change\\n                // includes the fee\\n        }\\n\\n        vars.debt = ITrenBoxManager(trenBoxManager).getTrenBoxDebt(vars.asset, _borrower);\\n        vars.coll = ITrenBoxManager(trenBoxManager).getTrenBoxColl(vars.asset, _borrower);\\n\\n        // Get the trenBox's old ICR before the adjustment, and what its new ICR will be after the\\n        // adjustment\\n        vars.oldICR = TrenMath._computeCR(vars.coll, vars.debt, vars.price);\\n        vars.newICR = _getNewICRFromTrenBoxChange(\\n            vars.coll,\\n            vars.debt,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease,\\n            vars.price\\n        );\\n        if (_collWithdrawal > vars.coll) {\\n            revert BorrowerOperations__InsufficientCollateral();\\n        }\\n\\n        // Check the adjustment satisfies all conditions for the current system mode\\n        _requireValidAdjustmentInCurrentMode(\\n            vars.asset, isRecoveryMode, _collWithdrawal, _isDebtIncrease, vars\\n        );\\n\\n        // When the adjustment is a debt repayment, check it's a valid amount and that the caller\\n        // has enough debt tokens\\n        if (!_isDebtIncrease && _debtTokenChange != 0) {\\n            _requireSufficientDebtTokenBalance(_borrower, vars.netDebtChange);\\n        }\\n\\n        (vars.newColl, vars.newDebt) = _updateTrenBoxFromAdjustment(\\n            vars.asset,\\n            _borrower,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease\\n        );\\n        vars.stake =\\n            ITrenBoxManager(trenBoxManager).updateStakeAndTotalStakes(vars.asset, _borrower);\\n\\n        // Re-insert trenBox in to the sorted list\\n        uint256 newNICR = _getNewNominalICRFromTrenBoxChange(\\n            vars.coll,\\n            vars.debt,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease\\n        );\\n        ISortedTrenBoxes(sortedTrenBoxes).reInsert(\\n            vars.asset, _borrower, newNICR, _upperHint, _lowerHint\\n        );\\n\\n        emit TrenBoxUpdated(\\n            vars.asset,\\n            _borrower,\\n            vars.newDebt,\\n            vars.newColl,\\n            vars.stake,\\n            BorrowerOperation.adjustTrenBox\\n        );\\n        emit BorrowingFeePaid(vars.asset, msg.sender, vars.debtTokenFee);\\n\\n        // Use the unmodified _debtTokenChange here, as we don't send the fee to the user\\n        _moveTokensFromAdjustment(\\n            vars.asset,\\n            msg.sender,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            _debtTokenChange,\\n            _isDebtIncrease,\\n            vars.netDebtChange\\n        );\\n    }\\n\\n    function closeTrenBox(address _asset) internal {\\n        _requireTrenBoxIsActive(_asset, msg.sender);\\n        uint256 price = IPriceFeed(priceFeed).fetchPrice(_asset);\\n        _requireNotInRecoveryMode(_asset, price);\\n\\n        ITrenBoxManager(trenBoxManager).applyPendingRewards(_asset, msg.sender);\\n\\n        uint256 coll = ITrenBoxManager(trenBoxManager).getTrenBoxColl(_asset, msg.sender);\\n        uint256 debt = ITrenBoxManager(trenBoxManager).getTrenBoxDebt(_asset, msg.sender);\\n\\n        uint256 gasCompensation = IAdminContract(adminContract).getDebtTokenGasCompensation(_asset);\\n        uint256 refund = IFeeCollector(feeCollector).simulateRefund(msg.sender, _asset, 1 ether);\\n        uint256 netDebt = debt - gasCompensation - refund;\\n\\n        _requireSufficientDebtTokenBalance(msg.sender, netDebt);\\n\\n        uint256 newTCR = _getNewTCRFromTrenBoxChange(_asset, coll, false, debt, false, price);\\n        _requireNewTCRisAboveCCR(_asset, newTCR);\\n\\n        ITrenBoxManager(trenBoxManager).removeStake(_asset, msg.sender);\\n        ITrenBoxManager(trenBoxManager).closeTrenBox(_asset, msg.sender);\\n\\n        emit TrenBoxUpdated(_asset, msg.sender, 0, 0, 0, BorrowerOperation.closeTrenBox);\\n\\n        // Burn the repaid debt tokens from the user's balance and the gas compensation from the Gas\\n        // Pool\\n        _repayDebtTokens(_asset, msg.sender, netDebt, refund);\\n        if (gasCompensation != 0) {\\n            _repayDebtTokens(_asset, trenBoxStorage, gasCompensation, 0);\\n        }\\n\\n        // Signal to the fee collector that debt has been paid in full\\n        IFeeCollector(feeCollector).closeDebt(msg.sender, _asset);\\n\\n        // Send the collateral back to the user\\n        ITrenBoxStorage(trenBoxStorage).sendCollateral(_asset, msg.sender, coll);\\n    }\\n\\n    /**\\n     * Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery\\n     * Mode\\n     */\\n    function claimCollateral(address _asset) external override {\\n        ITrenBoxStorage(trenBoxStorage).claimCollateral(_asset, msg.sender);\\n    }\\n\\n    function _triggerBorrowingFee(\\n        address _asset,\\n        uint256 _debtTokenAmount\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 debtTokenFee =\\n            ITrenBoxManager(trenBoxManager).getBorrowingFee(_asset, _debtTokenAmount);\\n        IDebtToken(debtToken).mint(_asset, feeCollector, debtTokenFee);\\n        IFeeCollector(feeCollector).increaseDebt(msg.sender, _asset, debtTokenFee);\\n        return debtTokenFee;\\n    }\\n\\n    function _getCollChange(\\n        uint256 _collReceived,\\n        uint256 _requestedCollWithdrawal\\n    )\\n        internal\\n        pure\\n        returns (uint256 collChange, bool isCollIncrease)\\n    {\\n        if (_collReceived != 0) {\\n            collChange = _collReceived;\\n            isCollIncrease = true;\\n        } else {\\n            collChange = _requestedCollWithdrawal;\\n        }\\n    }\\n\\n    // Update trenBox's coll and debt based on whether they increase or decrease\\n    function _updateTrenBoxFromAdjustment(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease\\n    )\\n        internal\\n        returns (uint256, uint256)\\n    {\\n        uint256 newColl = (_isCollIncrease)\\n            ? ITrenBoxManager(trenBoxManager).increaseTrenBoxColl(_asset, _borrower, _collChange)\\n            : ITrenBoxManager(trenBoxManager).decreaseTrenBoxColl(_asset, _borrower, _collChange);\\n        uint256 newDebt = (_isDebtIncrease)\\n            ? ITrenBoxManager(trenBoxManager).increaseTrenBoxDebt(_asset, _borrower, _debtChange)\\n            : ITrenBoxManager(trenBoxManager).decreaseTrenBoxDebt(_asset, _borrower, _debtChange);\\n\\n        return (newColl, newDebt);\\n    }\\n\\n    function _moveTokensFromAdjustment(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtTokenChange,\\n        bool _isDebtIncrease,\\n        uint256 _netDebtChange\\n    )\\n        internal\\n    {\\n        if (_isDebtIncrease) {\\n            _withdrawDebtTokens(_asset, _borrower, _debtTokenChange, _netDebtChange);\\n        } else {\\n            _repayDebtTokens(_asset, _borrower, _debtTokenChange, 0);\\n        }\\n        if (_isCollIncrease) {\\n            _trenBoxStorageAddColl(_asset, _collChange);\\n        } else {\\n            ITrenBoxStorage(trenBoxStorage).sendCollateral(_asset, _borrower, _collChange);\\n        }\\n    }\\n\\n    // Send asset to TrenBoxStorage and increase its recorded asset balance\\n    function _trenBoxStorageAddColl(address _asset, uint256 _amount) internal {\\n        ITrenBoxStorage(trenBoxStorage).increaseActiveCollateral(_asset, _amount);\\n        IERC20(_asset).safeTransferFrom(\\n            msg.sender, trenBoxStorage, SafetyTransfer.decimalsCorrection(_asset, _amount)\\n        );\\n    }\\n\\n    // Issue the specified amount of debt tokens to _account and increases the total active debt\\n    // (_netDebtIncrease potentially includes a debtTokenFee)\\n    function _withdrawDebtTokens(\\n        address _asset,\\n        address _account,\\n        uint256 _debtTokenAmount,\\n        uint256 _netDebtIncrease\\n    )\\n        internal\\n    {\\n        uint256 newTotalAssetDebt =\\n            ITrenBoxStorage(trenBoxStorage).getTotalDebtBalance(_asset) + _netDebtIncrease;\\n        if (newTotalAssetDebt > IAdminContract(adminContract).getMintCap(_asset)) {\\n            revert BorrowerOperations__ExceedMintCap();\\n        }\\n        ITrenBoxStorage(trenBoxStorage).increaseActiveDebt(_asset, _netDebtIncrease);\\n        IDebtToken(debtToken).mint(_asset, _account, _debtTokenAmount);\\n    }\\n\\n    // Burn the specified amount of debt tokens from _account and decreases the total active debt\\n    function _repayDebtTokens(\\n        address _asset,\\n        address _account,\\n        uint256 _debtTokenAmount,\\n        uint256 _refund\\n    )\\n        internal\\n    {\\n        /// @dev the borrowing fee partial refund is accounted for when decreasing the debt, as it\\n        /// was included when trenBox was opened\\n        ITrenBoxStorage(trenBoxStorage).decreaseActiveDebt(_asset, _debtTokenAmount + _refund);\\n        /// @dev the borrowing fee partial refund is not burned here, as it has already been burned\\n        /// by the FeeCollector\\n        IDebtToken(debtToken).burn(_account, _debtTokenAmount);\\n    }\\n\\n    // --- 'Require' wrapper functions ---\\n\\n    function _requireSingularCollChange(\\n        uint256 _collWithdrawal,\\n        uint256 _amountSent\\n    )\\n        internal\\n        pure\\n    {\\n        if (_collWithdrawal != 0 && _amountSent != 0) {\\n            revert BorrowerOperations__NotSingularChange();\\n        }\\n    }\\n\\n    function _requireNonZeroAdjustment(\\n        uint256 _collWithdrawal,\\n        uint256 _debtTokenChange,\\n        uint256 _assetSent\\n    )\\n        internal\\n        pure\\n    {\\n        if (_collWithdrawal == 0 && _debtTokenChange == 0 && _assetSent == 0) {\\n            revert BorrowerOperations__ZeroAdjustment();\\n        }\\n    }\\n\\n    function _requireTrenBoxIsActive(address _asset, address _borrower) internal view {\\n        uint256 status = ITrenBoxManager(trenBoxManager).getTrenBoxStatus(_asset, _borrower);\\n        if (status != 1) {\\n            revert BorrowerOperations__TrenBoxNotExistOrClosed();\\n        }\\n    }\\n\\n    function _requireNotInRecoveryMode(address _asset, uint256 _price) internal view {\\n        if (_checkRecoveryMode(_asset, _price)) {\\n            revert BorrowerOperations__OperationInRecoveryMode();\\n        }\\n    }\\n\\n    function _requireNoCollWithdrawal(uint256 _collWithdrawal) internal pure {\\n        if (_collWithdrawal != 0) {\\n            revert BorrowerOperations__CollWithdrawalInRecoveryMode();\\n        }\\n    }\\n\\n    function _requireValidAdjustmentInCurrentMode(\\n        address _asset,\\n        bool _isRecoveryMode,\\n        uint256 _collWithdrawal,\\n        bool _isDebtIncrease,\\n        AdjustTrenBox memory _vars\\n    )\\n        internal\\n        view\\n    {\\n        /*\\n         * In Recovery Mode, only allow:\\n         *\\n         * - Pure collateral top-up\\n         * - Pure debt repayment\\n         * - Collateral top-up with debt repayment\\n        * - A debt increase combined with a collateral top-up which makes the ICR >= 150% and\\n        improves the ICR (and by extension improves the TCR).\\n         *\\n         * In Normal Mode, ensure:\\n         *\\n         * - The new ICR is above MCR\\n         * - The adjustment won't pull the TCR below CCR\\n         */\\n        if (_isRecoveryMode) {\\n            _requireNoCollWithdrawal(_collWithdrawal);\\n            if (_isDebtIncrease) {\\n                _requireICRisAboveCCR(_asset, _vars.newICR);\\n                _requireNewICRisAboveOldICR(_vars.newICR, _vars.oldICR);\\n            }\\n        } else {\\n            // if Normal Mode\\n            _requireICRisAboveMCR(_asset, _vars.newICR);\\n            _vars.newTCR = _getNewTCRFromTrenBoxChange(\\n                _asset,\\n                _vars.collChange,\\n                _vars.isCollIncrease,\\n                _vars.netDebtChange,\\n                _isDebtIncrease,\\n                _vars.price\\n            );\\n            _requireNewTCRisAboveCCR(_asset, _vars.newTCR);\\n        }\\n    }\\n\\n    function _requireICRisAboveMCR(address _asset, uint256 _newICR) internal view {\\n        if (_newICR < IAdminContract(adminContract).getMcr(_asset)) {\\n            revert BorrowerOperations__TrenBoxICRBelowMCR();\\n        }\\n    }\\n\\n    function _requireICRisAboveCCR(address _asset, uint256 _newICR) internal view {\\n        if (_newICR < IAdminContract(adminContract).getCcr(_asset)) {\\n            revert BorrowerOperations__TrenBoxICRBelowCCR();\\n        }\\n    }\\n\\n    function _requireNewICRisAboveOldICR(uint256 _newICR, uint256 _oldICR) internal pure {\\n        if (_newICR < _oldICR) {\\n            revert BorrowerOperations__TrenBoxNewICRBelowOldICR();\\n        }\\n    }\\n\\n    function _requireNewTCRisAboveCCR(address _asset, uint256 _newTCR) internal view {\\n        if (_newTCR < IAdminContract(adminContract).getCcr(_asset)) {\\n            revert BorrowerOperations__TrenBoxNewTCRBelowCCR();\\n        }\\n    }\\n\\n    function _requireAtLeastMinNetDebt(address _asset, uint256 _netDebt) internal view {\\n        if (_netDebt < IAdminContract(adminContract).getMinNetDebt(_asset)) {\\n            revert BorrowerOperations__TrenBoxNetDebtLessThanMin();\\n        }\\n    }\\n\\n    function _requireSufficientDebtTokenBalance(\\n        address _borrower,\\n        uint256 _debtRepayment\\n    )\\n        internal\\n        view\\n    {\\n        if (IDebtToken(debtToken).balanceOf(_borrower) < _debtRepayment) {\\n            revert BorrowerOperations__InsufficientDebtBalance();\\n        }\\n    }\\n\\n    // --- ICR and TCR getters ---\\n\\n    // Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending\\n    // rewards.\\n    function _getNewNominalICRFromTrenBoxChange(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        (uint256 newColl, uint256 newDebt) = _getNewTrenBoxAmounts(\\n            _coll, _debt, _collChange, _isCollIncrease, _debtChange, _isDebtIncrease\\n        );\\n\\n        uint256 newNICR = TrenMath._computeNominalCR(newColl, newDebt);\\n        return newNICR;\\n    }\\n\\n    // Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending\\n    // rewards.\\n    function _getNewICRFromTrenBoxChange(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease,\\n        uint256 _price\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        (uint256 newColl, uint256 newDebt) = _getNewTrenBoxAmounts(\\n            _coll, _debt, _collChange, _isCollIncrease, _debtChange, _isDebtIncrease\\n        );\\n\\n        uint256 newICR = TrenMath._computeCR(newColl, newDebt, _price);\\n        return newICR;\\n    }\\n\\n    function _getNewTrenBoxAmounts(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease\\n    )\\n        internal\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        uint256 newColl = _coll;\\n        uint256 newDebt = _debt;\\n\\n        newColl = _isCollIncrease ? _coll + _collChange : _coll - _collChange;\\n        newDebt = _isDebtIncrease ? _debt + _debtChange : _debt - _debtChange;\\n\\n        return (newColl, newDebt);\\n    }\\n\\n    function _getNewTCRFromTrenBoxChange(\\n        address _asset,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease,\\n        uint256 _price\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalColl = getEntireSystemColl(_asset);\\n        uint256 totalDebt = getEntireSystemDebt(_asset);\\n\\n        totalColl = _isCollIncrease ? totalColl + _collChange : totalColl - _collChange;\\n        totalDebt = _isDebtIncrease ? totalDebt + _debtChange : totalDebt - _debtChange;\\n\\n        uint256 newTCR = TrenMath._computeCR(totalColl, totalDebt, _price);\\n        return newTCR;\\n    }\\n\\n    function getCompositeDebt(\\n        address _asset,\\n        uint256 _debt\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _getCompositeDebt(_asset, _debt);\\n    }\\n\\n    function authorizeUpgrade(address newImplementation) public {\\n        _authorizeUpgrade(newImplementation);\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner { }\\n}\\n\",\"keccak256\":\"0x316bd68fb4f04ee296ed355fd40dd65d628602ddc5285948db75450812bd4489\",\"license\":\"MIT\"},\"contracts/Dependencies/ConfigurableAddresses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract ConfigurableAddresses is OwnableUpgradeable {\\n    address public adminContract;\\n    address public borrowerOperations;\\n    address public communityIssuance;\\n    address public debtToken;\\n    address public feeCollector;\\n    address public flashLoanAddress;\\n    address public trenStaking;\\n    address public priceFeed;\\n    address public sortedTrenBoxes;\\n    address public stabilityPool;\\n    address public timelockAddress;\\n    address public treasuryAddress;\\n    address public trenBoxManager;\\n    address public trenBoxManagerOperations;\\n    address public trenBoxStorage;\\n\\n    bool public isAddressSetupInitialized;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[33] private __gap; // Goerli uses 47; Arbitrum uses 33\\n\\n    error ConfigurableAddresses__SetupIsInitialized();\\n    error ConfigurableAddresses__ZeroAddresses(uint256 position, address address_);\\n    error ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n    error ConfigurableAddresses__TRENStakingZeroAddress();\\n    error ConfigurableAddresses__LengthMismatch();\\n\\n    // Dependency setters\\n    // -----------------------------------------------------------------------------------------------\\n\\n    function setAddresses(address[] calldata _addresses) external onlyOwner {\\n        if (isAddressSetupInitialized) {\\n            revert ConfigurableAddresses__SetupIsInitialized();\\n        }\\n        if (_addresses.length != 13) {\\n            revert ConfigurableAddresses__LengthMismatch();\\n        }\\n\\n        for (uint256 i = 0; i < 13; i++) {\\n            if (_addresses[i] == address(0)) {\\n                revert ConfigurableAddresses__ZeroAddresses(i, _addresses[i]);\\n            }\\n        }\\n        adminContract = _addresses[0];\\n        borrowerOperations = _addresses[1];\\n        debtToken = _addresses[2];\\n        feeCollector = _addresses[3];\\n        flashLoanAddress = _addresses[4];\\n        priceFeed = _addresses[5];\\n        sortedTrenBoxes = _addresses[6];\\n        stabilityPool = _addresses[7];\\n        timelockAddress = _addresses[8];\\n        treasuryAddress = _addresses[9];\\n        trenBoxManager = _addresses[10];\\n        trenBoxManagerOperations = _addresses[11];\\n        trenBoxStorage = _addresses[12];\\n\\n        isAddressSetupInitialized = true;\\n    }\\n\\n    function setCommunityIssuance(address _communityIssuance) public onlyOwner {\\n        if (_communityIssuance == address(0)) {\\n            revert ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n        }\\n        communityIssuance = _communityIssuance;\\n    }\\n\\n    function setTRENStaking(address _trenStaking) public onlyOwner {\\n        if (_trenStaking == address(0)) {\\n            revert ConfigurableAddresses__TRENStakingZeroAddress();\\n        }\\n        trenStaking = _trenStaking;\\n    }\\n}\\n\",\"keccak256\":\"0x8c08787a51c52fc5b1fae23a7732fe579a3508725cd5d4d527978c2f95bf4421\",\"license\":\"MIT\"},\"contracts/Dependencies/SafetyTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IERC20Decimals } from \\\"../Interfaces/IERC20Decimals.sol\\\";\\n\\nlibrary SafetyTransfer {\\n    error EthUnsupportedError();\\n    error InvalidAmountError();\\n\\n    //_amount is in ether (1e18) and we want to convert it to the token decimal\\n    function decimalsCorrection(address _token, uint256 _amount) internal view returns (uint256) {\\n        if (_token == address(0)) {\\n            revert EthUnsupportedError();\\n        }\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n        uint8 decimals = IERC20Decimals(_token).decimals();\\n        if (decimals < 18) {\\n            uint256 divisor = 10 ** (18 - decimals);\\n            if (_amount % divisor != 0) {\\n                revert InvalidAmountError();\\n            }\\n            return _amount / divisor;\\n        } else if (decimals > 18) {\\n            uint256 multiplier = 10 ** (decimals - 18);\\n            return _amount * multiplier;\\n        }\\n        return _amount;\\n    }\\n}\\n\",\"keccak256\":\"0x8661386c9ff583aa23a5edfcba5bef533877663018bcc8c626fb70d2090872cf\",\"license\":\"MIT\"},\"contracts/Dependencies/TrenBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport { ConfigurableAddresses } from \\\"./ConfigurableAddresses.sol\\\";\\nimport { TrenMath } from \\\"./TrenMath.sol\\\";\\nimport { TrenMath } from \\\"./TrenMath.sol\\\";\\n\\nimport { IAdminContract } from \\\"../Interfaces/IAdminContract.sol\\\";\\nimport { ITrenBoxStorage } from \\\"../Interfaces/ITrenBoxStorage.sol\\\";\\n\\n/*\\n* Base contract for TrenBoxManager, BorrowerOperations and StabilityPool. Contains global system\\nconstants and\\n * common functions.\\n */\\nabstract contract TrenBase is OwnableUpgradeable, ConfigurableAddresses {\\n    struct Colls {\\n        address[] tokens;\\n        uint256[] amounts;\\n    }\\n\\n    error TrenBase__FeeExceededMax(uint256 feePercentage, uint256 maxFeePercentage);\\n\\n    // --- Gas compensation functions ---\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trenBox, for the purpose of\\n    // ICR calculation\\n    function _getCompositeDebt(address _asset, uint256 _debt) internal view returns (uint256) {\\n        return _debt + IAdminContract(adminContract).getDebtTokenGasCompensation(_asset);\\n    }\\n\\n    function _getNetDebt(address _asset, uint256 _debt) internal view returns (uint256) {\\n        return _debt - IAdminContract(adminContract).getDebtTokenGasCompensation(_asset);\\n    }\\n\\n    // Return the amount of ETH to be drawn from a trenBox's collateral and sent as gas\\n    // compensation.\\n    function _getCollGasCompensation(\\n        address _asset,\\n        uint256 _entireColl\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _entireColl / IAdminContract(adminContract).getPercentDivisor(_asset);\\n    }\\n\\n    function getEntireSystemColl(address _asset) public view returns (uint256 entireSystemColl) {\\n        return ITrenBoxStorage(trenBoxStorage).getTotalCollateralBalance(_asset);\\n    }\\n\\n    function getEntireSystemDebt(address _asset) public view returns (uint256 entireSystemDebt) {\\n        return ITrenBoxStorage(trenBoxStorage).getTotalDebtBalance(_asset);\\n    }\\n\\n    function _getTCR(address _asset, uint256 _price) internal view returns (uint256 TCR) {\\n        uint256 entireSystemColl = getEntireSystemColl(_asset);\\n        uint256 entireSystemDebt = getEntireSystemDebt(_asset);\\n        TCR = TrenMath._computeCR(entireSystemColl, entireSystemDebt, _price);\\n    }\\n\\n    function _checkRecoveryMode(address _asset, uint256 _price) internal view returns (bool) {\\n        uint256 TCR = _getTCR(_asset, _price);\\n        return TCR < IAdminContract(adminContract).getCcr(_asset);\\n    }\\n\\n    function _requireUserAcceptsFee(\\n        uint256 _fee,\\n        uint256 _amount,\\n        uint256 _maxFeePercentage\\n    )\\n        internal\\n        view\\n    {\\n        uint256 feePercentage = (_fee * IAdminContract(adminContract).DECIMAL_PRECISION()) / _amount;\\n        if (feePercentage > _maxFeePercentage) {\\n            revert TrenBase__FeeExceededMax(feePercentage, _maxFeePercentage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79b73a8551cce7bbe260862154011eafa823442e8248e7d49b2f9748206d8f84\",\"license\":\"MIT\"},\"contracts/Dependencies/TrenMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nuint256 constant DECIMAL_PRECISION = 1 ether;\\n\\nlibrary TrenMath {\\n    uint256 internal constant EXPONENT_CAP = 525_600_000;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n    * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity\\n    floor division.\\n     *\\n    * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39\\n    ETH,\\n    * and will only truncate to 0 if the denominator is at least 1e20 times greater than the\\n    numerator.\\n     *\\n     */\\n    uint256 internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /*\\n     * Multiply two decimal numbers and use normal rounding rules:\\n     * -round product up if 19'th mantissa digit >= 5\\n     * -round product down if 19'th mantissa digit < 5\\n     *\\n     * Used only inside the exponentiation, _decPow().\\n     */\\n    function decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\n        uint256 prod_xy = x * y;\\n\\n        decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\n    }\\n\\n    /*\\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n     *\\n     * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n     *\\n     * Called by two functions that represent time in units of minutes:\\n     * 1) TrenBoxManager._calcDecayedBaseRate\\n     * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n     *\\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n     * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n     *\\n    * If a period of > 1000 years is ever used as an exponent in either of the above functions, the\\n    result will be\\n     * negligibly different from just passing the cap, since:\\n     *\\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n    * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will\\n    be negligible\\n     */\\n    function _decPow(uint256 _base, uint256 _minutes) internal pure returns (uint256) {\\n        if (_minutes > EXPONENT_CAP) {\\n            _minutes = EXPONENT_CAP;\\n        } // cap to avoid overflow\\n\\n        if (_minutes == 0) {\\n            return DECIMAL_PRECISION;\\n        }\\n\\n        uint256 y = DECIMAL_PRECISION;\\n        uint256 x = _base;\\n        uint256 n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n / 2;\\n            } else {\\n                // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n - 1) / 2;\\n            }\\n        }\\n\\n        return decMul(x, y);\\n    }\\n\\n    function _getAbsoluteDifference(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a >= _b) ? _a - _b : _b - _a;\\n    }\\n\\n    function _computeNominalCR(uint256 _coll, uint256 _debt) internal pure returns (uint256) {\\n        if (_debt != 0) {\\n            return (_coll * NICR_PRECISION) / _debt;\\n        }\\n        // Return the maximal value for uint256 if the TrenBox has a debt of 0. Represents\\n        // \\\"infinite\\\"\\n        // CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n\\n    function _computeCR(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _price\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_debt != 0) {\\n            uint256 newCollRatio = (_coll * _price) / _debt;\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the TrenBox has a debt of 0. Represents\\n        // \\\"infinite\\\"\\n        // CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe994e212c74767f28667a0656d52a8178622016c50f0406914e485483576c40c\",\"license\":\"MIT\"},\"contracts/Interfaces/IAdminContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IAdminContract {\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    struct CollateralParams {\\n        uint256 index; // Maps to token address in validCollateral[]\\n        bool active;\\n        uint256 borrowingFee;\\n        uint256 ccr;\\n        uint256 mcr;\\n        uint256 debtTokenGasCompensation; // Amount of debtToken to be locked in gas pool on opening\\n            // trenBoxes\\n        uint256 minNetDebt; // Minimum amount of net debtToken a trenBox must have\\n        uint256 mintCap;\\n        uint256 percentDivisor;\\n        uint256 redemptionFeeFloor;\\n        uint256 redemptionBlockTimestamp;\\n    }\\n\\n    struct FlashLoanParams {\\n        uint256 flashLoanFee; // 10 = 0,1%, 100 = 10% => 10 out of $1000 = $10\\n        uint256 flashLoanMinDebt; // min amount of trenUSD to mint for Flash Loan\\n        uint256 flashLoanMaxDebt; // max amount of trenUSD to mint for Flash Loan\\n    }\\n\\n    // Custom Errors\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    error SafeCheckError(string parameter, uint256 valueEntered, uint256 minValue, uint256 maxValue);\\n    error AdminContract__OnlyOwner();\\n    error AdminContract__OnlyTimelock();\\n    error AdminContract__CollateralAlreadyInitialized();\\n    error AdminContract__CollateralExists();\\n    error AdminContract__CollateralDoesNotExist();\\n    error AdminContract__CollateralNotConfigured();\\n\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    event CollateralAdded(address _collateral);\\n    event MCRChanged(uint256 oldMCR, uint256 newMCR);\\n    event CCRChanged(uint256 oldCCR, uint256 newCCR);\\n    event MinNetDebtChanged(uint256 oldMinNet, uint256 newMinNet);\\n    event PercentDivisorChanged(uint256 oldPercentDiv, uint256 newPercentDiv);\\n    event BorrowingFeeChanged(uint256 oldBorrowingFee, uint256 newBorrowingFee);\\n    event RedemptionFeeFloorChanged(uint256 oldRedemptionFeeFloor, uint256 newRedemptionFeeFloor);\\n    event MintCapChanged(uint256 oldMintCap, uint256 newMintCap);\\n    event RedemptionBlockTimestampChanged(address _collateral, uint256 _blockTimestamp);\\n    event FlashLoanFeeChanged(uint256 oldFee, uint256 newFee);\\n    event FlashLoanMinDebtChanged(uint256 oldMinDebt, uint256 newMinDebt);\\n    event FlashLoanMaxDebtChanged(uint256 oldMaxDebt, uint256 newMaxDebt);\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    function DECIMAL_PRECISION() external view returns (uint256);\\n\\n    function _100pct() external view returns (uint256);\\n\\n    function addNewCollateral(address _collateral, uint256 _debtTokenGasCompensation) external;\\n\\n    function setCollateralParameters(\\n        address _collateral,\\n        uint256 borrowingFee,\\n        uint256 ccr,\\n        uint256 mcr,\\n        uint256 minNetDebt,\\n        uint256 mintCap,\\n        uint256 percentDivisor,\\n        uint256 redemptionFeeFloor\\n    )\\n        external;\\n\\n    function setMCR(address _collateral, uint256 newMCR) external;\\n\\n    function setCCR(address _collateral, uint256 newCCR) external;\\n\\n    function setMinNetDebt(address _collateral, uint256 minNetDebt) external;\\n\\n    function setPercentDivisor(address _collateral, uint256 percentDivisor) external;\\n\\n    function setBorrowingFee(address _collateral, uint256 borrowingFee) external;\\n\\n    function setRedemptionFeeFloor(address _collateral, uint256 redemptionFeeFloor) external;\\n\\n    function setMintCap(address _collateral, uint256 mintCap) external;\\n\\n    function setRedemptionBlockTimestamp(address _collateral, uint256 _blockTimestamp) external;\\n\\n    function switchRouteToTRENStaking() external;\\n\\n    function getIndex(address _collateral) external view returns (uint256);\\n\\n    function getIsActive(address _collateral) external view returns (bool);\\n\\n    function getValidCollateral() external view returns (address[] memory);\\n\\n    function getMcr(address _collateral) external view returns (uint256);\\n\\n    function getCcr(address _collateral) external view returns (uint256);\\n\\n    function getDebtTokenGasCompensation(address _collateral) external view returns (uint256);\\n\\n    function getMinNetDebt(address _collateral) external view returns (uint256);\\n\\n    function getPercentDivisor(address _collateral) external view returns (uint256);\\n\\n    function getBorrowingFee(address _collateral) external view returns (uint256);\\n\\n    function getRedemptionFeeFloor(address _collateral) external view returns (uint256);\\n\\n    function getRedemptionBlockTimestamp(address _collateral) external view returns (uint256);\\n\\n    function getMintCap(address _collateral) external view returns (uint256);\\n\\n    function getTotalAssetDebt(address _asset) external view returns (uint256);\\n\\n    function getFlashLoanFee() external view returns (uint256);\\n\\n    function getFlashLoanMinNetDebt() external view returns (uint256);\\n\\n    function getFlashLoanMaxNetDebt() external view returns (uint256);\\n\\n    function getRouteToTRENStaking() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1869dd966254c73fb336daf112ce6a0fff25db56e1b3001091dff0aa71b49e53\",\"license\":\"MIT\"},\"contracts/Interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface IBorrowerOperations {\\n    // --- Enums ---\\n    enum BorrowerOperation {\\n        openTrenBox,\\n        closeTrenBox,\\n        adjustTrenBox\\n    }\\n\\n    struct AdjustTrenBox {\\n        address asset;\\n        bool isCollIncrease;\\n        uint256 price;\\n        uint256 collChange;\\n        uint256 netDebtChange;\\n        uint256 debt;\\n        uint256 coll;\\n        uint256 oldICR;\\n        uint256 newICR;\\n        uint256 newTCR;\\n        uint256 debtTokenFee;\\n        uint256 newDebt;\\n        uint256 newColl;\\n        uint256 stake;\\n    }\\n\\n    struct OpenTrenBox {\\n        address asset;\\n        uint256 price;\\n        uint256 debtTokenFee;\\n        uint256 netDebt;\\n        uint256 compositeDebt;\\n        uint256 ICR;\\n        uint256 NICR;\\n        uint256 stake;\\n        uint256 arrayIndex;\\n    }\\n\\n    // --- Events ---\\n\\n    event BorrowingFeePaid(address indexed _asset, address indexed _borrower, uint256 _feeAmount);\\n    event TrenBoxCreated(address indexed _asset, address indexed _borrower, uint256 arrayIndex);\\n    event TrenBoxUpdated(\\n        address indexed _asset,\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 stake,\\n        BorrowerOperation operation\\n    );\\n\\n    // --- Errors ---\\n\\n    error BorrowerOperations__NotActiveColl();\\n    error BorrowerOperations__TrenBoxNotExistOrClosed();\\n    error BorrowerOperations__TrenBoxIsActive();\\n    error BorrowerOperations__TrenBoxNetDebtLessThanMin();\\n    error BorrowerOperations__CompositeDebtZero();\\n    error BorrowerOperations__TrenBoxICRBelowCCR();\\n    error BorrowerOperations__TrenBoxICRBelowMCR();\\n    error BorrowerOperations__TrenBoxNewICRBelowOldICR();\\n    error BorrowerOperations__TrenBoxNewTCRBelowCCR();\\n    error BorrowerOperations__ZeroDebtChange();\\n    error BorrowerOperations__NotSingularChange();\\n    error BorrowerOperations__ZeroAdjustment();\\n    error BorrowerOperations__OperationInRecoveryMode();\\n    error BorrowerOperations__CollWithdrawalInRecoveryMode();\\n    error BorrowerOperations__RepayLargerThanTrenBoxDebt();\\n    error BorrowerOperations__InsufficientDebtBalance();\\n    error BorrowerOperations__InsufficientCollateral();\\n    error BorrowerOperations__ExceedMintCap();\\n\\n    // --- Functions ---\\n\\n    function openTrenBox(\\n        address _asset,\\n        uint256 _assetAmount,\\n        uint256 _debtTokenAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external;\\n\\n    function addColl(\\n        address _asset,\\n        uint256 _assetSent,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external;\\n\\n    function withdrawColl(\\n        address _asset,\\n        uint256 _assetAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external;\\n\\n    function withdrawDebtTokens(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external;\\n\\n    function repayDebtTokens(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external;\\n\\n    function adjustTrenBox(\\n        address _asset,\\n        uint256 _assetSent,\\n        uint256 _collWithdrawal,\\n        uint256 _debtChange,\\n        bool isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint\\n    )\\n        external;\\n\\n    function claimCollateral(address _asset) external;\\n\\n    function getCompositeDebt(address _asset, uint256 _debt) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf5bad7bd38359978e99704a2542e967e9a1846f552e01d777f0efa011b410945\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDebtToken is IERC20 {\\n    event TokenBalanceUpdated(address _user, uint256 _amount);\\n    event EmergencyStopMintingCollateral(address _asset, bool state);\\n    event WhitelistChanged(address _whitelisted, bool whitelisted);\\n    event ProtocolContractsAddressesSet(\\n        address borrowerOperations, address stabilityPool, address trenBoxManager\\n    );\\n\\n    error DebtToken__MintBlockedForCollateral(address collateral);\\n    error DebtToken__InvalidAddressToConnect();\\n    error DebtToken__CannotTransferTokensToZeroAddress();\\n    error DebtToken__CannotTransferTokensToTokenContract();\\n    error DebtToken__NotWhitelistedContract(address notWhitelistedContract);\\n    error DebtToken__CallerIsNotBorrowerOperations(address caller);\\n    error DebtToken__CallerIsNotStabilityPool(address caller);\\n    error DebtToken__CannotBurnTokens();\\n    error DebtToken__CannotReturnFromPool();\\n\\n    function emergencyStopMinting(address _asset, bool status) external;\\n\\n    function mint(address _asset, address _account, uint256 _amount) external;\\n\\n    function mintFromWhitelistedContract(uint256 _amount) external;\\n\\n    function burnFromWhitelistedContract(uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function sendToPool(address _sender, address poolAddress, uint256 _amount) external;\\n\\n    function returnFromPool(address poolAddress, address user, uint256 _amount) external;\\n\\n    function addWhitelist(address _address) external;\\n\\n    function removeWhitelist(address _address) external;\\n}\\n\",\"keccak256\":\"0x4c48896e514f0900029e5b4433bbb627cf2aea7102f792cac729ca9cd79782d1\",\"license\":\"MIT\"},\"contracts/Interfaces/IERC20Decimals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface IERC20Decimals {\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xb784584e544d4f45a48dc5c68bea423dbb35bd4cfadc3007ee3ab64212ff71da\",\"license\":\"MIT\"},\"contracts/Interfaces/IFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface IFeeCollector {\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    event FeeRecordUpdated(\\n        address borrower, address asset, uint256 from, uint256 to, uint256 amount\\n    );\\n    event FeeCollected(address borrower, address asset, address collector, uint256 amount);\\n    event FeeRefunded(address borrower, address asset, uint256 amount);\\n    event RedemptionFeeCollected(address asset, uint256 amount);\\n\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    struct FeeRecord {\\n        uint256 from; // timestamp in seconds\\n        uint256 to; // timestamp in seconds\\n        uint256 amount; // refundable fee amount\\n    }\\n\\n    // Custom Errors\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    error FeeCollector__ArrayMismatch();\\n    error FeeCollector__BorrowerOperationsOnly(address sender, address expected);\\n    error FeeCollector__BorrowerOperationsOrTrenBoxManagerOnly(\\n        address sender, address expected1, address expected2\\n    );\\n    error FeeCollector__InvalidTRENStakingAddress();\\n    error FeeCollector__TrenBoxManagerOnly(address sender, address expected);\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    function increaseDebt(address _borrower, address _asset, uint256 _feeAmount) external;\\n\\n    function decreaseDebt(address _borrower, address _asset, uint256 _paybackFraction) external;\\n\\n    function closeDebt(address _borrower, address _asset) external;\\n\\n    function liquidateDebt(address _borrower, address _asset) external;\\n\\n    function simulateRefund(\\n        address _borrower,\\n        address _asset,\\n        uint256 _paybackFraction\\n    )\\n        external\\n        returns (uint256);\\n\\n    function collectFees(address[] calldata _borrowers, address[] calldata _assets) external;\\n\\n    function handleRedemptionFee(address _asset, uint256 _amount) external;\\n\\n    function getProtocolRevenueDestination() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4acb0589d73afd26dd9ea281eef5052818955b501f2371c21a1acac953bf5152\",\"license\":\"MIT\"},\"contracts/Interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\n/**\\n * @dev from\\n * https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\n */\\ninterface ChainlinkAggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\\ninterface IPriceFeed {\\n    // Enums\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    enum ProviderType {\\n        Chainlink,\\n        API3\\n    }\\n\\n    // Structs\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    struct OracleRecord {\\n        address oracleAddress;\\n        ProviderType providerType;\\n        uint256 timeoutSeconds;\\n        uint256 decimals;\\n        bool isEthIndexed;\\n    }\\n\\n    // Custom Errors\\n    // --------------------------------------------------------------------------------------------------\\n\\n    error PriceFeed__ExistingOracleRequired();\\n    error PriceFeed__InvalidDecimalsError();\\n    error PriceFeed__InvalidOracleResponseError(address token);\\n    error PriceFeed__TimelockOnlyError();\\n    error PriceFeed__UnknownAssetError();\\n\\n    // Events\\n    // ---------------------------------------------------------------------------------------------------------\\n\\n    event NewOracleRegistered(\\n        address token, address oracleAddress, bool isEthIndexed, bool isFallback\\n    );\\n\\n    // Functions\\n    // ------------------------------------------------------------------------------------------------------\\n\\n    function fetchPrice(address _token) external view returns (uint256);\\n\\n    function setOracle(\\n        address _token,\\n        address _oracle,\\n        ProviderType _type,\\n        uint256 _timeoutSeconds,\\n        bool _isEthIndexed,\\n        bool _isFallback\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0x9208bb29684a633dd16752d52a9d7f8e79dabe5bfc86070825a1f81ed982cfb0\",\"license\":\"MIT\"},\"contracts/Interfaces/ISortedTrenBoxes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface ISortedTrenBoxes {\\n    // --- Events ---\\n\\n    event NodeAdded(address indexed _asset, address _id, uint256 _NICR);\\n    event NodeRemoved(address indexed _asset, address _id);\\n\\n    error SortedTrenBoxer__ListDoesNotContainNode();\\n    error SortedTrenBoxes__ListAlreadyContainsNode();\\n    error SortedTrenBoxes__IdCannotBeZeroAddress();\\n    error SortedTrenBoxes__NICRMustBeGreaterThanZero();\\n    error SortedTrenBoxes__CallerMustBeTrenBoxManager();\\n    error SortedTrenBoxes__CallerMustBeBorrowerOperationsOrTrenBoxManager();\\n\\n    // --- Functions ---\\n\\n    function insert(\\n        address _asset,\\n        address _id,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external;\\n\\n    function remove(address _asset, address _id) external;\\n\\n    function reInsert(\\n        address _asset,\\n        address _id,\\n        uint256 _newICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external;\\n\\n    function contains(address _asset, address _id) external view returns (bool);\\n\\n    function isEmpty(address _asset) external view returns (bool);\\n\\n    function getSize(address _asset) external view returns (uint256);\\n\\n    function getFirst(address _asset) external view returns (address);\\n\\n    function getLast(address _asset) external view returns (address);\\n\\n    function getNext(address _asset, address _id) external view returns (address);\\n\\n    function getPrev(address _asset, address _id) external view returns (address);\\n\\n    function validInsertPosition(\\n        address _asset,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    function findInsertPosition(\\n        address _asset,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external\\n        view\\n        returns (address, address);\\n}\\n\",\"keccak256\":\"0x89ac6c5c4e5e22e0a056c76168cff32ab96695bd1bca98b1cc10c7ddea7d4ffb\",\"license\":\"MIT\"},\"contracts/Interfaces/ITrenBoxManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface ITrenBoxManager {\\n    // Enums\\n    // ------------------------------------------------------------------------------------------------------------\\n\\n    enum Status {\\n        nonExistent,\\n        active,\\n        closedByOwner,\\n        closedByLiquidation,\\n        closedByRedemption,\\n        closedByRedistribution\\n    }\\n\\n    enum TrenBoxManagerOperation {\\n        applyPendingRewards,\\n        liquidateInNormalMode,\\n        liquidateInRecoveryMode,\\n        redeemCollateral,\\n        redistributeCollateral\\n    }\\n\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    event BaseRateUpdated(address indexed _asset, uint256 _baseRate);\\n    event LastFeeOpTimeUpdated(address indexed _asset, uint256 _lastFeeOpTime);\\n    event TotalStakesUpdated(address indexed _asset, uint256 _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        address indexed _asset, uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(address indexed _asset, uint256 _L_Coll, uint256 _L_Debt);\\n    event TrenBoxSnapshotsUpdated(address indexed _asset, uint256 _L_Coll, uint256 _L_Debt);\\n    event TrenBoxIndexUpdated(address indexed _asset, address _borrower, uint256 _newIndex);\\n\\n    event TrenBoxUpdated(\\n        address indexed _asset,\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 _stake,\\n        TrenBoxManagerOperation _operation\\n    );\\n\\n    // Custom Errors\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    error TrenBoxManager__FeeBiggerThanAssetDraw();\\n    error TrenBoxManager__OnlyOneTrenBox();\\n\\n    error TrenBoxManager__OnlyTrenBoxManagerOperations();\\n    error TrenBoxManager__OnlyBorrowerOperations();\\n    error TrenBoxManager__OnlyTrenBoxManagerOperationsOrBorrowerOperations();\\n\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    struct TrenBox {\\n        uint256 debt;\\n        uint256 coll;\\n        uint256 stake;\\n        Status status;\\n        uint128 arrayIndex;\\n    }\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    function executeFullRedemption(address _asset, address _borrower, uint256 _newColl) external;\\n\\n    function executePartialRedemption(\\n        address _asset,\\n        address _borrower,\\n        uint256 _newDebt,\\n        uint256 _newColl,\\n        uint256 _newNICR,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint\\n    )\\n        external;\\n\\n    function getTrenBoxOwnersCount(address _asset) external view returns (uint256);\\n\\n    function getTrenBoxFromTrenBoxOwnersArray(\\n        address _asset,\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (address);\\n\\n    function getNominalICR(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getCurrentICR(\\n        address _asset,\\n        address _borrower,\\n        uint256 _price\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function updateStakeAndTotalStakes(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        returns (uint256);\\n\\n    function updateTrenBoxRewardSnapshots(address _asset, address _borrower) external;\\n\\n    function addTrenBoxOwnerToArray(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        returns (uint256 index);\\n\\n    function applyPendingRewards(address _asset, address _borrower) external;\\n\\n    function getPendingAssetReward(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPendingDebtTokenReward(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function hasPendingRewards(address _asset, address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 debt,\\n            uint256 coll,\\n            uint256 pendingDebtTokenReward,\\n            uint256 pendingAssetReward\\n        );\\n\\n    function closeTrenBox(address _asset, address _borrower) external;\\n\\n    function closeTrenBoxLiquidation(address _asset, address _borrower) external;\\n\\n    function closeTrenBoxRedistribution(\\n        address _asset,\\n        address _borrower,\\n        uint256 _debtTokenGasCompensationToBurn\\n    )\\n        external;\\n\\n    function removeStake(address _asset, address _borrower) external;\\n\\n    function getRedemptionRate(address _asset) external view returns (uint256);\\n\\n    function getRedemptionRateWithDecay(address _asset) external view returns (uint256);\\n\\n    function getRedemptionFeeWithDecay(\\n        address _asset,\\n        uint256 _assetDraw\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getBorrowingRate(address _asset) external view returns (uint256);\\n\\n    function getBorrowingFee(\\n        address _asset,\\n        uint256 _debtTokenAmount\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTrenBoxStatus(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getTrenBoxStake(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getTrenBoxDebt(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getTrenBoxColl(address _asset, address _borrower) external view returns (uint256);\\n\\n    function setTrenBoxStatus(address _asset, address _borrower, uint256 num) external;\\n\\n    function increaseTrenBoxColl(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collIncrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function decreaseTrenBoxColl(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collDecrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function increaseTrenBoxDebt(\\n        address _asset,\\n        address _borrower,\\n        uint256 _debtIncrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function decreaseTrenBoxDebt(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collDecrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function getTCR(address _asset, uint256 _price) external view returns (uint256);\\n\\n    function checkRecoveryMode(address _asset, uint256 _price) external returns (bool);\\n\\n    function isValidFirstRedemptionHint(\\n        address _asset,\\n        address _firstRedemptionHint,\\n        uint256 _price\\n    )\\n        external\\n        returns (bool);\\n\\n    function updateBaseRateFromRedemption(\\n        address _asset,\\n        uint256 _assetDrawn,\\n        uint256 _price,\\n        uint256 _totalDebtTokenSupply\\n    )\\n        external;\\n\\n    function getRedemptionFee(address _asset, uint256 _assetDraw) external view returns (uint256);\\n\\n    function finalizeRedemption(\\n        address _asset,\\n        address _receiver,\\n        uint256 _debtToRedeem,\\n        uint256 _fee,\\n        uint256 _totalRedemptionRewards\\n    )\\n        external;\\n\\n    function redistributeDebtAndColl(\\n        address _asset,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 _debtToOffset,\\n        uint256 _collToSendToStabilityPool\\n    )\\n        external;\\n\\n    function updateSystemSnapshots_excludeCollRemainder(\\n        address _asset,\\n        uint256 _collRemainder\\n    )\\n        external;\\n\\n    function movePendingTrenBoxRewardsFromLiquidatedToActive(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        uint256 _assetAmount\\n    )\\n        external;\\n\\n    function isTrenBoxActive(address _asset, address _borrower) external view returns (bool);\\n\\n    function sendGasCompensation(\\n        address _asset,\\n        address _liquidator,\\n        uint256 _debtTokenAmount,\\n        uint256 _assetAmount\\n    )\\n        external;\\n\\n    function getNetDebt(address _asset, uint256 _debt) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0ec81d68c7f3a6514c7339f4a31666322f30f537d617ca1808930b25fd92c5c9\",\"license\":\"MIT\"},\"contracts/Interfaces/ITrenBoxStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface ITrenBoxStorage {\\n    /// @dev Struct for storing debt balances of a specific collateral asset.\\n    /// @param active The entire debt of all active TrenBoxes.\\n    /// @param liquidated The entire debt of all liquidated TrenBoxes.\\n    struct DebtBalances {\\n        uint256 active;\\n        uint256 liquidated;\\n    }\\n\\n    /// @dev Struct for storing balances of a specific collateral asset.\\n    /// @param active The entire collateral amount of all active TrenBoxes.\\n    /// @param liquidated The entire collateral amount of all liquidated TrenBoxes.\\n    /// @param claimable The entire collateral amount of all liquidated TrenBoxes that can be\\n    /// claimed by user.\\n    struct CollBalances {\\n        uint256 active;\\n        uint256 liquidated;\\n        uint256 claimable;\\n    }\\n\\n    /**\\n     * @dev Emitted when the active collateral balance is updated.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new active collateral balance.\\n     */\\n    event ActiveCollateralBalanceUpdated(address indexed _collateral, uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when the active debt balance is updated.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new active debt balance.\\n     */\\n    event ActiveDebtBalanceUpdated(address indexed _collateral, uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when the liquidated collateral balance is updated.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new liquidated collateral balance.\\n     */\\n    event LiquidatedCollateralBalanceUpdated(address indexed _collateral, uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when the liquidated debt balance is updated.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new liquidated debt balance.\\n     */\\n    event LiquidatedDebtBalanceUpdated(address indexed _collateral, uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when the claimable collateral balance is updated.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new claimable collateral balance.\\n     */\\n    event ClaimableCollateralBalanceUpdated(address indexed _collateral, uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when collateral is sent.\\n     * @param _to The address of the user which get collateral amount.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount of collateral sent.\\n     */\\n    event CollateralSent(address indexed _to, address indexed _collateral, uint256 _amount);\\n\\n    /**\\n     * @dev Emitted when the user claimable collateral balance is updated.\\n     * @param _account The address of the user.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new user claimable collateral balance.\\n     */\\n    event UserClaimableCollateralBalanceUpdated(\\n        address indexed _account, address indexed _collateral, uint256 _newBalance\\n    );\\n\\n    /**\\n     * @dev Error emitted when contract is not authorized.\\n     */\\n    error TrenBoxStorage__NotAuthorizedContract();\\n\\n    /**\\n     * @dev Error emitted when only TrenBoxManager is allowed.\\n     */\\n    error TrenBoxStorage__TrenBoxManagerOnly();\\n\\n    /**\\n     * @dev Error emitted when only BorrowerOperations is allowed.\\n     */\\n    error TrenBoxStorage__BorrowerOperationsOnly();\\n\\n    /**\\n     * @dev Error emitted when only BorrowerOperations or TrenBoxManager can perform an operation.\\n     */\\n    error TrenBoxStorage__BorrowerOperationsOrTrenBoxManagerOnly();\\n\\n    /**\\n     * @dev Error emitted when only TrenBoxManagerOperations is allowed.\\n     */\\n    error TrenBoxStorage__TrenBoxManagerOperationsOnly();\\n\\n    /**\\n     * @dev Error emitted when there is no claimable collateral available.\\n     */\\n    error TrenBoxStorage__NoClaimableCollateral();\\n\\n    /**\\n     * @notice Returns the active collateral balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getActiveCollateralBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the active debt balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getActiveDebtBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the liquidated collateral balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getLiquidatedCollateralBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the liquidated debt balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getLiquidatedDebtBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns sum of active and liquidated debt for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getTotalDebtBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns sum of active and liquidated amount of a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getTotalCollateralBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the claimable collateral balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getClaimableCollateralBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the claimable collateral balance for a specific user.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _account The address of the user.\\n     */\\n    function getUserClaimableCollateralBalance(\\n        address _collateral,\\n        address _account\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Increases the active debt balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount to increase the debt balance.\\n     */\\n    function increaseActiveDebt(address _collateral, uint256 _amount) external;\\n\\n    /**\\n     * @notice Decreases the active debt balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount to decrease the debt balance.\\n     */\\n    function decreaseActiveDebt(address _collateral, uint256 _amount) external;\\n\\n    /**\\n     * @notice Decreases the active balances of debt and collateral for a specific collateral after\\n     * redemption exists.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _debtAmount The amount to decrease the debt balance.\\n     * @param _collAmount The amount to decrease the collateral balance.\\n     */\\n    function decreaseActiveBalancesAfterRedemption(\\n        address _collateral,\\n        uint256 _debtAmount,\\n        uint256 _collAmount\\n    )\\n        external;\\n\\n    /**\\n     * @notice Increases the active balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount to increase the debt balance.\\n     */\\n    function increaseActiveCollateral(address _collateral, uint256 _amount) external;\\n\\n    /**\\n     * @notice Decreases the active balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount to decrease the collateral balance.\\n     */\\n    function decreaseActiveCollateral(address _collateral, uint256 _amount) external;\\n\\n    /**\\n     * @notice Updates the active and liquidated debt and collateral balances.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _debtAmount The amount to decrease the debt balance.\\n     * @param _collAmount The amount to decrease the collateral balance.\\n     * @param _isActiveIncrease The indicator that shows increasing or decreasing of active\\n     * balances.\\n     */\\n    function updateDebtAndCollateralBalances(\\n        address _collateral,\\n        uint256 _debtAmount,\\n        uint256 _collAmount,\\n        bool _isActiveIncrease\\n    )\\n        external;\\n\\n    /**\\n     * @notice Updates the entire and user claimable balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _account The address of the user.\\n     * @param _amount The amount to update the claimable balance.\\n     */\\n    function updateUserAndEntireClaimableBalance(\\n        address _collateral,\\n        address _account,\\n        uint256 _amount\\n    )\\n        external;\\n\\n    /**\\n     * @notice Increases the claimable collateral balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount to increase the claimable collateral balance.\\n     */\\n    function increaseClaimableCollateral(address _collateral, uint256 _amount) external;\\n\\n    /**\\n     * @notice Updates the claimable collateral balance of the user for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _account The address of the user.\\n     * @param _amount The amount to update the claimable balance.\\n     */\\n    function updateUserClaimableBalance(\\n        address _collateral,\\n        address _account,\\n        uint256 _amount\\n    )\\n        external;\\n\\n    /**\\n     * @notice Sends amount of active collateral from contract to user.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _account The address of the user to send.\\n     * @param _amount The amount of the collateral to send.\\n     */\\n    function sendCollateral(address _collateral, address _account, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sends amount of claimable collateral from contract to user.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _account The address of the user to send.\\n     */\\n    function claimCollateral(address _collateral, address _account) external;\\n}\\n\",\"keccak256\":\"0x611751f1cd64ec649529ceb82cf851921c015a697b5d8bf207dd6f11f017b528\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5060805161416b61003e600039600081816120630152818161208c01526121d2015261416b6000f3fe6080604052600436106102255760003560e01c80638da5cb5b11610123578063c4d66de8116100ab578063e89f80541161006f578063e89f8054146106be578063f1c05a7e146106de578063f2fde38b146106fe578063f8d898981461071e578063fe0607331461073e57600080fd5b8063c4d66de81461060d578063c5f956af1461062d578063c8564c621461064d578063cc8b21e41461067e578063d721f52a1461069e57600080fd5b8063ad3cb1cc116100f2578063ad3cb1cc1461055c578063b5c5c9fc1461058d578063b9571721146105ad578063c05c5e94146105cd578063c415b95c146105ed57600080fd5b80638da5cb5b1461049457806395fb16bb146104d15780639e86d0c4146104f1578063a3f4df7e1461051157600080fd5b80634bc66f32116101b1578063715018a611610175578063715018a6146103ff578063741bef1a146104145780637703d7301461043457806377553ad4146104545780638235b2841461047457600080fd5b80634bc66f32146103775780634f1ef2861461039757806352d1902d146103aa57806355dafa46146103bf5780636a85d67d146103df57600080fd5b806327d04b35116101f857806327d04b35146102d75780633f84a44d146102f75780634169467d1461031757806348a4a39d1461033757806349b010c51461035757600080fd5b806301c931001461022a57806302540e481461024c578063048c661d1461027f5780630a34d4d6146102b7575b600080fd5b34801561023657600080fd5b5061024a610245366004613b50565b61075e565b005b34801561025857600080fd5b5061026c610267366004613b6b565b6107af565b6040519081526020015b60405180910390f35b34801561028b57600080fd5b5060095461029f906001600160a01b031681565b6040516001600160a01b039091168152602001610276565b3480156102c357600080fd5b50600d5461029f906001600160a01b031681565b3480156102e357600080fd5b5061026c6102f2366004613b50565b6107c4565b34801561030357600080fd5b50600e5461029f906001600160a01b031681565b34801561032357600080fd5b5060055461029f906001600160a01b031681565b34801561034357600080fd5b5061024a610352366004613b95565b610834565b34801561036357600080fd5b5061024a610372366004613b95565b61086b565b34801561038357600080fd5b50600a5461029f906001600160a01b031681565b61024a6103a5366004613bf8565b610885565b3480156103b657600080fd5b5061026c6108a4565b3480156103cb57600080fd5b5060065461029f906001600160a01b031681565b3480156103eb57600080fd5b5061024a6103fa366004613b50565b6108c1565b34801561040b57600080fd5b5061024a610912565b34801561042057600080fd5b5060075461029f906001600160a01b031681565b34801561044057600080fd5b5061024a61044f366004613b95565b610926565b34801561046057600080fd5b5060015461029f906001600160a01b031681565b34801561048057600080fd5b5061024a61048f366004613b50565b610a4b565b3480156104a057600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031661029f565b3480156104dd57600080fd5b5060025461029f906001600160a01b031681565b3480156104fd57600080fd5b5061026c61050c366004613b50565b610ab2565b34801561051d57600080fd5b5061054f60405180604001604052806012815260200171426f72726f7765724f7065726174696f6e7360701b81525081565b6040516102769190613cde565b34801561056857600080fd5b5061054f604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561059957600080fd5b5061024a6105a8366004613b95565b610ae5565b3480156105b957600080fd5b5061024a6105c8366004613d11565b610b00565b3480156105d957600080fd5b5060005461029f906001600160a01b031681565b3480156105f957600080fd5b5060045461029f906001600160a01b031681565b34801561061957600080fd5b5061024a610628366004613b50565b610fa9565b34801561063957600080fd5b50600b5461029f906001600160a01b031681565b34801561065957600080fd5b50600e5461066e90600160a01b900460ff1681565b6040519015158152602001610276565b34801561068a57600080fd5b5060085461029f906001600160a01b031681565b3480156106aa57600080fd5b5061024a6106b9366004613d86565b6110c1565b3480156106ca57600080fd5b5061024a6106d9366004613deb565b6118ca565b3480156106ea57600080fd5b50600c5461029f906001600160a01b031681565b34801561070a57600080fd5b5061024a610719366004613b50565b611902565b34801561072a57600080fd5b5060035461029f906001600160a01b031681565b34801561074a57600080fd5b5061024a610759366004613b50565b611940565b610766611949565b6001600160a01b03811661078d576040516385d3330760e01b815260040160405180910390fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b60006107bb83836119a4565b90505b92915050565b600e5460405163b429464160e01b81526001600160a01b038381166004830152600092169063b4294641906024015b602060405180830381865afa158015610810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107be9190613e5e565b61083c611a1d565b61084e84843360008060008888611a55565b610865600160008051602061413f83398151915255565b50505050565b610873611a1d565b61084e84600033866000808888611a55565b61088d612058565b610896826120fd565b6108a08282612105565b5050565b60006108ae6121c7565b5060008051602061411f83398151915290565b6108c9611949565b6001600160a01b0381166108f05760405163706ebc6560e11b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b61091a611949565b6109246000612210565b565b61092e611a1d565b60005460405163c08261db60e01b81526001600160a01b0386811660048301529091169063c08261db90602401602060405180830381865afa158015610978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099c9190613e5e565b600c5460405163f9a3d41f60e01b8152610a1a9187916001600160a01b039091169063f9a3d41f906109d49084903390600401613e77565b602060405180830381865afa1580156109f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a159190613e5e565b612281565b610a249190613ea7565b8303610a3857610a33846122fa565b61084e565b61084e8460003360008760008888611a55565b600e54604051632b946eed60e11b81526001600160a01b0390911690635728ddda90610a7d9084903390600401613e77565b600060405180830381600087803b158015610a9757600080fd5b505af1158015610aab573d6000803e3d6000fd5b5050505050565b600e54604051635845309f60e11b81526001600160a01b038381166004830152600092169063b08a613e906024016107f3565b610aed611a1d565b61084e8460003360008760018888611a55565b610b08611949565b600e54600160a01b900460ff1615610b3257604051625f22e960e41b815260040160405180910390fd5b600d8114610b5357604051633f5a111d60e21b815260040160405180910390fd5b60005b600d811015610bf6576000838383818110610b7357610b73613eba565b9050602002016020810190610b889190613b50565b6001600160a01b031603610bee5780838383818110610ba957610ba9613eba565b9050602002016020810190610bbe9190613b50565b604051630d9d339f60e01b815260048101929092526001600160a01b031660248201526044015b60405180910390fd5b600101610b56565b5081816000818110610c0a57610c0a613eba565b9050602002016020810190610c1f9190613b50565b600080546001600160a01b0319166001600160a01b039290921691909117905581816001818110610c5257610c52613eba565b9050602002016020810190610c679190613b50565b600180546001600160a01b0319166001600160a01b039290921691909117905581816002818110610c9a57610c9a613eba565b9050602002016020810190610caf9190613b50565b600380546001600160a01b0319166001600160a01b039290921691909117815582908290818110610ce257610ce2613eba565b9050602002016020810190610cf79190613b50565b600480546001600160a01b0319166001600160a01b039290921691909117815582908290818110610d2a57610d2a613eba565b9050602002016020810190610d3f9190613b50565b600580546001600160a01b0319166001600160a01b039290921691909117815582908290818110610d7257610d72613eba565b9050602002016020810190610d879190613b50565b600780546001600160a01b0319166001600160a01b039290921691909117905581816006818110610dba57610dba613eba565b9050602002016020810190610dcf9190613b50565b600880546001600160a01b0319166001600160a01b039290921691909117905581816007818110610e0257610e02613eba565b9050602002016020810190610e179190613b50565b600980546001600160a01b0319166001600160a01b039290921691909117905581816008818110610e4a57610e4a613eba565b9050602002016020810190610e5f9190613b50565b600a80546001600160a01b0319166001600160a01b039290921691909117905581816009818110610e9257610e92613eba565b9050602002016020810190610ea79190613b50565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a818110610eda57610eda613eba565b9050602002016020810190610eef9190613b50565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b818110610f2257610f22613eba565b9050602002016020810190610f379190613b50565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c818110610f6a57610f6a613eba565b9050602002016020810190610f7f9190613b50565b600e80546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610fef5750825b905060008267ffffffffffffffff16600114801561100c5750303b155b90508115801561101a575080155b156110385760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561106257845460ff60401b1916600160401b1785555b61106b86612826565b611073612837565b83156110b957845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b6110c9611a1d565b6000546040516317ae1fc560e01b81526001600160a01b038781166004830152909116906317ae1fc590602401602060405180830381865afa158015611113573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111379190613ed0565b61115457604051635024407160e11b815260040160405180910390fd5b6111ac60405180610120016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b03868116808352600754604051635670bcc760e11b815260048101929092529091169063ace1798e90602401602060405180830381865afa1580156111fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112209190613e5e565b602082018190528151600091611236919061283f565b600c548351604051632862f79760e11b81529293506000926001600160a01b03909216916350c5ef2e9161126e913390600401613e77565b602060405180830381865afa15801561128b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112af9190613e5e565b9050806001036112d25760405163319aae6d60e21b815260040160405180910390fd5b60608301869052816113065782516112ea90876128c4565b6040840181905260608401516113009190613eed565b60608401525b61131883600001518460600151612a17565b60008054845160405163c08261db60e01b81526001600160a01b03918216600482015291169063c08261db90602401602060405180830381865afa158015611364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113889190613e5e565b905080846060015161139a9190613eed565b608085018190526000036113c157604051636c15d58360e11b815260040160405180910390fd5b6113d48885608001518660200151612aa5565b60a085015260808401516113e9908990612ad9565b60c0850152821561140b5761140684600001518560a00151612b0f565b61144d565b61141d84600001518560a00151612b9d565b600061143b85600001518a6001886080015160018a60200151612c2b565b905061144b856000015182612ca1565b505b600c548451604051636f4ecd4560e01b81526001600160a01b0390921691636f4ecd4591611482913390600190600401613f00565b600060405180830381600087803b15801561149c57600080fd5b505af11580156114b0573d6000803e3d6000fd5b5050600c54865160405163061e9dc360e01b8152600094506001600160a01b03909216925063061e9dc3916114ec919033908e90600401613f00565b6020604051808303816000875af115801561150b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152f9190613e5e565b600c548651608088015160405163c2bac5f160e01b81529394506000936001600160a01b039093169263c2bac5f19261156f929091339190600401613f00565b6020604051808303816000875af115801561158e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b29190613e5e565b600c548751604051634eebd97f60e01b81529293506001600160a01b0390911691634eebd97f916115e7913390600401613e77565b600060405180830381600087803b15801561160157600080fd5b505af1158015611615573d6000803e3d6000fd5b5050600c54885160405163dbe9f91960e01b81526001600160a01b03909216935063dbe9f919925061164b913390600401613e77565b6020604051808303816000875af115801561166a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168e9190613e5e565b60e0870152600854865160c0880151604051633e499e0560e11b81526001600160a01b03928316600482015233602482015260448101919091528a821660648201528982166084820152911690637c933c0a9060a401600060405180830381600087803b1580156116fe57600080fd5b505af1158015611712573d6000803e3d6000fd5b5050600c54885160405163d1a71b5f60e01b81526001600160a01b03909216935063d1a71b5f9250611748913390600401613e77565b6020604051808303816000875af1158015611767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178b9190613e5e565b6101008701819052865160405191825233916001600160a01b03909116907f30d1b1917c27aa4ce4d813612d438af6adea3706bb2009e7309788f4bfc61f7d9060200160405180910390a385516117e2908b612d2f565b6117f68660000151338b8960600151612dc3565b8215611816578551600e5461181691906001600160a01b03168580612dc3565b855160e087015160405133926001600160a01b0316917f7feef73802d9a37116f36078fbc66117c8cdb7b4c9bdddf51ee03257c786b32a9161185f918691889190600090613f46565b60405180910390a38551604080880151905190815233916001600160a01b0316907fd89359f0d8e7f936d0682c5565cc5a16989a91560a80c7b06c46c28e52a5d43a9060200160405180910390a3505050505050610aab600160008051602061413f83398151915255565b6118d2611a1d565b6118e28787338888888888611a55565b6118f9600160008051602061413f83398151915255565b50505050505050565b61190a611949565b6001600160a01b03811661193457604051631e4fbdf760e01b815260006004820152602401610be5565b61193d81612210565b50565b61193d816120fd565b3361197b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146109245760405163118cdaa760e01b8152336004820152602401610be5565b6000805460405163c08261db60e01b81526001600160a01b0385811660048301529091169063c08261db90602401602060405180830381865afa1580156119ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a139190613e5e565b6107bb9083613eed565b60008051602061413f833981519152805460011901611a4f57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b611ad2604051806101c0016040528060006001600160a01b031681526020016000151581526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b03898116808352600754604051635670bcc760e11b815260048101929092529091169063ace1798e90602401602060405180830381865afa158015611b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b469190613e5e565b604082018190528151600091611b5c919061283f565b90508415611b855785600003611b8557604051636862f00560e11b815260040160405180910390fd5b611b8f878a612fa2565b611b9a87878b612fce565b8151611ba69089613002565b336001600160a01b0389161480611bdb57506009546001600160a01b031633148015611bd157508815155b8015611bdb575085155b611be757611be7613f68565b600c54825160405163df4fb9ef60e01b81526001600160a01b039092169163df4fb9ef91611c19918c90600401613e77565b600060405180830381600087803b158015611c3357600080fd5b505af1158015611c47573d6000803e3d6000fd5b50505050611c558988613099565b15156020840152606083015260808201869052848015611c73575080155b15611ca1578151611c8490876128c4565b61014083018190526080830151611c9b9190613eed565b60808301525b600c54825160405163f9a3d41f60e01b81526001600160a01b039092169163f9a3d41f91611cd3918c90600401613e77565b602060405180830381865afa158015611cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d149190613e5e565b60a0830152600c548251604051633517ff1b60e11b81526001600160a01b0390921691636a2ffe3691611d4b918c90600401613e77565b602060405180830381865afa158015611d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8c9190613e5e565b60c0830181905260a08301516040840151611da8929190612aa5565b8260e0018181525050611dd88260c001518360a001518460600151856020015186608001518a88604001516130b8565b61010083015260c0820151871115611e0357604051634767d7b360e11b815260040160405180910390fd5b8151611e1290828988866130eb565b84158015611e1f57508515155b15611e3257611e32888360800151613167565b611e508260000151898460600151856020015186608001518a6131f4565b610160840152610180830152600c54825160405163dbe9f91960e01b81526001600160a01b039092169163dbe9f91991611e8e918c90600401613e77565b6020604051808303816000875af1158015611ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed19190613e5e565b826101a00181815250506000611eff8360c001518460a001518560600151866020015187608001518b6133fe565b600854845160405163bc9b5bd560e01b81526001600160a01b0391821660048201528c821660248201526044810184905288821660648201528782166084820152929350169063bc9b5bd59060a401600060405180830381600087803b158015611f6857600080fd5b505af1158015611f7c573d6000803e3d6000fd5b50505050886001600160a01b031683600001516001600160a01b03167f7feef73802d9a37116f36078fbc66117c8cdb7b4c9bdddf51ee03257c786b32a856101600151866101800151876101a001516002604051611fdd9493929190613f46565b60405180910390a3825161014084015160405190815233916001600160a01b0316907fd89359f0d8e7f936d0682c5565cc5a16989a91560a80c7b06c46c28e52a5d43a9060200160405180910390a361204b836000015133856060015186602001518b8b8960800151613421565b5050505050505050505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806120df57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166120d360008051602061411f833981519152546001600160a01b031690565b6001600160a01b031614155b156109245760405163703e46dd60e11b815260040160405180910390fd5b61193d611949565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561215f575060408051601f3d908101601f1916820190925261215c91810190613e5e565b60015b61218757604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610be5565b60008051602061411f83398151915281146121b857604051632a87526960e21b815260048101829052602401610be5565b6121c283836134bc565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109245760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6000805460405163c08261db60e01b81526001600160a01b0385811660048301529091169063c08261db90602401602060405180830381865afa1580156122cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f09190613e5e565b6107bb9083613ea7565b6123048133613002565b600754604051635670bcc760e11b81526001600160a01b038381166004830152600092169063ace1798e90602401602060405180830381865afa15801561234f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123739190613e5e565b905061237f8282613512565b600c5460405163df4fb9ef60e01b81526001600160a01b039091169063df4fb9ef906123b19085903390600401613e77565b600060405180830381600087803b1580156123cb57600080fd5b505af11580156123df573d6000803e3d6000fd5b5050600c54604051633517ff1b60e11b8152600093506001600160a01b039091169150636a2ffe36906124189086903390600401613e77565b602060405180830381865afa158015612435573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124599190613e5e565b600c5460405163f9a3d41f60e01b81529192506000916001600160a01b039091169063f9a3d41f906124919087903390600401613e77565b602060405180830381865afa1580156124ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d29190613e5e565b6000805460405163c08261db60e01b81526001600160a01b0388811660048301529394509192169063c08261db90602401602060405180830381865afa158015612520573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125449190613e5e565b600480546040516320e3d2f760e11b81529293506000926001600160a01b03909116916341c7a5ee916125859133918b91670de0b6b3a76400009101613f00565b6020604051808303816000875af11580156125a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c89190613e5e565b90506000816125d78486613ea7565b6125e19190613ea7565b90506125ed3382613167565b60006125ff888760008860008c612c2b565b905061260b8882612ca1565b600c54604051633ed3a18f60e21b81526001600160a01b039091169063fb4e863c9061263d908b903390600401613e77565b600060405180830381600087803b15801561265757600080fd5b505af115801561266b573d6000803e3d6000fd5b5050600c54604051633d9ef93160e01b81526001600160a01b039091169250633d9ef93191506126a1908b903390600401613e77565b600060405180830381600087803b1580156126bb57600080fd5b505af11580156126cf573d6000803e3d6000fd5b50505050336001600160a01b0316886001600160a01b03167f7feef73802d9a37116f36078fbc66117c8cdb7b4c9bdddf51ee03257c786b32a6000806000600160405161271f9493929190613f46565b60405180910390a36127338833848661353a565b831561275357600e546127539089906001600160a01b031686600061353a565b6004805460405163871d814560e01b81526001600160a01b039091169163871d8145916127849133918d9101613e77565b600060405180830381600087803b15801561279e57600080fd5b505af11580156127b2573d6000803e3d6000fd5b5050600e5460405163715aa61b60e01b81526001600160a01b03909116925063715aa61b91506127ea908b9033908b90600401613f00565b600060405180830381600087803b15801561280457600080fd5b505af1158015612818573d6000803e3d6000fd5b505050505050505050505050565b61282e613620565b61193d81613669565b610924613620565b60008061284c8484613671565b60005460405163316a306d60e11b81526001600160a01b0387811660048301529293509116906362d460da90602401602060405180830381865afa158015612898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128bc9190613e5e565b119392505050565b600c546040516314757c1360e31b81526001600160a01b03848116600483015260248201849052600092839291169063a3abe09890604401602060405180830381865afa158015612919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293d9190613e5e565b60035460048054604051636361ddf360e11b81529394506001600160a01b039283169363c6c3bbe693612978938a9390911691879101613f00565b600060405180830381600087803b15801561299257600080fd5b505af11580156129a6573d6000803e3d6000fd5b5050600480546040516336f1224960e11b81526001600160a01b039091169350636de2449292506129dd9133918991879101613f00565b600060405180830381600087803b1580156129f757600080fd5b505af1158015612a0b573d6000803e3d6000fd5b50929695505050505050565b6000546040516321b443a360e21b81526001600160a01b038481166004830152909116906386d10e8c90602401602060405180830381865afa158015612a61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a859190613e5e565b8110156108a057604051633c762e9160e01b815260040160405180910390fd5b60008215612acd57600083612aba8487613f7e565b612ac49190613fab565b9150612ad29050565b506000195b9392505050565b60008115612b065781612af568056bc75e2d6310000085613f7e565b612aff9190613fab565b90506107be565b506000196107be565b60005460405163316a306d60e11b81526001600160a01b038481166004830152909116906362d460da90602401602060405180830381865afa158015612b59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7d9190613e5e565b8110156108a05760405163a5107d2d60e01b815260040160405180910390fd5b600054604051633c557a6f60e11b81526001600160a01b038481166004830152909116906378aaf4de90602401602060405180830381865afa158015612be7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0b9190613e5e565b8110156108a057604051633b02ce0760e11b815260040160405180910390fd5b600080612c3788610ab2565b90506000612c44896107c4565b905086612c5a57612c558883613ea7565b612c64565b612c648883613eed565b915084612c7a57612c758682613ea7565b612c84565b612c848682613eed565b90506000612c93838387612aa5565b9a9950505050505050505050565b60005460405163316a306d60e11b81526001600160a01b038481166004830152909116906362d460da90602401602060405180830381865afa158015612ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0f9190613e5e565b8110156108a05760405163200c362760e21b815260040160405180910390fd5b600e546040516358889c4160e11b81526001600160a01b038481166004830152602482018490529091169063b111388290604401600060405180830381600087803b158015612d7d57600080fd5b505af1158015612d91573d6000803e3d6000fd5b5050600e546108a092503391506001600160a01b0316612db185856136a0565b6001600160a01b0386169291906137d8565b600e5460405163b429464160e01b81526001600160a01b038681166004830152600092849291169063b429464190602401602060405180830381865afa158015612e11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e359190613e5e565b612e3f9190613eed565b6000546040516391bbfd0d60e01b81526001600160a01b0388811660048301529293509116906391bbfd0d90602401602060405180830381865afa158015612e8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eaf9190613e5e565b811115612ecf5760405163fd5daa2360e01b815260040160405180910390fd5b600e54604051630e595ef560e31b81526001600160a01b03878116600483015260248201859052909116906372caf7a890604401600060405180830381600087803b158015612f1d57600080fd5b505af1158015612f31573d6000803e3d6000fd5b5050600354604051636361ddf360e11b81526001600160a01b03909116925063c6c3bbe69150612f6990889088908890600401613f00565b600060405180830381600087803b158015612f8357600080fd5b505af1158015612f97573d6000803e3d6000fd5b505050505050505050565b8115801590612fb057508015155b156108a05760405163ce86896960e01b815260040160405180910390fd5b82158015612fda575081155b8015612fe4575080155b156121c25760405163579bd2b160e01b815260040160405180910390fd5b600c54604051632862f79760e11b81526000916001600160a01b0316906350c5ef2e906130359086908690600401613e77565b602060405180830381865afa158015613052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130769190613e5e565b9050806001146121c2576040516306e92e5560e21b815260040160405180910390fd5b60008083156130ad575082905060016130b1565b8291505b9250929050565b60008060006130cb8a8a8a8a8a8a613832565b9150915060006130dc838387612aa5565b9b9a5050505050505050505050565b8315613127576130fa83613870565b81156131225761310f85826101000151612b0f565b6131228161010001518260e0015161388f565b610aab565b61313685826101000151612b9d565b61315485826060015183602001518460800151868660400151612c2b565b6101208201819052610aab908690612ca1565b6003546040516370a0823160e01b81526001600160a01b038481166004830152839216906370a0823190602401602060405180830381865afa1580156131b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d59190613e5e565b10156108a0576040516349d5cf0d60e11b815260040160405180910390fd5b60008060008561327a57600c546040516333eeaefd60e01b81526001600160a01b03909116906333eeaefd90613232908c908c908c90600401613f00565b6020604051808303816000875af1158015613251573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132759190613e5e565b6132f1565b600c5460405163061e9dc360e01b81526001600160a01b039091169063061e9dc3906132ae908c908c908c90600401613f00565b6020604051808303816000875af11580156132cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f19190613e5e565b905060008461337657600c54604051631cc12cc760e11b81526001600160a01b0390911690633982598e9061332e908d908d908b90600401613f00565b6020604051808303816000875af115801561334d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133719190613e5e565b6133ed565b600c5460405163c2bac5f160e01b81526001600160a01b039091169063c2bac5f1906133aa908d908d908b90600401613f00565b6020604051808303816000875af11580156133c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ed9190613e5e565b919a91995090975050505050505050565b6000806000613411898989898989613832565b915091506000612c938383612ad9565b81156134385761343387878584612dc3565b613445565b613445878785600061353a565b831561345a576134558786612d2f565b6118f9565b600e5460405163715aa61b60e01b81526001600160a01b039091169063715aa61b9061348e908a908a908a90600401613f00565b600060405180830381600087803b1580156134a857600080fd5b505af115801561204b573d6000803e3d6000fd5b6134c5826138b0565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561350a576121c28282613915565b6108a0613982565b61351c828261283f565b156108a057604051630cd60a2360e01b815260040160405180910390fd5b600e546001600160a01b031663a47055e7856135568486613eed565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561359c57600080fd5b505af11580156135b0573d6000803e3d6000fd5b5050600354604051632770a7eb60e21b81526001600160a01b038781166004830152602482018790529091169250639dc29fac9150604401600060405180830381600087803b15801561360257600080fd5b505af1158015613616573d6000803e3d6000fd5b5050505050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661092457604051631afcd79f60e31b815260040160405180910390fd5b61190a613620565b60008061367d84610ab2565b9050600061368a856107c4565b9050613697828286612aa5565b95945050505050565b60006001600160a01b0383166136c957604051631dcb38eb60e11b815260040160405180910390fd5b816000036136d9575060006107be565b6000836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613719573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061373d9190613fbf565b905060128160ff1610156137a0576000613758826012613fe2565b61376390600a6140df565b905061376f81856140ee565b1561378d57604051630f51ac8560e31b815260040160405180910390fd5b6137978185613fab565b925050506107be565b60128160ff1611156137d05760006137b9601283613fe2565b6137c490600a6140df565b90506137978185613f7e565b509092915050565b61086584856001600160a01b03166323b872dd86868660405160240161380093929190613f00565b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506139a1565b60008087878661384b57613846888b613ea7565b613855565b613855888b613eed565b91508461386657613371868a613ea7565b6133ed868a613eed565b801561193d57604051633280b52560e21b815260040160405180910390fd5b808210156108a0576040516329e4ea8b60e01b815260040160405180910390fd5b806001600160a01b03163b6000036138e657604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610be5565b60008051602061411f83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516139329190614102565b600060405180830381855af49150503d806000811461396d576040519150601f19603f3d011682016040523d82523d6000602084013e613972565b606091505b5091509150613697858383613a04565b34156109245760405163b398979f60e01b815260040160405180910390fd5b60006139b66001600160a01b03841683613a60565b905080516000141580156139db5750808060200190518101906139d99190613ed0565b155b156121c257604051635274afe760e01b81526001600160a01b0384166004820152602401610be5565b606082613a1957613a1482613a6e565b612ad2565b8151158015613a3057506001600160a01b0384163b155b15613a5957604051639996b31560e01b81526001600160a01b0385166004820152602401610be5565b5080612ad2565b60606107bb83836000613a97565b805115613a7e5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b606081471015613abc5760405163cd78605960e01b8152306004820152602401610be5565b600080856001600160a01b03168486604051613ad89190614102565b60006040518083038185875af1925050503d8060008114613b15576040519150601f19603f3d011682016040523d82523d6000602084013e613b1a565b606091505b5091509150613b2a868383613a04565b9695505050505050565b80356001600160a01b0381168114613b4b57600080fd5b919050565b600060208284031215613b6257600080fd5b6107bb82613b34565b60008060408385031215613b7e57600080fd5b613b8783613b34565b946020939093013593505050565b60008060008060808587031215613bab57600080fd5b613bb485613b34565b935060208501359250613bc960408601613b34565b9150613bd760608601613b34565b905092959194509250565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215613c0b57600080fd5b613c1483613b34565b9150602083013567ffffffffffffffff80821115613c3157600080fd5b818501915085601f830112613c4557600080fd5b813581811115613c5757613c57613be2565b604051601f8201601f19908116603f01168101908382118183101715613c7f57613c7f613be2565b81604052828152886020848701011115613c9857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b83811015613cd5578181015183820152602001613cbd565b50506000910152565b6020815260008251806020840152613cfd816040850160208701613cba565b601f01601f19169190910160400192915050565b60008060208385031215613d2457600080fd5b823567ffffffffffffffff80821115613d3c57600080fd5b818501915085601f830112613d5057600080fd5b813581811115613d5f57600080fd5b8660208260051b8501011115613d7457600080fd5b60209290920196919550909350505050565b600080600080600060a08688031215613d9e57600080fd5b613da786613b34565b94506020860135935060408601359250613dc360608701613b34565b9150613dd160808701613b34565b90509295509295909350565b801515811461193d57600080fd5b600080600080600080600060e0888a031215613e0657600080fd5b613e0f88613b34565b96506020880135955060408801359450606088013593506080880135613e3481613ddd565b9250613e4260a08901613b34565b9150613e5060c08901613b34565b905092959891949750929550565b600060208284031215613e7057600080fd5b5051919050565b6001600160a01b0392831681529116602082015260400190565b634e487b7160e01b600052601160045260246000fd5b818103818111156107be576107be613e91565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613ee257600080fd5b8151612ad281613ddd565b808201808211156107be576107be613e91565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60038110613f4257634e487b7160e01b600052602160045260246000fd5b9052565b8481526020810184905260408101839052608081016136976060830184613f24565b634e487b7160e01b600052600160045260246000fd5b80820281158282048414176107be576107be613e91565b634e487b7160e01b600052601260045260246000fd5b600082613fba57613fba613f95565b500490565b600060208284031215613fd157600080fd5b815160ff81168114612ad257600080fd5b60ff82811682821603908111156107be576107be613e91565b600181815b8085111561403657816000190482111561401c5761401c613e91565b8085161561402957918102915b93841c9390800290614000565b509250929050565b60008261404d575060016107be565b8161405a575060006107be565b8160018114614070576002811461407a57614096565b60019150506107be565b60ff84111561408b5761408b613e91565b50506001821b6107be565b5060208310610133831016604e8410600b84101617156140b9575081810a6107be565b6140c38383613ffb565b80600019048211156140d7576140d7613e91565b029392505050565b60006107bb60ff84168361403e565b6000826140fd576140fd613f95565b500690565b60008251614114818460208701613cba565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a164736f6c6343000817000a",
  "deployedBytecode": "0x6080604052600436106102255760003560e01c80638da5cb5b11610123578063c4d66de8116100ab578063e89f80541161006f578063e89f8054146106be578063f1c05a7e146106de578063f2fde38b146106fe578063f8d898981461071e578063fe0607331461073e57600080fd5b8063c4d66de81461060d578063c5f956af1461062d578063c8564c621461064d578063cc8b21e41461067e578063d721f52a1461069e57600080fd5b8063ad3cb1cc116100f2578063ad3cb1cc1461055c578063b5c5c9fc1461058d578063b9571721146105ad578063c05c5e94146105cd578063c415b95c146105ed57600080fd5b80638da5cb5b1461049457806395fb16bb146104d15780639e86d0c4146104f1578063a3f4df7e1461051157600080fd5b80634bc66f32116101b1578063715018a611610175578063715018a6146103ff578063741bef1a146104145780637703d7301461043457806377553ad4146104545780638235b2841461047457600080fd5b80634bc66f32146103775780634f1ef2861461039757806352d1902d146103aa57806355dafa46146103bf5780636a85d67d146103df57600080fd5b806327d04b35116101f857806327d04b35146102d75780633f84a44d146102f75780634169467d1461031757806348a4a39d1461033757806349b010c51461035757600080fd5b806301c931001461022a57806302540e481461024c578063048c661d1461027f5780630a34d4d6146102b7575b600080fd5b34801561023657600080fd5b5061024a610245366004613b50565b61075e565b005b34801561025857600080fd5b5061026c610267366004613b6b565b6107af565b6040519081526020015b60405180910390f35b34801561028b57600080fd5b5060095461029f906001600160a01b031681565b6040516001600160a01b039091168152602001610276565b3480156102c357600080fd5b50600d5461029f906001600160a01b031681565b3480156102e357600080fd5b5061026c6102f2366004613b50565b6107c4565b34801561030357600080fd5b50600e5461029f906001600160a01b031681565b34801561032357600080fd5b5060055461029f906001600160a01b031681565b34801561034357600080fd5b5061024a610352366004613b95565b610834565b34801561036357600080fd5b5061024a610372366004613b95565b61086b565b34801561038357600080fd5b50600a5461029f906001600160a01b031681565b61024a6103a5366004613bf8565b610885565b3480156103b657600080fd5b5061026c6108a4565b3480156103cb57600080fd5b5060065461029f906001600160a01b031681565b3480156103eb57600080fd5b5061024a6103fa366004613b50565b6108c1565b34801561040b57600080fd5b5061024a610912565b34801561042057600080fd5b5060075461029f906001600160a01b031681565b34801561044057600080fd5b5061024a61044f366004613b95565b610926565b34801561046057600080fd5b5060015461029f906001600160a01b031681565b34801561048057600080fd5b5061024a61048f366004613b50565b610a4b565b3480156104a057600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031661029f565b3480156104dd57600080fd5b5060025461029f906001600160a01b031681565b3480156104fd57600080fd5b5061026c61050c366004613b50565b610ab2565b34801561051d57600080fd5b5061054f60405180604001604052806012815260200171426f72726f7765724f7065726174696f6e7360701b81525081565b6040516102769190613cde565b34801561056857600080fd5b5061054f604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561059957600080fd5b5061024a6105a8366004613b95565b610ae5565b3480156105b957600080fd5b5061024a6105c8366004613d11565b610b00565b3480156105d957600080fd5b5060005461029f906001600160a01b031681565b3480156105f957600080fd5b5060045461029f906001600160a01b031681565b34801561061957600080fd5b5061024a610628366004613b50565b610fa9565b34801561063957600080fd5b50600b5461029f906001600160a01b031681565b34801561065957600080fd5b50600e5461066e90600160a01b900460ff1681565b6040519015158152602001610276565b34801561068a57600080fd5b5060085461029f906001600160a01b031681565b3480156106aa57600080fd5b5061024a6106b9366004613d86565b6110c1565b3480156106ca57600080fd5b5061024a6106d9366004613deb565b6118ca565b3480156106ea57600080fd5b50600c5461029f906001600160a01b031681565b34801561070a57600080fd5b5061024a610719366004613b50565b611902565b34801561072a57600080fd5b5060035461029f906001600160a01b031681565b34801561074a57600080fd5b5061024a610759366004613b50565b611940565b610766611949565b6001600160a01b03811661078d576040516385d3330760e01b815260040160405180910390fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b60006107bb83836119a4565b90505b92915050565b600e5460405163b429464160e01b81526001600160a01b038381166004830152600092169063b4294641906024015b602060405180830381865afa158015610810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107be9190613e5e565b61083c611a1d565b61084e84843360008060008888611a55565b610865600160008051602061413f83398151915255565b50505050565b610873611a1d565b61084e84600033866000808888611a55565b61088d612058565b610896826120fd565b6108a08282612105565b5050565b60006108ae6121c7565b5060008051602061411f83398151915290565b6108c9611949565b6001600160a01b0381166108f05760405163706ebc6560e11b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b61091a611949565b6109246000612210565b565b61092e611a1d565b60005460405163c08261db60e01b81526001600160a01b0386811660048301529091169063c08261db90602401602060405180830381865afa158015610978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099c9190613e5e565b600c5460405163f9a3d41f60e01b8152610a1a9187916001600160a01b039091169063f9a3d41f906109d49084903390600401613e77565b602060405180830381865afa1580156109f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a159190613e5e565b612281565b610a249190613ea7565b8303610a3857610a33846122fa565b61084e565b61084e8460003360008760008888611a55565b600e54604051632b946eed60e11b81526001600160a01b0390911690635728ddda90610a7d9084903390600401613e77565b600060405180830381600087803b158015610a9757600080fd5b505af1158015610aab573d6000803e3d6000fd5b5050505050565b600e54604051635845309f60e11b81526001600160a01b038381166004830152600092169063b08a613e906024016107f3565b610aed611a1d565b61084e8460003360008760018888611a55565b610b08611949565b600e54600160a01b900460ff1615610b3257604051625f22e960e41b815260040160405180910390fd5b600d8114610b5357604051633f5a111d60e21b815260040160405180910390fd5b60005b600d811015610bf6576000838383818110610b7357610b73613eba565b9050602002016020810190610b889190613b50565b6001600160a01b031603610bee5780838383818110610ba957610ba9613eba565b9050602002016020810190610bbe9190613b50565b604051630d9d339f60e01b815260048101929092526001600160a01b031660248201526044015b60405180910390fd5b600101610b56565b5081816000818110610c0a57610c0a613eba565b9050602002016020810190610c1f9190613b50565b600080546001600160a01b0319166001600160a01b039290921691909117905581816001818110610c5257610c52613eba565b9050602002016020810190610c679190613b50565b600180546001600160a01b0319166001600160a01b039290921691909117905581816002818110610c9a57610c9a613eba565b9050602002016020810190610caf9190613b50565b600380546001600160a01b0319166001600160a01b039290921691909117815582908290818110610ce257610ce2613eba565b9050602002016020810190610cf79190613b50565b600480546001600160a01b0319166001600160a01b039290921691909117815582908290818110610d2a57610d2a613eba565b9050602002016020810190610d3f9190613b50565b600580546001600160a01b0319166001600160a01b039290921691909117815582908290818110610d7257610d72613eba565b9050602002016020810190610d879190613b50565b600780546001600160a01b0319166001600160a01b039290921691909117905581816006818110610dba57610dba613eba565b9050602002016020810190610dcf9190613b50565b600880546001600160a01b0319166001600160a01b039290921691909117905581816007818110610e0257610e02613eba565b9050602002016020810190610e179190613b50565b600980546001600160a01b0319166001600160a01b039290921691909117905581816008818110610e4a57610e4a613eba565b9050602002016020810190610e5f9190613b50565b600a80546001600160a01b0319166001600160a01b039290921691909117905581816009818110610e9257610e92613eba565b9050602002016020810190610ea79190613b50565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a818110610eda57610eda613eba565b9050602002016020810190610eef9190613b50565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b818110610f2257610f22613eba565b9050602002016020810190610f379190613b50565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c818110610f6a57610f6a613eba565b9050602002016020810190610f7f9190613b50565b600e80546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610fef5750825b905060008267ffffffffffffffff16600114801561100c5750303b155b90508115801561101a575080155b156110385760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561106257845460ff60401b1916600160401b1785555b61106b86612826565b611073612837565b83156110b957845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b6110c9611a1d565b6000546040516317ae1fc560e01b81526001600160a01b038781166004830152909116906317ae1fc590602401602060405180830381865afa158015611113573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111379190613ed0565b61115457604051635024407160e11b815260040160405180910390fd5b6111ac60405180610120016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b03868116808352600754604051635670bcc760e11b815260048101929092529091169063ace1798e90602401602060405180830381865afa1580156111fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112209190613e5e565b602082018190528151600091611236919061283f565b600c548351604051632862f79760e11b81529293506000926001600160a01b03909216916350c5ef2e9161126e913390600401613e77565b602060405180830381865afa15801561128b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112af9190613e5e565b9050806001036112d25760405163319aae6d60e21b815260040160405180910390fd5b60608301869052816113065782516112ea90876128c4565b6040840181905260608401516113009190613eed565b60608401525b61131883600001518460600151612a17565b60008054845160405163c08261db60e01b81526001600160a01b03918216600482015291169063c08261db90602401602060405180830381865afa158015611364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113889190613e5e565b905080846060015161139a9190613eed565b608085018190526000036113c157604051636c15d58360e11b815260040160405180910390fd5b6113d48885608001518660200151612aa5565b60a085015260808401516113e9908990612ad9565b60c0850152821561140b5761140684600001518560a00151612b0f565b61144d565b61141d84600001518560a00151612b9d565b600061143b85600001518a6001886080015160018a60200151612c2b565b905061144b856000015182612ca1565b505b600c548451604051636f4ecd4560e01b81526001600160a01b0390921691636f4ecd4591611482913390600190600401613f00565b600060405180830381600087803b15801561149c57600080fd5b505af11580156114b0573d6000803e3d6000fd5b5050600c54865160405163061e9dc360e01b8152600094506001600160a01b03909216925063061e9dc3916114ec919033908e90600401613f00565b6020604051808303816000875af115801561150b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152f9190613e5e565b600c548651608088015160405163c2bac5f160e01b81529394506000936001600160a01b039093169263c2bac5f19261156f929091339190600401613f00565b6020604051808303816000875af115801561158e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b29190613e5e565b600c548751604051634eebd97f60e01b81529293506001600160a01b0390911691634eebd97f916115e7913390600401613e77565b600060405180830381600087803b15801561160157600080fd5b505af1158015611615573d6000803e3d6000fd5b5050600c54885160405163dbe9f91960e01b81526001600160a01b03909216935063dbe9f919925061164b913390600401613e77565b6020604051808303816000875af115801561166a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168e9190613e5e565b60e0870152600854865160c0880151604051633e499e0560e11b81526001600160a01b03928316600482015233602482015260448101919091528a821660648201528982166084820152911690637c933c0a9060a401600060405180830381600087803b1580156116fe57600080fd5b505af1158015611712573d6000803e3d6000fd5b5050600c54885160405163d1a71b5f60e01b81526001600160a01b03909216935063d1a71b5f9250611748913390600401613e77565b6020604051808303816000875af1158015611767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178b9190613e5e565b6101008701819052865160405191825233916001600160a01b03909116907f30d1b1917c27aa4ce4d813612d438af6adea3706bb2009e7309788f4bfc61f7d9060200160405180910390a385516117e2908b612d2f565b6117f68660000151338b8960600151612dc3565b8215611816578551600e5461181691906001600160a01b03168580612dc3565b855160e087015160405133926001600160a01b0316917f7feef73802d9a37116f36078fbc66117c8cdb7b4c9bdddf51ee03257c786b32a9161185f918691889190600090613f46565b60405180910390a38551604080880151905190815233916001600160a01b0316907fd89359f0d8e7f936d0682c5565cc5a16989a91560a80c7b06c46c28e52a5d43a9060200160405180910390a3505050505050610aab600160008051602061413f83398151915255565b6118d2611a1d565b6118e28787338888888888611a55565b6118f9600160008051602061413f83398151915255565b50505050505050565b61190a611949565b6001600160a01b03811661193457604051631e4fbdf760e01b815260006004820152602401610be5565b61193d81612210565b50565b61193d816120fd565b3361197b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146109245760405163118cdaa760e01b8152336004820152602401610be5565b6000805460405163c08261db60e01b81526001600160a01b0385811660048301529091169063c08261db90602401602060405180830381865afa1580156119ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a139190613e5e565b6107bb9083613eed565b60008051602061413f833981519152805460011901611a4f57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b611ad2604051806101c0016040528060006001600160a01b031681526020016000151581526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b03898116808352600754604051635670bcc760e11b815260048101929092529091169063ace1798e90602401602060405180830381865afa158015611b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b469190613e5e565b604082018190528151600091611b5c919061283f565b90508415611b855785600003611b8557604051636862f00560e11b815260040160405180910390fd5b611b8f878a612fa2565b611b9a87878b612fce565b8151611ba69089613002565b336001600160a01b0389161480611bdb57506009546001600160a01b031633148015611bd157508815155b8015611bdb575085155b611be757611be7613f68565b600c54825160405163df4fb9ef60e01b81526001600160a01b039092169163df4fb9ef91611c19918c90600401613e77565b600060405180830381600087803b158015611c3357600080fd5b505af1158015611c47573d6000803e3d6000fd5b50505050611c558988613099565b15156020840152606083015260808201869052848015611c73575080155b15611ca1578151611c8490876128c4565b61014083018190526080830151611c9b9190613eed565b60808301525b600c54825160405163f9a3d41f60e01b81526001600160a01b039092169163f9a3d41f91611cd3918c90600401613e77565b602060405180830381865afa158015611cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d149190613e5e565b60a0830152600c548251604051633517ff1b60e11b81526001600160a01b0390921691636a2ffe3691611d4b918c90600401613e77565b602060405180830381865afa158015611d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8c9190613e5e565b60c0830181905260a08301516040840151611da8929190612aa5565b8260e0018181525050611dd88260c001518360a001518460600151856020015186608001518a88604001516130b8565b61010083015260c0820151871115611e0357604051634767d7b360e11b815260040160405180910390fd5b8151611e1290828988866130eb565b84158015611e1f57508515155b15611e3257611e32888360800151613167565b611e508260000151898460600151856020015186608001518a6131f4565b610160840152610180830152600c54825160405163dbe9f91960e01b81526001600160a01b039092169163dbe9f91991611e8e918c90600401613e77565b6020604051808303816000875af1158015611ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed19190613e5e565b826101a00181815250506000611eff8360c001518460a001518560600151866020015187608001518b6133fe565b600854845160405163bc9b5bd560e01b81526001600160a01b0391821660048201528c821660248201526044810184905288821660648201528782166084820152929350169063bc9b5bd59060a401600060405180830381600087803b158015611f6857600080fd5b505af1158015611f7c573d6000803e3d6000fd5b50505050886001600160a01b031683600001516001600160a01b03167f7feef73802d9a37116f36078fbc66117c8cdb7b4c9bdddf51ee03257c786b32a856101600151866101800151876101a001516002604051611fdd9493929190613f46565b60405180910390a3825161014084015160405190815233916001600160a01b0316907fd89359f0d8e7f936d0682c5565cc5a16989a91560a80c7b06c46c28e52a5d43a9060200160405180910390a361204b836000015133856060015186602001518b8b8960800151613421565b5050505050505050505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806120df57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166120d360008051602061411f833981519152546001600160a01b031690565b6001600160a01b031614155b156109245760405163703e46dd60e11b815260040160405180910390fd5b61193d611949565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561215f575060408051601f3d908101601f1916820190925261215c91810190613e5e565b60015b61218757604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610be5565b60008051602061411f83398151915281146121b857604051632a87526960e21b815260048101829052602401610be5565b6121c283836134bc565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109245760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6000805460405163c08261db60e01b81526001600160a01b0385811660048301529091169063c08261db90602401602060405180830381865afa1580156122cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f09190613e5e565b6107bb9083613ea7565b6123048133613002565b600754604051635670bcc760e11b81526001600160a01b038381166004830152600092169063ace1798e90602401602060405180830381865afa15801561234f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123739190613e5e565b905061237f8282613512565b600c5460405163df4fb9ef60e01b81526001600160a01b039091169063df4fb9ef906123b19085903390600401613e77565b600060405180830381600087803b1580156123cb57600080fd5b505af11580156123df573d6000803e3d6000fd5b5050600c54604051633517ff1b60e11b8152600093506001600160a01b039091169150636a2ffe36906124189086903390600401613e77565b602060405180830381865afa158015612435573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124599190613e5e565b600c5460405163f9a3d41f60e01b81529192506000916001600160a01b039091169063f9a3d41f906124919087903390600401613e77565b602060405180830381865afa1580156124ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d29190613e5e565b6000805460405163c08261db60e01b81526001600160a01b0388811660048301529394509192169063c08261db90602401602060405180830381865afa158015612520573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125449190613e5e565b600480546040516320e3d2f760e11b81529293506000926001600160a01b03909116916341c7a5ee916125859133918b91670de0b6b3a76400009101613f00565b6020604051808303816000875af11580156125a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c89190613e5e565b90506000816125d78486613ea7565b6125e19190613ea7565b90506125ed3382613167565b60006125ff888760008860008c612c2b565b905061260b8882612ca1565b600c54604051633ed3a18f60e21b81526001600160a01b039091169063fb4e863c9061263d908b903390600401613e77565b600060405180830381600087803b15801561265757600080fd5b505af115801561266b573d6000803e3d6000fd5b5050600c54604051633d9ef93160e01b81526001600160a01b039091169250633d9ef93191506126a1908b903390600401613e77565b600060405180830381600087803b1580156126bb57600080fd5b505af11580156126cf573d6000803e3d6000fd5b50505050336001600160a01b0316886001600160a01b03167f7feef73802d9a37116f36078fbc66117c8cdb7b4c9bdddf51ee03257c786b32a6000806000600160405161271f9493929190613f46565b60405180910390a36127338833848661353a565b831561275357600e546127539089906001600160a01b031686600061353a565b6004805460405163871d814560e01b81526001600160a01b039091169163871d8145916127849133918d9101613e77565b600060405180830381600087803b15801561279e57600080fd5b505af11580156127b2573d6000803e3d6000fd5b5050600e5460405163715aa61b60e01b81526001600160a01b03909116925063715aa61b91506127ea908b9033908b90600401613f00565b600060405180830381600087803b15801561280457600080fd5b505af1158015612818573d6000803e3d6000fd5b505050505050505050505050565b61282e613620565b61193d81613669565b610924613620565b60008061284c8484613671565b60005460405163316a306d60e11b81526001600160a01b0387811660048301529293509116906362d460da90602401602060405180830381865afa158015612898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128bc9190613e5e565b119392505050565b600c546040516314757c1360e31b81526001600160a01b03848116600483015260248201849052600092839291169063a3abe09890604401602060405180830381865afa158015612919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293d9190613e5e565b60035460048054604051636361ddf360e11b81529394506001600160a01b039283169363c6c3bbe693612978938a9390911691879101613f00565b600060405180830381600087803b15801561299257600080fd5b505af11580156129a6573d6000803e3d6000fd5b5050600480546040516336f1224960e11b81526001600160a01b039091169350636de2449292506129dd9133918991879101613f00565b600060405180830381600087803b1580156129f757600080fd5b505af1158015612a0b573d6000803e3d6000fd5b50929695505050505050565b6000546040516321b443a360e21b81526001600160a01b038481166004830152909116906386d10e8c90602401602060405180830381865afa158015612a61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a859190613e5e565b8110156108a057604051633c762e9160e01b815260040160405180910390fd5b60008215612acd57600083612aba8487613f7e565b612ac49190613fab565b9150612ad29050565b506000195b9392505050565b60008115612b065781612af568056bc75e2d6310000085613f7e565b612aff9190613fab565b90506107be565b506000196107be565b60005460405163316a306d60e11b81526001600160a01b038481166004830152909116906362d460da90602401602060405180830381865afa158015612b59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7d9190613e5e565b8110156108a05760405163a5107d2d60e01b815260040160405180910390fd5b600054604051633c557a6f60e11b81526001600160a01b038481166004830152909116906378aaf4de90602401602060405180830381865afa158015612be7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0b9190613e5e565b8110156108a057604051633b02ce0760e11b815260040160405180910390fd5b600080612c3788610ab2565b90506000612c44896107c4565b905086612c5a57612c558883613ea7565b612c64565b612c648883613eed565b915084612c7a57612c758682613ea7565b612c84565b612c848682613eed565b90506000612c93838387612aa5565b9a9950505050505050505050565b60005460405163316a306d60e11b81526001600160a01b038481166004830152909116906362d460da90602401602060405180830381865afa158015612ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0f9190613e5e565b8110156108a05760405163200c362760e21b815260040160405180910390fd5b600e546040516358889c4160e11b81526001600160a01b038481166004830152602482018490529091169063b111388290604401600060405180830381600087803b158015612d7d57600080fd5b505af1158015612d91573d6000803e3d6000fd5b5050600e546108a092503391506001600160a01b0316612db185856136a0565b6001600160a01b0386169291906137d8565b600e5460405163b429464160e01b81526001600160a01b038681166004830152600092849291169063b429464190602401602060405180830381865afa158015612e11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e359190613e5e565b612e3f9190613eed565b6000546040516391bbfd0d60e01b81526001600160a01b0388811660048301529293509116906391bbfd0d90602401602060405180830381865afa158015612e8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eaf9190613e5e565b811115612ecf5760405163fd5daa2360e01b815260040160405180910390fd5b600e54604051630e595ef560e31b81526001600160a01b03878116600483015260248201859052909116906372caf7a890604401600060405180830381600087803b158015612f1d57600080fd5b505af1158015612f31573d6000803e3d6000fd5b5050600354604051636361ddf360e11b81526001600160a01b03909116925063c6c3bbe69150612f6990889088908890600401613f00565b600060405180830381600087803b158015612f8357600080fd5b505af1158015612f97573d6000803e3d6000fd5b505050505050505050565b8115801590612fb057508015155b156108a05760405163ce86896960e01b815260040160405180910390fd5b82158015612fda575081155b8015612fe4575080155b156121c25760405163579bd2b160e01b815260040160405180910390fd5b600c54604051632862f79760e11b81526000916001600160a01b0316906350c5ef2e906130359086908690600401613e77565b602060405180830381865afa158015613052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130769190613e5e565b9050806001146121c2576040516306e92e5560e21b815260040160405180910390fd5b60008083156130ad575082905060016130b1565b8291505b9250929050565b60008060006130cb8a8a8a8a8a8a613832565b9150915060006130dc838387612aa5565b9b9a5050505050505050505050565b8315613127576130fa83613870565b81156131225761310f85826101000151612b0f565b6131228161010001518260e0015161388f565b610aab565b61313685826101000151612b9d565b61315485826060015183602001518460800151868660400151612c2b565b6101208201819052610aab908690612ca1565b6003546040516370a0823160e01b81526001600160a01b038481166004830152839216906370a0823190602401602060405180830381865afa1580156131b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d59190613e5e565b10156108a0576040516349d5cf0d60e11b815260040160405180910390fd5b60008060008561327a57600c546040516333eeaefd60e01b81526001600160a01b03909116906333eeaefd90613232908c908c908c90600401613f00565b6020604051808303816000875af1158015613251573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132759190613e5e565b6132f1565b600c5460405163061e9dc360e01b81526001600160a01b039091169063061e9dc3906132ae908c908c908c90600401613f00565b6020604051808303816000875af11580156132cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f19190613e5e565b905060008461337657600c54604051631cc12cc760e11b81526001600160a01b0390911690633982598e9061332e908d908d908b90600401613f00565b6020604051808303816000875af115801561334d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133719190613e5e565b6133ed565b600c5460405163c2bac5f160e01b81526001600160a01b039091169063c2bac5f1906133aa908d908d908b90600401613f00565b6020604051808303816000875af11580156133c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ed9190613e5e565b919a91995090975050505050505050565b6000806000613411898989898989613832565b915091506000612c938383612ad9565b81156134385761343387878584612dc3565b613445565b613445878785600061353a565b831561345a576134558786612d2f565b6118f9565b600e5460405163715aa61b60e01b81526001600160a01b039091169063715aa61b9061348e908a908a908a90600401613f00565b600060405180830381600087803b1580156134a857600080fd5b505af115801561204b573d6000803e3d6000fd5b6134c5826138b0565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561350a576121c28282613915565b6108a0613982565b61351c828261283f565b156108a057604051630cd60a2360e01b815260040160405180910390fd5b600e546001600160a01b031663a47055e7856135568486613eed565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561359c57600080fd5b505af11580156135b0573d6000803e3d6000fd5b5050600354604051632770a7eb60e21b81526001600160a01b038781166004830152602482018790529091169250639dc29fac9150604401600060405180830381600087803b15801561360257600080fd5b505af1158015613616573d6000803e3d6000fd5b5050505050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661092457604051631afcd79f60e31b815260040160405180910390fd5b61190a613620565b60008061367d84610ab2565b9050600061368a856107c4565b9050613697828286612aa5565b95945050505050565b60006001600160a01b0383166136c957604051631dcb38eb60e11b815260040160405180910390fd5b816000036136d9575060006107be565b6000836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613719573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061373d9190613fbf565b905060128160ff1610156137a0576000613758826012613fe2565b61376390600a6140df565b905061376f81856140ee565b1561378d57604051630f51ac8560e31b815260040160405180910390fd5b6137978185613fab565b925050506107be565b60128160ff1611156137d05760006137b9601283613fe2565b6137c490600a6140df565b90506137978185613f7e565b509092915050565b61086584856001600160a01b03166323b872dd86868660405160240161380093929190613f00565b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506139a1565b60008087878661384b57613846888b613ea7565b613855565b613855888b613eed565b91508461386657613371868a613ea7565b6133ed868a613eed565b801561193d57604051633280b52560e21b815260040160405180910390fd5b808210156108a0576040516329e4ea8b60e01b815260040160405180910390fd5b806001600160a01b03163b6000036138e657604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610be5565b60008051602061411f83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516139329190614102565b600060405180830381855af49150503d806000811461396d576040519150601f19603f3d011682016040523d82523d6000602084013e613972565b606091505b5091509150613697858383613a04565b34156109245760405163b398979f60e01b815260040160405180910390fd5b60006139b66001600160a01b03841683613a60565b905080516000141580156139db5750808060200190518101906139d99190613ed0565b155b156121c257604051635274afe760e01b81526001600160a01b0384166004820152602401610be5565b606082613a1957613a1482613a6e565b612ad2565b8151158015613a3057506001600160a01b0384163b155b15613a5957604051639996b31560e01b81526001600160a01b0385166004820152602401610be5565b5080612ad2565b60606107bb83836000613a97565b805115613a7e5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b606081471015613abc5760405163cd78605960e01b8152306004820152602401610be5565b600080856001600160a01b03168486604051613ad89190614102565b60006040518083038185875af1925050503d8060008114613b15576040519150601f19603f3d011682016040523d82523d6000602084013e613b1a565b606091505b5091509150613b2a868383613a04565b9695505050505050565b80356001600160a01b0381168114613b4b57600080fd5b919050565b600060208284031215613b6257600080fd5b6107bb82613b34565b60008060408385031215613b7e57600080fd5b613b8783613b34565b946020939093013593505050565b60008060008060808587031215613bab57600080fd5b613bb485613b34565b935060208501359250613bc960408601613b34565b9150613bd760608601613b34565b905092959194509250565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215613c0b57600080fd5b613c1483613b34565b9150602083013567ffffffffffffffff80821115613c3157600080fd5b818501915085601f830112613c4557600080fd5b813581811115613c5757613c57613be2565b604051601f8201601f19908116603f01168101908382118183101715613c7f57613c7f613be2565b81604052828152886020848701011115613c9857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b83811015613cd5578181015183820152602001613cbd565b50506000910152565b6020815260008251806020840152613cfd816040850160208701613cba565b601f01601f19169190910160400192915050565b60008060208385031215613d2457600080fd5b823567ffffffffffffffff80821115613d3c57600080fd5b818501915085601f830112613d5057600080fd5b813581811115613d5f57600080fd5b8660208260051b8501011115613d7457600080fd5b60209290920196919550909350505050565b600080600080600060a08688031215613d9e57600080fd5b613da786613b34565b94506020860135935060408601359250613dc360608701613b34565b9150613dd160808701613b34565b90509295509295909350565b801515811461193d57600080fd5b600080600080600080600060e0888a031215613e0657600080fd5b613e0f88613b34565b96506020880135955060408801359450606088013593506080880135613e3481613ddd565b9250613e4260a08901613b34565b9150613e5060c08901613b34565b905092959891949750929550565b600060208284031215613e7057600080fd5b5051919050565b6001600160a01b0392831681529116602082015260400190565b634e487b7160e01b600052601160045260246000fd5b818103818111156107be576107be613e91565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613ee257600080fd5b8151612ad281613ddd565b808201808211156107be576107be613e91565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60038110613f4257634e487b7160e01b600052602160045260246000fd5b9052565b8481526020810184905260408101839052608081016136976060830184613f24565b634e487b7160e01b600052600160045260246000fd5b80820281158282048414176107be576107be613e91565b634e487b7160e01b600052601260045260246000fd5b600082613fba57613fba613f95565b500490565b600060208284031215613fd157600080fd5b815160ff81168114612ad257600080fd5b60ff82811682821603908111156107be576107be613e91565b600181815b8085111561403657816000190482111561401c5761401c613e91565b8085161561402957918102915b93841c9390800290614000565b509250929050565b60008261404d575060016107be565b8161405a575060006107be565b8160018114614070576002811461407a57614096565b60019150506107be565b60ff84111561408b5761408b613e91565b50506001821b6107be565b5060208310610133831016604e8410600b84101617156140b9575081810a6107be565b6140c38383613ffb565b80600019048211156140d7576140d7613e91565b029392505050565b60006107bb60ff84168361403e565b6000826140fd576140fd613f95565b500690565b60008251614114818460208701613cba565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a164736f6c6343000817000a",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimCollateral(address)": {
        "notice": "Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery Mode"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8946,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "adminContract",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8948,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "borrowerOperations",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8950,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "communityIssuance",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8952,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "debtToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8954,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "feeCollector",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 8956,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "flashLoanAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 8958,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "trenStaking",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 8960,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "priceFeed",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 8962,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "sortedTrenBoxes",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 8964,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 8966,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "timelockAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 8968,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 8970,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "trenBoxManager",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 8972,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "trenBoxManagerOperations",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 8974,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "trenBoxStorage",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 8976,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "isAddressSetupInitialized",
        "offset": 20,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 8981,
        "contract": "contracts/BorrowerOperations.sol:BorrowerOperations",
        "label": "__gap",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_uint256)33_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)33_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[33]",
        "numberOfBytes": "1056"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}