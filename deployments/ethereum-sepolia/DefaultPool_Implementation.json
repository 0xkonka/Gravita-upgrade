{
  "address": "0xD523d2cD08bC8641841a852e57bE1B1f2Bc15b4B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__CommunityIssuanceZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__LengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__SetupIsInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__TRENStakingZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "address_",
          "type": "address"
        }
      ],
      "name": "ConfigurableAddresses__ZeroAddresses",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EthUnsupportedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmountError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "AssetSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "name": "DefaultPoolAssetBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        }
      ],
      "name": "DefaultPoolDebtUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "authorizeUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collSurplusPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityIssuance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getAssetBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getDebtTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "increaseDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAddressSetupInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "receivedERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendAssetToActivePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_communityIssuance",
          "type": "address"
        }
      ],
      "name": "setCommunityIssuance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trenStaking",
          "type": "address"
        }
      ],
      "name": "setTRENStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTrenBoxes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManagerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x80c493d92fafc632a0ad26ac39c83e11ce0e38fea21799dc18be6b6ce11acb12",
  "receipt": {
    "to": null,
    "from": "0xf812844A1f3187F6e31336d3684FAd2dD31219E3",
    "contractAddress": "0xD523d2cD08bC8641841a852e57bE1B1f2Bc15b4B",
    "transactionIndex": 34,
    "gasUsed": "1746020",
    "logsBloom": "0x
    "blockHash": "0x73bc3e7e2530c2c7d7e7a6907bc31b926aa07a9317ea27e1abfc4bd1a7188e09",
    "transactionHash": "0x80c493d92fafc632a0ad26ac39c83e11ce0e38fea21799dc18be6b6ce11acb12",
    "logs": [],
    "blockNumber": 5716910,
    "cumulativeGasUsed": "6331930",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "76f2ac0d2a40f527e6541dfc9894b953",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__CommunityIssuanceZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__SetupIsInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__TRENStakingZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"ConfigurableAddresses__ZeroAddresses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EthUnsupportedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmountError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AssetSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DefaultPoolAssetBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"}],\"name\":\"DefaultPoolDebtUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"authorizeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collSurplusPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityIssuance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getAssetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getDebtTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAddressSetupInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"receivedERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendAssetToActivePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityIssuance\",\"type\":\"address\"}],\"name\":\"setCommunityIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trenStaking\",\"type\":\"address\"}],\"name\":\"setTRENStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTrenBoxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManagerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DefaultPool.sol\":\"DefaultPool\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"contracts/DefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { UUPSUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport { ConfigurableAddresses } from \\\"./Dependencies/ConfigurableAddresses.sol\\\";\\nimport { SafetyTransfer } from \\\"./Dependencies/SafetyTransfer.sol\\\";\\nimport { IDefaultPool } from \\\"./Interfaces/IDefaultPool.sol\\\";\\nimport { IDeposit } from \\\"./Interfaces/IDeposit.sol\\\";\\n\\n/*\\n* The Default Pool holds the collateral and debt token amounts from liquidations that have been\\nredistributed\\n* to active trenBoxes but not yet \\\"applied\\\", i.e. not yet recorded on a recipient active trenBox's\\nstruct.\\n *\\n * When a trenBox makes an operation that applies to its pending collateral and debt, they are moved\\n * from the Default Pool to the Active Pool.\\n */\\ncontract DefaultPool is OwnableUpgradeable, UUPSUpgradeable, IDefaultPool, ConfigurableAddresses {\\n    using SafeERC20 for IERC20;\\n\\n    string public constant NAME = \\\"DefaultPool\\\";\\n\\n    mapping(address => uint256) internal assetsBalances;\\n    mapping(address => uint256) internal debtTokenBalances;\\n\\n    // --- Initializer ---\\n\\n    function initialize() public initializer {\\n        address initialOwner = _msgSender();\\n\\n        __Ownable_init(initialOwner);\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    // --- Getters for public variables. Required by IPool interface ---\\n\\n    function getAssetBalance(address _asset) external view override returns (uint256) {\\n        return assetsBalances[_asset];\\n    }\\n\\n    function getDebtTokenBalance(address _asset) external view override returns (uint256) {\\n        return debtTokenBalances[_asset];\\n    }\\n\\n    function increaseDebt(\\n        address _asset,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        callerIsTrenBoxManager\\n    {\\n        uint256 newDebt = debtTokenBalances[_asset] + _amount;\\n        debtTokenBalances[_asset] = newDebt;\\n        emit DefaultPoolDebtUpdated(_asset, newDebt);\\n    }\\n\\n    function decreaseDebt(\\n        address _asset,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        callerIsTrenBoxManager\\n    {\\n        uint256 newDebt = debtTokenBalances[_asset] - _amount;\\n        debtTokenBalances[_asset] = newDebt;\\n        emit DefaultPoolDebtUpdated(_asset, newDebt);\\n    }\\n\\n    // --- Pool functionality ---\\n\\n    function sendAssetToActivePool(\\n        address _asset,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        callerIsTrenBoxManager\\n    {\\n        uint256 safetyTransferAmount = SafetyTransfer.decimalsCorrection(_asset, _amount);\\n        if (safetyTransferAmount == 0) {\\n            return;\\n        }\\n\\n        uint256 newBalance = assetsBalances[_asset] - _amount;\\n        assetsBalances[_asset] = newBalance;\\n\\n        IERC20(_asset).safeTransfer(activePool, safetyTransferAmount);\\n        IDeposit(activePool).receivedERC20(_asset, _amount);\\n\\n        emit DefaultPoolAssetBalanceUpdated(_asset, newBalance);\\n        emit AssetSent(activePool, _asset, safetyTransferAmount);\\n    }\\n\\n    // --- 'require' functions ---\\n\\n    modifier callerIsActivePool() {\\n        require(msg.sender == activePool, \\\"DefaultPool: Caller is not the ActivePool\\\");\\n        _;\\n    }\\n\\n    modifier callerIsTrenBoxManager() {\\n        require(msg.sender == trenBoxManager, \\\"DefaultPool: Caller is not the TrenBoxManager\\\");\\n        _;\\n    }\\n\\n    function receivedERC20(address _asset, uint256 _amount) external callerIsActivePool {\\n        uint256 newBalance = assetsBalances[_asset] + _amount;\\n        assetsBalances[_asset] = newBalance;\\n        emit DefaultPoolAssetBalanceUpdated(_asset, newBalance);\\n    }\\n\\n    function authorizeUpgrade(address newImplementation) public {\\n        _authorizeUpgrade(newImplementation);\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner { }\\n}\\n\",\"keccak256\":\"0x81a44c4bfd4fb1f6ed188daa963809abbb6d5bbb798dbe124a8be3b577855d4d\",\"license\":\"MIT\"},\"contracts/Dependencies/ConfigurableAddresses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract ConfigurableAddresses is OwnableUpgradeable {\\n    address public activePool;\\n    address public adminContract;\\n    address public borrowerOperations;\\n    address public collSurplusPool;\\n    address public communityIssuance;\\n    address public debtToken;\\n    address public defaultPool;\\n    address public feeCollector;\\n    address public flashLoanAddress;\\n    address public gasPoolAddress;\\n    address public trenStaking;\\n    address public priceFeed;\\n    address public sortedTrenBoxes;\\n    address public stabilityPool;\\n    address public timelockAddress;\\n    address public treasuryAddress;\\n    address public trenBoxManager;\\n    address public trenBoxManagerOperations;\\n\\n    bool public isAddressSetupInitialized;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[33] private __gap; // Goerli uses 47; Arbitrum uses 33\\n\\n    error ConfigurableAddresses__SetupIsInitialized();\\n    error ConfigurableAddresses__ZeroAddresses(uint256 position, address address_);\\n    error ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n    error ConfigurableAddresses__TRENStakingZeroAddress();\\n    error ConfigurableAddresses__LengthMismatch();\\n\\n    // Dependency setters\\n    // -----------------------------------------------------------------------------------------------\\n\\n    function setAddresses(address[] calldata _addresses) external onlyOwner {\\n        if (isAddressSetupInitialized) {\\n            revert ConfigurableAddresses__SetupIsInitialized();\\n        }\\n        if (_addresses.length != 16) {\\n            revert ConfigurableAddresses__LengthMismatch();\\n        }\\n\\n        for (uint256 i = 0; i < 16; i++) {\\n            if (_addresses[i] == address(0)) {\\n                revert ConfigurableAddresses__ZeroAddresses(i, _addresses[i]);\\n            }\\n        }\\n        activePool = _addresses[0];\\n        adminContract = _addresses[1];\\n        borrowerOperations = _addresses[2];\\n        collSurplusPool = _addresses[3];\\n        debtToken = _addresses[4];\\n        defaultPool = _addresses[5];\\n        feeCollector = _addresses[6];\\n        flashLoanAddress = _addresses[7];\\n        gasPoolAddress = _addresses[8];\\n        priceFeed = _addresses[9];\\n        sortedTrenBoxes = _addresses[10];\\n        stabilityPool = _addresses[11];\\n        timelockAddress = _addresses[12];\\n        treasuryAddress = _addresses[13];\\n        trenBoxManager = _addresses[14];\\n        trenBoxManagerOperations = _addresses[15];\\n\\n        isAddressSetupInitialized = true;\\n    }\\n\\n    function setCommunityIssuance(address _communityIssuance) public onlyOwner {\\n        if (_communityIssuance == address(0)) {\\n            revert ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n        }\\n        communityIssuance = _communityIssuance;\\n    }\\n\\n    function setTRENStaking(address _trenStaking) public onlyOwner {\\n        if (_trenStaking == address(0)) {\\n            revert ConfigurableAddresses__TRENStakingZeroAddress();\\n        }\\n        trenStaking = _trenStaking;\\n    }\\n}\\n\",\"keccak256\":\"0xaf7c303784379bebf2e43e41c33c27c1309a639d360b5823240b1a8f5935b064\",\"license\":\"MIT\"},\"contracts/Dependencies/SafetyTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IERC20Decimals } from \\\"../Interfaces/IERC20Decimals.sol\\\";\\n\\nlibrary SafetyTransfer {\\n    error EthUnsupportedError();\\n    error InvalidAmountError();\\n\\n    //_amount is in ether (1e18) and we want to convert it to the token decimal\\n    function decimalsCorrection(address _token, uint256 _amount) internal view returns (uint256) {\\n        if (_token == address(0)) {\\n            revert EthUnsupportedError();\\n        }\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n        uint8 decimals = IERC20Decimals(_token).decimals();\\n        if (decimals < 18) {\\n            uint256 divisor = 10 ** (18 - decimals);\\n            if (_amount % divisor != 0) {\\n                revert InvalidAmountError();\\n            }\\n            return _amount / divisor;\\n        } else if (decimals > 18) {\\n            uint256 multiplier = 10 ** (decimals - 18);\\n            return _amount * multiplier;\\n        }\\n        return _amount;\\n    }\\n}\\n\",\"keccak256\":\"0x8661386c9ff583aa23a5edfcba5bef533877663018bcc8c626fb70d2090872cf\",\"license\":\"MIT\"},\"contracts/Interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IPool } from \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event DefaultPoolDebtUpdated(address _asset, uint256 _debt);\\n    event DefaultPoolAssetBalanceUpdated(address _asset, uint256 _balance);\\n\\n    // --- Functions ---\\n    function sendAssetToActivePool(address _asset, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xe68312fe3192b59bea18d1c3f027842418c10ad647f3e282bace8417ba656327\",\"license\":\"MIT\"},\"contracts/Interfaces/IDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IDeposit {\\n    function receivedERC20(address _asset, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xedebb2b3e0c98d165db1f1b4a3b5e96f2b327cd7bc2ad1b1c07abdd1f47bce17\",\"license\":\"MIT\"},\"contracts/Interfaces/IERC20Decimals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface IERC20Decimals {\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xb784584e544d4f45a48dc5c68bea423dbb35bd4cfadc3007ee3ab64212ff71da\",\"license\":\"MIT\"},\"contracts/Interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IPool {\\n    // --- Events ---\\n\\n    event AssetSent(address _to, address indexed _asset, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function getAssetBalance(address _asset) external view returns (uint256);\\n\\n    function getDebtTokenBalance(address _asset) external view returns (uint256);\\n\\n    function increaseDebt(address _asset, uint256 _amount) external;\\n\\n    function decreaseDebt(address _asset, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x0ebfb25e4c8b578c35933bb6bcfaea9688e88047060b6f861fbc0bda25928bab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b50608051611e9e61003e60003960008181611485015281816114ae01526115ef0152611e9e6000f3fe60806040526004361061021a5760003560e01c80638da5cb5b11610123578063c8564c62116100ab578063f2fde38b1161006f578063f2fde38b146106ad578063f8585db3146106cd578063f8d89898146106ed578063fe0607331461070d578063fe9d03231461072d57600080fd5b8063c8564c62146105fc578063cc8b21e41461062d578063cda775f91461064d578063eb16f0041461066d578063f1c05a7e1461068d57600080fd5b8063b9571721116100f2578063b957172114610546578063c05c5e9414610566578063c415b95c14610586578063c5739d0b146105a6578063c5f956af146105dc57600080fd5b80638da5cb5b1461047457806395fb16bb146104b1578063a3f4df7e146104d1578063ad3cb1cc1461051557600080fd5b806352d1902d116101a6578063715018a611610175578063715018a6146103ea578063741bef1a146103ff57806377553ad41461041f5780637f7dde4a1461043f5780638129fc1c1461045f57600080fd5b806352d1902d146103515780635373433f1461037457806355dafa46146103aa5780636a85d67d146103ca57600080fd5b80632fb9ba31116101ed5780632fb9ba31146102be5780633cc74225146102de5780634169467d146102fe5780634bc66f321461031e5780634f1ef2861461033e57600080fd5b806301c931001461021f578063048c661d146102415780630a34d4d61461027e57806329fc67c81461029e575b600080fd5b34801561022b57600080fd5b5061023f61023a366004611a0e565b61074d565b005b34801561024d57600080fd5b50600d54610261906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561028a57600080fd5b50601154610261906001600160a01b031681565b3480156102aa57600080fd5b5061023f6102b9366004611a29565b61079e565b3480156102ca57600080fd5b5061023f6102d9366004611a29565b610937565b3480156102ea57600080fd5b50600654610261906001600160a01b031681565b34801561030a57600080fd5b50600854610261906001600160a01b031681565b34801561032a57600080fd5b50600e54610261906001600160a01b031681565b61023f61034c366004611a69565b6109e2565b34801561035d57600080fd5b506103666109fd565b604051908152602001610275565b34801561038057600080fd5b5061036661038f366004611a0e565b6001600160a01b031660009081526033602052604090205490565b3480156103b657600080fd5b50600a54610261906001600160a01b031681565b3480156103d657600080fd5b5061023f6103e5366004611a0e565b610a1a565b3480156103f657600080fd5b5061023f610a6b565b34801561040b57600080fd5b50600b54610261906001600160a01b031681565b34801561042b57600080fd5b50600254610261906001600160a01b031681565b34801561044b57600080fd5b50600054610261906001600160a01b031681565b34801561046b57600080fd5b5061023f610a7f565b34801561048057600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b0316610261565b3480156104bd57600080fd5b50600454610261906001600160a01b031681565b3480156104dd57600080fd5b506105086040518060400160405280600b81526020016a111959985d5b1d141bdbdb60aa1b81525081565b6040516102759190611b4f565b34801561052157600080fd5b50610508604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561055257600080fd5b5061023f610561366004611b82565b610b98565b34801561057257600080fd5b50600154610261906001600160a01b031681565b34801561059257600080fd5b50600754610261906001600160a01b031681565b3480156105b257600080fd5b506103666105c1366004611a0e565b6001600160a01b031660009081526034602052604090205490565b3480156105e857600080fd5b50600f54610261906001600160a01b031681565b34801561060857600080fd5b5060115461061d90600160a01b900460ff1681565b6040519015158152602001610275565b34801561063957600080fd5b50600c54610261906001600160a01b031681565b34801561065957600080fd5b50600354610261906001600160a01b031681565b34801561067957600080fd5b5061023f610688366004611a29565b611114565b34801561069957600080fd5b50601054610261906001600160a01b031681565b3480156106b957600080fd5b5061023f6106c8366004611a0e565b6111f8565b3480156106d957600080fd5b5061023f6106e8366004611a29565b611236565b3480156106f957600080fd5b50600554610261906001600160a01b031681565b34801561071957600080fd5b5061023f610728366004611a0e565b611284565b34801561073957600080fd5b50600954610261906001600160a01b031681565b61075561128d565b6001600160a01b03811661077c576040516385d3330760e01b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6010546001600160a01b031633146107d15760405162461bcd60e51b81526004016107c890611bf7565b60405180910390fd5b60006107dd83836112e8565b9050806000036107ec57505050565b6001600160a01b038316600090815260336020526040812054610810908490611c5a565b6001600160a01b0380861660008181526033602052604081208490555492935061083d9290911684611423565b600054604051633ac5bc0160e21b81526001600160a01b038681166004830152602482018690529091169063eb16f00490604401600060405180830381600087803b15801561088b57600080fd5b505af115801561089f573d6000803e3d6000fd5b5050604080516001600160a01b0388168152602081018590527f4d42ce079a4e464782330acbd88d008e74e55501cf9d29de797fa46bac59bc61935001905060405180910390a1600054604080516001600160a01b03928316815260208101859052918616917ff89c3306c782ffbbe4593aa5673e97e9ad6a8c65d240405e8986363fada66392910160405180910390a250505b5050565b6010546001600160a01b031633146109615760405162461bcd60e51b81526004016107c890611bf7565b6001600160a01b038216600090815260346020526040812054610985908390611c5a565b6001600160a01b038416600081815260346020908152604091829020849055815192835282018390529192507fa43a71186e899a58a054e300880cd236f24f9d0896a03b614cd0b62a702e1b0291015b60405180910390a1505050565b6109ea61147a565b6109f38261151f565b6109338282611527565b6000610a076115e4565b50600080516020611e7283398151915290565b610a2261128d565b6001600160a01b038116610a495760405163706ebc6560e11b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610a7361128d565b610a7d600061162d565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610ac55750825b905060008267ffffffffffffffff166001148015610ae25750303b155b905081158015610af0575080155b15610b0e5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610b3857845460ff60401b1916600160401b1785555b33610b428161169e565b610b4a6116af565b508315610b9157845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b610ba061128d565b601154600160a01b900460ff1615610bca57604051625f22e960e41b815260040160405180910390fd5b60108114610beb57604051633f5a111d60e21b815260040160405180910390fd5b60005b6010811015610c89576000838383818110610c0b57610c0b611c6d565b9050602002016020810190610c209190611a0e565b6001600160a01b031603610c815780838383818110610c4157610c41611c6d565b9050602002016020810190610c569190611a0e565b604051630d9d339f60e01b815260048101929092526001600160a01b031660248201526044016107c8565b600101610bee565b5081816000818110610c9d57610c9d611c6d565b9050602002016020810190610cb29190611a0e565b600080546001600160a01b0319166001600160a01b039290921691909117905581816001818110610ce557610ce5611c6d565b9050602002016020810190610cfa9190611a0e565b600180546001600160a01b0319166001600160a01b039290921691909117905581816002818110610d2d57610d2d611c6d565b9050602002016020810190610d429190611a0e565b600280546001600160a01b0319166001600160a01b039290921691909117905581816003818110610d7557610d75611c6d565b9050602002016020810190610d8a9190611a0e565b600380546001600160a01b0319166001600160a01b039290921691909117905581816004818110610dbd57610dbd611c6d565b9050602002016020810190610dd29190611a0e565b600580546001600160a01b0319166001600160a01b039290921691909117815582908290818110610e0557610e05611c6d565b9050602002016020810190610e1a9190611a0e565b600680546001600160a01b0319166001600160a01b039290921691909117815582908290818110610e4d57610e4d611c6d565b9050602002016020810190610e629190611a0e565b600780546001600160a01b0319166001600160a01b039290921691909117815582908290818110610e9557610e95611c6d565b9050602002016020810190610eaa9190611a0e565b600880546001600160a01b0319166001600160a01b039290921691909117815582908290818110610edd57610edd611c6d565b9050602002016020810190610ef29190611a0e565b600980546001600160a01b0319166001600160a01b039290921691909117815582908290818110610f2557610f25611c6d565b9050602002016020810190610f3a9190611a0e565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a818110610f6d57610f6d611c6d565b9050602002016020810190610f829190611a0e565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b818110610fb557610fb5611c6d565b9050602002016020810190610fca9190611a0e565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c818110610ffd57610ffd611c6d565b90506020020160208101906110129190611a0e565b600e80546001600160a01b0319166001600160a01b03929092169190911790558181600d81811061104557611045611c6d565b905060200201602081019061105a9190611a0e565b600f80546001600160a01b0319166001600160a01b03929092169190911790558181600e81811061108d5761108d611c6d565b90506020020160208101906110a29190611a0e565b601080546001600160a01b0319166001600160a01b03929092169190911790558181600f8181106110d5576110d5611c6d565b90506020020160208101906110ea9190611a0e565b601180546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b6000546001600160a01b031633146111805760405162461bcd60e51b815260206004820152602960248201527f44656661756c74506f6f6c3a2043616c6c6572206973206e6f7420746865204160448201526818dd1a5d99541bdbdb60ba1b60648201526084016107c8565b6001600160a01b0382166000908152603360205260408120546111a4908390611c83565b6001600160a01b038416600081815260336020908152604091829020849055815192835282018390529192507f4d42ce079a4e464782330acbd88d008e74e55501cf9d29de797fa46bac59bc6191016109d5565b61120061128d565b6001600160a01b03811661122a57604051631e4fbdf760e01b8152600060048201526024016107c8565b6112338161162d565b50565b6010546001600160a01b031633146112605760405162461bcd60e51b81526004016107c890611bf7565b6001600160a01b038216600090815260346020526040812054610985908390611c83565b6112338161151f565b336112bf7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610a7d5760405163118cdaa760e01b81523360048201526024016107c8565b60006001600160a01b03831661131157604051631dcb38eb60e11b815260040160405180910390fd5b816000036113215750600061141d565b6000836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113859190611c96565b905060128160ff1610156113e85760006113a0826012611cb9565b6113ab90600a611db6565b90506113b78185611ddb565b156113d557604051630f51ac8560e31b815260040160405180910390fd5b6113df8185611def565b9250505061141d565b60128160ff161115611418576000611401601283611cb9565b61140c90600a611db6565b90506113df8185611e03565b829150505b92915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526114759084906116b7565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061150157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166114f5600080516020611e72833981519152546001600160a01b031690565b6001600160a01b031614155b15610a7d5760405163703e46dd60e11b815260040160405180910390fd5b61123361128d565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611581575060408051601f3d908101601f1916820190925261157e91810190611e1a565b60015b6115a957604051634c9c8ce360e01b81526001600160a01b03831660048201526024016107c8565b600080516020611e7283398151915281146115da57604051632a87526960e21b8152600481018290526024016107c8565b611475838361171a565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a7d5760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6116a6611770565b611233816117b9565b610a7d611770565b60006116cc6001600160a01b038416836117c1565b905080516000141580156116f15750808060200190518101906116ef9190611e33565b155b1561147557604051635274afe760e01b81526001600160a01b03841660048201526024016107c8565b611723826117d6565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561176857611475828261183b565b6109336118b1565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610a7d57604051631afcd79f60e31b815260040160405180910390fd5b611200611770565b60606117cf838360006118d0565b9392505050565b806001600160a01b03163b60000361180c57604051634c9c8ce360e01b81526001600160a01b03821660048201526024016107c8565b600080516020611e7283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516118589190611e55565b600060405180830381855af49150503d8060008114611893576040519150601f19603f3d011682016040523d82523d6000602084013e611898565b606091505b50915091506118a885838361196d565b95945050505050565b3415610a7d5760405163b398979f60e01b815260040160405180910390fd5b6060814710156118f55760405163cd78605960e01b81523060048201526024016107c8565b600080856001600160a01b031684866040516119119190611e55565b60006040518083038185875af1925050503d806000811461194e576040519150601f19603f3d011682016040523d82523d6000602084013e611953565b606091505b509150915061196386838361196d565b9695505050505050565b6060826119825761197d826119c9565b6117cf565b815115801561199957506001600160a01b0384163b155b156119c257604051639996b31560e01b81526001600160a01b03851660048201526024016107c8565b50806117cf565b8051156119d95780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b0381168114611a0957600080fd5b919050565b600060208284031215611a2057600080fd5b6117cf826119f2565b60008060408385031215611a3c57600080fd5b611a45836119f2565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611a7c57600080fd5b611a85836119f2565b9150602083013567ffffffffffffffff80821115611aa257600080fd5b818501915085601f830112611ab657600080fd5b813581811115611ac857611ac8611a53565b604051601f8201601f19908116603f01168101908382118183101715611af057611af0611a53565b81604052828152886020848701011115611b0957600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b83811015611b46578181015183820152602001611b2e565b50506000910152565b6020815260008251806020840152611b6e816040850160208701611b2b565b601f01601f19169190910160400192915050565b60008060208385031215611b9557600080fd5b823567ffffffffffffffff80821115611bad57600080fd5b818501915085601f830112611bc157600080fd5b813581811115611bd057600080fd5b8660208260051b8501011115611be557600080fd5b60209290920196919550909350505050565b6020808252602d908201527f44656661756c74506f6f6c3a2043616c6c6572206973206e6f7420746865205460408201526c3932b72137bc26b0b730b3b2b960991b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561141d5761141d611c44565b634e487b7160e01b600052603260045260246000fd5b8082018082111561141d5761141d611c44565b600060208284031215611ca857600080fd5b815160ff811681146117cf57600080fd5b60ff828116828216039081111561141d5761141d611c44565b600181815b80851115611d0d578160001904821115611cf357611cf3611c44565b80851615611d0057918102915b93841c9390800290611cd7565b509250929050565b600082611d245750600161141d565b81611d315750600061141d565b8160018114611d475760028114611d5157611d6d565b600191505061141d565b60ff841115611d6257611d62611c44565b50506001821b61141d565b5060208310610133831016604e8410600b8410161715611d90575081810a61141d565b611d9a8383611cd2565b8060001904821115611dae57611dae611c44565b029392505050565b60006117cf60ff841683611d15565b634e487b7160e01b600052601260045260246000fd5b600082611dea57611dea611dc5565b500690565b600082611dfe57611dfe611dc5565b500490565b808202811582820484141761141d5761141d611c44565b600060208284031215611e2c57600080fd5b5051919050565b600060208284031215611e4557600080fd5b815180151581146117cf57600080fd5b60008251611e67818460208701611b2b565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca164736f6c6343000817000a",
  "deployedBytecode": "0x60806040526004361061021a5760003560e01c80638da5cb5b11610123578063c8564c62116100ab578063f2fde38b1161006f578063f2fde38b146106ad578063f8585db3146106cd578063f8d89898146106ed578063fe0607331461070d578063fe9d03231461072d57600080fd5b8063c8564c62146105fc578063cc8b21e41461062d578063cda775f91461064d578063eb16f0041461066d578063f1c05a7e1461068d57600080fd5b8063b9571721116100f2578063b957172114610546578063c05c5e9414610566578063c415b95c14610586578063c5739d0b146105a6578063c5f956af146105dc57600080fd5b80638da5cb5b1461047457806395fb16bb146104b1578063a3f4df7e146104d1578063ad3cb1cc1461051557600080fd5b806352d1902d116101a6578063715018a611610175578063715018a6146103ea578063741bef1a146103ff57806377553ad41461041f5780637f7dde4a1461043f5780638129fc1c1461045f57600080fd5b806352d1902d146103515780635373433f1461037457806355dafa46146103aa5780636a85d67d146103ca57600080fd5b80632fb9ba31116101ed5780632fb9ba31146102be5780633cc74225146102de5780634169467d146102fe5780634bc66f321461031e5780634f1ef2861461033e57600080fd5b806301c931001461021f578063048c661d146102415780630a34d4d61461027e57806329fc67c81461029e575b600080fd5b34801561022b57600080fd5b5061023f61023a366004611a0e565b61074d565b005b34801561024d57600080fd5b50600d54610261906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561028a57600080fd5b50601154610261906001600160a01b031681565b3480156102aa57600080fd5b5061023f6102b9366004611a29565b61079e565b3480156102ca57600080fd5b5061023f6102d9366004611a29565b610937565b3480156102ea57600080fd5b50600654610261906001600160a01b031681565b34801561030a57600080fd5b50600854610261906001600160a01b031681565b34801561032a57600080fd5b50600e54610261906001600160a01b031681565b61023f61034c366004611a69565b6109e2565b34801561035d57600080fd5b506103666109fd565b604051908152602001610275565b34801561038057600080fd5b5061036661038f366004611a0e565b6001600160a01b031660009081526033602052604090205490565b3480156103b657600080fd5b50600a54610261906001600160a01b031681565b3480156103d657600080fd5b5061023f6103e5366004611a0e565b610a1a565b3480156103f657600080fd5b5061023f610a6b565b34801561040b57600080fd5b50600b54610261906001600160a01b031681565b34801561042b57600080fd5b50600254610261906001600160a01b031681565b34801561044b57600080fd5b50600054610261906001600160a01b031681565b34801561046b57600080fd5b5061023f610a7f565b34801561048057600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b0316610261565b3480156104bd57600080fd5b50600454610261906001600160a01b031681565b3480156104dd57600080fd5b506105086040518060400160405280600b81526020016a111959985d5b1d141bdbdb60aa1b81525081565b6040516102759190611b4f565b34801561052157600080fd5b50610508604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561055257600080fd5b5061023f610561366004611b82565b610b98565b34801561057257600080fd5b50600154610261906001600160a01b031681565b34801561059257600080fd5b50600754610261906001600160a01b031681565b3480156105b257600080fd5b506103666105c1366004611a0e565b6001600160a01b031660009081526034602052604090205490565b3480156105e857600080fd5b50600f54610261906001600160a01b031681565b34801561060857600080fd5b5060115461061d90600160a01b900460ff1681565b6040519015158152602001610275565b34801561063957600080fd5b50600c54610261906001600160a01b031681565b34801561065957600080fd5b50600354610261906001600160a01b031681565b34801561067957600080fd5b5061023f610688366004611a29565b611114565b34801561069957600080fd5b50601054610261906001600160a01b031681565b3480156106b957600080fd5b5061023f6106c8366004611a0e565b6111f8565b3480156106d957600080fd5b5061023f6106e8366004611a29565b611236565b3480156106f957600080fd5b50600554610261906001600160a01b031681565b34801561071957600080fd5b5061023f610728366004611a0e565b611284565b34801561073957600080fd5b50600954610261906001600160a01b031681565b61075561128d565b6001600160a01b03811661077c576040516385d3330760e01b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6010546001600160a01b031633146107d15760405162461bcd60e51b81526004016107c890611bf7565b60405180910390fd5b60006107dd83836112e8565b9050806000036107ec57505050565b6001600160a01b038316600090815260336020526040812054610810908490611c5a565b6001600160a01b0380861660008181526033602052604081208490555492935061083d9290911684611423565b600054604051633ac5bc0160e21b81526001600160a01b038681166004830152602482018690529091169063eb16f00490604401600060405180830381600087803b15801561088b57600080fd5b505af115801561089f573d6000803e3d6000fd5b5050604080516001600160a01b0388168152602081018590527f4d42ce079a4e464782330acbd88d008e74e55501cf9d29de797fa46bac59bc61935001905060405180910390a1600054604080516001600160a01b03928316815260208101859052918616917ff89c3306c782ffbbe4593aa5673e97e9ad6a8c65d240405e8986363fada66392910160405180910390a250505b5050565b6010546001600160a01b031633146109615760405162461bcd60e51b81526004016107c890611bf7565b6001600160a01b038216600090815260346020526040812054610985908390611c5a565b6001600160a01b038416600081815260346020908152604091829020849055815192835282018390529192507fa43a71186e899a58a054e300880cd236f24f9d0896a03b614cd0b62a702e1b0291015b60405180910390a1505050565b6109ea61147a565b6109f38261151f565b6109338282611527565b6000610a076115e4565b50600080516020611e7283398151915290565b610a2261128d565b6001600160a01b038116610a495760405163706ebc6560e11b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610a7361128d565b610a7d600061162d565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610ac55750825b905060008267ffffffffffffffff166001148015610ae25750303b155b905081158015610af0575080155b15610b0e5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610b3857845460ff60401b1916600160401b1785555b33610b428161169e565b610b4a6116af565b508315610b9157845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b610ba061128d565b601154600160a01b900460ff1615610bca57604051625f22e960e41b815260040160405180910390fd5b60108114610beb57604051633f5a111d60e21b815260040160405180910390fd5b60005b6010811015610c89576000838383818110610c0b57610c0b611c6d565b9050602002016020810190610c209190611a0e565b6001600160a01b031603610c815780838383818110610c4157610c41611c6d565b9050602002016020810190610c569190611a0e565b604051630d9d339f60e01b815260048101929092526001600160a01b031660248201526044016107c8565b600101610bee565b5081816000818110610c9d57610c9d611c6d565b9050602002016020810190610cb29190611a0e565b600080546001600160a01b0319166001600160a01b039290921691909117905581816001818110610ce557610ce5611c6d565b9050602002016020810190610cfa9190611a0e565b600180546001600160a01b0319166001600160a01b039290921691909117905581816002818110610d2d57610d2d611c6d565b9050602002016020810190610d429190611a0e565b600280546001600160a01b0319166001600160a01b039290921691909117905581816003818110610d7557610d75611c6d565b9050602002016020810190610d8a9190611a0e565b600380546001600160a01b0319166001600160a01b039290921691909117905581816004818110610dbd57610dbd611c6d565b9050602002016020810190610dd29190611a0e565b600580546001600160a01b0319166001600160a01b039290921691909117815582908290818110610e0557610e05611c6d565b9050602002016020810190610e1a9190611a0e565b600680546001600160a01b0319166001600160a01b039290921691909117815582908290818110610e4d57610e4d611c6d565b9050602002016020810190610e629190611a0e565b600780546001600160a01b0319166001600160a01b039290921691909117815582908290818110610e9557610e95611c6d565b9050602002016020810190610eaa9190611a0e565b600880546001600160a01b0319166001600160a01b039290921691909117815582908290818110610edd57610edd611c6d565b9050602002016020810190610ef29190611a0e565b600980546001600160a01b0319166001600160a01b039290921691909117815582908290818110610f2557610f25611c6d565b9050602002016020810190610f3a9190611a0e565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a818110610f6d57610f6d611c6d565b9050602002016020810190610f829190611a0e565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b818110610fb557610fb5611c6d565b9050602002016020810190610fca9190611a0e565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c818110610ffd57610ffd611c6d565b90506020020160208101906110129190611a0e565b600e80546001600160a01b0319166001600160a01b03929092169190911790558181600d81811061104557611045611c6d565b905060200201602081019061105a9190611a0e565b600f80546001600160a01b0319166001600160a01b03929092169190911790558181600e81811061108d5761108d611c6d565b90506020020160208101906110a29190611a0e565b601080546001600160a01b0319166001600160a01b03929092169190911790558181600f8181106110d5576110d5611c6d565b90506020020160208101906110ea9190611a0e565b601180546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b6000546001600160a01b031633146111805760405162461bcd60e51b815260206004820152602960248201527f44656661756c74506f6f6c3a2043616c6c6572206973206e6f7420746865204160448201526818dd1a5d99541bdbdb60ba1b60648201526084016107c8565b6001600160a01b0382166000908152603360205260408120546111a4908390611c83565b6001600160a01b038416600081815260336020908152604091829020849055815192835282018390529192507f4d42ce079a4e464782330acbd88d008e74e55501cf9d29de797fa46bac59bc6191016109d5565b61120061128d565b6001600160a01b03811661122a57604051631e4fbdf760e01b8152600060048201526024016107c8565b6112338161162d565b50565b6010546001600160a01b031633146112605760405162461bcd60e51b81526004016107c890611bf7565b6001600160a01b038216600090815260346020526040812054610985908390611c83565b6112338161151f565b336112bf7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610a7d5760405163118cdaa760e01b81523360048201526024016107c8565b60006001600160a01b03831661131157604051631dcb38eb60e11b815260040160405180910390fd5b816000036113215750600061141d565b6000836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113859190611c96565b905060128160ff1610156113e85760006113a0826012611cb9565b6113ab90600a611db6565b90506113b78185611ddb565b156113d557604051630f51ac8560e31b815260040160405180910390fd5b6113df8185611def565b9250505061141d565b60128160ff161115611418576000611401601283611cb9565b61140c90600a611db6565b90506113df8185611e03565b829150505b92915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526114759084906116b7565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061150157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166114f5600080516020611e72833981519152546001600160a01b031690565b6001600160a01b031614155b15610a7d5760405163703e46dd60e11b815260040160405180910390fd5b61123361128d565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611581575060408051601f3d908101601f1916820190925261157e91810190611e1a565b60015b6115a957604051634c9c8ce360e01b81526001600160a01b03831660048201526024016107c8565b600080516020611e7283398151915281146115da57604051632a87526960e21b8152600481018290526024016107c8565b611475838361171a565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a7d5760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6116a6611770565b611233816117b9565b610a7d611770565b60006116cc6001600160a01b038416836117c1565b905080516000141580156116f15750808060200190518101906116ef9190611e33565b155b1561147557604051635274afe760e01b81526001600160a01b03841660048201526024016107c8565b611723826117d6565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561176857611475828261183b565b6109336118b1565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610a7d57604051631afcd79f60e31b815260040160405180910390fd5b611200611770565b60606117cf838360006118d0565b9392505050565b806001600160a01b03163b60000361180c57604051634c9c8ce360e01b81526001600160a01b03821660048201526024016107c8565b600080516020611e7283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516118589190611e55565b600060405180830381855af49150503d8060008114611893576040519150601f19603f3d011682016040523d82523d6000602084013e611898565b606091505b50915091506118a885838361196d565b95945050505050565b3415610a7d5760405163b398979f60e01b815260040160405180910390fd5b6060814710156118f55760405163cd78605960e01b81523060048201526024016107c8565b600080856001600160a01b031684866040516119119190611e55565b60006040518083038185875af1925050503d806000811461194e576040519150601f19603f3d011682016040523d82523d6000602084013e611953565b606091505b509150915061196386838361196d565b9695505050505050565b6060826119825761197d826119c9565b6117cf565b815115801561199957506001600160a01b0384163b155b156119c257604051639996b31560e01b81526001600160a01b03851660048201526024016107c8565b50806117cf565b8051156119d95780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b0381168114611a0957600080fd5b919050565b600060208284031215611a2057600080fd5b6117cf826119f2565b60008060408385031215611a3c57600080fd5b611a45836119f2565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611a7c57600080fd5b611a85836119f2565b9150602083013567ffffffffffffffff80821115611aa257600080fd5b818501915085601f830112611ab657600080fd5b813581811115611ac857611ac8611a53565b604051601f8201601f19908116603f01168101908382118183101715611af057611af0611a53565b81604052828152886020848701011115611b0957600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b83811015611b46578181015183820152602001611b2e565b50506000910152565b6020815260008251806020840152611b6e816040850160208701611b2b565b601f01601f19169190910160400192915050565b60008060208385031215611b9557600080fd5b823567ffffffffffffffff80821115611bad57600080fd5b818501915085601f830112611bc157600080fd5b813581811115611bd057600080fd5b8660208260051b8501011115611be557600080fd5b60209290920196919550909350505050565b6020808252602d908201527f44656661756c74506f6f6c3a2043616c6c6572206973206e6f7420746865205460408201526c3932b72137bc26b0b730b3b2b960991b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561141d5761141d611c44565b634e487b7160e01b600052603260045260246000fd5b8082018082111561141d5761141d611c44565b600060208284031215611ca857600080fd5b815160ff811681146117cf57600080fd5b60ff828116828216039081111561141d5761141d611c44565b600181815b80851115611d0d578160001904821115611cf357611cf3611c44565b80851615611d0057918102915b93841c9390800290611cd7565b509250929050565b600082611d245750600161141d565b81611d315750600061141d565b8160018114611d475760028114611d5157611d6d565b600191505061141d565b60ff841115611d6257611d62611c44565b50506001821b61141d565b5060208310610133831016604e8410600b8410161715611d90575081810a61141d565b611d9a8383611cd2565b8060001904821115611dae57611dae611c44565b029392505050565b60006117cf60ff841683611d15565b634e487b7160e01b600052601260045260246000fd5b600082611dea57611dea611dc5565b500690565b600082611dfe57611dfe611dc5565b500490565b808202811582820484141761141d5761141d611c44565b600060208284031215611e2c57600080fd5b5051919050565b600060208284031215611e4557600080fd5b815180151581146117cf57600080fd5b60008251611e67818460208701611b2b565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca164736f6c6343000817000a",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10031,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "activePool",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10033,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "adminContract",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10035,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "borrowerOperations",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10037,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "collSurplusPool",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10039,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "communityIssuance",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 10041,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "debtToken",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 10043,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "defaultPool",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 10045,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "feeCollector",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 10047,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "flashLoanAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 10049,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "gasPoolAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 10051,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "trenStaking",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 10053,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "priceFeed",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 10055,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "sortedTrenBoxes",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 10057,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 10059,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "timelockAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 10061,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 10063,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "trenBoxManager",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 10065,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "trenBoxManagerOperations",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 10067,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "isAddressSetupInitialized",
        "offset": 20,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 10072,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "__gap",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_uint256)33_storage"
      },
      {
        "astId": 9776,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "assetsBalances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9780,
        "contract": "contracts/DefaultPool.sol:DefaultPool",
        "label": "debtTokenBalances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)33_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[33]",
        "numberOfBytes": "1056"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}