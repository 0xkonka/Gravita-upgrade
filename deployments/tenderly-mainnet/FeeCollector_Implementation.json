{
  "address": "0x5EDbeBe311abD315912b0ADd9Cc055477c34a25E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__CommunityIssuanceZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__LengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__SetupIsInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__TRENStakingZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "address_",
          "type": "address"
        }
      ],
      "name": "ConfigurableAddresses__ZeroAddresses",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeCollector__ArrayMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_expected",
          "type": "address"
        }
      ],
      "name": "FeeCollector__BorrowerOperationsOnly",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_expected1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_expected2",
          "type": "address"
        }
      ],
      "name": "FeeCollector__BorrowerOperationsOrTrenBoxManagerOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeCollector__PaybackFractionHigherThanOne",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_expected",
          "type": "address"
        }
      ],
      "name": "FeeCollector__TrenBoxManagerOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeCollector__ZeroPaybackFraction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_collector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "FeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "FeeRecordUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "FeeRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "RedemptionFeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_EXPIRATION_SECONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_FEE_DAYS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_FEE_FRACTION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "authorizeUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "closeDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_borrowers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        }
      ],
      "name": "collectFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityIssuance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_paybackFraction",
          "type": "uint256"
        }
      ],
      "name": "decreaseDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "feeRecords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolRevenueDestination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "handleRedemptionFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "name": "increaseDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAddressSetupInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "liquidateDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_communityIssuance",
          "type": "address"
        }
      ],
      "name": "setCommunityIssuance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trenStaking",
          "type": "address"
        }
      ],
      "name": "setTRENStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_paybackFraction",
          "type": "uint256"
        }
      ],
      "name": "simulateRefund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTrenBoxes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManagerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxStorage",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe876271c7deeaf66a62b3ebc3b52d19f2d2c1deff5f3f6470d17ce42a96c85d2",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x19E733F20aAdaB8996f7895ACBD04f746BF4Aac1",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "2203247",
    "logsBloom": "0x
    "blockHash": "0x322510f53183f8154fdac60658a9463331f61ed539bee3a06e5dd70b5919e3fc",
    "transactionHash": "0xe876271c7deeaf66a62b3ebc3b52d19f2d2c1deff5f3f6470d17ce42a96c85d2",
    "logs": [],
    "blockNumber": 19960129,
    "cumulativeGasUsed": "2203247",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ce0a60c92cd27ba5a217c9a57823311c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__CommunityIssuanceZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__SetupIsInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__TRENStakingZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"ConfigurableAddresses__ZeroAddresses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeCollector__ArrayMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_expected\",\"type\":\"address\"}],\"name\":\"FeeCollector__BorrowerOperationsOnly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_expected1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_expected2\",\"type\":\"address\"}],\"name\":\"FeeCollector__BorrowerOperationsOrTrenBoxManagerOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeCollector__PaybackFractionHigherThanOne\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_expected\",\"type\":\"address\"}],\"name\":\"FeeCollector__TrenBoxManagerOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeCollector__ZeroPaybackFraction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FeeRecordUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FeeRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RedemptionFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_EXPIRATION_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEE_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEE_FRACTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"authorizeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"closeDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_borrowers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityIssuance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_paybackFraction\",\"type\":\"uint256\"}],\"name\":\"decreaseDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"feeRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolRevenueDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"handleRedemptionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"increaseDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAddressSetupInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"liquidateDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityIssuance\",\"type\":\"address\"}],\"name\":\"setCommunityIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trenStaking\",\"type\":\"address\"}],\"name\":\"setTRENStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_paybackFraction\",\"type\":\"uint256\"}],\"name\":\"simulateRefund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTrenBoxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManagerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"FeeCollector__ArrayMismatch()\":[{\"details\":\"Emitted when the lengths of array parameters are mismatched.\"}],\"FeeCollector__BorrowerOperationsOnly(address,address)\":[{\"details\":\"Emitted when the caller is not BorrowerOperations.\",\"params\":{\"_expected\":\"The address of BorrowerOperations.\",\"_sender\":\"The address of caller.\"}}],\"FeeCollector__BorrowerOperationsOrTrenBoxManagerOnly(address,address,address)\":[{\"details\":\"Emitted when the caller is neither BorrowerOperations nor TrenBoxManager.\",\"params\":{\"_expected1\":\"The address of BorrowerOperations.\",\"_expected2\":\"The address of TrenBoxManager.\",\"_sender\":\"The address of caller.\"}}],\"FeeCollector__PaybackFractionHigherThanOne()\":[{\"details\":\"Emitted when the payback fraction is higher than 1 ether(10**18 wei).\"}],\"FeeCollector__TrenBoxManagerOnly(address,address)\":[{\"details\":\"Emitted when the caller is not TrenBoxManager.\",\"params\":{\"_expected\":\"The address of TrenBoxManager.\",\"_sender\":\"The address of caller.\"}}],\"FeeCollector__ZeroPaybackFraction()\":[{\"details\":\"Emitted when the payback fraction is zero.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"FeeCollected(address,address,address,uint256)\":{\"details\":\"Emitted when the collected fees are transferred to either the treasury or the TRENStaking contract.\",\"params\":{\"_amount\":\"The amount of collected fees (debt tokens).\",\"_asset\":\"The address of collateral asset.\",\"_borrower\":\"The address of borrower.\",\"_collector\":\"The address of destination.\"}},\"FeeRecordUpdated(address,address,uint256,uint256,uint256)\":{\"details\":\"Emitted when the fee record is updated.\",\"params\":{\"_amount\":\"The amount of refundable fee\",\"_asset\":\"The address of collateral asset.\",\"_borrower\":\"The address of borrower.\",\"_from\":\"The timestamp in seconds when the decay of refundable fee started.\",\"_to\":\"The timestamp in seconds when the decay of refundable fee expired.\"}},\"FeeRefunded(address,address,uint256)\":{\"details\":\"Emitted when the fees are refunded to the borrower.\",\"params\":{\"_amount\":\"The amount of refunded fees.\",\"_asset\":\"The address of collateral asset.\",\"_borrower\":\"The address of borrower.\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RedemptionFeeCollected(address,uint256)\":{\"details\":\"Emitted when the redemption fees are collected.\",\"params\":{\"_amount\":\"The amount of collected fees.\",\"_asset\":\"The address of collateral asset.\"}},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"closeDebt(address,address)\":{\"params\":{\"_asset\":\"The address of collateral asset.\",\"_borrower\":\"The address of borrower.\"}},\"collectFees(address[],address[])\":{\"params\":{\"_assets\":\"The address array of collateral assets.\",\"_borrowers\":\"The address array of borrowers.\"}},\"decreaseDebt(address,address,uint256)\":{\"params\":{\"_asset\":\"The address of collateral asset.\",\"_borrower\":\"The address of borrower.\",\"_paybackFraction\":\"The amount that the borrower pays back.\"}},\"handleRedemptionFee(address,uint256)\":{\"params\":{\"_amount\":\"The amount of redemption fee to send.\",\"_asset\":\"The address of collateral asset.\"}},\"increaseDebt(address,address,uint256)\":{\"details\":\"Attention: this method assumes that (debt token) _feeAmount has already been minted and transferred to this contract.\",\"params\":{\"_asset\":\"The address of collateral asset.\",\"_borrower\":\"The address of borrower.\",\"_feeAmount\":\"The fee amount to collect.\"}},\"initialize(address)\":{\"details\":\"Runs all the setup logic only once.\",\"params\":{\"initialOwner\":\"The address of initial owner.\"}},\"liquidateDebt(address,address)\":{\"params\":{\"_asset\":\"The address of collateral asset.\",\"_borrower\":\"The address of borrower.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"simulateRefund(address,address,uint256)\":{\"details\":\"Helper function used by the UI.\",\"params\":{\"_asset\":\"The address of collateral asset.\",\"_borrower\":\"The address of borrower.\",\"_paybackFraction\":\"The amount that the borrower pays back.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"FeeCollector contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"FEE_EXPIRATION_SECONDS()\":{\"notice\":\"The duration which the fee refund is expired. ~ 6 months minus one week (MIN_FEE_DAYS)\"},\"MIN_FEE_DAYS()\":{\"notice\":\"The duration which the minimum fee is applied.\"},\"MIN_FEE_FRACTION()\":{\"notice\":\"The minimum fee fraction, divided by 26 (1/26).\"},\"NAME()\":{\"notice\":\"The contract name.\"},\"closeDebt(address,address)\":{\"notice\":\"Closes debt when it is paid in full.\"},\"collectFees(address[],address[])\":{\"notice\":\"Batches collect fees from an array of borrowers and assets.\"},\"decreaseDebt(address,address,uint256)\":{\"notice\":\"Decreases debt when a TrenBox is adjusted.\"},\"feeRecords(address,address)\":{\"notice\":\"The mapping from borrower address to the nested mapping from collateral asset address to fee record struct\"},\"getProtocolRevenueDestination()\":{\"notice\":\"Gets the protocol revenue destination.\"},\"handleRedemptionFee(address,uint256)\":{\"notice\":\"Sends redemption fee to the protocol revenue destination.\"},\"increaseDebt(address,address,uint256)\":{\"notice\":\"Increases debt of fee amount when a TrenBox is created and again whenever the borrower acquires additional loans. Collects the minimum fee to the platform, for which there is no refund; holds on to the remaining fees until debt is paid, liquidated, or expired.\"},\"liquidateDebt(address,address)\":{\"notice\":\"Triggered when a TrenBox is liquidated. In that case, all remaining fees are collected by the platform, and no refunds are generated.\"},\"simulateRefund(address,address,uint256)\":{\"notice\":\"Simulates the refund due if a TrenBox would be closed at this moment\"}},\"notice\":\"Handles the borrowing fee; controls the decaying refund and maintains its record that includes the refund balance.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FeeCollector.sol\":\"FeeCollector\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"contracts/Dependencies/ConfigurableAddresses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract ConfigurableAddresses is OwnableUpgradeable {\\n    address public adminContract;\\n    address public borrowerOperations;\\n    address public communityIssuance;\\n    address public debtToken;\\n    address public feeCollector;\\n    address public flashLoanAddress;\\n    address public trenStaking;\\n    address public priceFeed;\\n    address public sortedTrenBoxes;\\n    address public stabilityPool;\\n    address public timelockAddress;\\n    address public treasuryAddress;\\n    address public trenBoxManager;\\n    address public trenBoxManagerOperations;\\n    address public trenBoxStorage;\\n\\n    bool public isAddressSetupInitialized;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[33] private __gap; // Goerli uses 47; Arbitrum uses 33\\n\\n    error ConfigurableAddresses__SetupIsInitialized();\\n    error ConfigurableAddresses__ZeroAddresses(uint256 position, address address_);\\n    error ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n    error ConfigurableAddresses__TRENStakingZeroAddress();\\n    error ConfigurableAddresses__LengthMismatch();\\n\\n    // Dependency setters\\n    // -----------------------------------------------------------------------------------------------\\n\\n    function setAddresses(address[] calldata _addresses) external onlyOwner {\\n        if (isAddressSetupInitialized) {\\n            revert ConfigurableAddresses__SetupIsInitialized();\\n        }\\n        if (_addresses.length != 13) {\\n            revert ConfigurableAddresses__LengthMismatch();\\n        }\\n\\n        for (uint256 i = 0; i < 13;) {\\n            if (_addresses[i] == address(0)) {\\n                revert ConfigurableAddresses__ZeroAddresses(i, _addresses[i]);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        adminContract = _addresses[0];\\n        borrowerOperations = _addresses[1];\\n        debtToken = _addresses[2];\\n        feeCollector = _addresses[3];\\n        flashLoanAddress = _addresses[4];\\n        priceFeed = _addresses[5];\\n        sortedTrenBoxes = _addresses[6];\\n        stabilityPool = _addresses[7];\\n        timelockAddress = _addresses[8];\\n        treasuryAddress = _addresses[9];\\n        trenBoxManager = _addresses[10];\\n        trenBoxManagerOperations = _addresses[11];\\n        trenBoxStorage = _addresses[12];\\n\\n        isAddressSetupInitialized = true;\\n    }\\n\\n    function setCommunityIssuance(address _communityIssuance) public onlyOwner {\\n        if (_communityIssuance == address(0)) {\\n            revert ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n        }\\n        communityIssuance = _communityIssuance;\\n    }\\n\\n    function setTRENStaking(address _trenStaking) public onlyOwner {\\n        if (_trenStaking == address(0)) {\\n            revert ConfigurableAddresses__TRENStakingZeroAddress();\\n        }\\n        trenStaking = _trenStaking;\\n    }\\n}\\n\",\"keccak256\":\"0x20983a5ba6e289bbbb95aeba34057989e87c0818237897c712af27aa8f2c24a4\",\"license\":\"MIT\"},\"contracts/FeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { UUPSUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport { ConfigurableAddresses } from \\\"./Dependencies/ConfigurableAddresses.sol\\\";\\n\\nimport { IDebtToken } from \\\"./Interfaces/IDebtToken.sol\\\";\\nimport { IFeeCollector } from \\\"./Interfaces/IFeeCollector.sol\\\";\\nimport { ITRENStaking } from \\\"./Interfaces/ITRENStaking.sol\\\";\\nimport { IAdminContract } from \\\"./Interfaces/IAdminContract.sol\\\";\\n\\n/**\\n * @title FeeCollector contract\\n * @notice Handles the borrowing fee; controls the decaying refund and maintains\\n * its record that includes the refund balance.\\n */\\ncontract FeeCollector is\\n    IFeeCollector,\\n    UUPSUpgradeable,\\n    OwnableUpgradeable,\\n    ConfigurableAddresses\\n{\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice The contract name.\\n    string public constant NAME = \\\"FeeCollector\\\";\\n\\n    /// @notice The duration which the minimum fee is applied.\\n    uint256 public constant MIN_FEE_DAYS = 7;\\n\\n    /// @notice The minimum fee fraction, divided by 26 (1/26).\\n    uint256 public constant MIN_FEE_FRACTION = 0.038461538 * 1 ether;\\n\\n    /// @notice The duration which the fee refund is expired.\\n    /// ~ 6 months minus one week (MIN_FEE_DAYS)\\n    uint256 public constant FEE_EXPIRATION_SECONDS = 175 * 1 days;\\n\\n    /// @notice The mapping from borrower address to the nested mapping from\\n    /// collateral asset address to fee record struct\\n    mapping(address borrower => mapping(address asset => FeeRecord feeParams)) public feeRecords;\\n\\n    // Modifiers\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    modifier onlyBorrowerOperations() {\\n        if (msg.sender != borrowerOperations) {\\n            revert FeeCollector__BorrowerOperationsOnly(msg.sender, borrowerOperations);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyTrenBoxManager() {\\n        if (msg.sender != trenBoxManager) {\\n            revert FeeCollector__TrenBoxManagerOnly(msg.sender, trenBoxManager);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyBorrowerOperationsOrTrenBoxManager() {\\n        if (msg.sender != borrowerOperations && msg.sender != trenBoxManager) {\\n            revert FeeCollector__BorrowerOperationsOrTrenBoxManagerOnly(\\n                msg.sender, borrowerOperations, trenBoxManager\\n            );\\n        }\\n        _;\\n    }\\n\\n    // Initializer\\n    // ------------------------------------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Runs all the setup logic only once.\\n     * @param initialOwner The address of initial owner.\\n     */\\n    function initialize(address initialOwner) external initializer {\\n        __Ownable_init(initialOwner);\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    // ================= Public/External functions ================ //\\n\\n    /// @inheritdoc IFeeCollector\\n    function increaseDebt(\\n        address _borrower,\\n        address _asset,\\n        uint256 _feeAmount\\n    )\\n        external\\n        override\\n        onlyBorrowerOperations\\n    {\\n        uint256 minFeeAmount = (MIN_FEE_FRACTION * _feeAmount) / 1 ether;\\n        uint256 refundableFeeAmount = _feeAmount - minFeeAmount;\\n        uint256 feeToCollect = _createOrUpdateFeeRecord(_borrower, _asset, refundableFeeAmount);\\n        _collectFee(_borrower, _asset, minFeeAmount + feeToCollect);\\n    }\\n\\n    /// @inheritdoc IFeeCollector\\n    function decreaseDebt(\\n        address _borrower,\\n        address _asset,\\n        uint256 _paybackFraction\\n    )\\n        external\\n        override\\n        onlyBorrowerOperationsOrTrenBoxManager\\n    {\\n        _decreaseDebt(_borrower, _asset, _paybackFraction);\\n    }\\n\\n    /// @inheritdoc IFeeCollector\\n    function closeDebt(\\n        address _borrower,\\n        address _asset\\n    )\\n        external\\n        override\\n        onlyBorrowerOperationsOrTrenBoxManager\\n    {\\n        _decreaseDebt(_borrower, _asset, 1 ether);\\n    }\\n\\n    /// @inheritdoc IFeeCollector\\n    function simulateRefund(\\n        address _borrower,\\n        address _asset,\\n        uint256 _paybackFraction\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (_paybackFraction > 1 ether) {\\n            revert FeeCollector__PaybackFractionHigherThanOne();\\n        }\\n        if (_paybackFraction == 0) {\\n            revert FeeCollector__ZeroPaybackFraction();\\n        }\\n\\n        FeeRecord storage record = feeRecords[_borrower][_asset];\\n        if (record.amount == 0 || record.to < block.timestamp) {\\n            return 0;\\n        }\\n        uint256 expiredAmount = _calcExpiredAmount(record.from, record.to, record.amount);\\n        if (_paybackFraction == 1e18) {\\n            // full payback\\n            return record.amount - expiredAmount;\\n        } else {\\n            // calc refund amount proportional to the payment\\n            return ((record.amount - expiredAmount) * _paybackFraction) / 1 ether;\\n        }\\n    }\\n\\n    /// @inheritdoc IFeeCollector\\n    function liquidateDebt(\\n        address _borrower,\\n        address _asset\\n    )\\n        external\\n        override\\n        onlyTrenBoxManager\\n    {\\n        FeeRecord memory mRecord = feeRecords[_borrower][_asset];\\n        if (mRecord.amount != 0) {\\n            _closeExpiredOrLiquidatedFeeRecord(_borrower, _asset, mRecord.amount);\\n        }\\n    }\\n\\n    /// @inheritdoc IFeeCollector\\n    function collectFees(\\n        address[] calldata _borrowers,\\n        address[] calldata _assets\\n    )\\n        external\\n        override\\n    {\\n        uint256 borrowersLength = _borrowers.length;\\n        if (borrowersLength != _assets.length || borrowersLength == 0) {\\n            revert FeeCollector__ArrayMismatch();\\n        }\\n        uint256 NOW = block.timestamp;\\n        for (uint256 i = 0; i < borrowersLength;) {\\n            address borrower = _borrowers[i];\\n            address asset = _assets[i];\\n            FeeRecord storage sRecord = feeRecords[borrower][asset];\\n            uint256 expiredAmount = _calcExpiredAmount(sRecord.from, sRecord.to, sRecord.amount);\\n            if (expiredAmount > 0) {\\n                uint256 updatedAmount = sRecord.amount - expiredAmount;\\n                sRecord.amount = updatedAmount;\\n                sRecord.from = NOW;\\n                _collectFee(borrower, asset, expiredAmount);\\n                emit FeeRecordUpdated(borrower, asset, NOW, sRecord.to, updatedAmount);\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IFeeCollector\\n    function handleRedemptionFee(address _asset, uint256 _amount) external onlyTrenBoxManager {\\n        if (IAdminContract(adminContract).getRouteToTRENStaking()) {\\n            ITRENStaking(trenStaking).increaseFeeAsset(_asset, _amount);\\n        }\\n        emit RedemptionFeeCollected(_asset, _amount);\\n    }\\n\\n    function authorizeUpgrade(address newImplementation) public {\\n        _authorizeUpgrade(newImplementation);\\n    }\\n\\n    // ================== View functions ================ //\\n\\n    /// @inheritdoc IFeeCollector\\n    function getProtocolRevenueDestination() public view override returns (address) {\\n        return IAdminContract(adminContract).getRouteToTRENStaking() ? trenStaking : treasuryAddress;\\n    }\\n\\n    // ================= Internal functions ================ //\\n\\n    /**\\n     * @dev Decreases debt when a TrenBox is adjusted or closed, and the borrower\\n     * has paid back or decreased his loan.\\n     * @param _borrower The address of borrower.\\n     * @param _asset The address of collateral asset.\\n     * @param _paybackFraction The amount that the borrower pays back.\\n     */\\n    function _decreaseDebt(address _borrower, address _asset, uint256 _paybackFraction) internal {\\n        uint256 NOW = block.timestamp;\\n\\n        if (_paybackFraction > 1 ether) {\\n            revert FeeCollector__PaybackFractionHigherThanOne();\\n        }\\n        if (_paybackFraction == 0) {\\n            revert FeeCollector__ZeroPaybackFraction();\\n        }\\n\\n        FeeRecord storage sRecord = feeRecords[_borrower][_asset];\\n        if (sRecord.amount == 0) {\\n            return;\\n        }\\n        if (sRecord.to <= NOW) {\\n            _closeExpiredOrLiquidatedFeeRecord(_borrower, _asset, sRecord.amount);\\n        } else {\\n            // collect expired refund\\n            uint256 expiredAmount = _calcExpiredAmount(sRecord.from, sRecord.to, sRecord.amount);\\n            _collectFee(_borrower, _asset, expiredAmount);\\n            if (_paybackFraction == 1e18) {\\n                // on a full payback, there's no refund; refund amount is discounted from final\\n                // payment\\n                uint256 refundAmount = sRecord.amount - expiredAmount;\\n                IDebtToken(debtToken).burnFromWhitelistedContract(refundAmount);\\n                sRecord.amount = 0;\\n                emit FeeRecordUpdated(_borrower, _asset, NOW, 0, 0);\\n            } else {\\n                // refund amount proportional to the payment\\n                uint256 refundAmount =\\n                    ((sRecord.amount - expiredAmount) * _paybackFraction) / 1 ether;\\n                _refundFee(_borrower, _asset, refundAmount);\\n                uint256 updatedAmount = sRecord.amount - expiredAmount - refundAmount;\\n                sRecord.amount = updatedAmount;\\n                sRecord.from = NOW;\\n                emit FeeRecordUpdated(_borrower, _asset, NOW, sRecord.to, updatedAmount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates or updates fee record parameters for a specific collateral asset.\\n     * @param _borrower The address of borrower.\\n     * @param _asset The address of collateral asset.\\n     * @param _feeAmount The fee amount to collect.\\n     */\\n    function _createOrUpdateFeeRecord(\\n        address _borrower,\\n        address _asset,\\n        uint256 _feeAmount\\n    )\\n        internal\\n        returns (uint256 feeToCollect)\\n    {\\n        FeeRecord storage sRecord = feeRecords[_borrower][_asset];\\n        if (sRecord.amount == 0) {\\n            _createFeeRecord(_borrower, _asset, _feeAmount, sRecord);\\n        } else {\\n            if (sRecord.to <= block.timestamp) {\\n                feeToCollect = sRecord.amount;\\n                _createFeeRecord(_borrower, _asset, _feeAmount, sRecord);\\n            } else {\\n                feeToCollect = _updateFeeRecord(_borrower, _asset, _feeAmount, sRecord);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates new fee record for a specific collateral asset.\\n     * @param _borrower The address of borrower.\\n     * @param _asset The address of collateral asset.\\n     * @param _feeAmount The fee amount to add.\\n     * @param _sRecord The storage to store new fee record.\\n     */\\n    function _createFeeRecord(\\n        address _borrower,\\n        address _asset,\\n        uint256 _feeAmount,\\n        FeeRecord storage _sRecord\\n    )\\n        internal\\n    {\\n        uint256 from = block.timestamp + MIN_FEE_DAYS * 1 days;\\n        uint256 to = from + FEE_EXPIRATION_SECONDS;\\n        _sRecord.amount = _feeAmount;\\n        _sRecord.from = from;\\n        _sRecord.to = to;\\n        emit FeeRecordUpdated(_borrower, _asset, from, to, _feeAmount);\\n    }\\n\\n    /**\\n     * @dev Updates the existing fee record for a specific collateral asset.\\n     * @param _borrower The address of borrower.\\n     * @param _asset The address of collateral asset.\\n     * @param _addedAmount The fee amount to update.\\n     * @param _sRecord The storage to store updated fee record.\\n     */\\n    function _updateFeeRecord(\\n        address _borrower,\\n        address _asset,\\n        uint256 _addedAmount,\\n        FeeRecord storage _sRecord\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 NOW = block.timestamp;\\n        if (NOW < _sRecord.from) {\\n            // loan is still in its first week (MIN_FEE_DAYS)\\n            NOW = _sRecord.from;\\n        }\\n        uint256 expiredAmount = _calcExpiredAmount(_sRecord.from, _sRecord.to, _sRecord.amount);\\n        uint256 remainingAmount = _sRecord.amount - expiredAmount;\\n        uint256 remainingTime = _sRecord.to - NOW;\\n        uint256 updatedAmount = remainingAmount + _addedAmount;\\n        uint256 updatedTo = NOW + _calcNewDuration(remainingAmount, remainingTime, _addedAmount);\\n        _sRecord.amount = updatedAmount;\\n        _sRecord.from = NOW;\\n        _sRecord.to = updatedTo;\\n        emit FeeRecordUpdated(_borrower, _asset, NOW, updatedTo, updatedAmount);\\n        return expiredAmount;\\n    }\\n\\n    /**\\n     * @dev Closes the expired or liquidated fee record for a specific collateral asset.\\n     * @param _borrower The address of borrower.\\n     * @param _asset The address of collateral asset.\\n     * @param _amount The stored fee amount.\\n     */\\n    function _closeExpiredOrLiquidatedFeeRecord(\\n        address _borrower,\\n        address _asset,\\n        uint256 _amount\\n    )\\n        internal\\n    {\\n        _collectFee(_borrower, _asset, _amount);\\n        delete feeRecords[_borrower][_asset];\\n        emit FeeRecordUpdated(_borrower, _asset, block.timestamp, 0, 0);\\n    }\\n\\n    /**\\n     * @dev Calculates the expired fee amount at the time.\\n     * @param _from The timestamp when the fee record is created.\\n     * @param _to The timestamp when the fee record expires.\\n     * @param _amount The amount of fee record.\\n     */\\n    function _calcExpiredAmount(\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 _amount\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 NOW = block.timestamp;\\n        if (_from > NOW) {\\n            return 0;\\n        }\\n        if (NOW >= _to) {\\n            return _amount;\\n        }\\n        uint256 PRECISION = 1e9;\\n        uint256 lifeTime = _to - _from;\\n        uint256 elapsedTime = NOW - _from;\\n        uint256 decayRate = (_amount * PRECISION) / lifeTime;\\n        uint256 expiredAmount = (elapsedTime * decayRate) / PRECISION;\\n        return expiredAmount;\\n    }\\n\\n    /**\\n     * @dev Calculates new duration when fee record is updated.\\n     * @param _remainingAmount The amount of refundable fee.\\n     * @param _remainingTimeToLive The remaining duration until the refundable fee is all expired.\\n     * @param _addedAmount The added amount to fee record.\\n     */\\n    function _calcNewDuration(\\n        uint256 _remainingAmount,\\n        uint256 _remainingTimeToLive,\\n        uint256 _addedAmount\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 prevWeight = _remainingAmount * _remainingTimeToLive;\\n        uint256 nextWeight = _addedAmount * FEE_EXPIRATION_SECONDS;\\n        uint256 newDuration = (prevWeight + nextWeight) / (_remainingAmount + _addedAmount);\\n        return newDuration;\\n    }\\n\\n    /**\\n     * @dev Transfers collected (debt token) fees to either the treasury or the staking contract.\\n     * @param _borrower The address of borrower.\\n     * @param _asset The address of collateral asset.\\n     * @param _feeAmount The fee amount to collect.\\n     */\\n    function _collectFee(address _borrower, address _asset, uint256 _feeAmount) internal {\\n        if (_feeAmount != 0) {\\n            address destination = getProtocolRevenueDestination();\\n            IERC20(debtToken).safeTransfer(destination, _feeAmount);\\n            if (IAdminContract(adminContract).getRouteToTRENStaking()) {\\n                ITRENStaking(trenStaking).increaseFeeDebtToken(_feeAmount);\\n            }\\n            emit FeeCollected(_borrower, _asset, destination, _feeAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Refund the remaining fees to the borrower.\\n     * @param _borrower The address of borrower.\\n     * @param _asset The address of collateral asset.\\n     * @param _refundAmount The fee amount to refund.\\n     */\\n    function _refundFee(address _borrower, address _asset, uint256 _refundAmount) internal {\\n        if (_refundAmount != 0) {\\n            IERC20(debtToken).safeTransfer(_borrower, _refundAmount);\\n            emit FeeRefunded(_borrower, _asset, _refundAmount);\\n        }\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner { }\\n}\\n\",\"keccak256\":\"0x382d090962059913accda64e8c4a01411d15c796f4e1a4075633959c4d2c5108\",\"license\":\"MIT\"},\"contracts/Interfaces/IAdminContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\n/**\\n * @title IAdminContract\\n * @notice Defines the basic interface for AdminContract.\\n */\\ninterface IAdminContract {\\n    /**\\n     * @dev Struct for storing parameters of a specific collateral asset.\\n     * @param index The index to map to token address in collateral arrays.\\n     * @param active The status of collateral asset.\\n     * @param borrowingFee The one-time fee charged on the loan amount.\\n     * @param ccr Critical collateral ratio to trigger recovery mode.\\n     * @param mcr Minimum collateral ratio.\\n     * @param debtTokenGasCompensation The amount of debt token to be locked\\n     * on opening TrenBoxes as liquidation reserve.\\n     * @param minNetDebt Minimum amount of debtToken a TrenBox must have.\\n     * @param mintCap The total amount of debt token that can be minted.\\n     * @param percentDivisor The liquidation fee.\\n     * @param redemptionFeeFloor The floor of redemption fee.\\n     * @param redemptionBlockTimestamp The timestamp which the redemption can be started from.\\n     */\\n    struct CollateralParams {\\n        uint256 index;\\n        bool active;\\n        uint256 borrowingFee;\\n        uint256 ccr;\\n        uint256 mcr;\\n        uint256 debtTokenGasCompensation;\\n        uint256 minNetDebt;\\n        uint256 mintCap;\\n        uint256 percentDivisor;\\n        uint256 redemptionFeeFloor;\\n        uint256 redemptionBlockTimestamp;\\n    }\\n\\n    /**\\n     * @dev Struct for storing flash loan parameters.\\n     * @param flashLoanFee The flash loan fee. (10 = 0,1%, 100 = 10%)\\n     * @param flashLoanMinDebt The minimum amount of debt token to mint for flash loan.\\n     * @param flashLoanMaxDebt The maximum amount of debt token to mint for flash loan.\\n     */\\n    struct FlashLoanParams {\\n        uint256 flashLoanFee;\\n        uint256 flashLoanMinDebt;\\n        uint256 flashLoanMaxDebt;\\n    }\\n\\n    /**\\n     * @dev Error emitted when the input value is not between min and max values.\\n     * @param _parameter The label of input parameter.\\n     * @param _valueEntered The input value.\\n     * @param _minValue The minimum value.\\n     * @param _maxValue The maximum value.\\n     */\\n    error SafeCheckError(\\n        string _parameter, uint256 _valueEntered, uint256 _minValue, uint256 _maxValue\\n    );\\n\\n    /**\\n     * @dev Error emitted when the caller is not owner.\\n     */\\n    error AdminContract__OnlyOwner();\\n\\n    /**\\n     * @dev Error emitted when the caller is not timelock contract.\\n     */\\n    error AdminContract__OnlyTimelock();\\n\\n    /**\\n     * @dev Error emitted when the collateral asset already exists.\\n     */\\n    error AdminContract__CollateralExists();\\n\\n    /**\\n     * @dev Error emitted when the collateral asset does not exist.\\n     */\\n    error AdminContract__CollateralDoesNotExist();\\n\\n    /**\\n     * @dev Error emitted when the collateral asset is not active.\\n     */\\n    error AdminContract__CollateralNotConfigured();\\n\\n    /**\\n     * @dev Emitted when the collateral asset is added.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    event CollateralAdded(address _collateral);\\n\\n    /**\\n     * @dev Emitted when the minimum collateral ratio is updated.\\n     * @param _oldMCR The old minimum collateral ratio.\\n     * @param _newMCR The new minimum collateral ratio.\\n     */\\n    event MCRChanged(uint256 _oldMCR, uint256 _newMCR);\\n\\n    /**\\n     * @dev Emitted when the critical collateral ratio is updated.\\n     * @param _oldCCR The old critical collateral ratio.\\n     * @param _newCCR The new critical collateral ratio.\\n     */\\n    event CCRChanged(uint256 _oldCCR, uint256 _newCCR);\\n\\n    /**\\n     * @dev Emitted when the minimum amount of debt token is updated.\\n     * @param _oldMinNet The old minimum amount of debt token.\\n     * @param _newMinNet The new minimum amount of debt token.\\n     */\\n    event MinNetDebtChanged(uint256 _oldMinNet, uint256 _newMinNet);\\n\\n    /**\\n     * @dev Emitted when the liquidation fee is updated.\\n     * @param _oldPercentDiv The old liquidation fee.\\n     * @param _newPercentDiv The new liquidation fee.\\n     */\\n    event PercentDivisorChanged(uint256 _oldPercentDiv, uint256 _newPercentDiv);\\n\\n    /**\\n     * @dev Emitted when the borrowing fee is updated.\\n     * @param _oldBorrowingFee The old borrowing fee.\\n     * @param _newBorrowingFee The new borrowing fee.\\n     */\\n    event BorrowingFeeChanged(uint256 _oldBorrowingFee, uint256 _newBorrowingFee);\\n\\n    /**\\n     * @dev Emitted when the floor of redemption fee is updated.\\n     * @param _oldRedemptionFeeFloor The old floor of redemption fee.\\n     * @param _newRedemptionFeeFloor The new floor of redemption fee.\\n     */\\n    event RedemptionFeeFloorChanged(uint256 _oldRedemptionFeeFloor, uint256 _newRedemptionFeeFloor);\\n\\n    /**\\n     * @dev Emitted when the mint cap is updated.\\n     * @param _oldMintCap The old mint cap.\\n     * @param _newMintCap The new mint cap.\\n     */\\n    event MintCapChanged(uint256 _oldMintCap, uint256 _newMintCap);\\n\\n    /**\\n     * @dev Emitted when the redemption timestamp of specific collateral is updated.\\n     * @param _collateral The address of collateral asset.\\n     * @param _blockTimestamp The new redemption timestamp.\\n     */\\n    event RedemptionBlockTimestampChanged(address _collateral, uint256 _blockTimestamp);\\n\\n    /**\\n     * @dev Emitted when the flash loan fee is updated.\\n     * @param _oldFee The old flash loan fee.\\n     * @param _newFee The new flash loan fee.\\n     */\\n    event FlashLoanFeeChanged(uint256 _oldFee, uint256 _newFee);\\n\\n    /**\\n     * @dev Emitted when the minimum amount of debt token for flash loan is updated.\\n     * @param _oldMinDebt The old minimum amount of debt token.\\n     * @param _newMinDebt The new minimum amount of debt token.\\n     */\\n    event FlashLoanMinDebtChanged(uint256 _oldMinDebt, uint256 _newMinDebt);\\n\\n    /**\\n     * @dev Emitted when the maximum amount of debt token for flash loan is updated.\\n     * @param _oldMaxDebt The old minimum amount of debt token.\\n     * @param _newMaxDebt The new minimum amount of debt token.\\n     */\\n    event FlashLoanMaxDebtChanged(uint256 _oldMaxDebt, uint256 _newMaxDebt);\\n\\n    /// @notice Returns decimal precision, 1 ether.\\n    function DECIMAL_PRECISION() external pure returns (uint256);\\n\\n    /// @notice Returns the scaled number which means 100 percent, 1 ether.\\n    function _100pct() external view returns (uint256);\\n\\n    /**\\n     * @notice Adds new collateral asset.\\n     * @param _collateral The address of collateral asset.\\n     * @param _debtTokenGasCompensation The amount of debtToken to be locked on opening\\n     * TrenBoxes as liquidation reserve.\\n     */\\n    function addNewCollateral(address _collateral, uint256 _debtTokenGasCompensation) external;\\n\\n    /**\\n     * @notice Sets collateral parameters.\\n     * @param _collateral The address of collateral asset.\\n     * @param _borrowingFee The one-time fee charged on the loan amount.\\n     * @param _ccr The critical collateral ratio to trigger recovery mode.\\n     * @param _mcr The minimum collateral ratio to avoid liquidation under normal mode.\\n     * @param _minNetDebt The minimum amount of debtToken a TrenBox must have.\\n     * @param _mintCap The total amount of debt tokens to be allocated.\\n     * @param _percentDivisor The liquidation fee.\\n     * @param _redemptionFeeFloor The floor of redemption fee.\\n     */\\n    function setCollateralParameters(\\n        address _collateral,\\n        uint256 _borrowingFee,\\n        uint256 _ccr,\\n        uint256 _mcr,\\n        uint256 _minNetDebt,\\n        uint256 _mintCap,\\n        uint256 _percentDivisor,\\n        uint256 _redemptionFeeFloor\\n    )\\n        external;\\n\\n    /**\\n     * @notice Set the status for the specific collateral asset.\\n     * @param _collateral The address of collateral asset.\\n     * @param _active The status of collateral; true or false.\\n     */\\n    function setIsActive(address _collateral, bool _active) external;\\n    /**\\n     * @notice Sets the minimum collateral ratio.\\n     * @param _collateral The address of collateral asset.\\n     * @param _newMCR The minimum collateral ratio to avoid liquidations under normal mode.\\n     */\\n    function setMCR(address _collateral, uint256 _newMCR) external;\\n\\n    /**\\n     * @notice Sets the critical collateral ratio.\\n     * @param _collateral The address of collateral asset.\\n     * @param _newCCR The new critical collateral ratio. If the system's total collateral ratio\\n     * (TCR) falls below the CCR, Recovery Mode is triggered.\\n     */\\n    function setCCR(address _collateral, uint256 _newCCR) external;\\n\\n    /**\\n     * @notice Sets the minimum amount of debt token to mint when opening a TrenBox.\\n     * @param _collateral The address of collateral asset.\\n     * @param _minNetDebt The minimum amount of debt token a TrenBox must have.\\n     */\\n    function setMinNetDebt(address _collateral, uint256 _minNetDebt) external;\\n\\n    /**\\n     * @notice Sets the liquidation fee.\\n     * @param _collateral The address of collateral asset.\\n     * @param _percentDivisor The new :(min 2, max 200).\\n     */\\n    function setPercentDivisor(address _collateral, uint256 _percentDivisor) external;\\n\\n    /**\\n     * @notice Sets the borrowing fee.\\n     * @param _collateral The address of collateral asset.\\n     * @param _borrowingFee The one-time fee charged on the loan amount.\\n     */\\n    function setBorrowingFee(address _collateral, uint256 _borrowingFee) external;\\n\\n    /**\\n     * @notice Sets the floor of redemption fee.\\n     * @param _collateral The address of collateral asset.\\n     * @param _redemptionFeeFloor The floor of redemption fee charged on the redeemed\\n     * amount(scaled by 1e18); min 0.001(0.1%), max 0.1(10%).\\n     */\\n    function setRedemptionFeeFloor(address _collateral, uint256 _redemptionFeeFloor) external;\\n\\n    /**\\n     * @notice Sets the total amount of debt tokens that can be allocated.\\n     * @param _collateral The address of collateral asset.\\n     * @param _mintCap The mint cap.\\n     */\\n    function setMintCap(address _collateral, uint256 _mintCap) external;\\n\\n    /**\\n     * @notice Sets the redemption timestamp.\\n     * @param _collateral The address of collateral asset.\\n     * @param _blockTimestamp The timestamp which redemption can be started from.\\n     */\\n    function setRedemptionBlockTimestamp(address _collateral, uint256 _blockTimestamp) external;\\n\\n    /**\\n     * @notice Sets the flash loan fee.\\n     * @param _flashLoanFee The new flash loan fee.\\n     */\\n    function setFeeForFlashLoan(uint256 _flashLoanFee) external;\\n\\n    /**\\n     * @notice Sets the minimum amount of debt token to mint for flash loan.\\n     * @param _flashLoanMinDebt The new minimum amount of debt token.\\n     */\\n    function setMinDebtForFlashLoan(uint256 _flashLoanMinDebt) external;\\n\\n    /**\\n     * @notice Sets the maximum amount of debt token to mint for flash loan.\\n     * @param _flashLoanMaxDebt The new maximum amount of debt token.\\n     */\\n    function setMaxDebtForFlashLoan(uint256 _flashLoanMaxDebt) external;\\n\\n    /// @notice Changes the destination where the collected fees go.\\n    function switchRouteToTRENStaking() external;\\n\\n    /**\\n     * @notice Returns the index of a specific collateral which maps to\\n     * asset address in collateral array.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getIndex(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the list of index matched with collateral arrays.\\n     * @param _colls The arrays of collateral assets.\\n     */\\n    function getIndices(address[] memory _colls) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Returns if a specific collateral is active or not.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getIsActive(address _collateral) external view returns (bool);\\n\\n    /// @notice Returns list of all collateral types in collateral params.\\n    function getValidCollateral() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the minimum collateral ratio of a specific collateral asset.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getMcr(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the critical collateral ratio of a specific collateral asset.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getCcr(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount of debt token to be locked on opening TrenBoxes\\n     * as liquidation reserve.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getDebtTokenGasCompensation(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the minimum amount of debt token a TrenBox must have.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getMinNetDebt(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the liquidation fee; min 2, max 200.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getPercentDivisor(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the one-time fee charged on the loan amount.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getBorrowingFee(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the floor of redemption fee for the specific collateral.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getRedemptionFeeFloor(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the redemption timestamp for the specific collateral.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getRedemptionBlockTimestamp(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the total allocated amount of debt token for the specific collateral.\\n     * @param _collateral The address of collateral asset.\\n     */\\n    function getMintCap(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the current total amount of debt token for the specific collateral.\\n     * @param _asset The address of collateral asset.\\n     */\\n    function getTotalAssetDebt(address _asset) external view returns (uint256);\\n\\n    /// @notice Returns the flash loan fee.\\n    function getFlashLoanFee() external view returns (uint256);\\n\\n    /// @notice Returns the minimum amount of debt token to mint for flash loan.\\n    function getFlashLoanMinNetDebt() external view returns (uint256);\\n\\n    /// @notice Returns the maximum amount of debt token to mint for flash loan.\\n    function getFlashLoanMaxNetDebt() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns if the collected fees go to stakers or treasury.\\n     * if true, collected fees go to stakers; if false, to the treasury\\n     */\\n    function getRouteToTRENStaking() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd6ed047c9ff47fff091ed7ffaddd9030d828a03a929b2fa8b38a5b6db007363e\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IDebtToken\\n * @notice Defines the basic interface for DebtToken contract.\\n */\\ninterface IDebtToken is IERC20 {\\n    /**\\n     * @dev Emitted when minting debt tokens against specific collateral asset\\n     * is stopped.\\n     * @param _asset The address of the collateral asset.\\n     * @param _state The indicator that shows if minting is stopped or not.\\n     */\\n    event EmergencyStopMintingCollateral(address indexed _asset, bool _state);\\n\\n    /**\\n     * @dev Emitted when a contract is added to whitelist or removed from it.\\n     * @param _address The address of contract to add or remove.\\n     * @param _whitelisted The indicator that shows if contract is added or removed.\\n     */\\n    event WhitelistChanged(address indexed _address, bool _whitelisted);\\n\\n    /**\\n     * @dev Emitted when BorrowerOperations, StabilityPool, and TrenBoxManager addresses\\n     * are set.\\n     * @param _borrowerOperations The address of BorrowerOperations.\\n     * @param _stabilityPool The address of StabilityPool.\\n     * @param _trenBoxManager The address of TrenBoxManager.\\n     */\\n    event ProtocolContractsAddressesSet(\\n        address indexed _borrowerOperations,\\n        address indexed _stabilityPool,\\n        address indexed _trenBoxManager\\n    );\\n\\n    /**\\n     * @dev Error emitted when a specific collateral has been already blocked from minting.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    error DebtToken__MintBlockedForCollateral(address _collateral);\\n\\n    /**\\n     * @dev Error emitted when zero address is set.\\n     */\\n    error DebtToken__InvalidAddressToConnect();\\n\\n    /**\\n     * @dev Error emitted when the recipient address is zero address.\\n     */\\n    error DebtToken__CannotTransferTokensToZeroAddress();\\n\\n    /**\\n     * @dev Error emitted when the recipient address is token contract address itself.\\n     */\\n    error DebtToken__CannotTransferTokensToTokenContract();\\n\\n    /**\\n     * @dev Error emitted when caller is not whitelisted contract.\\n     * @param _notWhitelistedContract The address of not whitelisted contract.\\n     */\\n    error DebtToken__NotWhitelistedContract(address _notWhitelistedContract);\\n\\n    /**\\n     * @dev Error emitted when caller is not BorrowerOperations.\\n     * @param _caller The address of caller.\\n     */\\n    error DebtToken__CallerIsNotBorrowerOperations(address _caller);\\n\\n    /**\\n     * @dev Error emitted when caller is not StabilityPool.\\n     * @param _caller The address of caller.\\n     */\\n    error DebtToken__CallerIsNotStabilityPool(address _caller);\\n\\n    /**\\n     * @dev Error emitted when caller is neither BorrowerOperations nor StabilityPool.\\n     * nor TrenBoxManager\\n     */\\n    error DebtToken__CannotBurnTokens();\\n\\n    /**\\n     * @dev Error emitted when caller is neither StabilityPool nor TrenBoxManager.\\n     */\\n    error DebtToken__CannotReturnFromPool();\\n\\n    /**\\n     * @notice Allows the whitelisted contracts to mint debt tokens without any collateral.\\n     * @param _amount The amount to mint debt token.\\n     */\\n    function mintFromWhitelistedContract(uint256 _amount) external;\\n\\n    /**\\n     * @notice Allows the whitelisted contracts to burn their debt tokens.\\n     * @param _amount The amount to burn debt token.\\n     */\\n    function burnFromWhitelistedContract(uint256 _amount) external;\\n\\n    /**\\n     * @notice Allows BorrowerOperations to mint debt tokens to the specific account.\\n     * @param _asset The address of collateral asset.\\n     * @param _account The address of account to receive debt tokens.\\n     * @param _amount The amount to mint debt token.\\n     */\\n    function mint(address _asset, address _account, uint256 _amount) external;\\n\\n    /**\\n     * @notice Allows BorrowerOperations, TrenBoxManager & StabilityPool to\\n     * burn debt tokens from the specific account\\n     * @param _account The address of account to burn debt tokens\\n     * @param _amount THe amount to burn debt tokens.\\n     */\\n    function burn(address _account, uint256 _amount) external;\\n\\n    /**\\n     * @notice Transfers the debt tokens from a user to a pool contract.\\n     * @param _sender The address of account that sends debt tokens.\\n     * @param _poolAddress The address of pool to receive debt tokens.\\n     * @param _amount The amount to transfer debt tokens.\\n     */\\n    function sendToPool(address _sender, address _poolAddress, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sends debt tokens to a user from a pool contract.\\n     * @param _poolAddress The address of pool that sends debt tokens.\\n     * @param _receiver The address of account to receive debt tokens.\\n     * @param _amount The amount to send debt token.\\n     */\\n    function returnFromPool(address _poolAddress, address _receiver, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x434de19dc7bb101a034928cee065f9ad15ed6ba67b5d6f4784906fac7720c622\",\"license\":\"MIT\"},\"contracts/Interfaces/IFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\n/**\\n * @title IFeeCollector\\n * @notice Defines the basic interface for the FeeCollector contract.\\n */\\ninterface IFeeCollector {\\n    /**\\n     * @dev Struct for storing fee records of specific collateral asset.\\n     * @param from The timestamp in seconds when the decay of refundable fee started.\\n     * @param to The timestamp in seconds when the decay of refundable fee expired.\\n     * @param _amount The amount of refundable fee.\\n     */\\n    struct FeeRecord {\\n        uint256 from;\\n        uint256 to;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @dev Emitted when the fee record is updated.\\n     * @param _borrower The address of borrower.\\n     * @param _asset The address of collateral asset.\\n     * @param _from The timestamp in seconds when the decay of refundable fee started.\\n     * @param _to The timestamp in seconds when the decay of refundable fee expired.\\n     * @param _amount The amount of refundable fee\\n     */\\n    event FeeRecordUpdated(\\n        address indexed _borrower,\\n        address indexed _asset,\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 _amount\\n    );\\n\\n    /**\\n     * @dev Emitted when the collected fees are transferred to either the treasury\\n     * or the TRENStaking contract.\\n     * @param _borrower The address of borrower.\\n     * @param _asset The address of collateral asset.\\n     * @param _collector The address of destination.\\n     * @param _amount The amount of collected fees (debt tokens).\\n     */\\n    event FeeCollected(\\n        address indexed _borrower,\\n        address indexed _asset,\\n        address indexed _collector,\\n        uint256 _amount\\n    );\\n\\n    /**\\n     * @dev Emitted when the fees are refunded to the borrower.\\n     * @param _borrower The address of borrower.\\n     * @param _asset The address of collateral asset.\\n     * @param _amount The amount of refunded fees.\\n     */\\n    event FeeRefunded(address indexed _borrower, address indexed _asset, uint256 _amount);\\n\\n    /**\\n     * @dev Emitted when the redemption fees are collected.\\n     * @param _asset The address of collateral asset.\\n     * @param _amount The amount of collected fees.\\n     */\\n    event RedemptionFeeCollected(address indexed _asset, uint256 _amount);\\n\\n    /**\\n     * @dev Emitted when the lengths of array parameters are mismatched.\\n     */\\n    error FeeCollector__ArrayMismatch();\\n\\n    /**\\n     * @dev Emitted when the caller is not BorrowerOperations.\\n     * @param _sender The address of caller.\\n     * @param _expected The address of BorrowerOperations.\\n     */\\n    error FeeCollector__BorrowerOperationsOnly(address _sender, address _expected);\\n\\n    /**\\n     * @dev Emitted when the caller is neither BorrowerOperations nor TrenBoxManager.\\n     * @param _sender The address of caller.\\n     * @param _expected1 The address of BorrowerOperations.\\n     * @param _expected2 The address of TrenBoxManager.\\n     */\\n    error FeeCollector__BorrowerOperationsOrTrenBoxManagerOnly(\\n        address _sender, address _expected1, address _expected2\\n    );\\n\\n    /**\\n     * @dev Emitted when the caller is not TrenBoxManager.\\n     * @param _sender The address of caller.\\n     * @param _expected The address of TrenBoxManager.\\n     */\\n    error FeeCollector__TrenBoxManagerOnly(address _sender, address _expected);\\n\\n    /**\\n     * @dev Emitted when the payback fraction is higher than 1 ether(10**18 wei).\\n     */\\n    error FeeCollector__PaybackFractionHigherThanOne();\\n\\n    /**\\n     * @dev Emitted when the payback fraction is zero.\\n     */\\n    error FeeCollector__ZeroPaybackFraction();\\n\\n    /**\\n     * @notice Increases debt of fee amount when a TrenBox is created and again\\n     * whenever the borrower acquires additional loans.\\n     * Collects the minimum fee to the platform, for which there is no refund; holds on to the\\n     * remaining fees until debt is paid, liquidated, or expired.\\n     * @dev Attention: this method assumes that (debt token) _feeAmount has already been minted and\\n     * transferred to this contract.\\n     * @param _borrower The address of borrower.\\n     * @param _asset The address of collateral asset.\\n     * @param _feeAmount The fee amount to collect.\\n     */\\n    function increaseDebt(address _borrower, address _asset, uint256 _feeAmount) external;\\n\\n    /**\\n     * @notice Decreases debt when a TrenBox is adjusted.\\n     * @param _borrower The address of borrower.\\n     * @param _asset The address of collateral asset.\\n     * @param _paybackFraction The amount that the borrower pays back.\\n     */\\n    function decreaseDebt(address _borrower, address _asset, uint256 _paybackFraction) external;\\n\\n    /**\\n     * @notice Closes debt when it is paid in full.\\n     * @param _borrower The address of borrower.\\n     * @param _asset The address of collateral asset.\\n     */\\n    function closeDebt(address _borrower, address _asset) external;\\n\\n    /**\\n     * @notice Triggered when a TrenBox is liquidated. In that case, all remaining fees are\\n     * collected by the platform, and no refunds are generated.\\n     * @param _borrower The address of borrower.\\n     * @param _asset The address of collateral asset.\\n     */\\n    function liquidateDebt(address _borrower, address _asset) external;\\n\\n    /**\\n     * @notice Simulates the refund due if a TrenBox would be closed at this moment\\n     * @dev Helper function used by the UI.\\n     * @param _borrower The address of borrower.\\n     * @param _asset The address of collateral asset.\\n     * @param _paybackFraction The amount that the borrower pays back.\\n     */\\n    function simulateRefund(\\n        address _borrower,\\n        address _asset,\\n        uint256 _paybackFraction\\n    )\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Batches collect fees from an array of borrowers and assets.\\n     * @param _borrowers The address array of borrowers.\\n     * @param _assets The address array of collateral assets.\\n     */\\n    function collectFees(address[] calldata _borrowers, address[] calldata _assets) external;\\n\\n    /**\\n     * @notice Sends redemption fee to the protocol revenue destination.\\n     * @param _asset The address of collateral asset.\\n     * @param _amount The amount of redemption fee to send.\\n     */\\n    function handleRedemptionFee(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @notice Gets the protocol revenue destination.\\n     */\\n    function getProtocolRevenueDestination() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb8a18ae225036b70207f2822244cdae50d342833f44f05d0d852ef8856dca797\",\"license\":\"MIT\"},\"contracts/Interfaces/ITRENStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface ITRENStaking {\\n    struct Snapshot {\\n        mapping(address asset => uint256 feeAmount) assetsFeeSnapshot;\\n        uint256 debtTokenFeeSnapshot;\\n    }\\n\\n    error TRENStaking__SetupAlreadyInitialized();\\n    error TRENStaking__StakingOnPause();\\n    error TRENStaking__InvalidAddresses();\\n    error TRENStaking__InvalidAmount(uint256 zeroValue);\\n    error TRENStaking__OnlyFeeCollector(address caller, address expected);\\n    error TRENStaking__InvalidStakeAmount(uint256 zeroValue);\\n\\n    event SentAssetFeeToTreasury(address indexed _asset, uint256 _amount);\\n    event StakeUpdated(address indexed _staker, uint256 _newStake);\\n    event StakingAssetGainWithdrawn(\\n        address indexed _staker, address indexed _asset, uint256 _assetGain\\n    );\\n\\n    event StakingDebtTokenGainWithdrawn(address indexed _staker, uint256 _debtTokenAmount);\\n    event AssetFeeUpdated(address indexed _asset, uint256 _amount);\\n    event TotalDebtTokenFeeUpdated(uint256 _amount);\\n    event TotalTRENStakedUpdated(uint256 _totalTRENStaked);\\n    event SentAsset(address indexed _asset, address indexed _account, uint256 _amount);\\n    event StakerSnapshotsUpdated(address _staker, uint256 _feeAsset, uint256 _feeDebtToken);\\n\\n    function increaseFeeAsset(address _asset, uint256 _feeAsset) external;\\n    function increaseFeeDebtToken(uint256 _TRENFee) external;\\n}\\n\",\"keccak256\":\"0x767e80b6e6c96a6ce2669f61feb32751220c9d858ed6c8c7ff89298751db43eb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b506080516126cf61003e600039600081816117a5015281816117ce015261190f01526126cf6000f3fe60806040526004361061023b5760003560e01c80638da5cb5b1161012e578063c4d66de8116100ab578063ed60f1881161006f578063ed60f1881461072c578063f1c05a7e1461074c578063f2fde38b1461076c578063f8d898981461078c578063fe060733146107ac57600080fd5b8063c4d66de814610680578063c5f956af146106a0578063c8564c62146106c0578063cc8b21e4146106f1578063d0224e6c1461071157600080fd5b8063aa36069d116100f2578063aa36069d146105cf578063ad3cb1cc146105ef578063b957172114610620578063c05c5e9414610640578063c415b95c1461066057600080fd5b80638da5cb5b146104b457806395fb16bb146104f157806398768db2146105115780639f802fb814610528578063a3f4df7e1461058a57600080fd5b806352d1902d116101bc57806373c9bde01161018057806373c9bde01461042a578063741bef1a1461043f5780637693ccdb1461045f57806377553ad414610474578063871d81451461049457600080fd5b806352d1902d146103a057806355dafa46146103b55780636a85d67d146103d55780636de24492146103f5578063715018a61461041557600080fd5b80634169467d116102035780634169467d146102ff57806341c7a5ee1461031f5780634a7919571461034d5780634bc66f321461036d5780634f1ef2861461038d57600080fd5b806301c9310014610240578063048c661d146102625780630833c62d1461029f5780630a34d4d6146102bf5780633f84a44d146102df575b600080fd5b34801561024c57600080fd5b5061026061025b3660046122c3565b6107cc565b005b34801561026e57600080fd5b50600954610282906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102ab57600080fd5b506102606102ba36600461232a565b61081d565b3480156102cb57600080fd5b50600d54610282906001600160a01b031681565b3480156102eb57600080fd5b50600e54610282906001600160a01b031681565b34801561030b57600080fd5b50600554610282906001600160a01b031681565b34801561032b57600080fd5b5061033f61033a366004612396565b61097a565b604051908152602001610296565b34801561035957600080fd5b506102606103683660046123d2565b610a86565b34801561037957600080fd5b50600a54610282906001600160a01b031681565b61026061039b366004612412565b610bf3565b3480156103ac57600080fd5b5061033f610c12565b3480156103c157600080fd5b50600654610282906001600160a01b031681565b3480156103e157600080fd5b506102606103f03660046122c3565b610c2f565b34801561040157600080fd5b50610260610410366004612396565b610c80565b34801561042157600080fd5b50610260610d21565b34801561043657600080fd5b50610282610d35565b34801561044b57600080fd5b50600754610282906001600160a01b031681565b34801561046b57600080fd5b5061033f600781565b34801561048057600080fd5b50600154610282906001600160a01b031681565b3480156104a057600080fd5b506102606104af3660046124d4565b610dd1565b3480156104c057600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b0316610282565b3480156104fd57600080fd5b50600254610282906001600160a01b031681565b34801561051d57600080fd5b5061033f62e6b68081565b34801561053457600080fd5b5061056f6105433660046124d4565b603060209081526000928352604080842090915290825290208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610296565b34801561059657600080fd5b506105c26040518060400160405280600c81526020016b2332b2a1b7b63632b1ba37b960a11b81525081565b604051610296919061252b565b3480156105db57600080fd5b506102606105ea3660046124d4565b610e47565b3480156105fb57600080fd5b506105c2604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561062c57600080fd5b5061026061063b36600461255e565b610eeb565b34801561064c57600080fd5b50600054610282906001600160a01b031681565b34801561066c57600080fd5b50600454610282906001600160a01b031681565b34801561068c57600080fd5b5061026061069b3660046122c3565b61138f565b3480156106ac57600080fd5b50600b54610282906001600160a01b031681565b3480156106cc57600080fd5b50600e546106e190600160a01b900460ff1681565b6040519015158152602001610296565b3480156106fd57600080fd5b50600854610282906001600160a01b031681565b34801561071d57600080fd5b5061033f6688a490a601540081565b34801561073857600080fd5b50610260610747366004612396565b6114a6565b34801561075857600080fd5b50600c54610282906001600160a01b031681565b34801561077857600080fd5b506102606107873660046122c3565b611514565b34801561079857600080fd5b50600354610282906001600160a01b031681565b3480156107b857600080fd5b506102606107c73660046122c3565b611552565b6107d461155b565b6001600160a01b0381166107fb576040516385d3330760e01b815260040160405180910390fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b82818114158061082b575080155b1561084957604051631a04c91160e01b815260040160405180910390fd5b4260005b82811015610971576000878783818110610869576108696125a0565b905060200201602081019061087e91906122c3565b90506000868684818110610894576108946125a0565b90506020020160208101906108a991906122c3565b6001600160a01b038084166000908152603060209081526040808320938516835292905290812080546001820154600283015494955091936108eb92906115b6565b9050801561096257600081836002015461090591906125cc565b60028401819055878455905061091c85858461163a565b600183015460408051898152602081019290925281018290526001600160a01b0380861691908716906000805160206126838339815191529060600160405180910390a3505b8460010194505050505061084d565b50505050505050565b6000670de0b6b3a76400008211156109a55760405163023b6bc760e61b815260040160405180910390fd5b816000036109c657604051638bc1d2c360e01b815260040160405180910390fd5b6001600160a01b038085166000908152603060209081526040808320938716835292905220600281015415806109ff5750428160010154105b15610a0e576000915050610a7f565b6000610a278260000154836001015484600201546115b6565b905083670de0b6b3a764000003610a5157808260020154610a4891906125cc565b92505050610a7f565b670de0b6b3a764000084828460020154610a6b91906125cc565b610a7591906125df565b610a4891906125f6565b9392505050565b600c546001600160a01b03163314610acb57600c54604051636545048760e01b81523360048201526001600160a01b0390911660248201526044015b60405180910390fd5b60008054906101000a90046001600160a01b03166001600160a01b031663650aabe26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b409190612618565b15610bac576006546040516330a8d47360e11b81526001600160a01b0384811660048301526024820184905290911690636151a8e690604401600060405180830381600087803b158015610b9357600080fd5b505af1158015610ba7573d6000803e3d6000fd5b505050505b816001600160a01b03167fcf74743fee8ef45d0f775d63c2e7129e1aec29d2ce0222e2d979104c2921048182604051610be791815260200190565b60405180910390a25050565b610bfb61179a565b610c048261183f565b610c0e8282611847565b5050565b6000610c1c611904565b506000805160206126a383398151915290565b610c3761155b565b6001600160a01b038116610c5e5760405163706ebc6560e11b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610cc05760015460405163428f391560e11b81523360048201526001600160a01b039091166024820152604401610ac2565b6000670de0b6b3a7640000610cdc836688a490a60154006125df565b610ce691906125f6565b90506000610cf482846125cc565b90506000610d0386868461194d565b9050610d198686610d14848761263a565b61163a565b505050505050565b610d2961155b565b610d3360006119c5565b565b60008060009054906101000a90046001600160a01b03166001600160a01b031663650aabe26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dad9190612618565b610dc15750600b546001600160a01b031690565b506006546001600160a01b031690565b6001546001600160a01b03163314801590610df75750600c546001600160a01b03163314155b15610e3457600154600c5460405163bea6c3fd60e01b81523360048201526001600160a01b03928316602482015291166044820152606401610ac2565b610c0e8282670de0b6b3a7640000611a36565b600c546001600160a01b03163314610e8757600c54604051636545048760e01b81523360048201526001600160a01b039091166024820152604401610ac2565b6001600160a01b038083166000908152603060209081526040808320938516835292815290829020825160608101845281548152600182015492810192909252600201549181018290529015610ee657610ee683838360400151611c82565b505050565b610ef361155b565b600e54600160a01b900460ff1615610f1d57604051625f22e960e41b815260040160405180910390fd5b600d8114610f3e57604051633f5a111d60e21b815260040160405180910390fd5b60005b600d811015610fdc576000838383818110610f5e57610f5e6125a0565b9050602002016020810190610f7391906122c3565b6001600160a01b031603610fd45780838383818110610f9457610f946125a0565b9050602002016020810190610fa991906122c3565b604051630d9d339f60e01b815260048101929092526001600160a01b03166024820152604401610ac2565b600101610f41565b5081816000818110610ff057610ff06125a0565b905060200201602081019061100591906122c3565b600080546001600160a01b0319166001600160a01b039290921691909117905581816001818110611038576110386125a0565b905060200201602081019061104d91906122c3565b600180546001600160a01b0319166001600160a01b039290921691909117905581816002818110611080576110806125a0565b905060200201602081019061109591906122c3565b600380546001600160a01b0319166001600160a01b0392909216919091178155829082908181106110c8576110c86125a0565b90506020020160208101906110dd91906122c3565b600480546001600160a01b0319166001600160a01b039290921691909117815582908290818110611110576111106125a0565b905060200201602081019061112591906122c3565b600580546001600160a01b0319166001600160a01b039290921691909117815582908290818110611158576111586125a0565b905060200201602081019061116d91906122c3565b600780546001600160a01b0319166001600160a01b0392909216919091179055818160068181106111a0576111a06125a0565b90506020020160208101906111b591906122c3565b600880546001600160a01b0319166001600160a01b0392909216919091179055818160078181106111e8576111e86125a0565b90506020020160208101906111fd91906122c3565b600980546001600160a01b0319166001600160a01b039290921691909117905581816008818110611230576112306125a0565b905060200201602081019061124591906122c3565b600a80546001600160a01b0319166001600160a01b039290921691909117905581816009818110611278576112786125a0565b905060200201602081019061128d91906122c3565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a8181106112c0576112c06125a0565b90506020020160208101906112d591906122c3565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b818110611308576113086125a0565b905060200201602081019061131d91906122c3565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c818110611350576113506125a0565b905060200201602081019061136591906122c3565b600e80546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156113d55750825b905060008267ffffffffffffffff1660011480156113f25750303b155b905081158015611400575080155b1561141e5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561144857845460ff60401b1916600160401b1785555b61145186611cf7565b611459611d08565b8315610d1957845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a1505050505050565b6001546001600160a01b031633148015906114cc5750600c546001600160a01b03163314155b1561150957600154600c5460405163bea6c3fd60e01b81523360048201526001600160a01b03928316602482015291166044820152606401610ac2565b610ee6838383611a36565b61151c61155b565b6001600160a01b03811661154657604051631e4fbdf760e01b815260006004820152602401610ac2565b61154f816119c5565b50565b61154f8161183f565b3361158d7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610d335760405163118cdaa760e01b8152336004820152602401610ac2565b600042808511156115cb576000915050610a7f565b8381106115db5782915050610a7f565b633b9aca0060006115ec87876125cc565b905060006115fa88856125cc565b905060008261160985896125df565b61161391906125f6565b905060008461162283856125df565b61162c91906125f6565b9a9950505050505050505050565b8015610ee657600061164a610d35565b600354909150611664906001600160a01b03168284611d10565b60008054906101000a90046001600160a01b03166001600160a01b031663650aabe26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d99190612618565b1561173d5760065460405163a035160d60e01b8152600481018490526001600160a01b039091169063a035160d90602401600060405180830381600087803b15801561172457600080fd5b505af1158015611738573d6000803e3d6000fd5b505050505b806001600160a01b0316836001600160a01b0316856001600160a01b03167f3e7be0af9d546b20a6a2e91e4151659dfcad117daa1df79e78d17c5ad2f45b768560405161178c91815260200190565b60405180910390a450505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061182157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166118156000805160206126a3833981519152546001600160a01b031690565b6001600160a01b031614155b15610d335760405163703e46dd60e11b815260040160405180910390fd5b61154f61155b565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156118a1575060408051601f3d908101601f1916820190925261189e9181019061264d565b60015b6118c957604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610ac2565b6000805160206126a383398151915281146118fa57604051632a87526960e21b815260048101829052602401610ac2565b610ee68383611d62565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d335760405163703e46dd60e11b815260040160405180910390fd5b6001600160a01b0380841660009081526030602090815260408083209386168352929052908120600281015482036119905761198b85858584611db8565b6119bd565b428160010154116119ae578060020154915061198b85858584611db8565b6119ba85858584611e3e565b91505b509392505050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b42670de0b6b3a7640000821115611a605760405163023b6bc760e61b815260040160405180910390fd5b81600003611a8157604051638bc1d2c360e01b815260040160405180910390fd5b6001600160a01b03808516600090815260306020908152604080832093871683529290529081206002810154909103611abb575050505050565b81816001015411611ada57611ad585858360020154611c82565b611c7b565b6000611af38260000154836001015484600201546115b6565b9050611b0086868361163a565b83670de0b6b3a764000003611bcc576000818360020154611b2191906125cc565b600354604051635cad563b60e11b8152600481018390529192506001600160a01b03169063b95aac7690602401600060405180830381600087803b158015611b6857600080fd5b505af1158015611b7c573d6000803e3d6000fd5b5050600060028601819055604080518881526020810183905280820192909252516001600160a01b038a811694508b1692506000805160206126838339815191529181900360600190a350610d19565b6000670de0b6b3a764000085838560020154611be891906125cc565b611bf291906125df565b611bfc91906125f6565b9050611c09878783611f1a565b600081838560020154611c1c91906125cc565b611c2691906125cc565b60028501819055858555600185015460408051888152602081019290925281018290529091506001600160a01b0388811691908a16906000805160206126838339815191529060600160405180910390a35050505b5050505050565b611c8d83838361163a565b6001600160a01b038381166000818152603060209081526040808320948716808452948252808320838155600181018490556002018390558051428152918201839052810191909152600080516020612683833981519152906060015b60405180910390a3505050565b611cff611f7c565b61154f81611fc5565b610d33611f7c565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610ee6908490611fcd565b611d6b82612030565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611db057610ee68282612095565b610c0e61210d565b6000611dc86007620151806125df565b611dd2904261263a565b90506000611de362e6b6808361263a565b600284018590558284556001840181905560408051848152602081018390529081018690529091506001600160a01b0386811691908816906000805160206126838339815191529060600160405180910390a3505050505050565b80546000904290811015611e50575081545b6000611e698460000154856001015486600201546115b6565b90506000818560020154611e7d91906125cc565b90506000838660010154611e9191906125cc565b90506000611e9f888461263a565b90506000611eae84848b61212c565b611eb8908761263a565b600289018390558689556001890181905560408051888152602081018390529081018490529091506001600160a01b038b811691908d16906000805160206126838339815191529060600160405180910390a350929998505050505050505050565b8015610ee657600354611f37906001600160a01b03168483611d10565b816001600160a01b0316836001600160a01b03167f70930c4d7c90caf6befd84368a02f1e5493c254095e7d3c5b5105922befb92e583604051611cea91815260200190565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610d3357604051631afcd79f60e31b815260040160405180910390fd5b61151c611f7c565b6000611fe26001600160a01b03841683612177565b905080516000141580156120075750808060200190518101906120059190612618565b155b15610ee657604051635274afe760e01b81526001600160a01b0384166004820152602401610ac2565b806001600160a01b03163b60000361206657604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610ac2565b6000805160206126a383398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516120b29190612666565b600060405180830381855af49150503d80600081146120ed576040519150601f19603f3d011682016040523d82523d6000602084013e6120f2565b606091505b5091509150612102858383612185565b925050505b92915050565b3415610d335760405163b398979f60e01b815260040160405180910390fd5b60008061213984866125df565b9050600061214a62e6b680856125df565b90506000612158858861263a565b612162838561263a565b61216c91906125f6565b979650505050505050565b6060610a7f838360006121e1565b60608261219a576121958261227e565b610a7f565b81511580156121b157506001600160a01b0384163b155b156121da57604051639996b31560e01b81526001600160a01b0385166004820152602401610ac2565b5080610a7f565b6060814710156122065760405163cd78605960e01b8152306004820152602401610ac2565b600080856001600160a01b031684866040516122229190612666565b60006040518083038185875af1925050503d806000811461225f576040519150601f19603f3d011682016040523d82523d6000602084013e612264565b606091505b5091509150612274868383612185565b9695505050505050565b80511561228e5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b03811681146122be57600080fd5b919050565b6000602082840312156122d557600080fd5b610a7f826122a7565b60008083601f8401126122f057600080fd5b50813567ffffffffffffffff81111561230857600080fd5b6020830191508360208260051b850101111561232357600080fd5b9250929050565b6000806000806040858703121561234057600080fd5b843567ffffffffffffffff8082111561235857600080fd5b612364888389016122de565b9096509450602087013591508082111561237d57600080fd5b5061238a878288016122de565b95989497509550505050565b6000806000606084860312156123ab57600080fd5b6123b4846122a7565b92506123c2602085016122a7565b9150604084013590509250925092565b600080604083850312156123e557600080fd5b6123ee836122a7565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561242557600080fd5b61242e836122a7565b9150602083013567ffffffffffffffff8082111561244b57600080fd5b818501915085601f83011261245f57600080fd5b813581811115612471576124716123fc565b604051601f8201601f19908116603f01168101908382118183101715612499576124996123fc565b816040528281528860208487010111156124b257600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080604083850312156124e757600080fd5b6124f0836122a7565b91506124fe602084016122a7565b90509250929050565b60005b8381101561252257818101518382015260200161250a565b50506000910152565b602081526000825180602084015261254a816040850160208701612507565b601f01601f19169190910160400192915050565b6000806020838503121561257157600080fd5b823567ffffffffffffffff81111561258857600080fd5b612594858286016122de565b90969095509350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115612107576121076125b6565b8082028115828204841417612107576121076125b6565b60008261261357634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561262a57600080fd5b81518015158114610a7f57600080fd5b80820180821115612107576121076125b6565b60006020828403121561265f57600080fd5b5051919050565b60008251612678818460208701612507565b919091019291505056fe6f0b61812a1954a00351239cba469186147c5b10a1b12ed7f226dc5c1aaafa23360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca164736f6c6343000817000a",
  "deployedBytecode": "0x60806040526004361061023b5760003560e01c80638da5cb5b1161012e578063c4d66de8116100ab578063ed60f1881161006f578063ed60f1881461072c578063f1c05a7e1461074c578063f2fde38b1461076c578063f8d898981461078c578063fe060733146107ac57600080fd5b8063c4d66de814610680578063c5f956af146106a0578063c8564c62146106c0578063cc8b21e4146106f1578063d0224e6c1461071157600080fd5b8063aa36069d116100f2578063aa36069d146105cf578063ad3cb1cc146105ef578063b957172114610620578063c05c5e9414610640578063c415b95c1461066057600080fd5b80638da5cb5b146104b457806395fb16bb146104f157806398768db2146105115780639f802fb814610528578063a3f4df7e1461058a57600080fd5b806352d1902d116101bc57806373c9bde01161018057806373c9bde01461042a578063741bef1a1461043f5780637693ccdb1461045f57806377553ad414610474578063871d81451461049457600080fd5b806352d1902d146103a057806355dafa46146103b55780636a85d67d146103d55780636de24492146103f5578063715018a61461041557600080fd5b80634169467d116102035780634169467d146102ff57806341c7a5ee1461031f5780634a7919571461034d5780634bc66f321461036d5780634f1ef2861461038d57600080fd5b806301c9310014610240578063048c661d146102625780630833c62d1461029f5780630a34d4d6146102bf5780633f84a44d146102df575b600080fd5b34801561024c57600080fd5b5061026061025b3660046122c3565b6107cc565b005b34801561026e57600080fd5b50600954610282906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102ab57600080fd5b506102606102ba36600461232a565b61081d565b3480156102cb57600080fd5b50600d54610282906001600160a01b031681565b3480156102eb57600080fd5b50600e54610282906001600160a01b031681565b34801561030b57600080fd5b50600554610282906001600160a01b031681565b34801561032b57600080fd5b5061033f61033a366004612396565b61097a565b604051908152602001610296565b34801561035957600080fd5b506102606103683660046123d2565b610a86565b34801561037957600080fd5b50600a54610282906001600160a01b031681565b61026061039b366004612412565b610bf3565b3480156103ac57600080fd5b5061033f610c12565b3480156103c157600080fd5b50600654610282906001600160a01b031681565b3480156103e157600080fd5b506102606103f03660046122c3565b610c2f565b34801561040157600080fd5b50610260610410366004612396565b610c80565b34801561042157600080fd5b50610260610d21565b34801561043657600080fd5b50610282610d35565b34801561044b57600080fd5b50600754610282906001600160a01b031681565b34801561046b57600080fd5b5061033f600781565b34801561048057600080fd5b50600154610282906001600160a01b031681565b3480156104a057600080fd5b506102606104af3660046124d4565b610dd1565b3480156104c057600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b0316610282565b3480156104fd57600080fd5b50600254610282906001600160a01b031681565b34801561051d57600080fd5b5061033f62e6b68081565b34801561053457600080fd5b5061056f6105433660046124d4565b603060209081526000928352604080842090915290825290208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610296565b34801561059657600080fd5b506105c26040518060400160405280600c81526020016b2332b2a1b7b63632b1ba37b960a11b81525081565b604051610296919061252b565b3480156105db57600080fd5b506102606105ea3660046124d4565b610e47565b3480156105fb57600080fd5b506105c2604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561062c57600080fd5b5061026061063b36600461255e565b610eeb565b34801561064c57600080fd5b50600054610282906001600160a01b031681565b34801561066c57600080fd5b50600454610282906001600160a01b031681565b34801561068c57600080fd5b5061026061069b3660046122c3565b61138f565b3480156106ac57600080fd5b50600b54610282906001600160a01b031681565b3480156106cc57600080fd5b50600e546106e190600160a01b900460ff1681565b6040519015158152602001610296565b3480156106fd57600080fd5b50600854610282906001600160a01b031681565b34801561071d57600080fd5b5061033f6688a490a601540081565b34801561073857600080fd5b50610260610747366004612396565b6114a6565b34801561075857600080fd5b50600c54610282906001600160a01b031681565b34801561077857600080fd5b506102606107873660046122c3565b611514565b34801561079857600080fd5b50600354610282906001600160a01b031681565b3480156107b857600080fd5b506102606107c73660046122c3565b611552565b6107d461155b565b6001600160a01b0381166107fb576040516385d3330760e01b815260040160405180910390fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b82818114158061082b575080155b1561084957604051631a04c91160e01b815260040160405180910390fd5b4260005b82811015610971576000878783818110610869576108696125a0565b905060200201602081019061087e91906122c3565b90506000868684818110610894576108946125a0565b90506020020160208101906108a991906122c3565b6001600160a01b038084166000908152603060209081526040808320938516835292905290812080546001820154600283015494955091936108eb92906115b6565b9050801561096257600081836002015461090591906125cc565b60028401819055878455905061091c85858461163a565b600183015460408051898152602081019290925281018290526001600160a01b0380861691908716906000805160206126838339815191529060600160405180910390a3505b8460010194505050505061084d565b50505050505050565b6000670de0b6b3a76400008211156109a55760405163023b6bc760e61b815260040160405180910390fd5b816000036109c657604051638bc1d2c360e01b815260040160405180910390fd5b6001600160a01b038085166000908152603060209081526040808320938716835292905220600281015415806109ff5750428160010154105b15610a0e576000915050610a7f565b6000610a278260000154836001015484600201546115b6565b905083670de0b6b3a764000003610a5157808260020154610a4891906125cc565b92505050610a7f565b670de0b6b3a764000084828460020154610a6b91906125cc565b610a7591906125df565b610a4891906125f6565b9392505050565b600c546001600160a01b03163314610acb57600c54604051636545048760e01b81523360048201526001600160a01b0390911660248201526044015b60405180910390fd5b60008054906101000a90046001600160a01b03166001600160a01b031663650aabe26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b409190612618565b15610bac576006546040516330a8d47360e11b81526001600160a01b0384811660048301526024820184905290911690636151a8e690604401600060405180830381600087803b158015610b9357600080fd5b505af1158015610ba7573d6000803e3d6000fd5b505050505b816001600160a01b03167fcf74743fee8ef45d0f775d63c2e7129e1aec29d2ce0222e2d979104c2921048182604051610be791815260200190565b60405180910390a25050565b610bfb61179a565b610c048261183f565b610c0e8282611847565b5050565b6000610c1c611904565b506000805160206126a383398151915290565b610c3761155b565b6001600160a01b038116610c5e5760405163706ebc6560e11b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610cc05760015460405163428f391560e11b81523360048201526001600160a01b039091166024820152604401610ac2565b6000670de0b6b3a7640000610cdc836688a490a60154006125df565b610ce691906125f6565b90506000610cf482846125cc565b90506000610d0386868461194d565b9050610d198686610d14848761263a565b61163a565b505050505050565b610d2961155b565b610d3360006119c5565b565b60008060009054906101000a90046001600160a01b03166001600160a01b031663650aabe26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dad9190612618565b610dc15750600b546001600160a01b031690565b506006546001600160a01b031690565b6001546001600160a01b03163314801590610df75750600c546001600160a01b03163314155b15610e3457600154600c5460405163bea6c3fd60e01b81523360048201526001600160a01b03928316602482015291166044820152606401610ac2565b610c0e8282670de0b6b3a7640000611a36565b600c546001600160a01b03163314610e8757600c54604051636545048760e01b81523360048201526001600160a01b039091166024820152604401610ac2565b6001600160a01b038083166000908152603060209081526040808320938516835292815290829020825160608101845281548152600182015492810192909252600201549181018290529015610ee657610ee683838360400151611c82565b505050565b610ef361155b565b600e54600160a01b900460ff1615610f1d57604051625f22e960e41b815260040160405180910390fd5b600d8114610f3e57604051633f5a111d60e21b815260040160405180910390fd5b60005b600d811015610fdc576000838383818110610f5e57610f5e6125a0565b9050602002016020810190610f7391906122c3565b6001600160a01b031603610fd45780838383818110610f9457610f946125a0565b9050602002016020810190610fa991906122c3565b604051630d9d339f60e01b815260048101929092526001600160a01b03166024820152604401610ac2565b600101610f41565b5081816000818110610ff057610ff06125a0565b905060200201602081019061100591906122c3565b600080546001600160a01b0319166001600160a01b039290921691909117905581816001818110611038576110386125a0565b905060200201602081019061104d91906122c3565b600180546001600160a01b0319166001600160a01b039290921691909117905581816002818110611080576110806125a0565b905060200201602081019061109591906122c3565b600380546001600160a01b0319166001600160a01b0392909216919091178155829082908181106110c8576110c86125a0565b90506020020160208101906110dd91906122c3565b600480546001600160a01b0319166001600160a01b039290921691909117815582908290818110611110576111106125a0565b905060200201602081019061112591906122c3565b600580546001600160a01b0319166001600160a01b039290921691909117815582908290818110611158576111586125a0565b905060200201602081019061116d91906122c3565b600780546001600160a01b0319166001600160a01b0392909216919091179055818160068181106111a0576111a06125a0565b90506020020160208101906111b591906122c3565b600880546001600160a01b0319166001600160a01b0392909216919091179055818160078181106111e8576111e86125a0565b90506020020160208101906111fd91906122c3565b600980546001600160a01b0319166001600160a01b039290921691909117905581816008818110611230576112306125a0565b905060200201602081019061124591906122c3565b600a80546001600160a01b0319166001600160a01b039290921691909117905581816009818110611278576112786125a0565b905060200201602081019061128d91906122c3565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a8181106112c0576112c06125a0565b90506020020160208101906112d591906122c3565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b818110611308576113086125a0565b905060200201602081019061131d91906122c3565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c818110611350576113506125a0565b905060200201602081019061136591906122c3565b600e80546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156113d55750825b905060008267ffffffffffffffff1660011480156113f25750303b155b905081158015611400575080155b1561141e5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561144857845460ff60401b1916600160401b1785555b61145186611cf7565b611459611d08565b8315610d1957845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a1505050505050565b6001546001600160a01b031633148015906114cc5750600c546001600160a01b03163314155b1561150957600154600c5460405163bea6c3fd60e01b81523360048201526001600160a01b03928316602482015291166044820152606401610ac2565b610ee6838383611a36565b61151c61155b565b6001600160a01b03811661154657604051631e4fbdf760e01b815260006004820152602401610ac2565b61154f816119c5565b50565b61154f8161183f565b3361158d7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610d335760405163118cdaa760e01b8152336004820152602401610ac2565b600042808511156115cb576000915050610a7f565b8381106115db5782915050610a7f565b633b9aca0060006115ec87876125cc565b905060006115fa88856125cc565b905060008261160985896125df565b61161391906125f6565b905060008461162283856125df565b61162c91906125f6565b9a9950505050505050505050565b8015610ee657600061164a610d35565b600354909150611664906001600160a01b03168284611d10565b60008054906101000a90046001600160a01b03166001600160a01b031663650aabe26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d99190612618565b1561173d5760065460405163a035160d60e01b8152600481018490526001600160a01b039091169063a035160d90602401600060405180830381600087803b15801561172457600080fd5b505af1158015611738573d6000803e3d6000fd5b505050505b806001600160a01b0316836001600160a01b0316856001600160a01b03167f3e7be0af9d546b20a6a2e91e4151659dfcad117daa1df79e78d17c5ad2f45b768560405161178c91815260200190565b60405180910390a450505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061182157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166118156000805160206126a3833981519152546001600160a01b031690565b6001600160a01b031614155b15610d335760405163703e46dd60e11b815260040160405180910390fd5b61154f61155b565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156118a1575060408051601f3d908101601f1916820190925261189e9181019061264d565b60015b6118c957604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610ac2565b6000805160206126a383398151915281146118fa57604051632a87526960e21b815260048101829052602401610ac2565b610ee68383611d62565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d335760405163703e46dd60e11b815260040160405180910390fd5b6001600160a01b0380841660009081526030602090815260408083209386168352929052908120600281015482036119905761198b85858584611db8565b6119bd565b428160010154116119ae578060020154915061198b85858584611db8565b6119ba85858584611e3e565b91505b509392505050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b42670de0b6b3a7640000821115611a605760405163023b6bc760e61b815260040160405180910390fd5b81600003611a8157604051638bc1d2c360e01b815260040160405180910390fd5b6001600160a01b03808516600090815260306020908152604080832093871683529290529081206002810154909103611abb575050505050565b81816001015411611ada57611ad585858360020154611c82565b611c7b565b6000611af38260000154836001015484600201546115b6565b9050611b0086868361163a565b83670de0b6b3a764000003611bcc576000818360020154611b2191906125cc565b600354604051635cad563b60e11b8152600481018390529192506001600160a01b03169063b95aac7690602401600060405180830381600087803b158015611b6857600080fd5b505af1158015611b7c573d6000803e3d6000fd5b5050600060028601819055604080518881526020810183905280820192909252516001600160a01b038a811694508b1692506000805160206126838339815191529181900360600190a350610d19565b6000670de0b6b3a764000085838560020154611be891906125cc565b611bf291906125df565b611bfc91906125f6565b9050611c09878783611f1a565b600081838560020154611c1c91906125cc565b611c2691906125cc565b60028501819055858555600185015460408051888152602081019290925281018290529091506001600160a01b0388811691908a16906000805160206126838339815191529060600160405180910390a35050505b5050505050565b611c8d83838361163a565b6001600160a01b038381166000818152603060209081526040808320948716808452948252808320838155600181018490556002018390558051428152918201839052810191909152600080516020612683833981519152906060015b60405180910390a3505050565b611cff611f7c565b61154f81611fc5565b610d33611f7c565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610ee6908490611fcd565b611d6b82612030565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611db057610ee68282612095565b610c0e61210d565b6000611dc86007620151806125df565b611dd2904261263a565b90506000611de362e6b6808361263a565b600284018590558284556001840181905560408051848152602081018390529081018690529091506001600160a01b0386811691908816906000805160206126838339815191529060600160405180910390a3505050505050565b80546000904290811015611e50575081545b6000611e698460000154856001015486600201546115b6565b90506000818560020154611e7d91906125cc565b90506000838660010154611e9191906125cc565b90506000611e9f888461263a565b90506000611eae84848b61212c565b611eb8908761263a565b600289018390558689556001890181905560408051888152602081018390529081018490529091506001600160a01b038b811691908d16906000805160206126838339815191529060600160405180910390a350929998505050505050505050565b8015610ee657600354611f37906001600160a01b03168483611d10565b816001600160a01b0316836001600160a01b03167f70930c4d7c90caf6befd84368a02f1e5493c254095e7d3c5b5105922befb92e583604051611cea91815260200190565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610d3357604051631afcd79f60e31b815260040160405180910390fd5b61151c611f7c565b6000611fe26001600160a01b03841683612177565b905080516000141580156120075750808060200190518101906120059190612618565b155b15610ee657604051635274afe760e01b81526001600160a01b0384166004820152602401610ac2565b806001600160a01b03163b60000361206657604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610ac2565b6000805160206126a383398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516120b29190612666565b600060405180830381855af49150503d80600081146120ed576040519150601f19603f3d011682016040523d82523d6000602084013e6120f2565b606091505b5091509150612102858383612185565b925050505b92915050565b3415610d335760405163b398979f60e01b815260040160405180910390fd5b60008061213984866125df565b9050600061214a62e6b680856125df565b90506000612158858861263a565b612162838561263a565b61216c91906125f6565b979650505050505050565b6060610a7f838360006121e1565b60608261219a576121958261227e565b610a7f565b81511580156121b157506001600160a01b0384163b155b156121da57604051639996b31560e01b81526001600160a01b0385166004820152602401610ac2565b5080610a7f565b6060814710156122065760405163cd78605960e01b8152306004820152602401610ac2565b600080856001600160a01b031684866040516122229190612666565b60006040518083038185875af1925050503d806000811461225f576040519150601f19603f3d011682016040523d82523d6000602084013e612264565b606091505b5091509150612274868383612185565b9695505050505050565b80511561228e5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b03811681146122be57600080fd5b919050565b6000602082840312156122d557600080fd5b610a7f826122a7565b60008083601f8401126122f057600080fd5b50813567ffffffffffffffff81111561230857600080fd5b6020830191508360208260051b850101111561232357600080fd5b9250929050565b6000806000806040858703121561234057600080fd5b843567ffffffffffffffff8082111561235857600080fd5b612364888389016122de565b9096509450602087013591508082111561237d57600080fd5b5061238a878288016122de565b95989497509550505050565b6000806000606084860312156123ab57600080fd5b6123b4846122a7565b92506123c2602085016122a7565b9150604084013590509250925092565b600080604083850312156123e557600080fd5b6123ee836122a7565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561242557600080fd5b61242e836122a7565b9150602083013567ffffffffffffffff8082111561244b57600080fd5b818501915085601f83011261245f57600080fd5b813581811115612471576124716123fc565b604051601f8201601f19908116603f01168101908382118183101715612499576124996123fc565b816040528281528860208487010111156124b257600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080604083850312156124e757600080fd5b6124f0836122a7565b91506124fe602084016122a7565b90509250929050565b60005b8381101561252257818101518382015260200161250a565b50506000910152565b602081526000825180602084015261254a816040850160208701612507565b601f01601f19169190910160400192915050565b6000806020838503121561257157600080fd5b823567ffffffffffffffff81111561258857600080fd5b612594858286016122de565b90969095509350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115612107576121076125b6565b8082028115828204841417612107576121076125b6565b60008261261357634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561262a57600080fd5b81518015158114610a7f57600080fd5b80820180821115612107576121076125b6565b60006020828403121561265f57600080fd5b5051919050565b60008251612678818460208701612507565b919091019291505056fe6f0b61812a1954a00351239cba469186147c5b10a1b12ed7f226dc5c1aaafa23360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca164736f6c6343000817000a",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "FeeCollector__ArrayMismatch()": [
        {
          "details": "Emitted when the lengths of array parameters are mismatched."
        }
      ],
      "FeeCollector__BorrowerOperationsOnly(address,address)": [
        {
          "details": "Emitted when the caller is not BorrowerOperations.",
          "params": {
            "_expected": "The address of BorrowerOperations.",
            "_sender": "The address of caller."
          }
        }
      ],
      "FeeCollector__BorrowerOperationsOrTrenBoxManagerOnly(address,address,address)": [
        {
          "details": "Emitted when the caller is neither BorrowerOperations nor TrenBoxManager.",
          "params": {
            "_expected1": "The address of BorrowerOperations.",
            "_expected2": "The address of TrenBoxManager.",
            "_sender": "The address of caller."
          }
        }
      ],
      "FeeCollector__PaybackFractionHigherThanOne()": [
        {
          "details": "Emitted when the payback fraction is higher than 1 ether(10**18 wei)."
        }
      ],
      "FeeCollector__TrenBoxManagerOnly(address,address)": [
        {
          "details": "Emitted when the caller is not TrenBoxManager.",
          "params": {
            "_expected": "The address of TrenBoxManager.",
            "_sender": "The address of caller."
          }
        }
      ],
      "FeeCollector__ZeroPaybackFraction()": [
        {
          "details": "Emitted when the payback fraction is zero."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "FeeCollected(address,address,address,uint256)": {
        "details": "Emitted when the collected fees are transferred to either the treasury or the TRENStaking contract.",
        "params": {
          "_amount": "The amount of collected fees (debt tokens).",
          "_asset": "The address of collateral asset.",
          "_borrower": "The address of borrower.",
          "_collector": "The address of destination."
        }
      },
      "FeeRecordUpdated(address,address,uint256,uint256,uint256)": {
        "details": "Emitted when the fee record is updated.",
        "params": {
          "_amount": "The amount of refundable fee",
          "_asset": "The address of collateral asset.",
          "_borrower": "The address of borrower.",
          "_from": "The timestamp in seconds when the decay of refundable fee started.",
          "_to": "The timestamp in seconds when the decay of refundable fee expired."
        }
      },
      "FeeRefunded(address,address,uint256)": {
        "details": "Emitted when the fees are refunded to the borrower.",
        "params": {
          "_amount": "The amount of refunded fees.",
          "_asset": "The address of collateral asset.",
          "_borrower": "The address of borrower."
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RedemptionFeeCollected(address,uint256)": {
        "details": "Emitted when the redemption fees are collected.",
        "params": {
          "_amount": "The amount of collected fees.",
          "_asset": "The address of collateral asset."
        }
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "closeDebt(address,address)": {
        "params": {
          "_asset": "The address of collateral asset.",
          "_borrower": "The address of borrower."
        }
      },
      "collectFees(address[],address[])": {
        "params": {
          "_assets": "The address array of collateral assets.",
          "_borrowers": "The address array of borrowers."
        }
      },
      "decreaseDebt(address,address,uint256)": {
        "params": {
          "_asset": "The address of collateral asset.",
          "_borrower": "The address of borrower.",
          "_paybackFraction": "The amount that the borrower pays back."
        }
      },
      "handleRedemptionFee(address,uint256)": {
        "params": {
          "_amount": "The amount of redemption fee to send.",
          "_asset": "The address of collateral asset."
        }
      },
      "increaseDebt(address,address,uint256)": {
        "details": "Attention: this method assumes that (debt token) _feeAmount has already been minted and transferred to this contract.",
        "params": {
          "_asset": "The address of collateral asset.",
          "_borrower": "The address of borrower.",
          "_feeAmount": "The fee amount to collect."
        }
      },
      "initialize(address)": {
        "details": "Runs all the setup logic only once.",
        "params": {
          "initialOwner": "The address of initial owner."
        }
      },
      "liquidateDebt(address,address)": {
        "params": {
          "_asset": "The address of collateral asset.",
          "_borrower": "The address of borrower."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "simulateRefund(address,address,uint256)": {
        "details": "Helper function used by the UI.",
        "params": {
          "_asset": "The address of collateral asset.",
          "_borrower": "The address of borrower.",
          "_paybackFraction": "The amount that the borrower pays back."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "FeeCollector contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "FEE_EXPIRATION_SECONDS()": {
        "notice": "The duration which the fee refund is expired. ~ 6 months minus one week (MIN_FEE_DAYS)"
      },
      "MIN_FEE_DAYS()": {
        "notice": "The duration which the minimum fee is applied."
      },
      "MIN_FEE_FRACTION()": {
        "notice": "The minimum fee fraction, divided by 26 (1/26)."
      },
      "NAME()": {
        "notice": "The contract name."
      },
      "closeDebt(address,address)": {
        "notice": "Closes debt when it is paid in full."
      },
      "collectFees(address[],address[])": {
        "notice": "Batches collect fees from an array of borrowers and assets."
      },
      "decreaseDebt(address,address,uint256)": {
        "notice": "Decreases debt when a TrenBox is adjusted."
      },
      "feeRecords(address,address)": {
        "notice": "The mapping from borrower address to the nested mapping from collateral asset address to fee record struct"
      },
      "getProtocolRevenueDestination()": {
        "notice": "Gets the protocol revenue destination."
      },
      "handleRedemptionFee(address,uint256)": {
        "notice": "Sends redemption fee to the protocol revenue destination."
      },
      "increaseDebt(address,address,uint256)": {
        "notice": "Increases debt of fee amount when a TrenBox is created and again whenever the borrower acquires additional loans. Collects the minimum fee to the platform, for which there is no refund; holds on to the remaining fees until debt is paid, liquidated, or expired."
      },
      "liquidateDebt(address,address)": {
        "notice": "Triggered when a TrenBox is liquidated. In that case, all remaining fees are collected by the platform, and no refunds are generated."
      },
      "simulateRefund(address,address,uint256)": {
        "notice": "Simulates the refund due if a TrenBox would be closed at this moment"
      }
    },
    "notice": "Handles the borrowing fee; controls the decaying refund and maintains its record that includes the refund balance.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10105,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "adminContract",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10107,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "borrowerOperations",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10109,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "communityIssuance",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10111,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "debtToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10113,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "feeCollector",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 10115,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "flashLoanAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 10117,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "trenStaking",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 10119,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "priceFeed",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 10121,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "sortedTrenBoxes",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 10123,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 10125,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "timelockAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 10127,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 10129,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "trenBoxManager",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 10131,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "trenBoxManagerOperations",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 10133,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "trenBoxStorage",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 10135,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "isAddressSetupInitialized",
        "offset": 20,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 10140,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "__gap",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_uint256)33_storage"
      },
      {
        "astId": 10970,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "feeRecords",
        "offset": 0,
        "slot": "48",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(FeeRecord)13476_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)33_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[33]",
        "numberOfBytes": "1056"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(FeeRecord)13476_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IFeeCollector.FeeRecord))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(FeeRecord)13476_storage)"
      },
      "t_mapping(t_address,t_struct(FeeRecord)13476_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IFeeCollector.FeeRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeRecord)13476_storage"
      },
      "t_struct(FeeRecord)13476_storage": {
        "encoding": "inplace",
        "label": "struct IFeeCollector.FeeRecord",
        "members": [
          {
            "astId": 13471,
            "contract": "contracts/FeeCollector.sol:FeeCollector",
            "label": "from",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13473,
            "contract": "contracts/FeeCollector.sol:FeeCollector",
            "label": "to",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13475,
            "contract": "contracts/FeeCollector.sol:FeeCollector",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}