{
  "address": "0xb1EE37c9311BE8a3E63a2c1ae4cC37f7CA1482e8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__CommunityIssuanceZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__LengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__SetupIsInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__TRENStakingZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "address_",
          "type": "address"
        }
      ],
      "name": "ConfigurableAddresses__ZeroAddresses",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EthUnsupportedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmountError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TrenBoxStorage__BorrowerOperationsOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TrenBoxStorage__BorrowerOperationsOrTrenBoxManagerOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TrenBoxStorage__NoClaimableCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TrenBoxStorage__NotAuthorizedContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TrenBoxStorage__TrenBoxManagerOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TrenBoxStorage__TrenBoxManagerOperationsOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBalance",
          "type": "uint256"
        }
      ],
      "name": "ActiveCollateralBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBalance",
          "type": "uint256"
        }
      ],
      "name": "ActiveDebtBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBalance",
          "type": "uint256"
        }
      ],
      "name": "ClaimableCollateralBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBalance",
          "type": "uint256"
        }
      ],
      "name": "LiquidatedCollateralBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBalance",
          "type": "uint256"
        }
      ],
      "name": "LiquidatedDebtBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBalance",
          "type": "uint256"
        }
      ],
      "name": "UserClaimableCollateralBalanceUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newImplementation",
          "type": "address"
        }
      ],
      "name": "authorizeUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "claimCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityIssuance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collAmount",
          "type": "uint256"
        }
      ],
      "name": "decreaseActiveBalancesAfterRedemption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseActiveCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseActiveDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "getActiveCollateralBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "getActiveDebtBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "getClaimableCollateralBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "getLiquidatedCollateralBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "getLiquidatedDebtBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "getTotalCollateralBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "getTotalDebtBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getUserClaimableCollateralBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "increaseActiveCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "increaseActiveDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "increaseClaimableCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAddressSetupInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_communityIssuance",
          "type": "address"
        }
      ],
      "name": "setCommunityIssuance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trenStaking",
          "type": "address"
        }
      ],
      "name": "setTRENStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTrenBoxes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManagerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxStorage",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isActiveIncrease",
          "type": "bool"
        }
      ],
      "name": "updateDebtAndCollateralBalances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "updateUserAndEntireClaimableBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "updateUserClaimableBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa1d8750b7470a86ece2ed3695923ad708e31444689f51cc32d0c07cd526709de",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x19E733F20aAdaB8996f7895ACBD04f746BF4Aac1",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "2210398",
    "logsBloom": "0x
    "blockHash": "0xdf3e0a5fb791b67eb214bb5c656e1257fd854b72b5d222b314321ea1f2eb0ee1",
    "transactionHash": "0xa1d8750b7470a86ece2ed3695923ad708e31444689f51cc32d0c07cd526709de",
    "logs": [],
    "blockNumber": 19861117,
    "cumulativeGasUsed": "2210398",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "10f736271acd8614150314323b008696",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__CommunityIssuanceZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__SetupIsInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__TRENStakingZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"ConfigurableAddresses__ZeroAddresses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EthUnsupportedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmountError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrenBoxStorage__BorrowerOperationsOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrenBoxStorage__BorrowerOperationsOrTrenBoxManagerOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrenBoxStorage__NoClaimableCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrenBoxStorage__NotAuthorizedContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrenBoxStorage__TrenBoxManagerOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrenBoxStorage__TrenBoxManagerOperationsOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"ActiveCollateralBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"ActiveDebtBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"ClaimableCollateralBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CollateralSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"LiquidatedCollateralBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"LiquidatedDebtBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"UserClaimableCollateralBalanceUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImplementation\",\"type\":\"address\"}],\"name\":\"authorizeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityIssuance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseActiveBalancesAfterRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseActiveCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseActiveDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getActiveCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getActiveDebtBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getClaimableCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getLiquidatedCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getLiquidatedDebtBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getTotalCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getTotalDebtBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getUserClaimableCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseActiveCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseActiveDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseClaimableCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAddressSetupInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityIssuance\",\"type\":\"address\"}],\"name\":\"setCommunityIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trenStaking\",\"type\":\"address\"}],\"name\":\"setTRENStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTrenBoxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManagerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isActiveIncrease\",\"type\":\"bool\"}],\"name\":\"updateDebtAndCollateralBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateUserAndEntireClaimableBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateUserClaimableBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}],\"TrenBoxStorage__BorrowerOperationsOnly()\":[{\"details\":\"Error emitted when only BorrowerOperations is allowed.\"}],\"TrenBoxStorage__BorrowerOperationsOrTrenBoxManagerOnly()\":[{\"details\":\"Error emitted when only BorrowerOperations or TrenBoxManager can perform an operation.\"}],\"TrenBoxStorage__NoClaimableCollateral()\":[{\"details\":\"Error emitted when there is no claimable collateral available.\"}],\"TrenBoxStorage__NotAuthorizedContract()\":[{\"details\":\"Error emitted when contract is not authorized.\"}],\"TrenBoxStorage__TrenBoxManagerOnly()\":[{\"details\":\"Error emitted when only TrenBoxManager is allowed.\"}],\"TrenBoxStorage__TrenBoxManagerOperationsOnly()\":[{\"details\":\"Error emitted when only TrenBoxManagerOperations is allowed.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"ActiveCollateralBalanceUpdated(address,uint256)\":{\"details\":\"Emitted when the active collateral balance is updated.\",\"params\":{\"_collateral\":\"The address of the collateral asset.\",\"_newBalance\":\"The new active collateral balance.\"}},\"ActiveDebtBalanceUpdated(address,uint256)\":{\"details\":\"Emitted when the active debt balance is updated.\",\"params\":{\"_collateral\":\"The address of the collateral asset.\",\"_newBalance\":\"The new active debt balance.\"}},\"ClaimableCollateralBalanceUpdated(address,uint256)\":{\"details\":\"Emitted when the claimable collateral balance is updated.\",\"params\":{\"_collateral\":\"The address of the collateral asset.\",\"_newBalance\":\"The new claimable collateral balance.\"}},\"CollateralSent(address,address,uint256)\":{\"details\":\"Emitted when collateral is sent.\",\"params\":{\"_amount\":\"The amount of collateral sent.\",\"_collateral\":\"The address of the collateral asset.\",\"_to\":\"The address of the user which get collateral amount.\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"LiquidatedCollateralBalanceUpdated(address,uint256)\":{\"details\":\"Emitted when the liquidated collateral balance is updated.\",\"params\":{\"_collateral\":\"The address of the collateral asset.\",\"_newBalance\":\"The new liquidated collateral balance.\"}},\"LiquidatedDebtBalanceUpdated(address,uint256)\":{\"details\":\"Emitted when the liquidated debt balance is updated.\",\"params\":{\"_collateral\":\"The address of the collateral asset.\",\"_newBalance\":\"The new liquidated debt balance.\"}},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"},\"UserClaimableCollateralBalanceUpdated(address,address,uint256)\":{\"details\":\"Emitted when the user claimable collateral balance is updated.\",\"params\":{\"_account\":\"The address of the user.\",\"_collateral\":\"The address of the collateral asset.\",\"_newBalance\":\"The new user claimable collateral balance.\"}}},\"kind\":\"dev\",\"methods\":{\"claimCollateral(address,address)\":{\"params\":{\"_account\":\"The address of the user to send.\",\"_collateral\":\"The address of the collateral asset.\"}},\"decreaseActiveBalancesAfterRedemption(address,uint256,uint256)\":{\"params\":{\"_collAmount\":\"The amount to decrease the collateral balance.\",\"_collateral\":\"The address of the collateral asset.\",\"_debtAmount\":\"The amount to decrease the debt balance.\"}},\"decreaseActiveCollateral(address,uint256)\":{\"params\":{\"_amount\":\"The amount to decrease the collateral balance.\",\"_collateral\":\"The address of the collateral asset.\"}},\"decreaseActiveDebt(address,uint256)\":{\"params\":{\"_amount\":\"The amount to decrease the debt balance.\",\"_collateral\":\"The address of the collateral asset.\"}},\"getActiveCollateralBalance(address)\":{\"params\":{\"_collateral\":\"The address of the collateral asset.\"}},\"getActiveDebtBalance(address)\":{\"params\":{\"_collateral\":\"The address of the collateral asset.\"}},\"getClaimableCollateralBalance(address)\":{\"params\":{\"_collateral\":\"The address of the collateral asset.\"}},\"getLiquidatedCollateralBalance(address)\":{\"params\":{\"_collateral\":\"The address of the collateral asset.\"}},\"getLiquidatedDebtBalance(address)\":{\"params\":{\"_collateral\":\"The address of the collateral asset.\"}},\"getTotalCollateralBalance(address)\":{\"params\":{\"_collateral\":\"The address of the collateral asset.\"}},\"getTotalDebtBalance(address)\":{\"params\":{\"_collateral\":\"The address of the collateral asset.\"}},\"getUserClaimableCollateralBalance(address,address)\":{\"params\":{\"_account\":\"The address of the user.\",\"_collateral\":\"The address of the collateral asset.\"}},\"increaseActiveCollateral(address,uint256)\":{\"params\":{\"_amount\":\"The amount to increase the debt balance.\",\"_collateral\":\"The address of the collateral asset.\"}},\"increaseActiveDebt(address,uint256)\":{\"params\":{\"_amount\":\"The amount to increase the debt balance.\",\"_collateral\":\"The address of the collateral asset.\"}},\"increaseClaimableCollateral(address,uint256)\":{\"params\":{\"_amount\":\"The amount to increase the claimable collateral balance.\",\"_collateral\":\"The address of the collateral asset.\"}},\"initialize(address)\":{\"details\":\"Sets an intiial owner for the contract.\",\"params\":{\"initialOwner\":\"The address of initial owner.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"sendCollateral(address,address,uint256)\":{\"params\":{\"_account\":\"The address of the user to send.\",\"_amount\":\"The amount of the collateral to send.\",\"_collateral\":\"The address of the collateral asset.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateDebtAndCollateralBalances(address,uint256,uint256,bool)\":{\"params\":{\"_collAmount\":\"The amount to decrease the collateral balance.\",\"_collateral\":\"The address of the collateral asset.\",\"_debtAmount\":\"The amount to decrease the debt balance.\",\"_isActiveIncrease\":\"The indicator that shows increasing or decreasing of active balances.\"}},\"updateUserAndEntireClaimableBalance(address,address,uint256)\":{\"params\":{\"_account\":\"The address of the user.\",\"_amount\":\"The amount to update the claimable balance.\",\"_collateral\":\"The address of the collateral asset.\"}},\"updateUserClaimableBalance(address,address,uint256)\":{\"params\":{\"_account\":\"The address of the user.\",\"_amount\":\"The amount to update the claimable balance.\",\"_collateral\":\"The address of the collateral asset.\"}},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"A contract storage of the collateral amount, debt and gas compensation for each TrenBox.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"NAME()\":{\"notice\":\"The contract name.\"},\"claimCollateral(address,address)\":{\"notice\":\"Sends amount of claimable collateral from contract to user.\"},\"decreaseActiveBalancesAfterRedemption(address,uint256,uint256)\":{\"notice\":\"Decreases the active balances of debt and collateral for a specific collateral after redemption exists.\"},\"decreaseActiveCollateral(address,uint256)\":{\"notice\":\"Decreases the active balance for a specific collateral asset.\"},\"decreaseActiveDebt(address,uint256)\":{\"notice\":\"Decreases the active debt balance for a specific collateral asset.\"},\"getActiveCollateralBalance(address)\":{\"notice\":\"Returns the active collateral balance for a specific collateral asset.\"},\"getActiveDebtBalance(address)\":{\"notice\":\"Returns the active debt balance for a specific collateral asset.\"},\"getClaimableCollateralBalance(address)\":{\"notice\":\"Returns the claimable collateral balance for a specific collateral asset.\"},\"getLiquidatedCollateralBalance(address)\":{\"notice\":\"Returns the liquidated collateral balance for a specific collateral asset.\"},\"getLiquidatedDebtBalance(address)\":{\"notice\":\"Returns the liquidated debt balance for a specific collateral asset.\"},\"getTotalCollateralBalance(address)\":{\"notice\":\"Returns sum of active and liquidated amount of a specific collateral asset.\"},\"getTotalDebtBalance(address)\":{\"notice\":\"Returns sum of active and liquidated debt for a specific collateral asset.\"},\"getUserClaimableCollateralBalance(address,address)\":{\"notice\":\"Returns the claimable collateral balance for a specific user.\"},\"increaseActiveCollateral(address,uint256)\":{\"notice\":\"Increases the active balance for a specific collateral asset.\"},\"increaseActiveDebt(address,uint256)\":{\"notice\":\"Increases the active debt balance for a specific collateral asset.\"},\"increaseClaimableCollateral(address,uint256)\":{\"notice\":\"Increases the claimable collateral balance for a specific collateral asset.\"},\"sendCollateral(address,address,uint256)\":{\"notice\":\"Sends amount of active collateral from contract to user.\"},\"updateDebtAndCollateralBalances(address,uint256,uint256,bool)\":{\"notice\":\"Updates the active and liquidated debt and collateral balances.\"},\"updateUserAndEntireClaimableBalance(address,address,uint256)\":{\"notice\":\"Updates the entire and user claimable balance for a specific collateral asset.\"},\"updateUserClaimableBalance(address,address,uint256)\":{\"notice\":\"Updates the claimable collateral balance of the user for a specific collateral asset.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TrenBoxStorage.sol\":\"TrenBoxStorage\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"contracts/Dependencies/ConfigurableAddresses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract ConfigurableAddresses is OwnableUpgradeable {\\n    address public adminContract;\\n    address public borrowerOperations;\\n    address public communityIssuance;\\n    address public debtToken;\\n    address public feeCollector;\\n    address public flashLoanAddress;\\n    address public trenStaking;\\n    address public priceFeed;\\n    address public sortedTrenBoxes;\\n    address public stabilityPool;\\n    address public timelockAddress;\\n    address public treasuryAddress;\\n    address public trenBoxManager;\\n    address public trenBoxManagerOperations;\\n    address public trenBoxStorage;\\n\\n    bool public isAddressSetupInitialized;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[33] private __gap; // Goerli uses 47; Arbitrum uses 33\\n\\n    error ConfigurableAddresses__SetupIsInitialized();\\n    error ConfigurableAddresses__ZeroAddresses(uint256 position, address address_);\\n    error ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n    error ConfigurableAddresses__TRENStakingZeroAddress();\\n    error ConfigurableAddresses__LengthMismatch();\\n\\n    // Dependency setters\\n    // -----------------------------------------------------------------------------------------------\\n\\n    function setAddresses(address[] calldata _addresses) external onlyOwner {\\n        if (isAddressSetupInitialized) {\\n            revert ConfigurableAddresses__SetupIsInitialized();\\n        }\\n        if (_addresses.length != 13) {\\n            revert ConfigurableAddresses__LengthMismatch();\\n        }\\n\\n        for (uint256 i = 0; i < 13; i++) {\\n            if (_addresses[i] == address(0)) {\\n                revert ConfigurableAddresses__ZeroAddresses(i, _addresses[i]);\\n            }\\n        }\\n        adminContract = _addresses[0];\\n        borrowerOperations = _addresses[1];\\n        debtToken = _addresses[2];\\n        feeCollector = _addresses[3];\\n        flashLoanAddress = _addresses[4];\\n        priceFeed = _addresses[5];\\n        sortedTrenBoxes = _addresses[6];\\n        stabilityPool = _addresses[7];\\n        timelockAddress = _addresses[8];\\n        treasuryAddress = _addresses[9];\\n        trenBoxManager = _addresses[10];\\n        trenBoxManagerOperations = _addresses[11];\\n        trenBoxStorage = _addresses[12];\\n\\n        isAddressSetupInitialized = true;\\n    }\\n\\n    function setCommunityIssuance(address _communityIssuance) public onlyOwner {\\n        if (_communityIssuance == address(0)) {\\n            revert ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n        }\\n        communityIssuance = _communityIssuance;\\n    }\\n\\n    function setTRENStaking(address _trenStaking) public onlyOwner {\\n        if (_trenStaking == address(0)) {\\n            revert ConfigurableAddresses__TRENStakingZeroAddress();\\n        }\\n        trenStaking = _trenStaking;\\n    }\\n}\\n\",\"keccak256\":\"0x8c08787a51c52fc5b1fae23a7732fe579a3508725cd5d4d527978c2f95bf4421\",\"license\":\"MIT\"},\"contracts/Dependencies/SafetyTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IERC20Decimals } from \\\"../Interfaces/IERC20Decimals.sol\\\";\\n\\nlibrary SafetyTransfer {\\n    error EthUnsupportedError();\\n    error InvalidAmountError();\\n\\n    //_amount is in ether (1e18) and we want to convert it to the token decimal\\n    function decimalsCorrection(address _token, uint256 _amount) internal view returns (uint256) {\\n        if (_token == address(0)) {\\n            revert EthUnsupportedError();\\n        }\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n        uint8 decimals = IERC20Decimals(_token).decimals();\\n        if (decimals < 18) {\\n            uint256 divisor = 10 ** (18 - decimals);\\n            if (_amount % divisor != 0) {\\n                revert InvalidAmountError();\\n            }\\n            return _amount / divisor;\\n        } else if (decimals > 18) {\\n            uint256 multiplier = 10 ** (decimals - 18);\\n            return _amount * multiplier;\\n        }\\n        return _amount;\\n    }\\n}\\n\",\"keccak256\":\"0x8661386c9ff583aa23a5edfcba5bef533877663018bcc8c626fb70d2090872cf\",\"license\":\"MIT\"},\"contracts/Interfaces/IDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IDeposit {\\n    function receivedERC20(address _asset, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xedebb2b3e0c98d165db1f1b4a3b5e96f2b327cd7bc2ad1b1c07abdd1f47bce17\",\"license\":\"MIT\"},\"contracts/Interfaces/IERC20Decimals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface IERC20Decimals {\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xb784584e544d4f45a48dc5c68bea423dbb35bd4cfadc3007ee3ab64212ff71da\",\"license\":\"MIT\"},\"contracts/Interfaces/ITrenBoxStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface ITrenBoxStorage {\\n    /// @dev Struct for storing debt balances of a specific collateral asset.\\n    /// @param active The entire debt of all active TrenBoxes.\\n    /// @param liquidated The entire debt of all liquidated TrenBoxes.\\n    struct DebtBalances {\\n        uint256 active;\\n        uint256 liquidated;\\n    }\\n\\n    /// @dev Struct for storing balances of a specific collateral asset.\\n    /// @param active The entire collateral amount of all active TrenBoxes.\\n    /// @param liquidated The entire collateral amount of all liquidated TrenBoxes.\\n    /// @param claimable The entire collateral amount of all liquidated TrenBoxes that can be\\n    /// claimed by user.\\n    struct CollBalances {\\n        uint256 active;\\n        uint256 liquidated;\\n        uint256 claimable;\\n    }\\n\\n    /**\\n     * @dev Emitted when the active collateral balance is updated.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new active collateral balance.\\n     */\\n    event ActiveCollateralBalanceUpdated(address indexed _collateral, uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when the active debt balance is updated.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new active debt balance.\\n     */\\n    event ActiveDebtBalanceUpdated(address indexed _collateral, uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when the liquidated collateral balance is updated.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new liquidated collateral balance.\\n     */\\n    event LiquidatedCollateralBalanceUpdated(address indexed _collateral, uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when the liquidated debt balance is updated.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new liquidated debt balance.\\n     */\\n    event LiquidatedDebtBalanceUpdated(address indexed _collateral, uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when the claimable collateral balance is updated.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new claimable collateral balance.\\n     */\\n    event ClaimableCollateralBalanceUpdated(address indexed _collateral, uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when collateral is sent.\\n     * @param _to The address of the user which get collateral amount.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount of collateral sent.\\n     */\\n    event CollateralSent(address indexed _to, address indexed _collateral, uint256 _amount);\\n\\n    /**\\n     * @dev Emitted when the user claimable collateral balance is updated.\\n     * @param _account The address of the user.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new user claimable collateral balance.\\n     */\\n    event UserClaimableCollateralBalanceUpdated(\\n        address indexed _account, address indexed _collateral, uint256 _newBalance\\n    );\\n\\n    /**\\n     * @dev Error emitted when contract is not authorized.\\n     */\\n    error TrenBoxStorage__NotAuthorizedContract();\\n\\n    /**\\n     * @dev Error emitted when only TrenBoxManager is allowed.\\n     */\\n    error TrenBoxStorage__TrenBoxManagerOnly();\\n\\n    /**\\n     * @dev Error emitted when only BorrowerOperations is allowed.\\n     */\\n    error TrenBoxStorage__BorrowerOperationsOnly();\\n\\n    /**\\n     * @dev Error emitted when only BorrowerOperations or TrenBoxManager can perform an operation.\\n     */\\n    error TrenBoxStorage__BorrowerOperationsOrTrenBoxManagerOnly();\\n\\n    /**\\n     * @dev Error emitted when only TrenBoxManagerOperations is allowed.\\n     */\\n    error TrenBoxStorage__TrenBoxManagerOperationsOnly();\\n\\n    /**\\n     * @dev Error emitted when there is no claimable collateral available.\\n     */\\n    error TrenBoxStorage__NoClaimableCollateral();\\n\\n    /**\\n     * @notice Returns the active collateral balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getActiveCollateralBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the active debt balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getActiveDebtBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the liquidated collateral balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getLiquidatedCollateralBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the liquidated debt balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getLiquidatedDebtBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns sum of active and liquidated debt for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getTotalDebtBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns sum of active and liquidated amount of a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getTotalCollateralBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the claimable collateral balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getClaimableCollateralBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the claimable collateral balance for a specific user.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _account The address of the user.\\n     */\\n    function getUserClaimableCollateralBalance(\\n        address _collateral,\\n        address _account\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Increases the active debt balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount to increase the debt balance.\\n     */\\n    function increaseActiveDebt(address _collateral, uint256 _amount) external;\\n\\n    /**\\n     * @notice Decreases the active debt balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount to decrease the debt balance.\\n     */\\n    function decreaseActiveDebt(address _collateral, uint256 _amount) external;\\n\\n    /**\\n     * @notice Decreases the active balances of debt and collateral for a specific collateral after\\n     * redemption exists.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _debtAmount The amount to decrease the debt balance.\\n     * @param _collAmount The amount to decrease the collateral balance.\\n     */\\n    function decreaseActiveBalancesAfterRedemption(\\n        address _collateral,\\n        uint256 _debtAmount,\\n        uint256 _collAmount\\n    )\\n        external;\\n\\n    /**\\n     * @notice Increases the active balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount to increase the debt balance.\\n     */\\n    function increaseActiveCollateral(address _collateral, uint256 _amount) external;\\n\\n    /**\\n     * @notice Decreases the active balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount to decrease the collateral balance.\\n     */\\n    function decreaseActiveCollateral(address _collateral, uint256 _amount) external;\\n\\n    /**\\n     * @notice Updates the active and liquidated debt and collateral balances.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _debtAmount The amount to decrease the debt balance.\\n     * @param _collAmount The amount to decrease the collateral balance.\\n     * @param _isActiveIncrease The indicator that shows increasing or decreasing of active\\n     * balances.\\n     */\\n    function updateDebtAndCollateralBalances(\\n        address _collateral,\\n        uint256 _debtAmount,\\n        uint256 _collAmount,\\n        bool _isActiveIncrease\\n    )\\n        external;\\n\\n    /**\\n     * @notice Updates the entire and user claimable balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _account The address of the user.\\n     * @param _amount The amount to update the claimable balance.\\n     */\\n    function updateUserAndEntireClaimableBalance(\\n        address _collateral,\\n        address _account,\\n        uint256 _amount\\n    )\\n        external;\\n\\n    /**\\n     * @notice Increases the claimable collateral balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount to increase the claimable collateral balance.\\n     */\\n    function increaseClaimableCollateral(address _collateral, uint256 _amount) external;\\n\\n    /**\\n     * @notice Updates the claimable collateral balance of the user for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _account The address of the user.\\n     * @param _amount The amount to update the claimable balance.\\n     */\\n    function updateUserClaimableBalance(\\n        address _collateral,\\n        address _account,\\n        uint256 _amount\\n    )\\n        external;\\n\\n    /**\\n     * @notice Sends amount of active collateral from contract to user.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _account The address of the user to send.\\n     * @param _amount The amount of the collateral to send.\\n     */\\n    function sendCollateral(address _collateral, address _account, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sends amount of claimable collateral from contract to user.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _account The address of the user to send.\\n     */\\n    function claimCollateral(address _collateral, address _account) external;\\n}\\n\",\"keccak256\":\"0x611751f1cd64ec649529ceb82cf851921c015a697b5d8bf207dd6f11f017b528\",\"license\":\"MIT\"},\"contracts/TrenBoxStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { UUPSUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport { SafetyTransfer } from \\\"./Dependencies/SafetyTransfer.sol\\\";\\nimport { ConfigurableAddresses } from \\\"./Dependencies/ConfigurableAddresses.sol\\\";\\n\\nimport { ITrenBoxStorage } from \\\"./Interfaces/ITrenBoxStorage.sol\\\";\\nimport { IDeposit } from \\\"./Interfaces/IDeposit.sol\\\";\\n\\n/// @title A contract storage of the collateral amount, debt and gas compensation for each\\n/// TrenBox.\\ncontract TrenBoxStorage is\\n    OwnableUpgradeable,\\n    UUPSUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    ITrenBoxStorage,\\n    ConfigurableAddresses\\n{\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice The contract name.\\n    string public constant NAME = \\\"TrenBoxStorage\\\";\\n\\n    /// @notice The balances of each collateral asset in the storage.\\n    mapping(address collateral => CollBalances) internal collateralBalances;\\n\\n    /// @notice The balances of each debt in the storage.\\n    mapping(address collateral => DebtBalances) internal debtBalances;\\n\\n    /// @notice The balances of each collateral asset that the user can claim from storage.\\n    mapping(address user => mapping(address collateral => uint256 balance)) internal\\n        userClaimableCollateralBalances;\\n\\n    // ------------------------------------------ Modifiers ---------------------------------------\\n\\n    modifier onlyTrenBoxManager() {\\n        if (msg.sender != trenBoxManager) {\\n            revert TrenBoxStorage__TrenBoxManagerOnly();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyBorrowerOperations() {\\n        if (msg.sender != borrowerOperations) {\\n            revert TrenBoxStorage__BorrowerOperationsOnly();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyTrenBoxManagerOperations() {\\n        if (msg.sender != trenBoxManagerOperations) {\\n            revert TrenBoxStorage__TrenBoxManagerOperationsOnly();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyBorrowerOperationsOrTrenBoxManager() {\\n        if (msg.sender != borrowerOperations && msg.sender != trenBoxManager) {\\n            revert TrenBoxStorage__BorrowerOperationsOrTrenBoxManagerOnly();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAuthorizedProtocolContracts() {\\n        if (\\n            msg.sender != borrowerOperations && msg.sender != stabilityPool\\n                && msg.sender != trenBoxManager\\n        ) {\\n            revert TrenBoxStorage__NotAuthorizedContract();\\n        }\\n        _;\\n    }\\n\\n    // ------------------------------------------ Initializer -------------------------------------\\n\\n    /// @dev Sets an intiial owner for the contract.\\n    /// @param initialOwner The address of initial owner.\\n    function initialize(address initialOwner) public initializer {\\n        __Ownable_init(initialOwner);\\n        __ReentrancyGuard_init();\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    // ------------------------------------------ Getters -----------------------------------------\\n\\n    function getActiveCollateralBalance(address _collateral)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return collateralBalances[_collateral].active;\\n    }\\n\\n    function getActiveDebtBalance(address _collateral) external view override returns (uint256) {\\n        return debtBalances[_collateral].active;\\n    }\\n\\n    function getLiquidatedCollateralBalance(address _collateral)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return collateralBalances[_collateral].liquidated;\\n    }\\n\\n    function getLiquidatedDebtBalance(address _collateral)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return debtBalances[_collateral].liquidated;\\n    }\\n\\n    function getTotalDebtBalance(address _collateral) external view override returns (uint256) {\\n        return debtBalances[_collateral].active + debtBalances[_collateral].liquidated;\\n    }\\n\\n    function getTotalCollateralBalance(address _collateral)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return collateralBalances[_collateral].active + collateralBalances[_collateral].liquidated;\\n    }\\n\\n    function getClaimableCollateralBalance(address _collateral)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return collateralBalances[_collateral].claimable;\\n    }\\n\\n    function getUserClaimableCollateralBalance(\\n        address _collateral,\\n        address _account\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return userClaimableCollateralBalances[_account][_collateral];\\n    }\\n\\n    // ------------------------------------------ External functions ------------------------------\\n\\n    function increaseActiveDebt(\\n        address _collateral,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        onlyBorrowerOperations\\n    {\\n        _updateActiveDebt(_collateral, _amount, true);\\n    }\\n\\n    function decreaseActiveDebt(\\n        address _collateral,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        onlyAuthorizedProtocolContracts\\n    {\\n        _updateActiveDebt(_collateral, _amount, false);\\n    }\\n\\n    function decreaseActiveBalancesAfterRedemption(\\n        address _collateral,\\n        uint256 _debtAmount,\\n        uint256 _collAmount\\n    )\\n        external\\n        override\\n        onlyTrenBoxManager\\n    {\\n        _updateActiveDebt(_collateral, _debtAmount, false);\\n        _updateActiveCollateral(_collateral, _collAmount, false);\\n    }\\n\\n    function increaseActiveCollateral(\\n        address _collateral,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        onlyBorrowerOperations\\n    {\\n        _updateActiveCollateral(_collateral, _amount, true);\\n    }\\n\\n    function decreaseActiveCollateral(\\n        address _collateral,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        onlyTrenBoxManagerOperations\\n    {\\n        _updateActiveCollateral(_collateral, _amount, false);\\n    }\\n\\n    function updateDebtAndCollateralBalances(\\n        address _collateral,\\n        uint256 _debtAmount,\\n        uint256 _collAmount,\\n        bool _isActiveIncrease\\n    )\\n        external\\n        override\\n        onlyTrenBoxManager\\n    {\\n        uint256 newLiquidatedDebt;\\n        uint256 newLiquidatedColl;\\n        if (_isActiveIncrease) {\\n            _updateActiveDebt(_collateral, _debtAmount, true);\\n            newLiquidatedDebt = debtBalances[_collateral].liquidated - _debtAmount;\\n            _updateActiveCollateral(_collateral, _collAmount, true);\\n            newLiquidatedColl = collateralBalances[_collateral].liquidated - _collAmount;\\n        } else {\\n            _updateActiveDebt(_collateral, _debtAmount, false);\\n            newLiquidatedDebt = debtBalances[_collateral].liquidated + _debtAmount;\\n            _updateActiveCollateral(_collateral, _collAmount, false);\\n            newLiquidatedColl = collateralBalances[_collateral].liquidated + _collAmount;\\n        }\\n\\n        debtBalances[_collateral].liquidated = newLiquidatedDebt;\\n        emit LiquidatedDebtBalanceUpdated(_collateral, newLiquidatedDebt);\\n\\n        collateralBalances[_collateral].liquidated = newLiquidatedColl;\\n        emit LiquidatedCollateralBalanceUpdated(_collateral, newLiquidatedColl);\\n    }\\n\\n    function updateUserAndEntireClaimableBalance(\\n        address _collateral,\\n        address _account,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        onlyTrenBoxManager\\n    {\\n        _updateClaimableCollateral(_collateral, _amount, true);\\n        _updateUserClaimableBalance(_collateral, _account, _amount);\\n    }\\n\\n    function increaseClaimableCollateral(\\n        address _collateral,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        onlyTrenBoxManagerOperations\\n    {\\n        _updateClaimableCollateral(_collateral, _amount, true);\\n    }\\n\\n    function updateUserClaimableBalance(\\n        address _collateral,\\n        address _account,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        onlyTrenBoxManagerOperations\\n    {\\n        _updateUserClaimableBalance(_collateral, _account, _amount);\\n    }\\n\\n    function sendCollateral(\\n        address _collateral,\\n        address _account,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        nonReentrant\\n        onlyAuthorizedProtocolContracts\\n    {\\n        uint256 safetyTransferAmount = SafetyTransfer.decimalsCorrection(_collateral, _amount);\\n        if (safetyTransferAmount == 0) return;\\n\\n        _updateActiveCollateral(_collateral, _amount, false);\\n\\n        IERC20(_collateral).safeTransfer(_account, safetyTransferAmount);\\n\\n        if (isStabilityPool(_account)) {\\n            IDeposit(_account).receivedERC20(_collateral, _amount);\\n        }\\n\\n        emit CollateralSent(_account, _collateral, safetyTransferAmount);\\n    }\\n\\n    function claimCollateral(\\n        address _collateral,\\n        address _account\\n    )\\n        external\\n        override\\n        onlyBorrowerOperations\\n    {\\n        mapping(address => uint256) storage userBalance = userClaimableCollateralBalances[_account];\\n        uint256 claimableColl = userBalance[_collateral];\\n\\n        uint256 safetyTransferAmount = SafetyTransfer.decimalsCorrection(_collateral, claimableColl);\\n        if (safetyTransferAmount == 0) {\\n            revert TrenBoxStorage__NoClaimableCollateral();\\n        }\\n\\n        userBalance[_collateral] = 0;\\n        emit UserClaimableCollateralBalanceUpdated(_account, _collateral, 0);\\n\\n        _updateClaimableCollateral(_collateral, claimableColl, false);\\n\\n        IERC20(_collateral).safeTransfer(_account, safetyTransferAmount);\\n    }\\n\\n    function authorizeUpgrade(address _newImplementation) public {\\n        _authorizeUpgrade(_newImplementation);\\n    }\\n\\n    // ------------------------------------------ Private/internal functions ----------------------\\n\\n    /**\\n     * @dev Updates active debt balance for a specific collateral asset.\\n     * @param _collateral The address of collateral asset.\\n     * @param _amount The number of debt to update.\\n     * @param _isIncrease The indicator that shows increasing or decreasing of active debt balance.\\n     */\\n    function _updateActiveDebt(address _collateral, uint256 _amount, bool _isIncrease) private {\\n        uint256 newDebt;\\n        if (_isIncrease) newDebt = debtBalances[_collateral].active + _amount;\\n        else newDebt = debtBalances[_collateral].active - _amount;\\n\\n        debtBalances[_collateral].active = newDebt;\\n        emit ActiveDebtBalanceUpdated(_collateral, newDebt);\\n    }\\n\\n    /**\\n     * @dev Updates active balance for a specific collateral asset.\\n     * @param _collateral The address of collateral asset.\\n     * @param _amount The number of collateral to update.\\n     * @param _isIncrease The indicator that shows increasing or decreasing of active balance.\\n     */\\n    function _updateActiveCollateral(\\n        address _collateral,\\n        uint256 _amount,\\n        bool _isIncrease\\n    )\\n        private\\n    {\\n        uint256 newColl;\\n        if (_isIncrease) newColl = collateralBalances[_collateral].active + _amount;\\n        else newColl = collateralBalances[_collateral].active - _amount;\\n\\n        collateralBalances[_collateral].active = newColl;\\n        emit ActiveCollateralBalanceUpdated(_collateral, newColl);\\n    }\\n\\n    /**\\n     * @dev Updates entire claimable balance for a specific collateral asset.\\n     * @param _collateral The address of collateral asset.\\n     * @param _amount The number of collateral to update.\\n     * @param _isIncrease The indicator that shows increasing or decreasing of entire claimable\\n     * balance.\\n     */\\n    function _updateClaimableCollateral(\\n        address _collateral,\\n        uint256 _amount,\\n        bool _isIncrease\\n    )\\n        private\\n    {\\n        uint256 newBalance;\\n        if (_isIncrease) newBalance = collateralBalances[_collateral].claimable + _amount;\\n        else newBalance = collateralBalances[_collateral].claimable - _amount;\\n\\n        collateralBalances[_collateral].claimable = newBalance;\\n        emit ClaimableCollateralBalanceUpdated(_collateral, newBalance);\\n    }\\n\\n    /**\\n     * @dev Updates user claimable balance for a specific collateral asset.\\n     * @param _collateral The address of collateral asset.\\n     * @param _account The address of the caller.\\n     * @param _amount The number of collateral to update.\\n     */\\n    function _updateUserClaimableBalance(\\n        address _collateral,\\n        address _account,\\n        uint256 _amount\\n    )\\n        private\\n    {\\n        mapping(address => uint256) storage userBalance = userClaimableCollateralBalances[_account];\\n        uint256 newAmount = userBalance[_collateral] + _amount;\\n        userBalance[_collateral] = newAmount;\\n\\n        emit UserClaimableCollateralBalanceUpdated(_account, _collateral, newAmount);\\n    }\\n\\n    /**\\n     * @dev Checks if caller is a Stability Pool contract.\\n     * @param _account The address of the caller.\\n     * @return The boolean value indicating whether the operation succeeded.\\n     */\\n    function isStabilityPool(address _account) private view returns (bool) {\\n        return (_account == stabilityPool);\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner { }\\n}\\n\",\"keccak256\":\"0x32ad2cec78550ba6a35227520f17144bf7eb49e1a87f9c4ee32df0f3ec33183e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b506080516126ef61003e600039600081816118360152818161185f01526119a001526126ef6000f3fe6080604052600436106102885760003560e01c8063a0a349561161015a578063c7310f1a116100c1578063f1c05a7e1161007a578063f1c05a7e14610894578063f2fde38b146108b4578063f6b128ec146108d4578063f8d89898146108f4578063f91dff7214610914578063fe0607331461095b57600080fd5b8063c7310f1a146107ad578063c8564c62146107cd578063cc8b21e4146107fe578063ce307ca61461081e578063d80362041461083e578063f0690b291461085e57600080fd5b8063b429464111610113578063b4294641146106ed578063b95717211461070d578063c05c5e941461072d578063c415b95c1461074d578063c4d66de81461076d578063c5f956af1461078d57600080fd5b8063a0a34956146105f5578063a3f4df7e14610615578063a47055e71461065c578063ad3cb1cc1461067c578063b08a613e146106ad578063b1113882146106cd57600080fd5b806355dafa46116101fe578063715aa61b116101b7578063715aa61b1461051857806372caf7a814610538578063741bef1a1461055857806377553ad4146105785780638da5cb5b1461059857806395fb16bb146105d557600080fd5b806355dafa46146104315780635728ddda146104515780636592aa7a146104715780636789ec9a146104aa5780636a85d67d146104e3578063715018a61461050357600080fd5b806340ea8dea1161025057806340ea8dea1461034c5780634169467d146103935780634bc66f32146103b35780634f1ef286146103d357806351722f7b146103e657806352d1902d1461041c57600080fd5b806301c931001461028d578063048c661d146102af5780630a34d4d6146102ec578063181a023b1461030c5780633f84a44d1461032c575b600080fd5b34801561029957600080fd5b506102ad6102a83660046121b9565b61097b565b005b3480156102bb57600080fd5b506009546102cf906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102f857600080fd5b50600d546102cf906001600160a01b031681565b34801561031857600080fd5b506102ad6103273660046121d4565b6109cc565b34801561033857600080fd5b50600e546102cf906001600160a01b031681565b34801561035857600080fd5b506103856103673660046121b9565b6001600160a01b031660009081526030602052604090206001015490565b6040519081526020016102e3565b34801561039f57600080fd5b506005546102cf906001600160a01b031681565b3480156103bf57600080fd5b50600a546102cf906001600160a01b031681565b6102ad6103e1366004612214565b610a07565b3480156103f257600080fd5b506103856104013660046121b9565b6001600160a01b031660009081526031602052604090205490565b34801561042857600080fd5b50610385610a22565b34801561043d57600080fd5b506006546102cf906001600160a01b031681565b34801561045d57600080fd5b506102ad61046c3660046122d6565b610a3f565b34801561047d57600080fd5b5061038561048c3660046121b9565b6001600160a01b031660009081526030602052604090206002015490565b3480156104b657600080fd5b506103856104c53660046121b9565b6001600160a01b031660009081526031602052604090206001015490565b3480156104ef57600080fd5b506102ad6104fe3660046121b9565b610b38565b34801561050f57600080fd5b506102ad610b89565b34801561052457600080fd5b506102ad610533366004612309565b610b9d565b34801561054457600080fd5b506102ad6105533660046121d4565b610d31565b34801561056457600080fd5b506007546102cf906001600160a01b031681565b34801561058457600080fd5b506001546102cf906001600160a01b031681565b3480156105a457600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166102cf565b3480156105e157600080fd5b506002546102cf906001600160a01b031681565b34801561060157600080fd5b506102ad610610366004612345565b610d68565b34801561062157600080fd5b5061064f6040518060400160405280600e81526020016d5472656e426f7853746f7261676560901b81525081565b6040516102e3919061239c565b34801561066857600080fd5b506102ad6106773660046121d4565b610dab565b34801561068857600080fd5b5061064f604051806040016040528060058152602001640352e302e360dc1b81525081565b3480156106b957600080fd5b506103856106c83660046121b9565b610e12565b3480156106d957600080fd5b506102ad6106e83660046121d4565b610e41565b3480156106f957600080fd5b506103856107083660046121b9565b610e78565b34801561071957600080fd5b506102ad6107283660046123cf565b610ea1565b34801561073957600080fd5b506000546102cf906001600160a01b031681565b34801561075957600080fd5b506004546102cf906001600160a01b031681565b34801561077957600080fd5b506102ad6107883660046121b9565b61134a565b34801561079957600080fd5b50600b546102cf906001600160a01b031681565b3480156107b957600080fd5b506102ad6107c8366004612452565b61146a565b3480156107d957600080fd5b50600e546107ee90600160a01b900460ff1681565b60405190151581526020016102e3565b34801561080a57600080fd5b506008546102cf906001600160a01b031681565b34801561082a57600080fd5b506102ad6108393660046121d4565b611630565b34801561084a57600080fd5b506102ad610859366004612309565b611667565b34801561086a57600080fd5b506103856108793660046121b9565b6001600160a01b031660009081526030602052604090205490565b3480156108a057600080fd5b50600c546102cf906001600160a01b031681565b3480156108c057600080fd5b506102ad6108cf3660046121b9565b61169d565b3480156108e057600080fd5b506102ad6108ef366004612309565b6116db565b34801561090057600080fd5b506003546102cf906001600160a01b031681565b34801561092057600080fd5b5061038561092f3660046122d6565b6001600160a01b0380821660009081526032602090815260408083209386168352929052205492915050565b34801561096757600080fd5b506102ad6109763660046121b9565b611712565b61098361171b565b6001600160a01b0381166109aa576040516385d3330760e01b815260040160405180910390fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b600d546001600160a01b031633146109f75760405163191c47c560e31b815260040160405180910390fd5b610a0382826000611776565b5050565b610a0f61182b565b610a18826118d0565b610a0382826118d8565b6000610a2c611995565b506000805160206126c383398151915290565b6001546001600160a01b03163314610a6a5760405163722c395560e11b815260040160405180910390fd5b6001600160a01b03808216600090815260326020908152604080832093861683529083905281205490610a9d85836119de565b905080600003610ac057604051632a1db15b60e11b815260040160405180910390fd5b6001600160a01b038581166000818152602086815260408083208390555191825291928716917fa6453751e8d23eb578604a3bd6b2d4a2b4fdcb738fa16dfa462085ce4232960f910160405180910390a3610b1d85836000611b16565b610b316001600160a01b0386168583611bc6565b5050505050565b610b4061171b565b6001600160a01b038116610b675760405163706ebc6560e11b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b610b9161171b565b610b9b6000611c18565b565b610ba5611c89565b6001546001600160a01b03163314801590610bcb57506009546001600160a01b03163314155b8015610be25750600c546001600160a01b03163314155b15610c005760405163a59d25af60e01b815260040160405180910390fd5b6000610c0c84836119de565b905080600003610c1c5750610d03565b610c2884836000611776565b610c3c6001600160a01b0385168483611bc6565b6009546001600160a01b03848116911603610cb457604051633ac5bc0160e21b81526001600160a01b0385811660048301526024820184905284169063eb16f00490604401600060405180830381600087803b158015610c9b57600080fd5b505af1158015610caf573d6000803e3d6000fd5b505050505b836001600160a01b0316836001600160a01b03167fe664153eb516123e000bb334869ec912418f6fe4c1abb53fe2f848c947a8405d83604051610cf991815260200190565b60405180910390a3505b610d2c60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b505050565b6001546001600160a01b03163314610d5c5760405163722c395560e11b815260040160405180910390fd5b610a0382826001611cf9565b600c546001600160a01b03163314610d9357604051630294661b60e61b815260040160405180910390fd5b610d9f83836000611cf9565b610d2c83826000611776565b6001546001600160a01b03163314801590610dd157506009546001600160a01b03163314155b8015610de85750600c546001600160a01b03163314155b15610e065760405163a59d25af60e01b815260040160405180910390fd5b610a0382826000611cf9565b6001600160a01b038116600090815260306020526040812060018101549054610e3b91906124b0565b92915050565b6001546001600160a01b03163314610e6c5760405163722c395560e11b815260040160405180910390fd5b610a0382826001611776565b6001600160a01b038116600090815260316020526040812060018101549054610e3b91906124b0565b610ea961171b565b600e54600160a01b900460ff1615610ed357604051625f22e960e41b815260040160405180910390fd5b600d8114610ef457604051633f5a111d60e21b815260040160405180910390fd5b60005b600d811015610f97576000838383818110610f1457610f146124c3565b9050602002016020810190610f2991906121b9565b6001600160a01b031603610f8f5780838383818110610f4a57610f4a6124c3565b9050602002016020810190610f5f91906121b9565b604051630d9d339f60e01b815260048101929092526001600160a01b031660248201526044015b60405180910390fd5b600101610ef7565b5081816000818110610fab57610fab6124c3565b9050602002016020810190610fc091906121b9565b600080546001600160a01b0319166001600160a01b039290921691909117905581816001818110610ff357610ff36124c3565b905060200201602081019061100891906121b9565b600180546001600160a01b0319166001600160a01b03929092169190911790558181600281811061103b5761103b6124c3565b905060200201602081019061105091906121b9565b600380546001600160a01b0319166001600160a01b039290921691909117815582908290818110611083576110836124c3565b905060200201602081019061109891906121b9565b600480546001600160a01b0319166001600160a01b0392909216919091178155829082908181106110cb576110cb6124c3565b90506020020160208101906110e091906121b9565b600580546001600160a01b0319166001600160a01b039290921691909117815582908290818110611113576111136124c3565b905060200201602081019061112891906121b9565b600780546001600160a01b0319166001600160a01b03929092169190911790558181600681811061115b5761115b6124c3565b905060200201602081019061117091906121b9565b600880546001600160a01b0319166001600160a01b0392909216919091179055818160078181106111a3576111a36124c3565b90506020020160208101906111b891906121b9565b600980546001600160a01b0319166001600160a01b0392909216919091179055818160088181106111eb576111eb6124c3565b905060200201602081019061120091906121b9565b600a80546001600160a01b0319166001600160a01b039290921691909117905581816009818110611233576112336124c3565b905060200201602081019061124891906121b9565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a81811061127b5761127b6124c3565b905060200201602081019061129091906121b9565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b8181106112c3576112c36124c3565b90506020020160208101906112d891906121b9565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c81811061130b5761130b6124c3565b905060200201602081019061132091906121b9565b600e80546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156113905750825b905060008267ffffffffffffffff1660011480156113ad5750303b155b9050811580156113bb575080155b156113d95760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561140357845460ff60401b1916600160401b1785555b61140c86611da0565b611414611db1565b61141c611dc1565b831561146257845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b600c546001600160a01b0316331461149557604051630294661b60e61b815260040160405180910390fd5b600080821561150d576114aa86866001611cf9565b6001600160a01b0386166000908152603160205260409020600101546114d19086906124d9565b91506114df86856001611776565b6001600160a01b0386166000908152603060205260409020600101546115069085906124d9565b9050611578565b61151986866000611cf9565b6001600160a01b0386166000908152603160205260409020600101546115409086906124b0565b915061154e86856000611776565b6001600160a01b0386166000908152603060205260409020600101546115759085906124b0565b90505b6001600160a01b03861660008181526031602052604090819020600101849055517f3f1e46f4054899e979b9337ce8efa0ceb3be5aad7e82d472fdbf9f9709728fa0906115c89085815260200190565b60405180910390a26001600160a01b03861660008181526030602052604090819020600101839055517ff4cf0c4148db272742be0726f71685ac1a586f91c5f32f6c5cda10eeccd16af5906116209084815260200190565b60405180910390a2505050505050565b600d546001600160a01b0316331461165b5760405163191c47c560e31b815260040160405180910390fd5b610a0382826001611b16565b600d546001600160a01b031633146116925760405163191c47c560e31b815260040160405180910390fd5b610d2c838383611dc9565b6116a561171b565b6001600160a01b0381166116cf57604051631e4fbdf760e01b815260006004820152602401610f86565b6116d881611c18565b50565b600c546001600160a01b0316331461170657604051630294661b60e61b815260040160405180910390fd5b61169283826001611b16565b6116d8816118d0565b3361174d7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610b9b5760405163118cdaa760e01b8152336004820152602401610f86565b600081156117a9576001600160a01b0384166000908152603060205260409020546117a29084906124b0565b90506117d0565b6001600160a01b0384166000908152603060205260409020546117cd9084906124d9565b90505b6001600160a01b03841660008181526030602052604090819020839055517fc390e3f2bc31f51fdc4bd3047286a04a1c1599a680905f1bfa2be1aad419cd0b9061181d9084815260200190565b60405180910390a250505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806118b257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166118a66000805160206126c3833981519152546001600160a01b031690565b6001600160a01b031614155b15610b9b5760405163703e46dd60e11b815260040160405180910390fd5b6116d861171b565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611932575060408051601f3d908101601f1916820190925261192f918101906124ec565b60015b61195a57604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610f86565b6000805160206126c3833981519152811461198b57604051632a87526960e21b815260048101829052602401610f86565b610d2c8383611e5a565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b9b5760405163703e46dd60e11b815260040160405180910390fd5b60006001600160a01b038316611a0757604051631dcb38eb60e11b815260040160405180910390fd5b81600003611a1757506000610e3b565b6000836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7b9190612505565b905060128160ff161015611ade576000611a96826012612528565b611aa190600a612625565b9050611aad818561264a565b15611acb57604051630f51ac8560e31b815260040160405180910390fd5b611ad5818561265e565b92505050610e3b565b60128160ff161115611b0e576000611af7601283612528565b611b0290600a612625565b9050611ad58185612672565b509092915050565b60008115611b4c576001600160a01b038416600090815260306020526040902060020154611b459084906124b0565b9050611b76565b6001600160a01b038416600090815260306020526040902060020154611b739084906124d9565b90505b6001600160a01b03841660008181526030602052604090819020600201839055517f8d604eda868a7b9c2f2273874a8e2a1d0c8bc43e8785b85d31d4dd0d4f338cb99061181d9084815260200190565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610d2c908490611eb0565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805460011901611ccd57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b60008115611d2c576001600160a01b038416600090815260316020526040902054611d259084906124b0565b9050611d53565b6001600160a01b038416600090815260316020526040902054611d509084906124d9565b90505b6001600160a01b03841660008181526031602052604090819020839055517f55aa865d22662754b07f0f094fb36e367aa1154f9c1bea09328be565209900619061181d9084815260200190565b611da8611f13565b6116d881611f5c565b611db9611f13565b610b9b611f64565b610b9b611f13565b6001600160a01b038083166000908152603260209081526040808320938716835290839052812054611dfc9084906124b0565b6001600160a01b038681166000818152602086815260409182902085905590518481529394509092918716917fa6453751e8d23eb578604a3bd6b2d4a2b4fdcb738fa16dfa462085ce4232960f910160405180910390a35050505050565b611e6382611f6c565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611ea857610d2c8282611fd1565b610a03612047565b6000611ec56001600160a01b03841683612066565b90508051600014158015611eea575080806020019051810190611ee89190612689565b155b15610d2c57604051635274afe760e01b81526001600160a01b0384166004820152602401610f86565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610b9b57604051631afcd79f60e31b815260040160405180910390fd5b6116a5611f13565b611cd3611f13565b806001600160a01b03163b600003611fa257604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610f86565b6000805160206126c383398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051611fee91906126a6565b600060405180830381855af49150503d8060008114612029576040519150601f19603f3d011682016040523d82523d6000602084013e61202e565b606091505b509150915061203e85838361207b565b95945050505050565b3415610b9b5760405163b398979f60e01b815260040160405180910390fd5b6060612074838360006120d7565b9392505050565b6060826120905761208b82612174565b612074565b81511580156120a757506001600160a01b0384163b155b156120d057604051639996b31560e01b81526001600160a01b0385166004820152602401610f86565b5092915050565b6060814710156120fc5760405163cd78605960e01b8152306004820152602401610f86565b600080856001600160a01b0316848660405161211891906126a6565b60006040518083038185875af1925050503d8060008114612155576040519150601f19603f3d011682016040523d82523d6000602084013e61215a565b606091505b509150915061216a86838361207b565b9695505050505050565b8051156121845780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b03811681146121b457600080fd5b919050565b6000602082840312156121cb57600080fd5b6120748261219d565b600080604083850312156121e757600080fd5b6121f08361219d565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561222757600080fd5b6122308361219d565b9150602083013567ffffffffffffffff8082111561224d57600080fd5b818501915085601f83011261226157600080fd5b813581811115612273576122736121fe565b604051601f8201601f19908116603f0116810190838211818310171561229b5761229b6121fe565b816040528281528860208487010111156122b457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080604083850312156122e957600080fd5b6122f28361219d565b91506123006020840161219d565b90509250929050565b60008060006060848603121561231e57600080fd5b6123278461219d565b92506123356020850161219d565b9150604084013590509250925092565b60008060006060848603121561235a57600080fd5b6123638461219d565b95602085013595506040909401359392505050565b60005b8381101561239357818101518382015260200161237b565b50506000910152565b60208152600082518060208401526123bb816040850160208701612378565b601f01601f19169190910160400192915050565b600080602083850312156123e257600080fd5b823567ffffffffffffffff808211156123fa57600080fd5b818501915085601f83011261240e57600080fd5b81358181111561241d57600080fd5b8660208260051b850101111561243257600080fd5b60209290920196919550909350505050565b80151581146116d857600080fd5b6000806000806080858703121561246857600080fd5b6124718561219d565b93506020850135925060408501359150606085013561248f81612444565b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610e3b57610e3b61249a565b634e487b7160e01b600052603260045260246000fd5b81810381811115610e3b57610e3b61249a565b6000602082840312156124fe57600080fd5b5051919050565b60006020828403121561251757600080fd5b815160ff8116811461207457600080fd5b60ff8281168282160390811115610e3b57610e3b61249a565b600181815b8085111561257c5781600019048211156125625761256261249a565b8085161561256f57918102915b93841c9390800290612546565b509250929050565b60008261259357506001610e3b565b816125a057506000610e3b565b81600181146125b657600281146125c0576125dc565b6001915050610e3b565b60ff8411156125d1576125d161249a565b50506001821b610e3b565b5060208310610133831016604e8410600b84101617156125ff575081810a610e3b565b6126098383612541565b806000190482111561261d5761261d61249a565b029392505050565b600061207460ff841683612584565b634e487b7160e01b600052601260045260246000fd5b60008261265957612659612634565b500690565b60008261266d5761266d612634565b500490565b8082028115828204841417610e3b57610e3b61249a565b60006020828403121561269b57600080fd5b815161207481612444565b600082516126b8818460208701612378565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca164736f6c6343000817000a",
  "deployedBytecode": "0x6080604052600436106102885760003560e01c8063a0a349561161015a578063c7310f1a116100c1578063f1c05a7e1161007a578063f1c05a7e14610894578063f2fde38b146108b4578063f6b128ec146108d4578063f8d89898146108f4578063f91dff7214610914578063fe0607331461095b57600080fd5b8063c7310f1a146107ad578063c8564c62146107cd578063cc8b21e4146107fe578063ce307ca61461081e578063d80362041461083e578063f0690b291461085e57600080fd5b8063b429464111610113578063b4294641146106ed578063b95717211461070d578063c05c5e941461072d578063c415b95c1461074d578063c4d66de81461076d578063c5f956af1461078d57600080fd5b8063a0a34956146105f5578063a3f4df7e14610615578063a47055e71461065c578063ad3cb1cc1461067c578063b08a613e146106ad578063b1113882146106cd57600080fd5b806355dafa46116101fe578063715aa61b116101b7578063715aa61b1461051857806372caf7a814610538578063741bef1a1461055857806377553ad4146105785780638da5cb5b1461059857806395fb16bb146105d557600080fd5b806355dafa46146104315780635728ddda146104515780636592aa7a146104715780636789ec9a146104aa5780636a85d67d146104e3578063715018a61461050357600080fd5b806340ea8dea1161025057806340ea8dea1461034c5780634169467d146103935780634bc66f32146103b35780634f1ef286146103d357806351722f7b146103e657806352d1902d1461041c57600080fd5b806301c931001461028d578063048c661d146102af5780630a34d4d6146102ec578063181a023b1461030c5780633f84a44d1461032c575b600080fd5b34801561029957600080fd5b506102ad6102a83660046121b9565b61097b565b005b3480156102bb57600080fd5b506009546102cf906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102f857600080fd5b50600d546102cf906001600160a01b031681565b34801561031857600080fd5b506102ad6103273660046121d4565b6109cc565b34801561033857600080fd5b50600e546102cf906001600160a01b031681565b34801561035857600080fd5b506103856103673660046121b9565b6001600160a01b031660009081526030602052604090206001015490565b6040519081526020016102e3565b34801561039f57600080fd5b506005546102cf906001600160a01b031681565b3480156103bf57600080fd5b50600a546102cf906001600160a01b031681565b6102ad6103e1366004612214565b610a07565b3480156103f257600080fd5b506103856104013660046121b9565b6001600160a01b031660009081526031602052604090205490565b34801561042857600080fd5b50610385610a22565b34801561043d57600080fd5b506006546102cf906001600160a01b031681565b34801561045d57600080fd5b506102ad61046c3660046122d6565b610a3f565b34801561047d57600080fd5b5061038561048c3660046121b9565b6001600160a01b031660009081526030602052604090206002015490565b3480156104b657600080fd5b506103856104c53660046121b9565b6001600160a01b031660009081526031602052604090206001015490565b3480156104ef57600080fd5b506102ad6104fe3660046121b9565b610b38565b34801561050f57600080fd5b506102ad610b89565b34801561052457600080fd5b506102ad610533366004612309565b610b9d565b34801561054457600080fd5b506102ad6105533660046121d4565b610d31565b34801561056457600080fd5b506007546102cf906001600160a01b031681565b34801561058457600080fd5b506001546102cf906001600160a01b031681565b3480156105a457600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166102cf565b3480156105e157600080fd5b506002546102cf906001600160a01b031681565b34801561060157600080fd5b506102ad610610366004612345565b610d68565b34801561062157600080fd5b5061064f6040518060400160405280600e81526020016d5472656e426f7853746f7261676560901b81525081565b6040516102e3919061239c565b34801561066857600080fd5b506102ad6106773660046121d4565b610dab565b34801561068857600080fd5b5061064f604051806040016040528060058152602001640352e302e360dc1b81525081565b3480156106b957600080fd5b506103856106c83660046121b9565b610e12565b3480156106d957600080fd5b506102ad6106e83660046121d4565b610e41565b3480156106f957600080fd5b506103856107083660046121b9565b610e78565b34801561071957600080fd5b506102ad6107283660046123cf565b610ea1565b34801561073957600080fd5b506000546102cf906001600160a01b031681565b34801561075957600080fd5b506004546102cf906001600160a01b031681565b34801561077957600080fd5b506102ad6107883660046121b9565b61134a565b34801561079957600080fd5b50600b546102cf906001600160a01b031681565b3480156107b957600080fd5b506102ad6107c8366004612452565b61146a565b3480156107d957600080fd5b50600e546107ee90600160a01b900460ff1681565b60405190151581526020016102e3565b34801561080a57600080fd5b506008546102cf906001600160a01b031681565b34801561082a57600080fd5b506102ad6108393660046121d4565b611630565b34801561084a57600080fd5b506102ad610859366004612309565b611667565b34801561086a57600080fd5b506103856108793660046121b9565b6001600160a01b031660009081526030602052604090205490565b3480156108a057600080fd5b50600c546102cf906001600160a01b031681565b3480156108c057600080fd5b506102ad6108cf3660046121b9565b61169d565b3480156108e057600080fd5b506102ad6108ef366004612309565b6116db565b34801561090057600080fd5b506003546102cf906001600160a01b031681565b34801561092057600080fd5b5061038561092f3660046122d6565b6001600160a01b0380821660009081526032602090815260408083209386168352929052205492915050565b34801561096757600080fd5b506102ad6109763660046121b9565b611712565b61098361171b565b6001600160a01b0381166109aa576040516385d3330760e01b815260040160405180910390fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b600d546001600160a01b031633146109f75760405163191c47c560e31b815260040160405180910390fd5b610a0382826000611776565b5050565b610a0f61182b565b610a18826118d0565b610a0382826118d8565b6000610a2c611995565b506000805160206126c383398151915290565b6001546001600160a01b03163314610a6a5760405163722c395560e11b815260040160405180910390fd5b6001600160a01b03808216600090815260326020908152604080832093861683529083905281205490610a9d85836119de565b905080600003610ac057604051632a1db15b60e11b815260040160405180910390fd5b6001600160a01b038581166000818152602086815260408083208390555191825291928716917fa6453751e8d23eb578604a3bd6b2d4a2b4fdcb738fa16dfa462085ce4232960f910160405180910390a3610b1d85836000611b16565b610b316001600160a01b0386168583611bc6565b5050505050565b610b4061171b565b6001600160a01b038116610b675760405163706ebc6560e11b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b610b9161171b565b610b9b6000611c18565b565b610ba5611c89565b6001546001600160a01b03163314801590610bcb57506009546001600160a01b03163314155b8015610be25750600c546001600160a01b03163314155b15610c005760405163a59d25af60e01b815260040160405180910390fd5b6000610c0c84836119de565b905080600003610c1c5750610d03565b610c2884836000611776565b610c3c6001600160a01b0385168483611bc6565b6009546001600160a01b03848116911603610cb457604051633ac5bc0160e21b81526001600160a01b0385811660048301526024820184905284169063eb16f00490604401600060405180830381600087803b158015610c9b57600080fd5b505af1158015610caf573d6000803e3d6000fd5b505050505b836001600160a01b0316836001600160a01b03167fe664153eb516123e000bb334869ec912418f6fe4c1abb53fe2f848c947a8405d83604051610cf991815260200190565b60405180910390a3505b610d2c60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b505050565b6001546001600160a01b03163314610d5c5760405163722c395560e11b815260040160405180910390fd5b610a0382826001611cf9565b600c546001600160a01b03163314610d9357604051630294661b60e61b815260040160405180910390fd5b610d9f83836000611cf9565b610d2c83826000611776565b6001546001600160a01b03163314801590610dd157506009546001600160a01b03163314155b8015610de85750600c546001600160a01b03163314155b15610e065760405163a59d25af60e01b815260040160405180910390fd5b610a0382826000611cf9565b6001600160a01b038116600090815260306020526040812060018101549054610e3b91906124b0565b92915050565b6001546001600160a01b03163314610e6c5760405163722c395560e11b815260040160405180910390fd5b610a0382826001611776565b6001600160a01b038116600090815260316020526040812060018101549054610e3b91906124b0565b610ea961171b565b600e54600160a01b900460ff1615610ed357604051625f22e960e41b815260040160405180910390fd5b600d8114610ef457604051633f5a111d60e21b815260040160405180910390fd5b60005b600d811015610f97576000838383818110610f1457610f146124c3565b9050602002016020810190610f2991906121b9565b6001600160a01b031603610f8f5780838383818110610f4a57610f4a6124c3565b9050602002016020810190610f5f91906121b9565b604051630d9d339f60e01b815260048101929092526001600160a01b031660248201526044015b60405180910390fd5b600101610ef7565b5081816000818110610fab57610fab6124c3565b9050602002016020810190610fc091906121b9565b600080546001600160a01b0319166001600160a01b039290921691909117905581816001818110610ff357610ff36124c3565b905060200201602081019061100891906121b9565b600180546001600160a01b0319166001600160a01b03929092169190911790558181600281811061103b5761103b6124c3565b905060200201602081019061105091906121b9565b600380546001600160a01b0319166001600160a01b039290921691909117815582908290818110611083576110836124c3565b905060200201602081019061109891906121b9565b600480546001600160a01b0319166001600160a01b0392909216919091178155829082908181106110cb576110cb6124c3565b90506020020160208101906110e091906121b9565b600580546001600160a01b0319166001600160a01b039290921691909117815582908290818110611113576111136124c3565b905060200201602081019061112891906121b9565b600780546001600160a01b0319166001600160a01b03929092169190911790558181600681811061115b5761115b6124c3565b905060200201602081019061117091906121b9565b600880546001600160a01b0319166001600160a01b0392909216919091179055818160078181106111a3576111a36124c3565b90506020020160208101906111b891906121b9565b600980546001600160a01b0319166001600160a01b0392909216919091179055818160088181106111eb576111eb6124c3565b905060200201602081019061120091906121b9565b600a80546001600160a01b0319166001600160a01b039290921691909117905581816009818110611233576112336124c3565b905060200201602081019061124891906121b9565b600b80546001600160a01b0319166001600160a01b03929092169190911790558181600a81811061127b5761127b6124c3565b905060200201602081019061129091906121b9565b600c80546001600160a01b0319166001600160a01b03929092169190911790558181600b8181106112c3576112c36124c3565b90506020020160208101906112d891906121b9565b600d80546001600160a01b0319166001600160a01b03929092169190911790558181600c81811061130b5761130b6124c3565b905060200201602081019061132091906121b9565b600e80546001600160a81b0319166001600160a01b039290921691909117600160a01b1790555050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156113905750825b905060008267ffffffffffffffff1660011480156113ad5750303b155b9050811580156113bb575080155b156113d95760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561140357845460ff60401b1916600160401b1785555b61140c86611da0565b611414611db1565b61141c611dc1565b831561146257845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b600c546001600160a01b0316331461149557604051630294661b60e61b815260040160405180910390fd5b600080821561150d576114aa86866001611cf9565b6001600160a01b0386166000908152603160205260409020600101546114d19086906124d9565b91506114df86856001611776565b6001600160a01b0386166000908152603060205260409020600101546115069085906124d9565b9050611578565b61151986866000611cf9565b6001600160a01b0386166000908152603160205260409020600101546115409086906124b0565b915061154e86856000611776565b6001600160a01b0386166000908152603060205260409020600101546115759085906124b0565b90505b6001600160a01b03861660008181526031602052604090819020600101849055517f3f1e46f4054899e979b9337ce8efa0ceb3be5aad7e82d472fdbf9f9709728fa0906115c89085815260200190565b60405180910390a26001600160a01b03861660008181526030602052604090819020600101839055517ff4cf0c4148db272742be0726f71685ac1a586f91c5f32f6c5cda10eeccd16af5906116209084815260200190565b60405180910390a2505050505050565b600d546001600160a01b0316331461165b5760405163191c47c560e31b815260040160405180910390fd5b610a0382826001611b16565b600d546001600160a01b031633146116925760405163191c47c560e31b815260040160405180910390fd5b610d2c838383611dc9565b6116a561171b565b6001600160a01b0381166116cf57604051631e4fbdf760e01b815260006004820152602401610f86565b6116d881611c18565b50565b600c546001600160a01b0316331461170657604051630294661b60e61b815260040160405180910390fd5b61169283826001611b16565b6116d8816118d0565b3361174d7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610b9b5760405163118cdaa760e01b8152336004820152602401610f86565b600081156117a9576001600160a01b0384166000908152603060205260409020546117a29084906124b0565b90506117d0565b6001600160a01b0384166000908152603060205260409020546117cd9084906124d9565b90505b6001600160a01b03841660008181526030602052604090819020839055517fc390e3f2bc31f51fdc4bd3047286a04a1c1599a680905f1bfa2be1aad419cd0b9061181d9084815260200190565b60405180910390a250505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806118b257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166118a66000805160206126c3833981519152546001600160a01b031690565b6001600160a01b031614155b15610b9b5760405163703e46dd60e11b815260040160405180910390fd5b6116d861171b565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611932575060408051601f3d908101601f1916820190925261192f918101906124ec565b60015b61195a57604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610f86565b6000805160206126c3833981519152811461198b57604051632a87526960e21b815260048101829052602401610f86565b610d2c8383611e5a565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b9b5760405163703e46dd60e11b815260040160405180910390fd5b60006001600160a01b038316611a0757604051631dcb38eb60e11b815260040160405180910390fd5b81600003611a1757506000610e3b565b6000836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7b9190612505565b905060128160ff161015611ade576000611a96826012612528565b611aa190600a612625565b9050611aad818561264a565b15611acb57604051630f51ac8560e31b815260040160405180910390fd5b611ad5818561265e565b92505050610e3b565b60128160ff161115611b0e576000611af7601283612528565b611b0290600a612625565b9050611ad58185612672565b509092915050565b60008115611b4c576001600160a01b038416600090815260306020526040902060020154611b459084906124b0565b9050611b76565b6001600160a01b038416600090815260306020526040902060020154611b739084906124d9565b90505b6001600160a01b03841660008181526030602052604090819020600201839055517f8d604eda868a7b9c2f2273874a8e2a1d0c8bc43e8785b85d31d4dd0d4f338cb99061181d9084815260200190565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610d2c908490611eb0565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805460011901611ccd57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b60008115611d2c576001600160a01b038416600090815260316020526040902054611d259084906124b0565b9050611d53565b6001600160a01b038416600090815260316020526040902054611d509084906124d9565b90505b6001600160a01b03841660008181526031602052604090819020839055517f55aa865d22662754b07f0f094fb36e367aa1154f9c1bea09328be565209900619061181d9084815260200190565b611da8611f13565b6116d881611f5c565b611db9611f13565b610b9b611f64565b610b9b611f13565b6001600160a01b038083166000908152603260209081526040808320938716835290839052812054611dfc9084906124b0565b6001600160a01b038681166000818152602086815260409182902085905590518481529394509092918716917fa6453751e8d23eb578604a3bd6b2d4a2b4fdcb738fa16dfa462085ce4232960f910160405180910390a35050505050565b611e6382611f6c565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611ea857610d2c8282611fd1565b610a03612047565b6000611ec56001600160a01b03841683612066565b90508051600014158015611eea575080806020019051810190611ee89190612689565b155b15610d2c57604051635274afe760e01b81526001600160a01b0384166004820152602401610f86565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610b9b57604051631afcd79f60e31b815260040160405180910390fd5b6116a5611f13565b611cd3611f13565b806001600160a01b03163b600003611fa257604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610f86565b6000805160206126c383398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051611fee91906126a6565b600060405180830381855af49150503d8060008114612029576040519150601f19603f3d011682016040523d82523d6000602084013e61202e565b606091505b509150915061203e85838361207b565b95945050505050565b3415610b9b5760405163b398979f60e01b815260040160405180910390fd5b6060612074838360006120d7565b9392505050565b6060826120905761208b82612174565b612074565b81511580156120a757506001600160a01b0384163b155b156120d057604051639996b31560e01b81526001600160a01b0385166004820152602401610f86565b5092915050565b6060814710156120fc5760405163cd78605960e01b8152306004820152602401610f86565b600080856001600160a01b0316848660405161211891906126a6565b60006040518083038185875af1925050503d8060008114612155576040519150601f19603f3d011682016040523d82523d6000602084013e61215a565b606091505b509150915061216a86838361207b565b9695505050505050565b8051156121845780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b03811681146121b457600080fd5b919050565b6000602082840312156121cb57600080fd5b6120748261219d565b600080604083850312156121e757600080fd5b6121f08361219d565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561222757600080fd5b6122308361219d565b9150602083013567ffffffffffffffff8082111561224d57600080fd5b818501915085601f83011261226157600080fd5b813581811115612273576122736121fe565b604051601f8201601f19908116603f0116810190838211818310171561229b5761229b6121fe565b816040528281528860208487010111156122b457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080604083850312156122e957600080fd5b6122f28361219d565b91506123006020840161219d565b90509250929050565b60008060006060848603121561231e57600080fd5b6123278461219d565b92506123356020850161219d565b9150604084013590509250925092565b60008060006060848603121561235a57600080fd5b6123638461219d565b95602085013595506040909401359392505050565b60005b8381101561239357818101518382015260200161237b565b50506000910152565b60208152600082518060208401526123bb816040850160208701612378565b601f01601f19169190910160400192915050565b600080602083850312156123e257600080fd5b823567ffffffffffffffff808211156123fa57600080fd5b818501915085601f83011261240e57600080fd5b81358181111561241d57600080fd5b8660208260051b850101111561243257600080fd5b60209290920196919550909350505050565b80151581146116d857600080fd5b6000806000806080858703121561246857600080fd5b6124718561219d565b93506020850135925060408501359150606085013561248f81612444565b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610e3b57610e3b61249a565b634e487b7160e01b600052603260045260246000fd5b81810381811115610e3b57610e3b61249a565b6000602082840312156124fe57600080fd5b5051919050565b60006020828403121561251757600080fd5b815160ff8116811461207457600080fd5b60ff8281168282160390811115610e3b57610e3b61249a565b600181815b8085111561257c5781600019048211156125625761256261249a565b8085161561256f57918102915b93841c9390800290612546565b509250929050565b60008261259357506001610e3b565b816125a057506000610e3b565b81600181146125b657600281146125c0576125dc565b6001915050610e3b565b60ff8411156125d1576125d161249a565b50506001821b610e3b565b5060208310610133831016604e8410600b84101617156125ff575081810a610e3b565b6126098383612541565b806000190482111561261d5761261d61249a565b029392505050565b600061207460ff841683612584565b634e487b7160e01b600052601260045260246000fd5b60008261265957612659612634565b500690565b60008261266d5761266d612634565b500490565b8082028115828204841417610e3b57610e3b61249a565b60006020828403121561269b57600080fd5b815161207481612444565b600082516126b8818460208701612378565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca164736f6c6343000817000a",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ],
      "TrenBoxStorage__BorrowerOperationsOnly()": [
        {
          "details": "Error emitted when only BorrowerOperations is allowed."
        }
      ],
      "TrenBoxStorage__BorrowerOperationsOrTrenBoxManagerOnly()": [
        {
          "details": "Error emitted when only BorrowerOperations or TrenBoxManager can perform an operation."
        }
      ],
      "TrenBoxStorage__NoClaimableCollateral()": [
        {
          "details": "Error emitted when there is no claimable collateral available."
        }
      ],
      "TrenBoxStorage__NotAuthorizedContract()": [
        {
          "details": "Error emitted when contract is not authorized."
        }
      ],
      "TrenBoxStorage__TrenBoxManagerOnly()": [
        {
          "details": "Error emitted when only TrenBoxManager is allowed."
        }
      ],
      "TrenBoxStorage__TrenBoxManagerOperationsOnly()": [
        {
          "details": "Error emitted when only TrenBoxManagerOperations is allowed."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "ActiveCollateralBalanceUpdated(address,uint256)": {
        "details": "Emitted when the active collateral balance is updated.",
        "params": {
          "_collateral": "The address of the collateral asset.",
          "_newBalance": "The new active collateral balance."
        }
      },
      "ActiveDebtBalanceUpdated(address,uint256)": {
        "details": "Emitted when the active debt balance is updated.",
        "params": {
          "_collateral": "The address of the collateral asset.",
          "_newBalance": "The new active debt balance."
        }
      },
      "ClaimableCollateralBalanceUpdated(address,uint256)": {
        "details": "Emitted when the claimable collateral balance is updated.",
        "params": {
          "_collateral": "The address of the collateral asset.",
          "_newBalance": "The new claimable collateral balance."
        }
      },
      "CollateralSent(address,address,uint256)": {
        "details": "Emitted when collateral is sent.",
        "params": {
          "_amount": "The amount of collateral sent.",
          "_collateral": "The address of the collateral asset.",
          "_to": "The address of the user which get collateral amount."
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "LiquidatedCollateralBalanceUpdated(address,uint256)": {
        "details": "Emitted when the liquidated collateral balance is updated.",
        "params": {
          "_collateral": "The address of the collateral asset.",
          "_newBalance": "The new liquidated collateral balance."
        }
      },
      "LiquidatedDebtBalanceUpdated(address,uint256)": {
        "details": "Emitted when the liquidated debt balance is updated.",
        "params": {
          "_collateral": "The address of the collateral asset.",
          "_newBalance": "The new liquidated debt balance."
        }
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      },
      "UserClaimableCollateralBalanceUpdated(address,address,uint256)": {
        "details": "Emitted when the user claimable collateral balance is updated.",
        "params": {
          "_account": "The address of the user.",
          "_collateral": "The address of the collateral asset.",
          "_newBalance": "The new user claimable collateral balance."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "claimCollateral(address,address)": {
        "params": {
          "_account": "The address of the user to send.",
          "_collateral": "The address of the collateral asset."
        }
      },
      "decreaseActiveBalancesAfterRedemption(address,uint256,uint256)": {
        "params": {
          "_collAmount": "The amount to decrease the collateral balance.",
          "_collateral": "The address of the collateral asset.",
          "_debtAmount": "The amount to decrease the debt balance."
        }
      },
      "decreaseActiveCollateral(address,uint256)": {
        "params": {
          "_amount": "The amount to decrease the collateral balance.",
          "_collateral": "The address of the collateral asset."
        }
      },
      "decreaseActiveDebt(address,uint256)": {
        "params": {
          "_amount": "The amount to decrease the debt balance.",
          "_collateral": "The address of the collateral asset."
        }
      },
      "getActiveCollateralBalance(address)": {
        "params": {
          "_collateral": "The address of the collateral asset."
        }
      },
      "getActiveDebtBalance(address)": {
        "params": {
          "_collateral": "The address of the collateral asset."
        }
      },
      "getClaimableCollateralBalance(address)": {
        "params": {
          "_collateral": "The address of the collateral asset."
        }
      },
      "getLiquidatedCollateralBalance(address)": {
        "params": {
          "_collateral": "The address of the collateral asset."
        }
      },
      "getLiquidatedDebtBalance(address)": {
        "params": {
          "_collateral": "The address of the collateral asset."
        }
      },
      "getTotalCollateralBalance(address)": {
        "params": {
          "_collateral": "The address of the collateral asset."
        }
      },
      "getTotalDebtBalance(address)": {
        "params": {
          "_collateral": "The address of the collateral asset."
        }
      },
      "getUserClaimableCollateralBalance(address,address)": {
        "params": {
          "_account": "The address of the user.",
          "_collateral": "The address of the collateral asset."
        }
      },
      "increaseActiveCollateral(address,uint256)": {
        "params": {
          "_amount": "The amount to increase the debt balance.",
          "_collateral": "The address of the collateral asset."
        }
      },
      "increaseActiveDebt(address,uint256)": {
        "params": {
          "_amount": "The amount to increase the debt balance.",
          "_collateral": "The address of the collateral asset."
        }
      },
      "increaseClaimableCollateral(address,uint256)": {
        "params": {
          "_amount": "The amount to increase the claimable collateral balance.",
          "_collateral": "The address of the collateral asset."
        }
      },
      "initialize(address)": {
        "details": "Sets an intiial owner for the contract.",
        "params": {
          "initialOwner": "The address of initial owner."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "sendCollateral(address,address,uint256)": {
        "params": {
          "_account": "The address of the user to send.",
          "_amount": "The amount of the collateral to send.",
          "_collateral": "The address of the collateral asset."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateDebtAndCollateralBalances(address,uint256,uint256,bool)": {
        "params": {
          "_collAmount": "The amount to decrease the collateral balance.",
          "_collateral": "The address of the collateral asset.",
          "_debtAmount": "The amount to decrease the debt balance.",
          "_isActiveIncrease": "The indicator that shows increasing or decreasing of active balances."
        }
      },
      "updateUserAndEntireClaimableBalance(address,address,uint256)": {
        "params": {
          "_account": "The address of the user.",
          "_amount": "The amount to update the claimable balance.",
          "_collateral": "The address of the collateral asset."
        }
      },
      "updateUserClaimableBalance(address,address,uint256)": {
        "params": {
          "_account": "The address of the user.",
          "_amount": "The amount to update the claimable balance.",
          "_collateral": "The address of the collateral asset."
        }
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "A contract storage of the collateral amount, debt and gas compensation for each TrenBox.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "NAME()": {
        "notice": "The contract name."
      },
      "claimCollateral(address,address)": {
        "notice": "Sends amount of claimable collateral from contract to user."
      },
      "decreaseActiveBalancesAfterRedemption(address,uint256,uint256)": {
        "notice": "Decreases the active balances of debt and collateral for a specific collateral after redemption exists."
      },
      "decreaseActiveCollateral(address,uint256)": {
        "notice": "Decreases the active balance for a specific collateral asset."
      },
      "decreaseActiveDebt(address,uint256)": {
        "notice": "Decreases the active debt balance for a specific collateral asset."
      },
      "getActiveCollateralBalance(address)": {
        "notice": "Returns the active collateral balance for a specific collateral asset."
      },
      "getActiveDebtBalance(address)": {
        "notice": "Returns the active debt balance for a specific collateral asset."
      },
      "getClaimableCollateralBalance(address)": {
        "notice": "Returns the claimable collateral balance for a specific collateral asset."
      },
      "getLiquidatedCollateralBalance(address)": {
        "notice": "Returns the liquidated collateral balance for a specific collateral asset."
      },
      "getLiquidatedDebtBalance(address)": {
        "notice": "Returns the liquidated debt balance for a specific collateral asset."
      },
      "getTotalCollateralBalance(address)": {
        "notice": "Returns sum of active and liquidated amount of a specific collateral asset."
      },
      "getTotalDebtBalance(address)": {
        "notice": "Returns sum of active and liquidated debt for a specific collateral asset."
      },
      "getUserClaimableCollateralBalance(address,address)": {
        "notice": "Returns the claimable collateral balance for a specific user."
      },
      "increaseActiveCollateral(address,uint256)": {
        "notice": "Increases the active balance for a specific collateral asset."
      },
      "increaseActiveDebt(address,uint256)": {
        "notice": "Increases the active debt balance for a specific collateral asset."
      },
      "increaseClaimableCollateral(address,uint256)": {
        "notice": "Increases the claimable collateral balance for a specific collateral asset."
      },
      "sendCollateral(address,address,uint256)": {
        "notice": "Sends amount of active collateral from contract to user."
      },
      "updateDebtAndCollateralBalances(address,uint256,uint256,bool)": {
        "notice": "Updates the active and liquidated debt and collateral balances."
      },
      "updateUserAndEntireClaimableBalance(address,address,uint256)": {
        "notice": "Updates the entire and user claimable balance for a specific collateral asset."
      },
      "updateUserClaimableBalance(address,address,uint256)": {
        "notice": "Updates the claimable collateral balance of the user for a specific collateral asset."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8946,
        "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
        "label": "adminContract",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8948,
        "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
        "label": "borrowerOperations",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8950,
        "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
        "label": "communityIssuance",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8952,
        "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
        "label": "debtToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8954,
        "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
        "label": "feeCollector",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 8956,
        "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
        "label": "flashLoanAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 8958,
        "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
        "label": "trenStaking",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 8960,
        "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
        "label": "priceFeed",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 8962,
        "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
        "label": "sortedTrenBoxes",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 8964,
        "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 8966,
        "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
        "label": "timelockAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 8968,
        "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 8970,
        "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
        "label": "trenBoxManager",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 8972,
        "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
        "label": "trenBoxManagerOperations",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 8974,
        "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
        "label": "trenBoxStorage",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 8976,
        "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
        "label": "isAddressSetupInitialized",
        "offset": 20,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 8981,
        "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
        "label": "__gap",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_uint256)33_storage"
      },
      {
        "astId": 27434,
        "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
        "label": "collateralBalances",
        "offset": 0,
        "slot": "48",
        "type": "t_mapping(t_address,t_struct(CollBalances)13727_storage)"
      },
      {
        "astId": 27440,
        "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
        "label": "debtBalances",
        "offset": 0,
        "slot": "49",
        "type": "t_mapping(t_address,t_struct(DebtBalances)13719_storage)"
      },
      {
        "astId": 27447,
        "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
        "label": "userClaimableCollateralBalances",
        "offset": 0,
        "slot": "50",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)33_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[33]",
        "numberOfBytes": "1056"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(CollBalances)13727_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ITrenBoxStorage.CollBalances)",
        "numberOfBytes": "32",
        "value": "t_struct(CollBalances)13727_storage"
      },
      "t_mapping(t_address,t_struct(DebtBalances)13719_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ITrenBoxStorage.DebtBalances)",
        "numberOfBytes": "32",
        "value": "t_struct(DebtBalances)13719_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(CollBalances)13727_storage": {
        "encoding": "inplace",
        "label": "struct ITrenBoxStorage.CollBalances",
        "members": [
          {
            "astId": 13722,
            "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
            "label": "active",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13724,
            "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
            "label": "liquidated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13726,
            "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
            "label": "claimable",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(DebtBalances)13719_storage": {
        "encoding": "inplace",
        "label": "struct ITrenBoxStorage.DebtBalances",
        "members": [
          {
            "astId": 13716,
            "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
            "label": "active",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13718,
            "contract": "contracts/TrenBoxStorage.sol:TrenBoxStorage",
            "label": "liquidated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}