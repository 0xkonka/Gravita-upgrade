{
  "address": "0x232A0Ad55A02E39A5216Be9C78e9Ad7587Afcc3e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__CommunityIssuanceZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__LengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__SetupIsInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConfigurableAddresses__TRENStakingZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "address_",
          "type": "address"
        }
      ],
      "name": "ConfigurableAddresses__ZeroAddresses",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "feePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "TrenBase__FeeExceededMax",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TrenBoxManager__FeeBiggerThanAssetDraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TrenBoxManager__OnlyBorrowerOperations",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TrenBoxManager__OnlyOneTrenBox",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TrenBoxManager__OnlyTrenBoxManagerOperations",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TrenBoxManager__OnlyTrenBoxManagerOperationsOrBorrowerOperations",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_baseRate",
          "type": "uint256"
        }
      ],
      "name": "BaseRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_Coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_Debt",
          "type": "uint256"
        }
      ],
      "name": "LTermsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lastFeeOpTime",
          "type": "uint256"
        }
      ],
      "name": "LastFeeOpTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalStakesSnapshot",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalCollateralSnapshot",
          "type": "uint256"
        }
      ],
      "name": "SystemSnapshotsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newTotalStakes",
          "type": "uint256"
        }
      ],
      "name": "TotalStakesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newIndex",
          "type": "uint256"
        }
      ],
      "name": "TrenBoxIndexUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_Coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_Debt",
          "type": "uint256"
        }
      ],
      "name": "TrenBoxSnapshotsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ITrenBoxManager.TrenBoxManagerOperation",
          "name": "_operation",
          "type": "uint8"
        }
      ],
      "name": "TrenBoxUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BETA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "L_Colls",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accumulatedRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "L_Debts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accumulatedRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINUTE_DECAY_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_IN_ONE_MINUTE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "TrenBoxes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "enum ITrenBoxManager.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "arrayIndex",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "addTrenBoxOwnerToArray",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "applyPendingRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "authorizeUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "baseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "checkRecoveryMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "closeTrenBox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "closeTrenBoxLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtTokenGasCompensation",
          "type": "uint256"
        }
      ],
      "name": "closeTrenBoxRedistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityIssuance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collDecrease",
          "type": "uint256"
        }
      ],
      "name": "decreaseTrenBoxColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newColl",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtDecrease",
          "type": "uint256"
        }
      ],
      "name": "decreaseTrenBoxDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newColl",
          "type": "uint256"
        }
      ],
      "name": "executeFullRedemption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newColl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newNICR",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperPartialRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerPartialRedemptionHint",
          "type": "address"
        }
      ],
      "name": "executePartialRedemption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtToRedeem",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_assetFeeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_assetRedeemedAmount",
          "type": "uint256"
        }
      ],
      "name": "finalizeRedemption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        }
      ],
      "name": "getBorrowingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getBorrowingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "getCurrentICR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getEntireDebtAndColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingDebtReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingCollReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getEntireSystemColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemColl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getEntireSystemDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        }
      ],
      "name": "getNetDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getNominalICR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getPendingAssetReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getPendingDebtTokenReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_assetDraw",
          "type": "uint256"
        }
      ],
      "name": "getRedemptionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_assetDraw",
          "type": "uint256"
        }
      ],
      "name": "getRedemptionFeeWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getRedemptionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getRedemptionRateWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "getTCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTrenBoxColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTrenBoxDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getTrenBoxFromTrenBoxOwnersArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getTrenBoxOwnersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTrenBoxStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTrenBoxStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "hasPendingRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collIncrease",
          "type": "uint256"
        }
      ],
      "name": "increaseTrenBoxColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newColl",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtIncrease",
          "type": "uint256"
        }
      ],
      "name": "increaseTrenBoxDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAddressSetupInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "isTrenBoxActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_firstRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "isValidFirstRedemptionHint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "lastCollError_Redistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateralError",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "lastDebtError_Redistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtError",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "lastFeeOperationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feeOpeartionTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_assetAmount",
          "type": "uint256"
        }
      ],
      "name": "movePendingTrenBoxRewardsFromLiquidatedToActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debtToOffset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collToSendToStabilityPool",
          "type": "uint256"
        }
      ],
      "name": "redistributeDebtAndColl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "removeStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "rewardSnapshots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "asset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_assetAmount",
          "type": "uint256"
        }
      ],
      "name": "sendGasCompensation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_communityIssuance",
          "type": "address"
        }
      ],
      "name": "setCommunityIssuance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trenStaking",
          "type": "address"
        }
      ],
      "name": "setTRENStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "setTrenBoxStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTrenBoxes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "totalCollateralSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "totalStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalStake",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "totalStakesSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalStake",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxManagerOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "trenBoxOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "owners",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenBoxStorage",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trenStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_assetDrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalDebtTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "updateBaseRateFromRedemption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "updateStakeAndTotalStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collRemainder",
          "type": "uint256"
        }
      ],
      "name": "updateSystemSnapshots_excludeCollRemainder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "updateTrenBoxRewardSnapshots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc8d72e5defda8347940a813155f415967514ef8af943db4983db43c5448c9945",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x19E733F20aAdaB8996f7895ACBD04f746BF4Aac1",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "4361736",
    "logsBloom": "0x
    "blockHash": "0x79a6ea02dbc8c14f41b4ae2d4ad43ec119cf466f1078a47f5062ce92e1141165",
    "transactionHash": "0xc8d72e5defda8347940a813155f415967514ef8af943db4983db43c5448c9945",
    "logs": [],
    "blockNumber": 19861109,
    "cumulativeGasUsed": "4361736",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "10f736271acd8614150314323b008696",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__CommunityIssuanceZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__SetupIsInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurableAddresses__TRENStakingZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"ConfigurableAddresses__ZeroAddresses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePercentage\",\"type\":\"uint256\"}],\"name\":\"TrenBase__FeeExceededMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrenBoxManager__FeeBiggerThanAssetDraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrenBoxManager__OnlyBorrowerOperations\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrenBoxManager__OnlyOneTrenBox\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrenBoxManager__OnlyTrenBoxManagerOperations\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TrenBoxManager__OnlyTrenBoxManagerOperationsOrBorrowerOperations\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_baseRate\",\"type\":\"uint256\"}],\"name\":\"BaseRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_Coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_Debt\",\"type\":\"uint256\"}],\"name\":\"LTermsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastFeeOpTime\",\"type\":\"uint256\"}],\"name\":\"LastFeeOpTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalStakesSnapshot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalCollateralSnapshot\",\"type\":\"uint256\"}],\"name\":\"SystemSnapshotsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalStakes\",\"type\":\"uint256\"}],\"name\":\"TotalStakesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newIndex\",\"type\":\"uint256\"}],\"name\":\"TrenBoxIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_Coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_Debt\",\"type\":\"uint256\"}],\"name\":\"TrenBoxSnapshotsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ITrenBoxManager.TrenBoxManagerOperation\",\"name\":\"_operation\",\"type\":\"uint8\"}],\"name\":\"TrenBoxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BETA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"L_Colls\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulatedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"L_Debts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulatedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINUTE_DECAY_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_ONE_MINUTE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"TrenBoxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"enum ITrenBoxManager.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"arrayIndex\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"addTrenBoxOwnerToArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"applyPendingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"authorizeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"baseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"checkRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"closeTrenBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"closeTrenBoxLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtTokenGasCompensation\",\"type\":\"uint256\"}],\"name\":\"closeTrenBoxRedistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityIssuance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseTrenBoxColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newColl\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseTrenBoxDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newColl\",\"type\":\"uint256\"}],\"name\":\"executeFullRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newColl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newNICR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperPartialRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerPartialRedemptionHint\",\"type\":\"address\"}],\"name\":\"executePartialRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtToRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetRedeemedAmount\",\"type\":\"uint256\"}],\"name\":\"finalizeRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"}],\"name\":\"getBorrowingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getBorrowingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getCurrentICR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getEntireDebtAndColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingDebtReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingCollReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"}],\"name\":\"getNetDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getNominalICR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getPendingAssetReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getPendingDebtTokenReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetDraw\",\"type\":\"uint256\"}],\"name\":\"getRedemptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetDraw\",\"type\":\"uint256\"}],\"name\":\"getRedemptionFeeWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getRedemptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getRedemptionRateWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getTCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTrenBoxColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTrenBoxDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTrenBoxFromTrenBoxOwnersArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getTrenBoxOwnersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTrenBoxStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTrenBoxStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"hasPendingRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseTrenBoxColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newColl\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseTrenBoxDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAddressSetupInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"isTrenBoxActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_firstRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"isValidFirstRedemptionHint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"lastCollError_Redistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralError\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"lastDebtError_Redistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtError\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"lastFeeOperationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeOpeartionTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"}],\"name\":\"movePendingTrenBoxRewardsFromLiquidatedToActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtToOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collToSendToStabilityPool\",\"type\":\"uint256\"}],\"name\":\"redistributeDebtAndColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"rewardSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"asset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"}],\"name\":\"sendGasCompensation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityIssuance\",\"type\":\"address\"}],\"name\":\"setCommunityIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trenStaking\",\"type\":\"address\"}],\"name\":\"setTRENStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"setTrenBoxStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTrenBoxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"totalCollateralSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"totalStakesSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxManagerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trenBoxOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owners\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenBoxStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trenStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetDrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDebtTokenSupply\",\"type\":\"uint256\"}],\"name\":\"updateBaseRateFromRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"updateStakeAndTotalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collRemainder\",\"type\":\"uint256\"}],\"name\":\"updateSystemSnapshots_excludeCollRemainder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"updateTrenBoxRewardSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TrenBoxManager.sol\":\"TrenBoxManager\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"contracts/Dependencies/ConfigurableAddresses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract ConfigurableAddresses is OwnableUpgradeable {\\n    address public adminContract;\\n    address public borrowerOperations;\\n    address public communityIssuance;\\n    address public debtToken;\\n    address public feeCollector;\\n    address public flashLoanAddress;\\n    address public trenStaking;\\n    address public priceFeed;\\n    address public sortedTrenBoxes;\\n    address public stabilityPool;\\n    address public timelockAddress;\\n    address public treasuryAddress;\\n    address public trenBoxManager;\\n    address public trenBoxManagerOperations;\\n    address public trenBoxStorage;\\n\\n    bool public isAddressSetupInitialized;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[33] private __gap; // Goerli uses 47; Arbitrum uses 33\\n\\n    error ConfigurableAddresses__SetupIsInitialized();\\n    error ConfigurableAddresses__ZeroAddresses(uint256 position, address address_);\\n    error ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n    error ConfigurableAddresses__TRENStakingZeroAddress();\\n    error ConfigurableAddresses__LengthMismatch();\\n\\n    // Dependency setters\\n    // -----------------------------------------------------------------------------------------------\\n\\n    function setAddresses(address[] calldata _addresses) external onlyOwner {\\n        if (isAddressSetupInitialized) {\\n            revert ConfigurableAddresses__SetupIsInitialized();\\n        }\\n        if (_addresses.length != 13) {\\n            revert ConfigurableAddresses__LengthMismatch();\\n        }\\n\\n        for (uint256 i = 0; i < 13; i++) {\\n            if (_addresses[i] == address(0)) {\\n                revert ConfigurableAddresses__ZeroAddresses(i, _addresses[i]);\\n            }\\n        }\\n        adminContract = _addresses[0];\\n        borrowerOperations = _addresses[1];\\n        debtToken = _addresses[2];\\n        feeCollector = _addresses[3];\\n        flashLoanAddress = _addresses[4];\\n        priceFeed = _addresses[5];\\n        sortedTrenBoxes = _addresses[6];\\n        stabilityPool = _addresses[7];\\n        timelockAddress = _addresses[8];\\n        treasuryAddress = _addresses[9];\\n        trenBoxManager = _addresses[10];\\n        trenBoxManagerOperations = _addresses[11];\\n        trenBoxStorage = _addresses[12];\\n\\n        isAddressSetupInitialized = true;\\n    }\\n\\n    function setCommunityIssuance(address _communityIssuance) public onlyOwner {\\n        if (_communityIssuance == address(0)) {\\n            revert ConfigurableAddresses__CommunityIssuanceZeroAddress();\\n        }\\n        communityIssuance = _communityIssuance;\\n    }\\n\\n    function setTRENStaking(address _trenStaking) public onlyOwner {\\n        if (_trenStaking == address(0)) {\\n            revert ConfigurableAddresses__TRENStakingZeroAddress();\\n        }\\n        trenStaking = _trenStaking;\\n    }\\n}\\n\",\"keccak256\":\"0x8c08787a51c52fc5b1fae23a7732fe579a3508725cd5d4d527978c2f95bf4421\",\"license\":\"MIT\"},\"contracts/Dependencies/TrenBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { OwnableUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport { ConfigurableAddresses } from \\\"./ConfigurableAddresses.sol\\\";\\nimport { TrenMath } from \\\"./TrenMath.sol\\\";\\nimport { TrenMath } from \\\"./TrenMath.sol\\\";\\n\\nimport { IAdminContract } from \\\"../Interfaces/IAdminContract.sol\\\";\\nimport { ITrenBoxStorage } from \\\"../Interfaces/ITrenBoxStorage.sol\\\";\\n\\n/*\\n* Base contract for TrenBoxManager, BorrowerOperations and StabilityPool. Contains global system\\nconstants and\\n * common functions.\\n */\\nabstract contract TrenBase is OwnableUpgradeable, ConfigurableAddresses {\\n    struct Colls {\\n        address[] tokens;\\n        uint256[] amounts;\\n    }\\n\\n    error TrenBase__FeeExceededMax(uint256 feePercentage, uint256 maxFeePercentage);\\n\\n    // --- Gas compensation functions ---\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trenBox, for the purpose of\\n    // ICR calculation\\n    function _getCompositeDebt(address _asset, uint256 _debt) internal view returns (uint256) {\\n        return _debt + IAdminContract(adminContract).getDebtTokenGasCompensation(_asset);\\n    }\\n\\n    function _getNetDebt(address _asset, uint256 _debt) internal view returns (uint256) {\\n        return _debt - IAdminContract(adminContract).getDebtTokenGasCompensation(_asset);\\n    }\\n\\n    // Return the amount of ETH to be drawn from a trenBox's collateral and sent as gas\\n    // compensation.\\n    function _getCollGasCompensation(\\n        address _asset,\\n        uint256 _entireColl\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _entireColl / IAdminContract(adminContract).getPercentDivisor(_asset);\\n    }\\n\\n    function getEntireSystemColl(address _asset) public view returns (uint256 entireSystemColl) {\\n        return ITrenBoxStorage(trenBoxStorage).getTotalCollateralBalance(_asset);\\n    }\\n\\n    function getEntireSystemDebt(address _asset) public view returns (uint256 entireSystemDebt) {\\n        return ITrenBoxStorage(trenBoxStorage).getTotalDebtBalance(_asset);\\n    }\\n\\n    function _getTCR(address _asset, uint256 _price) internal view returns (uint256 TCR) {\\n        uint256 entireSystemColl = getEntireSystemColl(_asset);\\n        uint256 entireSystemDebt = getEntireSystemDebt(_asset);\\n        TCR = TrenMath._computeCR(entireSystemColl, entireSystemDebt, _price);\\n    }\\n\\n    function _checkRecoveryMode(address _asset, uint256 _price) internal view returns (bool) {\\n        uint256 TCR = _getTCR(_asset, _price);\\n        return TCR < IAdminContract(adminContract).getCcr(_asset);\\n    }\\n\\n    function _requireUserAcceptsFee(\\n        uint256 _fee,\\n        uint256 _amount,\\n        uint256 _maxFeePercentage\\n    )\\n        internal\\n        view\\n    {\\n        uint256 feePercentage = (_fee * IAdminContract(adminContract).DECIMAL_PRECISION()) / _amount;\\n        if (feePercentage > _maxFeePercentage) {\\n            revert TrenBase__FeeExceededMax(feePercentage, _maxFeePercentage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79b73a8551cce7bbe260862154011eafa823442e8248e7d49b2f9748206d8f84\",\"license\":\"MIT\"},\"contracts/Dependencies/TrenMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nuint256 constant DECIMAL_PRECISION = 1 ether;\\n\\nlibrary TrenMath {\\n    uint256 internal constant EXPONENT_CAP = 525_600_000;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n    * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity\\n    floor division.\\n     *\\n    * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39\\n    ETH,\\n    * and will only truncate to 0 if the denominator is at least 1e20 times greater than the\\n    numerator.\\n     *\\n     */\\n    uint256 internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /*\\n     * Multiply two decimal numbers and use normal rounding rules:\\n     * -round product up if 19'th mantissa digit >= 5\\n     * -round product down if 19'th mantissa digit < 5\\n     *\\n     * Used only inside the exponentiation, _decPow().\\n     */\\n    function decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\n        uint256 prod_xy = x * y;\\n\\n        decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\n    }\\n\\n    /*\\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n     *\\n     * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n     *\\n     * Called by two functions that represent time in units of minutes:\\n     * 1) TrenBoxManager._calcDecayedBaseRate\\n     * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n     *\\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n     * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n     *\\n    * If a period of > 1000 years is ever used as an exponent in either of the above functions, the\\n    result will be\\n     * negligibly different from just passing the cap, since:\\n     *\\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n    * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will\\n    be negligible\\n     */\\n    function _decPow(uint256 _base, uint256 _minutes) internal pure returns (uint256) {\\n        if (_minutes > EXPONENT_CAP) {\\n            _minutes = EXPONENT_CAP;\\n        } // cap to avoid overflow\\n\\n        if (_minutes == 0) {\\n            return DECIMAL_PRECISION;\\n        }\\n\\n        uint256 y = DECIMAL_PRECISION;\\n        uint256 x = _base;\\n        uint256 n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n / 2;\\n            } else {\\n                // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n - 1) / 2;\\n            }\\n        }\\n\\n        return decMul(x, y);\\n    }\\n\\n    function _getAbsoluteDifference(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a >= _b) ? _a - _b : _b - _a;\\n    }\\n\\n    function _computeNominalCR(uint256 _coll, uint256 _debt) internal pure returns (uint256) {\\n        if (_debt != 0) {\\n            return (_coll * NICR_PRECISION) / _debt;\\n        }\\n        // Return the maximal value for uint256 if the TrenBox has a debt of 0. Represents\\n        // \\\"infinite\\\"\\n        // CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n\\n    function _computeCR(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _price\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_debt != 0) {\\n            uint256 newCollRatio = (_coll * _price) / _debt;\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the TrenBox has a debt of 0. Represents\\n        // \\\"infinite\\\"\\n        // CR.\\n        else {\\n            // if (_debt == 0)\\n            return type(uint256).max;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe994e212c74767f28667a0656d52a8178622016c50f0406914e485483576c40c\",\"license\":\"MIT\"},\"contracts/Interfaces/IAdminContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IAdminContract {\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    struct CollateralParams {\\n        uint256 index; // Maps to token address in validCollateral[]\\n        bool active;\\n        uint256 borrowingFee;\\n        uint256 ccr;\\n        uint256 mcr;\\n        uint256 debtTokenGasCompensation; // Amount of debtToken to be locked in gas pool on opening\\n            // trenBoxes\\n        uint256 minNetDebt; // Minimum amount of net debtToken a trenBox must have\\n        uint256 mintCap;\\n        uint256 percentDivisor;\\n        uint256 redemptionFeeFloor;\\n        uint256 redemptionBlockTimestamp;\\n    }\\n\\n    struct FlashLoanParams {\\n        uint256 flashLoanFee; // 10 = 0,1%, 100 = 10% => 10 out of $1000 = $10\\n        uint256 flashLoanMinDebt; // min amount of trenUSD to mint for Flash Loan\\n        uint256 flashLoanMaxDebt; // max amount of trenUSD to mint for Flash Loan\\n    }\\n\\n    // Custom Errors\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    error SafeCheckError(string parameter, uint256 valueEntered, uint256 minValue, uint256 maxValue);\\n    error AdminContract__OnlyOwner();\\n    error AdminContract__OnlyTimelock();\\n    error AdminContract__CollateralAlreadyInitialized();\\n    error AdminContract__CollateralExists();\\n    error AdminContract__CollateralDoesNotExist();\\n    error AdminContract__CollateralNotConfigured();\\n\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    event CollateralAdded(address _collateral);\\n    event MCRChanged(uint256 oldMCR, uint256 newMCR);\\n    event CCRChanged(uint256 oldCCR, uint256 newCCR);\\n    event MinNetDebtChanged(uint256 oldMinNet, uint256 newMinNet);\\n    event PercentDivisorChanged(uint256 oldPercentDiv, uint256 newPercentDiv);\\n    event BorrowingFeeChanged(uint256 oldBorrowingFee, uint256 newBorrowingFee);\\n    event RedemptionFeeFloorChanged(uint256 oldRedemptionFeeFloor, uint256 newRedemptionFeeFloor);\\n    event MintCapChanged(uint256 oldMintCap, uint256 newMintCap);\\n    event RedemptionBlockTimestampChanged(address _collateral, uint256 _blockTimestamp);\\n    event FlashLoanFeeChanged(uint256 oldFee, uint256 newFee);\\n    event FlashLoanMinDebtChanged(uint256 oldMinDebt, uint256 newMinDebt);\\n    event FlashLoanMaxDebtChanged(uint256 oldMaxDebt, uint256 newMaxDebt);\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    function DECIMAL_PRECISION() external view returns (uint256);\\n\\n    function _100pct() external view returns (uint256);\\n\\n    function addNewCollateral(address _collateral, uint256 _debtTokenGasCompensation) external;\\n\\n    function setCollateralParameters(\\n        address _collateral,\\n        uint256 borrowingFee,\\n        uint256 ccr,\\n        uint256 mcr,\\n        uint256 minNetDebt,\\n        uint256 mintCap,\\n        uint256 percentDivisor,\\n        uint256 redemptionFeeFloor\\n    )\\n        external;\\n\\n    function setMCR(address _collateral, uint256 newMCR) external;\\n\\n    function setCCR(address _collateral, uint256 newCCR) external;\\n\\n    function setMinNetDebt(address _collateral, uint256 minNetDebt) external;\\n\\n    function setPercentDivisor(address _collateral, uint256 percentDivisor) external;\\n\\n    function setBorrowingFee(address _collateral, uint256 borrowingFee) external;\\n\\n    function setRedemptionFeeFloor(address _collateral, uint256 redemptionFeeFloor) external;\\n\\n    function setMintCap(address _collateral, uint256 mintCap) external;\\n\\n    function setRedemptionBlockTimestamp(address _collateral, uint256 _blockTimestamp) external;\\n\\n    function switchRouteToTRENStaking() external;\\n\\n    function getIndex(address _collateral) external view returns (uint256);\\n\\n    function getIsActive(address _collateral) external view returns (bool);\\n\\n    function getValidCollateral() external view returns (address[] memory);\\n\\n    function getMcr(address _collateral) external view returns (uint256);\\n\\n    function getCcr(address _collateral) external view returns (uint256);\\n\\n    function getDebtTokenGasCompensation(address _collateral) external view returns (uint256);\\n\\n    function getMinNetDebt(address _collateral) external view returns (uint256);\\n\\n    function getPercentDivisor(address _collateral) external view returns (uint256);\\n\\n    function getBorrowingFee(address _collateral) external view returns (uint256);\\n\\n    function getRedemptionFeeFloor(address _collateral) external view returns (uint256);\\n\\n    function getRedemptionBlockTimestamp(address _collateral) external view returns (uint256);\\n\\n    function getMintCap(address _collateral) external view returns (uint256);\\n\\n    function getTotalAssetDebt(address _asset) external view returns (uint256);\\n\\n    function getFlashLoanFee() external view returns (uint256);\\n\\n    function getFlashLoanMinNetDebt() external view returns (uint256);\\n\\n    function getFlashLoanMaxNetDebt() external view returns (uint256);\\n\\n    function getRouteToTRENStaking() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1869dd966254c73fb336daf112ce6a0fff25db56e1b3001091dff0aa71b49e53\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDebtToken is IERC20 {\\n    event TokenBalanceUpdated(address _user, uint256 _amount);\\n    event EmergencyStopMintingCollateral(address _asset, bool state);\\n    event WhitelistChanged(address _whitelisted, bool whitelisted);\\n    event ProtocolContractsAddressesSet(\\n        address borrowerOperations, address stabilityPool, address trenBoxManager\\n    );\\n\\n    error DebtToken__MintBlockedForCollateral(address collateral);\\n    error DebtToken__InvalidAddressToConnect();\\n    error DebtToken__CannotTransferTokensToZeroAddress();\\n    error DebtToken__CannotTransferTokensToTokenContract();\\n    error DebtToken__NotWhitelistedContract(address notWhitelistedContract);\\n    error DebtToken__CallerIsNotBorrowerOperations(address caller);\\n    error DebtToken__CallerIsNotStabilityPool(address caller);\\n    error DebtToken__CannotBurnTokens();\\n    error DebtToken__CannotReturnFromPool();\\n\\n    function emergencyStopMinting(address _asset, bool status) external;\\n\\n    function mint(address _asset, address _account, uint256 _amount) external;\\n\\n    function mintFromWhitelistedContract(uint256 _amount) external;\\n\\n    function burnFromWhitelistedContract(uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function sendToPool(address _sender, address poolAddress, uint256 _amount) external;\\n\\n    function returnFromPool(address poolAddress, address user, uint256 _amount) external;\\n\\n    function addWhitelist(address _address) external;\\n\\n    function removeWhitelist(address _address) external;\\n}\\n\",\"keccak256\":\"0x4c48896e514f0900029e5b4433bbb627cf2aea7102f792cac729ca9cd79782d1\",\"license\":\"MIT\"},\"contracts/Interfaces/IDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IDeposit {\\n    function receivedERC20(address _asset, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xedebb2b3e0c98d165db1f1b4a3b5e96f2b327cd7bc2ad1b1c07abdd1f47bce17\",\"license\":\"MIT\"},\"contracts/Interfaces/IFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface IFeeCollector {\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    event FeeRecordUpdated(\\n        address borrower, address asset, uint256 from, uint256 to, uint256 amount\\n    );\\n    event FeeCollected(address borrower, address asset, address collector, uint256 amount);\\n    event FeeRefunded(address borrower, address asset, uint256 amount);\\n    event RedemptionFeeCollected(address asset, uint256 amount);\\n\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    struct FeeRecord {\\n        uint256 from; // timestamp in seconds\\n        uint256 to; // timestamp in seconds\\n        uint256 amount; // refundable fee amount\\n    }\\n\\n    // Custom Errors\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    error FeeCollector__ArrayMismatch();\\n    error FeeCollector__BorrowerOperationsOnly(address sender, address expected);\\n    error FeeCollector__BorrowerOperationsOrTrenBoxManagerOnly(\\n        address sender, address expected1, address expected2\\n    );\\n    error FeeCollector__InvalidTRENStakingAddress();\\n    error FeeCollector__TrenBoxManagerOnly(address sender, address expected);\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    function increaseDebt(address _borrower, address _asset, uint256 _feeAmount) external;\\n\\n    function decreaseDebt(address _borrower, address _asset, uint256 _paybackFraction) external;\\n\\n    function closeDebt(address _borrower, address _asset) external;\\n\\n    function liquidateDebt(address _borrower, address _asset) external;\\n\\n    function simulateRefund(\\n        address _borrower,\\n        address _asset,\\n        uint256 _paybackFraction\\n    )\\n        external\\n        returns (uint256);\\n\\n    function collectFees(address[] calldata _borrowers, address[] calldata _assets) external;\\n\\n    function handleRedemptionFee(address _asset, uint256 _amount) external;\\n\\n    function getProtocolRevenueDestination() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4acb0589d73afd26dd9ea281eef5052818955b501f2371c21a1acac953bf5152\",\"license\":\"MIT\"},\"contracts/Interfaces/ISortedTrenBoxes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\ninterface ISortedTrenBoxes {\\n    // --- Events ---\\n\\n    event NodeAdded(address indexed _asset, address _id, uint256 _NICR);\\n    event NodeRemoved(address indexed _asset, address _id);\\n\\n    error SortedTrenBoxer__ListDoesNotContainNode();\\n    error SortedTrenBoxes__ListAlreadyContainsNode();\\n    error SortedTrenBoxes__IdCannotBeZeroAddress();\\n    error SortedTrenBoxes__NICRMustBeGreaterThanZero();\\n    error SortedTrenBoxes__CallerMustBeTrenBoxManager();\\n    error SortedTrenBoxes__CallerMustBeBorrowerOperationsOrTrenBoxManager();\\n\\n    // --- Functions ---\\n\\n    function insert(\\n        address _asset,\\n        address _id,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external;\\n\\n    function remove(address _asset, address _id) external;\\n\\n    function reInsert(\\n        address _asset,\\n        address _id,\\n        uint256 _newICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external;\\n\\n    function contains(address _asset, address _id) external view returns (bool);\\n\\n    function isEmpty(address _asset) external view returns (bool);\\n\\n    function getSize(address _asset) external view returns (uint256);\\n\\n    function getFirst(address _asset) external view returns (address);\\n\\n    function getLast(address _asset) external view returns (address);\\n\\n    function getNext(address _asset, address _id) external view returns (address);\\n\\n    function getPrev(address _asset, address _id) external view returns (address);\\n\\n    function validInsertPosition(\\n        address _asset,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    function findInsertPosition(\\n        address _asset,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    )\\n        external\\n        view\\n        returns (address, address);\\n}\\n\",\"keccak256\":\"0x89ac6c5c4e5e22e0a056c76168cff32ab96695bd1bca98b1cc10c7ddea7d4ffb\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport { IDeposit } from \\\"./IDeposit.sol\\\";\\n\\ninterface IStabilityPool is IDeposit {\\n    // --- Structs ---\\n\\n    struct Snapshots {\\n        mapping(address => uint256) S;\\n        uint256 P;\\n        uint256 G;\\n        uint128 scale;\\n        uint128 epoch;\\n    }\\n\\n    // --- Events ---\\n\\n    event CommunityIssuanceAddressChanged(address newAddress);\\n    event DepositSnapshotUpdated(address indexed _depositor, uint256 _P, uint256 _G);\\n    event SystemSnapshotUpdated(uint256 _P, uint256 _G);\\n\\n    event AssetSent(address _asset, address _to, uint256 _amount);\\n    event GainsWithdrawn(\\n        address indexed _depositor,\\n        address[] _collaterals,\\n        uint256[] _amounts,\\n        uint256 _debtTokenLoss\\n    );\\n    event TRENPaidToDepositor(address indexed _depositor, uint256 _TREN);\\n    event StabilityPoolAssetBalanceUpdated(address _asset, uint256 _newBalance);\\n    event StabilityPoolDebtTokenBalanceUpdated(uint256 _newBalance);\\n    event StakeChanged(uint256 _newSystemStake, address _depositor);\\n    event UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\n\\n    event ProductUpdated(uint256 _P);\\n    event SumUpdated(address _asset, uint256 _S, uint128 _epoch, uint128 _scale);\\n    event GainsUpdated(uint256 _G, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    // --- Errors ---\\n\\n    error StabilityPool__TrenBoxStorageOnly(address sender, address expected);\\n    error StabilityPool__AdminContractOnly(address sender, address expected);\\n    error StabilityPool__TrenBoxManagerOnly(address sender, address expected);\\n    error StabilityPool__ArrayNotInAscendingOrder();\\n    error StabilityPool__DebtLossBelowOne(uint256 debtLoss);\\n    error StabilityPool__DebtLargerThanTotalDeposits();\\n    error StabilityPool__ProductZero();\\n    error StabilityPool__AssetsAndAmountsLengthMismatch();\\n    error StabilityPool__UserHasNoDeposit();\\n    error StabilityPool__AmountMustBeNonZero();\\n\\n    // --- Functions ---\\n\\n    function addCollateralType(address _collateral) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is not zero\\n     * ---\\n    * - Triggers a TREN issuance, based on time passed since the last issuance. The TREN issuance is\\n    shared between *all* depositors.\\n     * - Sends depositor's accumulated gains (TREN, assets) to depositor\\n     */\\n    function provideToSP(uint256 _amount, address[] calldata _assets) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized trenBoxes left in the system\\n     * - User has a non zero deposit\\n     * ---\\n    * - Triggers a TREN issuance, based on time passed since the last issuance. The TREN issuance is\\n    shared between *all* depositors.\\n     * - Sends all depositor's accumulated gains (TREN, assets) to depositor\\n     * - Decreases deposit's stake, and takes new snapshots.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint256 _amount, address[] calldata _assets) external;\\n\\n    /*\\n    Initial checks:\\n    * - Caller is TrenBoxManager\\n    * ---\\n    * Cancels out the specified debt against the debt token contained in the Stability Pool (as far\\n    as possible)\\n    * and transfers the TrenBox's collateral from ActivePool to StabilityPool.\\n    * Only called by liquidation functions in the TrenBoxManager.\\n    */\\n    function offset(uint256 _debt, address _asset, uint256 _coll) external;\\n\\n    /*\\n    * Returns debt tokens held in the pool. Changes when users deposit/withdraw, and when TrenBox\\n    debt is offset.\\n     */\\n    function getTotalDebtTokenDeposits() external view returns (uint256);\\n\\n    /*\\n     * Calculates the asset gains earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorGains(\\n        address _depositor,\\n        address[] calldata _assets\\n    )\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory);\\n\\n    /*\\n     * Calculate the TREN gain earned by a deposit since its last snapshots were taken.\\n     */\\n    function getDepositorTRENGain(address _depositor) external view returns (uint256);\\n\\n    /*\\n     * Return the user's compounded deposits.\\n     */\\n    function getCompoundedDebtTokenDeposits(address _depositor) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6f317eded874840c88557f214883fc45bfae3d4f4c090171729f6b03a898adec\",\"license\":\"MIT\"},\"contracts/Interfaces/ITrenBoxManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface ITrenBoxManager {\\n    // Enums\\n    // ------------------------------------------------------------------------------------------------------------\\n\\n    enum Status {\\n        nonExistent,\\n        active,\\n        closedByOwner,\\n        closedByLiquidation,\\n        closedByRedemption,\\n        closedByRedistribution\\n    }\\n\\n    enum TrenBoxManagerOperation {\\n        applyPendingRewards,\\n        liquidateInNormalMode,\\n        liquidateInRecoveryMode,\\n        redeemCollateral,\\n        redistributeCollateral\\n    }\\n\\n    // Events\\n    // -----------------------------------------------------------------------------------------------------------\\n\\n    event BaseRateUpdated(address indexed _asset, uint256 _baseRate);\\n    event LastFeeOpTimeUpdated(address indexed _asset, uint256 _lastFeeOpTime);\\n    event TotalStakesUpdated(address indexed _asset, uint256 _newTotalStakes);\\n    event SystemSnapshotsUpdated(\\n        address indexed _asset, uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot\\n    );\\n    event LTermsUpdated(address indexed _asset, uint256 _L_Coll, uint256 _L_Debt);\\n    event TrenBoxSnapshotsUpdated(address indexed _asset, uint256 _L_Coll, uint256 _L_Debt);\\n    event TrenBoxIndexUpdated(address indexed _asset, address _borrower, uint256 _newIndex);\\n\\n    event TrenBoxUpdated(\\n        address indexed _asset,\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 _stake,\\n        TrenBoxManagerOperation _operation\\n    );\\n\\n    // Custom Errors\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    error TrenBoxManager__FeeBiggerThanAssetDraw();\\n    error TrenBoxManager__OnlyOneTrenBox();\\n\\n    error TrenBoxManager__OnlyTrenBoxManagerOperations();\\n    error TrenBoxManager__OnlyBorrowerOperations();\\n    error TrenBoxManager__OnlyTrenBoxManagerOperationsOrBorrowerOperations();\\n\\n    // Structs\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    struct TrenBox {\\n        uint256 debt;\\n        uint256 coll;\\n        uint256 stake;\\n        Status status;\\n        uint128 arrayIndex;\\n    }\\n\\n    // Functions\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    function executeFullRedemption(address _asset, address _borrower, uint256 _newColl) external;\\n\\n    function executePartialRedemption(\\n        address _asset,\\n        address _borrower,\\n        uint256 _newDebt,\\n        uint256 _newColl,\\n        uint256 _newNICR,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint\\n    )\\n        external;\\n\\n    function getTrenBoxOwnersCount(address _asset) external view returns (uint256);\\n\\n    function getTrenBoxFromTrenBoxOwnersArray(\\n        address _asset,\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (address);\\n\\n    function getNominalICR(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getCurrentICR(\\n        address _asset,\\n        address _borrower,\\n        uint256 _price\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function updateStakeAndTotalStakes(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        returns (uint256);\\n\\n    function updateTrenBoxRewardSnapshots(address _asset, address _borrower) external;\\n\\n    function addTrenBoxOwnerToArray(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        returns (uint256 index);\\n\\n    function applyPendingRewards(address _asset, address _borrower) external;\\n\\n    function getPendingAssetReward(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPendingDebtTokenReward(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function hasPendingRewards(address _asset, address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 debt,\\n            uint256 coll,\\n            uint256 pendingDebtTokenReward,\\n            uint256 pendingAssetReward\\n        );\\n\\n    function closeTrenBox(address _asset, address _borrower) external;\\n\\n    function closeTrenBoxLiquidation(address _asset, address _borrower) external;\\n\\n    function closeTrenBoxRedistribution(\\n        address _asset,\\n        address _borrower,\\n        uint256 _debtTokenGasCompensationToBurn\\n    )\\n        external;\\n\\n    function removeStake(address _asset, address _borrower) external;\\n\\n    function getRedemptionRate(address _asset) external view returns (uint256);\\n\\n    function getRedemptionRateWithDecay(address _asset) external view returns (uint256);\\n\\n    function getRedemptionFeeWithDecay(\\n        address _asset,\\n        uint256 _assetDraw\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getBorrowingRate(address _asset) external view returns (uint256);\\n\\n    function getBorrowingFee(\\n        address _asset,\\n        uint256 _debtTokenAmount\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTrenBoxStatus(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getTrenBoxStake(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getTrenBoxDebt(address _asset, address _borrower) external view returns (uint256);\\n\\n    function getTrenBoxColl(address _asset, address _borrower) external view returns (uint256);\\n\\n    function setTrenBoxStatus(address _asset, address _borrower, uint256 num) external;\\n\\n    function increaseTrenBoxColl(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collIncrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function decreaseTrenBoxColl(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collDecrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function increaseTrenBoxDebt(\\n        address _asset,\\n        address _borrower,\\n        uint256 _debtIncrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function decreaseTrenBoxDebt(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collDecrease\\n    )\\n        external\\n        returns (uint256);\\n\\n    function getTCR(address _asset, uint256 _price) external view returns (uint256);\\n\\n    function checkRecoveryMode(address _asset, uint256 _price) external returns (bool);\\n\\n    function isValidFirstRedemptionHint(\\n        address _asset,\\n        address _firstRedemptionHint,\\n        uint256 _price\\n    )\\n        external\\n        returns (bool);\\n\\n    function updateBaseRateFromRedemption(\\n        address _asset,\\n        uint256 _assetDrawn,\\n        uint256 _price,\\n        uint256 _totalDebtTokenSupply\\n    )\\n        external;\\n\\n    function getRedemptionFee(address _asset, uint256 _assetDraw) external view returns (uint256);\\n\\n    function finalizeRedemption(\\n        address _asset,\\n        address _receiver,\\n        uint256 _debtToRedeem,\\n        uint256 _fee,\\n        uint256 _totalRedemptionRewards\\n    )\\n        external;\\n\\n    function redistributeDebtAndColl(\\n        address _asset,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 _debtToOffset,\\n        uint256 _collToSendToStabilityPool\\n    )\\n        external;\\n\\n    function updateSystemSnapshots_excludeCollRemainder(\\n        address _asset,\\n        uint256 _collRemainder\\n    )\\n        external;\\n\\n    function movePendingTrenBoxRewardsFromLiquidatedToActive(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        uint256 _assetAmount\\n    )\\n        external;\\n\\n    function isTrenBoxActive(address _asset, address _borrower) external view returns (bool);\\n\\n    function sendGasCompensation(\\n        address _asset,\\n        address _liquidator,\\n        uint256 _debtTokenAmount,\\n        uint256 _assetAmount\\n    )\\n        external;\\n\\n    function getNetDebt(address _asset, uint256 _debt) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0ec81d68c7f3a6514c7339f4a31666322f30f537d617ca1808930b25fd92c5c9\",\"license\":\"MIT\"},\"contracts/Interfaces/ITrenBoxStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface ITrenBoxStorage {\\n    /// @dev Struct for storing debt balances of a specific collateral asset.\\n    /// @param active The entire debt of all active TrenBoxes.\\n    /// @param liquidated The entire debt of all liquidated TrenBoxes.\\n    struct DebtBalances {\\n        uint256 active;\\n        uint256 liquidated;\\n    }\\n\\n    /// @dev Struct for storing balances of a specific collateral asset.\\n    /// @param active The entire collateral amount of all active TrenBoxes.\\n    /// @param liquidated The entire collateral amount of all liquidated TrenBoxes.\\n    /// @param claimable The entire collateral amount of all liquidated TrenBoxes that can be\\n    /// claimed by user.\\n    struct CollBalances {\\n        uint256 active;\\n        uint256 liquidated;\\n        uint256 claimable;\\n    }\\n\\n    /**\\n     * @dev Emitted when the active collateral balance is updated.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new active collateral balance.\\n     */\\n    event ActiveCollateralBalanceUpdated(address indexed _collateral, uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when the active debt balance is updated.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new active debt balance.\\n     */\\n    event ActiveDebtBalanceUpdated(address indexed _collateral, uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when the liquidated collateral balance is updated.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new liquidated collateral balance.\\n     */\\n    event LiquidatedCollateralBalanceUpdated(address indexed _collateral, uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when the liquidated debt balance is updated.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new liquidated debt balance.\\n     */\\n    event LiquidatedDebtBalanceUpdated(address indexed _collateral, uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when the claimable collateral balance is updated.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new claimable collateral balance.\\n     */\\n    event ClaimableCollateralBalanceUpdated(address indexed _collateral, uint256 _newBalance);\\n\\n    /**\\n     * @dev Emitted when collateral is sent.\\n     * @param _to The address of the user which get collateral amount.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount of collateral sent.\\n     */\\n    event CollateralSent(address indexed _to, address indexed _collateral, uint256 _amount);\\n\\n    /**\\n     * @dev Emitted when the user claimable collateral balance is updated.\\n     * @param _account The address of the user.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _newBalance The new user claimable collateral balance.\\n     */\\n    event UserClaimableCollateralBalanceUpdated(\\n        address indexed _account, address indexed _collateral, uint256 _newBalance\\n    );\\n\\n    /**\\n     * @dev Error emitted when contract is not authorized.\\n     */\\n    error TrenBoxStorage__NotAuthorizedContract();\\n\\n    /**\\n     * @dev Error emitted when only TrenBoxManager is allowed.\\n     */\\n    error TrenBoxStorage__TrenBoxManagerOnly();\\n\\n    /**\\n     * @dev Error emitted when only BorrowerOperations is allowed.\\n     */\\n    error TrenBoxStorage__BorrowerOperationsOnly();\\n\\n    /**\\n     * @dev Error emitted when only BorrowerOperations or TrenBoxManager can perform an operation.\\n     */\\n    error TrenBoxStorage__BorrowerOperationsOrTrenBoxManagerOnly();\\n\\n    /**\\n     * @dev Error emitted when only TrenBoxManagerOperations is allowed.\\n     */\\n    error TrenBoxStorage__TrenBoxManagerOperationsOnly();\\n\\n    /**\\n     * @dev Error emitted when there is no claimable collateral available.\\n     */\\n    error TrenBoxStorage__NoClaimableCollateral();\\n\\n    /**\\n     * @notice Returns the active collateral balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getActiveCollateralBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the active debt balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getActiveDebtBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the liquidated collateral balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getLiquidatedCollateralBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the liquidated debt balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getLiquidatedDebtBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns sum of active and liquidated debt for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getTotalDebtBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns sum of active and liquidated amount of a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getTotalCollateralBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the claimable collateral balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     */\\n    function getClaimableCollateralBalance(address _collateral) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the claimable collateral balance for a specific user.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _account The address of the user.\\n     */\\n    function getUserClaimableCollateralBalance(\\n        address _collateral,\\n        address _account\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Increases the active debt balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount to increase the debt balance.\\n     */\\n    function increaseActiveDebt(address _collateral, uint256 _amount) external;\\n\\n    /**\\n     * @notice Decreases the active debt balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount to decrease the debt balance.\\n     */\\n    function decreaseActiveDebt(address _collateral, uint256 _amount) external;\\n\\n    /**\\n     * @notice Decreases the active balances of debt and collateral for a specific collateral after\\n     * redemption exists.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _debtAmount The amount to decrease the debt balance.\\n     * @param _collAmount The amount to decrease the collateral balance.\\n     */\\n    function decreaseActiveBalancesAfterRedemption(\\n        address _collateral,\\n        uint256 _debtAmount,\\n        uint256 _collAmount\\n    )\\n        external;\\n\\n    /**\\n     * @notice Increases the active balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount to increase the debt balance.\\n     */\\n    function increaseActiveCollateral(address _collateral, uint256 _amount) external;\\n\\n    /**\\n     * @notice Decreases the active balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount to decrease the collateral balance.\\n     */\\n    function decreaseActiveCollateral(address _collateral, uint256 _amount) external;\\n\\n    /**\\n     * @notice Updates the active and liquidated debt and collateral balances.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _debtAmount The amount to decrease the debt balance.\\n     * @param _collAmount The amount to decrease the collateral balance.\\n     * @param _isActiveIncrease The indicator that shows increasing or decreasing of active\\n     * balances.\\n     */\\n    function updateDebtAndCollateralBalances(\\n        address _collateral,\\n        uint256 _debtAmount,\\n        uint256 _collAmount,\\n        bool _isActiveIncrease\\n    )\\n        external;\\n\\n    /**\\n     * @notice Updates the entire and user claimable balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _account The address of the user.\\n     * @param _amount The amount to update the claimable balance.\\n     */\\n    function updateUserAndEntireClaimableBalance(\\n        address _collateral,\\n        address _account,\\n        uint256 _amount\\n    )\\n        external;\\n\\n    /**\\n     * @notice Increases the claimable collateral balance for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _amount The amount to increase the claimable collateral balance.\\n     */\\n    function increaseClaimableCollateral(address _collateral, uint256 _amount) external;\\n\\n    /**\\n     * @notice Updates the claimable collateral balance of the user for a specific collateral asset.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _account The address of the user.\\n     * @param _amount The amount to update the claimable balance.\\n     */\\n    function updateUserClaimableBalance(\\n        address _collateral,\\n        address _account,\\n        uint256 _amount\\n    )\\n        external;\\n\\n    /**\\n     * @notice Sends amount of active collateral from contract to user.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _account The address of the user to send.\\n     * @param _amount The amount of the collateral to send.\\n     */\\n    function sendCollateral(address _collateral, address _account, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sends amount of claimable collateral from contract to user.\\n     * @param _collateral The address of the collateral asset.\\n     * @param _account The address of the user to send.\\n     */\\n    function claimCollateral(address _collateral, address _account) external;\\n}\\n\",\"keccak256\":\"0x611751f1cd64ec649529ceb82cf851921c015a697b5d8bf207dd6f11f017b528\",\"license\":\"MIT\"},\"contracts/TrenBoxManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { ReentrancyGuardUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport { UUPSUpgradeable } from\\n    \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport { TrenBase } from \\\"./Dependencies/TrenBase.sol\\\";\\nimport { TrenMath, DECIMAL_PRECISION } from \\\"./Dependencies/TrenMath.sol\\\";\\n\\nimport { IAdminContract } from \\\"./Interfaces/IAdminContract.sol\\\";\\nimport { IDebtToken } from \\\"./Interfaces/IDebtToken.sol\\\";\\nimport { IStabilityPool } from \\\"./Interfaces/IStabilityPool.sol\\\";\\nimport { ISortedTrenBoxes } from \\\"./Interfaces/ISortedTrenBoxes.sol\\\";\\nimport { ITrenBoxManager } from \\\"./Interfaces/ITrenBoxManager.sol\\\";\\nimport { IFeeCollector } from \\\"./Interfaces/IFeeCollector.sol\\\";\\nimport { ITrenBoxStorage } from \\\"./Interfaces/ITrenBoxStorage.sol\\\";\\n\\ncontract TrenBoxManager is\\n    ITrenBoxManager,\\n    UUPSUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    TrenBase\\n{\\n    // Constants\\n    // ------------------------------------------------------------------------------------------------------\\n\\n    string public constant NAME = \\\"TrenBoxManager\\\";\\n\\n    uint256 public constant SECONDS_IN_ONE_MINUTE = 60;\\n    /*\\n     * Half-life of 12h. 12h = 720 min\\n     * (1/2) = d^720 => d = (1/2)^(1/720)\\n     */\\n    uint256 public constant MINUTE_DECAY_FACTOR = 999_037_758_833_783_000;\\n\\n    /*\\n    * BETA: 18 digit decimal. Parameter by which to divide the redeemed fraction, in order to calc\\n    the new base rate from a redemption.\\n     * Corresponds to (1 / ALPHA) in the white paper.\\n     */\\n    uint256 public constant BETA = 2;\\n\\n    // Structs\\n    // --------------------------------------------------------------------------------------------------------\\n\\n    // Object containing the asset and debt token snapshots for a given active trenBox\\n    struct RewardSnapshot {\\n        uint256 asset;\\n        uint256 debt;\\n    }\\n\\n    // State\\n    // ----------------------------------------------------------------------------------------------------------\\n\\n    mapping(address collateral => uint256 rate) public baseRate;\\n\\n    // The timestamp of the latest fee operation (redemption or new debt token issuance)\\n    mapping(address collateral => uint256 feeOpeartionTimestamp) public lastFeeOperationTime;\\n\\n    mapping(address borrower => mapping(address collateral => TrenBox)) public TrenBoxes;\\n\\n    mapping(address collateral => uint256 totalStake) public totalStakes;\\n\\n    // Snapshot of the value of totalStakes, taken immediately after the latest liquidation\\n    mapping(address collateral => uint256 totalStake) public totalStakesSnapshot;\\n\\n    // Snapshot of the total collateral in TrenBoxStorage, immediately after the\\n    // latest liquidation.\\n    mapping(address collateral => uint256 totalCollateral) public totalCollateralSnapshot;\\n\\n    /*\\n    * L_Colls and L_Debts track the sums of accumulated liquidation rewards per unit staked. During\\n    its lifetime, each stake earns:\\n     *\\n     * An asset gain of ( stake * [L_Colls - L_Colls(0)] )\\n     * A debt increase of ( stake * [L_Debts - L_Debts(0)] )\\n     *\\n    * Where L_Colls(0) and L_Debts(0) are snapshots of L_Colls and L_Debts for the active TrenBox\\n    taken at the instant the stake was made\\n     */\\n    mapping(address collateral => uint256 accumulatedRewards) public L_Colls;\\n    mapping(address collateral => uint256 accumulatedRewards) public L_Debts;\\n\\n    // Map addresses with active trenBoxes to their RewardSnapshot\\n    mapping(address borrower => mapping(address collateral => RewardSnapshot)) public\\n        rewardSnapshots;\\n\\n    // Array of all active trenBox addresses - used to to compute an approximate hint off-chain, for\\n    // the sorted list insertion\\n    mapping(address collateral => address[] owners) public trenBoxOwners;\\n\\n    // Error trackers for the trenBox redistribution calculation\\n    mapping(address collateral => uint256 collateralError) public lastCollError_Redistribution;\\n    mapping(address collateral => uint256 debtError) public lastDebtError_Redistribution;\\n\\n    // Modifiers\\n    // ------------------------------------------------------------------------------------------------------\\n\\n    modifier onlyTrenBoxManagerOperations() {\\n        if (msg.sender != trenBoxManagerOperations) {\\n            revert TrenBoxManager__OnlyTrenBoxManagerOperations();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyBorrowerOperations() {\\n        if (msg.sender != borrowerOperations) {\\n            revert TrenBoxManager__OnlyBorrowerOperations();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyTrenBoxManagerOperationsOrBorrowerOperations() {\\n        if (msg.sender != borrowerOperations && msg.sender != trenBoxManagerOperations) {\\n            revert TrenBoxManager__OnlyTrenBoxManagerOperationsOrBorrowerOperations();\\n        }\\n        _;\\n    }\\n\\n    // Initializer\\n    // ------------------------------------------------------------------------------------------------------\\n\\n    function initialize(address initialOwner) public initializer {\\n        __Ownable_init(initialOwner);\\n\\n        __UUPSUpgradeable_init();\\n        __ReentrancyGuard_init();\\n    }\\n\\n    // External/public functions\\n    // --------------------------------------------------------------------------------------\\n\\n    function isValidFirstRedemptionHint(\\n        address _asset,\\n        address _firstRedemptionHint,\\n        uint256 _price\\n    )\\n        external\\n        view\\n        returns (bool)\\n    {\\n        if (\\n            _firstRedemptionHint == address(0)\\n                || !ISortedTrenBoxes(sortedTrenBoxes).contains(_asset, _firstRedemptionHint)\\n                || getCurrentICR(_asset, _firstRedemptionHint, _price)\\n                    < IAdminContract(adminContract).getMcr(_asset)\\n        ) {\\n            return false;\\n        }\\n        address nextTrenBox =\\n            ISortedTrenBoxes(sortedTrenBoxes).getNext(_asset, _firstRedemptionHint);\\n        return nextTrenBox == address(0)\\n            || getCurrentICR(_asset, nextTrenBox, _price) < IAdminContract(adminContract).getMcr(_asset);\\n    }\\n\\n    // Return the nominal collateral ratio (ICR) of a given TrenBox, without the price. Takes a\\n    // trenBox's pending coll and debt rewards from redistributions into account.\\n    function getNominalICR(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        (uint256 currentAsset, uint256 currentDebt) = _getCurrentTrenBoxAmounts(_asset, _borrower);\\n\\n        uint256 NICR = TrenMath._computeNominalCR(currentAsset, currentDebt);\\n        return NICR;\\n    }\\n\\n    // Return the current collateral ratio (ICR) of a given TrenBox. Takes a trenBox's pending coll\\n    // and debt rewards from redistributions into account.\\n    function getCurrentICR(\\n        address _asset,\\n        address _borrower,\\n        uint256 _price\\n    )\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        (uint256 currentAsset, uint256 currentDebt) = _getCurrentTrenBoxAmounts(_asset, _borrower);\\n        uint256 ICR = TrenMath._computeCR(currentAsset, currentDebt, _price);\\n        return ICR;\\n    }\\n\\n    // Get the borrower's pending accumulated asset reward, earned by their stake\\n    function getPendingAssetReward(\\n        address _asset,\\n        address _borrower\\n    )\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 snapshotAsset = rewardSnapshots[_borrower][_asset].asset;\\n        uint256 rewardPerUnitStaked = L_Colls[_asset] - snapshotAsset;\\n        if (rewardPerUnitStaked == 0 || !isTrenBoxActive(_asset, _borrower)) {\\n            return 0;\\n        }\\n        uint256 stake = TrenBoxes[_borrower][_asset].stake;\\n        uint256 pendingAssetReward = (stake * rewardPerUnitStaked) / DECIMAL_PRECISION;\\n        return pendingAssetReward;\\n    }\\n\\n    // Get the borrower's pending accumulated debt token reward, earned by their stake\\n    function getPendingDebtTokenReward(\\n        address _asset,\\n        address _borrower\\n    )\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 snapshotDebt = rewardSnapshots[_borrower][_asset].debt;\\n        uint256 rewardPerUnitStaked = L_Debts[_asset] - snapshotDebt;\\n        if (rewardPerUnitStaked == 0 || !isTrenBoxActive(_asset, _borrower)) {\\n            return 0;\\n        }\\n        uint256 stake = TrenBoxes[_borrower][_asset].stake;\\n        return (stake * rewardPerUnitStaked) / DECIMAL_PRECISION;\\n    }\\n\\n    function hasPendingRewards(\\n        address _asset,\\n        address _borrower\\n    )\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        if (!isTrenBoxActive(_asset, _borrower)) {\\n            return false;\\n        }\\n        return (rewardSnapshots[_borrower][_asset].asset < L_Colls[_asset]);\\n    }\\n\\n    function getEntireDebtAndColl(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256 debt, uint256 coll, uint256 pendingDebtReward, uint256 pendingCollReward)\\n    {\\n        pendingDebtReward = getPendingDebtTokenReward(_asset, _borrower);\\n        pendingCollReward = getPendingAssetReward(_asset, _borrower);\\n        TrenBox storage trenBox = TrenBoxes[_borrower][_asset];\\n        debt = trenBox.debt + pendingDebtReward;\\n        coll = trenBox.coll + pendingCollReward;\\n    }\\n\\n    function isTrenBoxActive(\\n        address _asset,\\n        address _borrower\\n    )\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return getTrenBoxStatus(_asset, _borrower) == uint256(Status.active);\\n    }\\n\\n    function getTCR(address _asset, uint256 _price) external view override returns (uint256) {\\n        return _getTCR(_asset, _price);\\n    }\\n\\n    function checkRecoveryMode(\\n        address _asset,\\n        uint256 _price\\n    )\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _checkRecoveryMode(_asset, _price);\\n    }\\n\\n    function getBorrowingRate(address _asset) external view override returns (uint256) {\\n        return IAdminContract(adminContract).getBorrowingFee(_asset);\\n    }\\n\\n    function getBorrowingFee(\\n        address _asset,\\n        uint256 _debt\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return (IAdminContract(adminContract).getBorrowingFee(_asset) * _debt) / DECIMAL_PRECISION;\\n    }\\n\\n    function getRedemptionFee(address _asset, uint256 _assetDraw) public view returns (uint256) {\\n        return _calcRedemptionFee(getRedemptionRate(_asset), _assetDraw);\\n    }\\n\\n    function getRedemptionFeeWithDecay(\\n        address _asset,\\n        uint256 _assetDraw\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _calcRedemptionFee(getRedemptionRateWithDecay(_asset), _assetDraw);\\n    }\\n\\n    function getRedemptionRate(address _asset) public view override returns (uint256) {\\n        return _calcRedemptionRate(_asset, baseRate[_asset]);\\n    }\\n\\n    function getRedemptionRateWithDecay(address _asset) public view override returns (uint256) {\\n        return _calcRedemptionRate(_asset, _calcDecayedBaseRate(_asset));\\n    }\\n\\n    // Called by Tren contracts\\n    // ------------------------------------------------------------------------------------\\n    function addTrenBoxOwnerToArray(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        override\\n        onlyBorrowerOperations\\n        returns (uint256 index)\\n    {\\n        address[] storage assetOwners = trenBoxOwners[_asset];\\n        assetOwners.push(_borrower);\\n        index = assetOwners.length - 1;\\n        TrenBoxes[_borrower][_asset].arrayIndex = uint128(index);\\n        return index;\\n    }\\n\\n    function executeFullRedemption(\\n        address _asset,\\n        address _borrower,\\n        uint256 _newColl\\n    )\\n        external\\n        override\\n        nonReentrant\\n        onlyTrenBoxManagerOperations\\n    {\\n        _removeStake(_asset, _borrower);\\n        _closeTrenBox(_asset, _borrower, Status.closedByRedemption);\\n        _redeemCloseTrenBox(\\n            _asset,\\n            _borrower,\\n            IAdminContract(adminContract).getDebtTokenGasCompensation(_asset),\\n            _newColl\\n        );\\n        IFeeCollector(feeCollector).closeDebt(_borrower, _asset);\\n        emit TrenBoxUpdated(_asset, _borrower, 0, 0, 0, TrenBoxManagerOperation.redeemCollateral);\\n    }\\n\\n    function executePartialRedemption(\\n        address _asset,\\n        address _borrower,\\n        uint256 _newDebt,\\n        uint256 _newColl,\\n        uint256 _newNICR,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint\\n    )\\n        external\\n        override\\n        onlyTrenBoxManagerOperations\\n    {\\n        ISortedTrenBoxes(sortedTrenBoxes).reInsert(\\n            _asset, _borrower, _newNICR, _upperPartialRedemptionHint, _lowerPartialRedemptionHint\\n        );\\n\\n        TrenBox storage trenBox = TrenBoxes[_borrower][_asset];\\n        uint256 paybackFraction = ((trenBox.debt - _newDebt) * 1 ether) / trenBox.debt;\\n        if (paybackFraction != 0) {\\n            IFeeCollector(feeCollector).decreaseDebt(_borrower, _asset, paybackFraction);\\n        }\\n\\n        trenBox.debt = _newDebt;\\n        trenBox.coll = _newColl;\\n        _updateStakeAndTotalStakes(_asset, _borrower);\\n\\n        emit TrenBoxUpdated(\\n            _asset,\\n            _borrower,\\n            _newDebt,\\n            _newColl,\\n            trenBox.stake,\\n            TrenBoxManagerOperation.redeemCollateral\\n        );\\n    }\\n\\n    function finalizeRedemption(\\n        address _asset,\\n        address _receiver,\\n        uint256 _debtToRedeem,\\n        uint256 _assetFeeAmount,\\n        uint256 _assetRedeemedAmount\\n    )\\n        external\\n        override\\n        onlyTrenBoxManagerOperations\\n    {\\n        // Send the asset fee\\n        if (_assetFeeAmount != 0) {\\n            address destination = IFeeCollector(feeCollector).getProtocolRevenueDestination();\\n            ITrenBoxStorage(trenBoxStorage).sendCollateral(_asset, destination, _assetFeeAmount);\\n            IFeeCollector(feeCollector).handleRedemptionFee(_asset, _assetFeeAmount);\\n        }\\n        // Burn the total debt tokens that is cancelled with debt, and send the redeemed asset to\\n        // msg.sender\\n        IDebtToken(debtToken).burn(_receiver, _debtToRedeem);\\n        // Update Active Pool, and send asset to account\\n        uint256 collToSendToRedeemer = _assetRedeemedAmount - _assetFeeAmount;\\n        ITrenBoxStorage(trenBoxStorage).decreaseActiveDebt(_asset, _debtToRedeem);\\n        ITrenBoxStorage(trenBoxStorage).sendCollateral(_asset, _receiver, collToSendToRedeemer);\\n    }\\n\\n    function updateBaseRateFromRedemption(\\n        address _asset,\\n        uint256 _assetDrawn,\\n        uint256 _price,\\n        uint256 _totalDebtTokenSupply\\n    )\\n        external\\n        onlyTrenBoxManagerOperations\\n    {\\n        uint256 decayedBaseRate = _calcDecayedBaseRate(_asset);\\n        uint256 redeemedDebtFraction = (_assetDrawn * _price) / _totalDebtTokenSupply;\\n        uint256 newBaseRate = decayedBaseRate + (redeemedDebtFraction / BETA);\\n        newBaseRate = TrenMath._min(newBaseRate, DECIMAL_PRECISION);\\n        assert(newBaseRate > 0);\\n\\n        baseRate[_asset] = newBaseRate;\\n        emit BaseRateUpdated(_asset, newBaseRate);\\n        _updateLastFeeOpTime(_asset);\\n    }\\n\\n    function applyPendingRewards(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        override\\n        nonReentrant\\n        onlyTrenBoxManagerOperationsOrBorrowerOperations\\n    {\\n        return _applyPendingRewards(_asset, _borrower);\\n    }\\n\\n    // Move a TrenBox's pending debt and collateral rewards from distributions, from liquidated\\n    // to active TrenBoxStorage\\n    function movePendingTrenBoxRewardsFromLiquidatedToActive(\\n        address _asset,\\n        uint256 _debt,\\n        uint256 _assetAmount\\n    )\\n        external\\n        override\\n        onlyTrenBoxManagerOperations\\n    {\\n        _movePendingTrenBoxRewardsFromLiquidatedToActive(_asset, _debt, _assetAmount);\\n    }\\n\\n    // Update borrower's snapshots of L_Colls and L_Debts to reflect the current values\\n    function updateTrenBoxRewardSnapshots(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        override\\n        onlyBorrowerOperations\\n    {\\n        return _updateTrenBoxRewardSnapshots(_asset, _borrower);\\n    }\\n\\n    function updateStakeAndTotalStakes(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        override\\n        onlyBorrowerOperations\\n        returns (uint256)\\n    {\\n        return _updateStakeAndTotalStakes(_asset, _borrower);\\n    }\\n\\n    function removeStake(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        override\\n        onlyTrenBoxManagerOperationsOrBorrowerOperations\\n    {\\n        return _removeStake(_asset, _borrower);\\n    }\\n\\n    function redistributeDebtAndColl(\\n        address _asset,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 _debtToOffset,\\n        uint256 _collToSendToStabilityPool\\n    )\\n        external\\n        override\\n        nonReentrant\\n        onlyTrenBoxManagerOperations\\n    {\\n        IStabilityPool(stabilityPool).offset(_debtToOffset, _asset, _collToSendToStabilityPool);\\n\\n        if (_debt == 0) {\\n            return;\\n        }\\n        /*\\n        * Add distributed coll and debt rewards-per-unit-staked to the running totals. Division uses\\n        a \\\"feedback\\\"\\n        * error correction, to keep the cumulative error low in the running totals L_Colls and\\n        L_Debts:\\n         *\\n        * 1) Form numerators which compensate for the floor division errors that occurred the last\\n        time this\\n         * function was called.\\n         * 2) Calculate \\\"per-unit-staked\\\" ratios.\\n        * 3) Multiply each ratio back by its denominator, to reveal the current floor division\\n        error.\\n        * 4) Store these errors for use in the next correction when this function is called.\\n        * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\",\\n        however, it is intended.\\n         */\\n        uint256 collNumerator = (_coll * DECIMAL_PRECISION) + lastCollError_Redistribution[_asset];\\n        uint256 debtNumerator = (_debt * DECIMAL_PRECISION) + lastDebtError_Redistribution[_asset];\\n\\n        // Get the per-unit-staked terms\\n        uint256 assetStakes = totalStakes[_asset];\\n        uint256 collRewardPerUnitStaked = collNumerator / assetStakes;\\n        uint256 debtRewardPerUnitStaked = debtNumerator / assetStakes;\\n\\n        lastCollError_Redistribution[_asset] =\\n            collNumerator - (collRewardPerUnitStaked * assetStakes);\\n        lastDebtError_Redistribution[_asset] =\\n            debtNumerator - (debtRewardPerUnitStaked * assetStakes);\\n\\n        // Add per-unit-staked terms to the running totals\\n        uint256 liquidatedColl = L_Colls[_asset] + collRewardPerUnitStaked;\\n        uint256 liquidatedDebt = L_Debts[_asset] + debtRewardPerUnitStaked;\\n        L_Colls[_asset] = liquidatedColl;\\n        L_Debts[_asset] = liquidatedDebt;\\n        emit LTermsUpdated(_asset, liquidatedColl, liquidatedDebt);\\n\\n        ITrenBoxStorage(trenBoxStorage).updateDebtAndCollateralBalances(_asset, _debt, _coll, false);\\n    }\\n\\n    function updateSystemSnapshots_excludeCollRemainder(\\n        address _asset,\\n        uint256 _collRemainder\\n    )\\n        external\\n        onlyTrenBoxManagerOperations\\n    {\\n        uint256 totalStakesCached = totalStakes[_asset];\\n        totalStakesSnapshot[_asset] = totalStakesCached;\\n        uint256 totalColl = ITrenBoxStorage(trenBoxStorage).getTotalCollateralBalance(_asset);\\n        uint256 _totalCollateralSnapshot = totalColl - _collRemainder;\\n        totalCollateralSnapshot[_asset] = _totalCollateralSnapshot;\\n        emit SystemSnapshotsUpdated(_asset, totalStakesCached, _totalCollateralSnapshot);\\n    }\\n\\n    function closeTrenBox(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        override\\n        onlyTrenBoxManagerOperationsOrBorrowerOperations\\n    {\\n        return _closeTrenBox(_asset, _borrower, Status.closedByOwner);\\n    }\\n\\n    function closeTrenBoxLiquidation(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        override\\n        onlyTrenBoxManagerOperations\\n    {\\n        _closeTrenBox(_asset, _borrower, Status.closedByLiquidation);\\n        IFeeCollector(feeCollector).liquidateDebt(_borrower, _asset);\\n        emit TrenBoxUpdated(\\n            _asset, _borrower, 0, 0, 0, TrenBoxManagerOperation.liquidateInNormalMode\\n        );\\n    }\\n\\n    function closeTrenBoxRedistribution(\\n        address _asset,\\n        address _borrower,\\n        uint256 _debtTokenGasCompensation\\n    )\\n        external\\n        onlyTrenBoxManagerOperations\\n    {\\n        _closeTrenBox(_asset, _borrower, Status.closedByRedistribution);\\n        IFeeCollector(feeCollector).liquidateDebt(_borrower, _asset);\\n        emit TrenBoxUpdated(\\n            _asset, _borrower, 0, 0, 0, TrenBoxManagerOperation.redistributeCollateral\\n        );\\n        IDebtToken(debtToken).burn(trenBoxStorage, _debtTokenGasCompensation);\\n    }\\n\\n    function sendGasCompensation(\\n        address _asset,\\n        address _liquidator,\\n        uint256 _debtTokenAmount,\\n        uint256 _assetAmount\\n    )\\n        external\\n        nonReentrant\\n        onlyTrenBoxManagerOperations\\n    {\\n        if (_debtTokenAmount != 0) {\\n            IDebtToken(debtToken).returnFromPool(trenBoxStorage, _liquidator, _debtTokenAmount);\\n        }\\n        if (_assetAmount != 0) {\\n            ITrenBoxStorage(trenBoxStorage).sendCollateral(_asset, _liquidator, _assetAmount);\\n        }\\n    }\\n\\n    // Internal functions\\n    // ---------------------------------------------------------------------------------------------\\n\\n    function _redeemCloseTrenBox(\\n        address _asset,\\n        address _borrower,\\n        uint256 _debtTokenAmount,\\n        uint256 _assetAmount\\n    )\\n        internal\\n    {\\n        IDebtToken(debtToken).burn(trenBoxStorage, _debtTokenAmount);\\n        // Update TrenBoxStorage, and send collateral to account and move collateral from active\\n        // collateral pool to claimable collateral pool\\n        ITrenBoxStorage(trenBoxStorage).decreaseActiveBalancesAfterRedemption(\\n            _asset, _debtTokenAmount, _assetAmount\\n        );\\n        ITrenBoxStorage(trenBoxStorage).updateUserAndEntireClaimableBalance(\\n            _asset, _borrower, _assetAmount\\n        );\\n    }\\n\\n    function _movePendingTrenBoxRewardsFromLiquidatedToActive(\\n        address _asset,\\n        uint256 _debtTokenAmount,\\n        uint256 _assetAmount\\n    )\\n        internal\\n    {\\n        ITrenBoxStorage(trenBoxStorage).updateDebtAndCollateralBalances(\\n            _asset, _debtTokenAmount, _assetAmount, true\\n        );\\n    }\\n\\n    function _getCurrentTrenBoxAmounts(\\n        address _asset,\\n        address _borrower\\n    )\\n        internal\\n        view\\n        returns (uint256 coll, uint256 debt)\\n    {\\n        uint256 pendingCollReward = getPendingAssetReward(_asset, _borrower);\\n        uint256 pendingDebtReward = getPendingDebtTokenReward(_asset, _borrower);\\n        TrenBox memory trenBox = TrenBoxes[_borrower][_asset];\\n        coll = trenBox.coll + pendingCollReward;\\n        debt = trenBox.debt + pendingDebtReward;\\n    }\\n\\n    // Add the borrowers's coll and debt rewards earned from redistributions, to their TrenBox\\n    function _applyPendingRewards(address _asset, address _borrower) internal {\\n        if (!hasPendingRewards(_asset, _borrower)) {\\n            return;\\n        }\\n\\n        // Compute pending rewards\\n        uint256 pendingCollReward = getPendingAssetReward(_asset, _borrower);\\n        uint256 pendingDebtReward = getPendingDebtTokenReward(_asset, _borrower);\\n\\n        // Apply pending rewards to trenBox's state\\n        TrenBox storage trenBox = TrenBoxes[_borrower][_asset];\\n        trenBox.coll = trenBox.coll + pendingCollReward;\\n        trenBox.debt = trenBox.debt + pendingDebtReward;\\n\\n        _updateTrenBoxRewardSnapshots(_asset, _borrower);\\n\\n        // Move liquidated rewards to active in TrenBoxStorage\\n        _movePendingTrenBoxRewardsFromLiquidatedToActive(\\n            _asset, pendingDebtReward, pendingCollReward\\n        );\\n\\n        emit TrenBoxUpdated(\\n            _asset,\\n            _borrower,\\n            trenBox.debt,\\n            trenBox.coll,\\n            trenBox.stake,\\n            TrenBoxManagerOperation.applyPendingRewards\\n        );\\n    }\\n\\n    function _updateTrenBoxRewardSnapshots(address _asset, address _borrower) internal {\\n        uint256 liquidatedColl = L_Colls[_asset];\\n        uint256 liquidatedDebt = L_Debts[_asset];\\n        RewardSnapshot storage snapshot = rewardSnapshots[_borrower][_asset];\\n        snapshot.asset = liquidatedColl;\\n        snapshot.debt = liquidatedDebt;\\n        emit TrenBoxSnapshotsUpdated(_asset, liquidatedColl, liquidatedDebt);\\n    }\\n\\n    function _removeStake(address _asset, address _borrower) internal {\\n        TrenBox storage trenBox = TrenBoxes[_borrower][_asset];\\n        totalStakes[_asset] -= trenBox.stake;\\n        trenBox.stake = 0;\\n    }\\n\\n    // Update borrower's stake based on their latest collateral value\\n    function _updateStakeAndTotalStakes(\\n        address _asset,\\n        address _borrower\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        TrenBox storage trenBox = TrenBoxes[_borrower][_asset];\\n        uint256 newStake = _computeNewStake(_asset, trenBox.coll);\\n        uint256 oldStake = trenBox.stake;\\n        trenBox.stake = newStake;\\n        uint256 newTotal = totalStakes[_asset] - oldStake + newStake;\\n        totalStakes[_asset] = newTotal;\\n        emit TotalStakesUpdated(_asset, newTotal);\\n        return newStake;\\n    }\\n\\n    // Calculate a new stake based on the snapshots of the totalStakes and totalCollateral taken at\\n    // the last liquidation\\n    function _computeNewStake(\\n        address _asset,\\n        uint256 _coll\\n    )\\n        internal\\n        view\\n        returns (uint256 stake)\\n    {\\n        uint256 assetColl = totalCollateralSnapshot[_asset];\\n        if (assetColl == 0) {\\n            stake = _coll;\\n        } else {\\n            uint256 assetStakes = totalStakesSnapshot[_asset];\\n            /*\\n             * The following assert() holds true because:\\n             * - The system always contains >= 1 trenBox\\n            * - When we close or liquidate a trenBox, we redistribute the pending rewards, so if all\\n            trenBoxes were closed/liquidated,\\n            * rewards would\\u2019ve been emptied and totalCollateralSnapshot would be zero too.\\n             */\\n            assert(assetStakes != 0);\\n            stake = (_coll * assetStakes) / assetColl;\\n        }\\n    }\\n\\n    function _closeTrenBox(address _asset, address _borrower, Status closedStatus) internal {\\n        assert(closedStatus != Status.nonExistent && closedStatus != Status.active);\\n\\n        uint256 TrenBoxOwnersArrayLength = trenBoxOwners[_asset].length;\\n        if (TrenBoxOwnersArrayLength <= 1 || ISortedTrenBoxes(sortedTrenBoxes).getSize(_asset) <= 1)\\n        {\\n            revert TrenBoxManager__OnlyOneTrenBox();\\n        }\\n\\n        TrenBox storage trenBox = TrenBoxes[_borrower][_asset];\\n        trenBox.status = closedStatus;\\n        trenBox.coll = 0;\\n        trenBox.debt = 0;\\n\\n        RewardSnapshot storage rewardSnapshot = rewardSnapshots[_borrower][_asset];\\n        rewardSnapshot.asset = 0;\\n        rewardSnapshot.debt = 0;\\n\\n        _removeTrenBoxOwner(_asset, _borrower, TrenBoxOwnersArrayLength);\\n        ISortedTrenBoxes(sortedTrenBoxes).remove(_asset, _borrower);\\n    }\\n\\n    function _removeTrenBoxOwner(\\n        address _asset,\\n        address _borrower,\\n        uint256 TrenBoxOwnersArrayLength\\n    )\\n        internal\\n    {\\n        TrenBox memory trenBox = TrenBoxes[_borrower][_asset];\\n        assert(trenBox.status != Status.nonExistent && trenBox.status != Status.active);\\n\\n        uint128 index = trenBox.arrayIndex;\\n        uint256 length = TrenBoxOwnersArrayLength;\\n        uint256 idxLast = length - 1;\\n\\n        assert(index <= idxLast);\\n\\n        address[] storage trenBoxAssetOwners = trenBoxOwners[_asset];\\n        address addressToMove = trenBoxAssetOwners[idxLast];\\n\\n        trenBoxAssetOwners[index] = addressToMove;\\n        TrenBoxes[addressToMove][_asset].arrayIndex = index;\\n        emit TrenBoxIndexUpdated(_asset, addressToMove, index);\\n\\n        trenBoxAssetOwners.pop();\\n    }\\n\\n    function _calcRedemptionRate(\\n        address _asset,\\n        uint256 _baseRate\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return TrenMath._min(\\n            IAdminContract(adminContract).getRedemptionFeeFloor(_asset) + _baseRate,\\n            DECIMAL_PRECISION\\n        );\\n    }\\n\\n    function _calcRedemptionFee(\\n        uint256 _redemptionRate,\\n        uint256 _assetDraw\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 redemptionFee = (_redemptionRate * _assetDraw) / DECIMAL_PRECISION;\\n        if (redemptionFee >= _assetDraw) {\\n            revert TrenBoxManager__FeeBiggerThanAssetDraw();\\n        }\\n        return redemptionFee;\\n    }\\n\\n    function _updateLastFeeOpTime(address _asset) internal {\\n        uint256 timePassed = block.timestamp - lastFeeOperationTime[_asset];\\n        if (timePassed >= SECONDS_IN_ONE_MINUTE) {\\n            // Update the last fee operation time only if time passed >= decay interval. This\\n            // prevents base rate griefing.\\n            lastFeeOperationTime[_asset] = block.timestamp;\\n            emit LastFeeOpTimeUpdated(_asset, block.timestamp);\\n        }\\n    }\\n\\n    function _calcDecayedBaseRate(address _asset) internal view returns (uint256) {\\n        uint256 minutesPassed = _minutesPassedSinceLastFeeOp(_asset);\\n        uint256 decayFactor = TrenMath._decPow(MINUTE_DECAY_FACTOR, minutesPassed);\\n        return (baseRate[_asset] * decayFactor) / DECIMAL_PRECISION;\\n    }\\n\\n    function _minutesPassedSinceLastFeeOp(address _asset) internal view returns (uint256) {\\n        return (block.timestamp - lastFeeOperationTime[_asset]) / SECONDS_IN_ONE_MINUTE;\\n    }\\n\\n    // --- TrenBox property getters\\n    // --------------------------------------------------------------------------------------\\n\\n    function getTrenBoxStatus(\\n        address _asset,\\n        address _borrower\\n    )\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return uint256(TrenBoxes[_borrower][_asset].status);\\n    }\\n\\n    function getTrenBoxStake(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return TrenBoxes[_borrower][_asset].stake;\\n    }\\n\\n    function getTrenBoxDebt(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return TrenBoxes[_borrower][_asset].debt;\\n    }\\n\\n    function getTrenBoxColl(\\n        address _asset,\\n        address _borrower\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return TrenBoxes[_borrower][_asset].coll;\\n    }\\n\\n    function getTrenBoxOwnersCount(address _asset) external view override returns (uint256) {\\n        return trenBoxOwners[_asset].length;\\n    }\\n\\n    function getTrenBoxFromTrenBoxOwnersArray(\\n        address _asset,\\n        uint256 _index\\n    )\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return trenBoxOwners[_asset][_index];\\n    }\\n\\n    function getNetDebt(address _asset, uint256 _debt) external view returns (uint256) {\\n        return _getNetDebt(_asset, _debt);\\n    }\\n\\n    // --- TrenBox property setters, called by Tren's\\n    // BorrowerOperations/VMRedemptions/VMLiquidations ---------------\\n\\n    function setTrenBoxStatus(\\n        address _asset,\\n        address _borrower,\\n        uint256 _num\\n    )\\n        external\\n        override\\n        onlyBorrowerOperations\\n    {\\n        TrenBoxes[_borrower][_asset].status = Status(_num);\\n    }\\n\\n    function increaseTrenBoxColl(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collIncrease\\n    )\\n        external\\n        override\\n        onlyBorrowerOperations\\n        returns (uint256 newColl)\\n    {\\n        TrenBox storage trenBox = TrenBoxes[_borrower][_asset];\\n        newColl = trenBox.coll + _collIncrease;\\n        trenBox.coll = newColl;\\n    }\\n\\n    function decreaseTrenBoxColl(\\n        address _asset,\\n        address _borrower,\\n        uint256 _collDecrease\\n    )\\n        external\\n        override\\n        onlyBorrowerOperations\\n        returns (uint256 newColl)\\n    {\\n        TrenBox storage trenBox = TrenBoxes[_borrower][_asset];\\n        newColl = trenBox.coll - _collDecrease;\\n        trenBox.coll = newColl;\\n    }\\n\\n    function increaseTrenBoxDebt(\\n        address _asset,\\n        address _borrower,\\n        uint256 _debtIncrease\\n    )\\n        external\\n        override\\n        onlyBorrowerOperations\\n        returns (uint256 newDebt)\\n    {\\n        TrenBox storage trenBox = TrenBoxes[_borrower][_asset];\\n        newDebt = trenBox.debt + _debtIncrease;\\n        trenBox.debt = newDebt;\\n    }\\n\\n    function decreaseTrenBoxDebt(\\n        address _asset,\\n        address _borrower,\\n        uint256 _debtDecrease\\n    )\\n        external\\n        override\\n        onlyBorrowerOperations\\n        returns (uint256)\\n    {\\n        TrenBox storage trenBox = TrenBoxes[_borrower][_asset];\\n        uint256 oldDebt = trenBox.debt;\\n        if (_debtDecrease == 0) {\\n            return oldDebt; // no changes\\n        }\\n        uint256 paybackFraction = (_debtDecrease * 1 ether) / oldDebt;\\n        uint256 newDebt = oldDebt - _debtDecrease;\\n        trenBox.debt = newDebt;\\n        if (paybackFraction != 0) {\\n            IFeeCollector(feeCollector).decreaseDebt(_borrower, _asset, paybackFraction);\\n        }\\n        return newDebt;\\n    }\\n\\n    function authorizeUpgrade(address newImplementation) public {\\n        _authorizeUpgrade(newImplementation);\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner { }\\n}\\n\",\"keccak256\":\"0xf79a504c4eb7ccc7963cb684be68bf0a4248a26d7185ccac976f089ab4e5867f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8946,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "adminContract",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8948,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "borrowerOperations",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8950,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "communityIssuance",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8952,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "debtToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8954,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "feeCollector",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 8956,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "flashLoanAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 8958,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "trenStaking",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 8960,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "priceFeed",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 8962,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "sortedTrenBoxes",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 8964,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 8966,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "timelockAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 8968,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 8970,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "trenBoxManager",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 8972,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "trenBoxManagerOperations",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 8974,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "trenBoxStorage",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 8976,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "isAddressSetupInitialized",
        "offset": 20,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 8981,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "__gap",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_uint256)33_storage"
      },
      {
        "astId": 21647,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "baseRate",
        "offset": 0,
        "slot": "48",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21651,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "lastFeeOperationTime",
        "offset": 0,
        "slot": "49",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21658,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "TrenBoxes",
        "offset": 0,
        "slot": "50",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(TrenBox)13018_storage))"
      },
      {
        "astId": 21662,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "totalStakes",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21666,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "totalStakesSnapshot",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21670,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "totalCollateralSnapshot",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21674,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "L_Colls",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21678,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "L_Debts",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21685,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "rewardSnapshots",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RewardSnapshot)21643_storage))"
      },
      {
        "astId": 21690,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "trenBoxOwners",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 21694,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "lastCollError_Redistribution",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21698,
        "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
        "label": "lastDebtError_Redistribution",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)33_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[33]",
        "numberOfBytes": "1056"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Status)12925": {
        "encoding": "inplace",
        "label": "enum ITrenBoxManager.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(RewardSnapshot)21643_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct TrenBoxManager.RewardSnapshot))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(RewardSnapshot)21643_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(TrenBox)13018_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct ITrenBoxManager.TrenBox))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(TrenBox)13018_storage)"
      },
      "t_mapping(t_address,t_struct(RewardSnapshot)21643_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TrenBoxManager.RewardSnapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardSnapshot)21643_storage"
      },
      "t_mapping(t_address,t_struct(TrenBox)13018_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ITrenBoxManager.TrenBox)",
        "numberOfBytes": "32",
        "value": "t_struct(TrenBox)13018_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RewardSnapshot)21643_storage": {
        "encoding": "inplace",
        "label": "struct TrenBoxManager.RewardSnapshot",
        "members": [
          {
            "astId": 21640,
            "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
            "label": "asset",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 21642,
            "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
            "label": "debt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TrenBox)13018_storage": {
        "encoding": "inplace",
        "label": "struct ITrenBoxManager.TrenBox",
        "members": [
          {
            "astId": 13008,
            "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
            "label": "debt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13010,
            "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
            "label": "coll",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13012,
            "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
            "label": "stake",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13015,
            "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(Status)12925"
          },
          {
            "astId": 13017,
            "contract": "contracts/TrenBoxManager.sol:TrenBoxManager",
            "label": "arrayIndex",
            "offset": 1,
            "slot": "3",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}